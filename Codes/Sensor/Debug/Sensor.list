
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080083e0  080083e0  000183e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084e0  080084e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080084e0  080084e0  000184e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084e8  080084e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084e8  080084e8  000184e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084ec  080084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080084f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000078  08008568  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08008568  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eeba  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002137  00000000  00000000  0002ef5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  00031098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00031de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d147  00000000  00000000  00032a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a754  00000000  00000000  0004fb87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a352e  00000000  00000000  0005a2db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd809  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  000fd884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	080083c8 	.word	0x080083c8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	080083c8 	.word	0x080083c8

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2f>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b58:	bf24      	itt	cs
 8000b5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_d2f+0x30>
 8000b64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b84:	d121      	bne.n	8000bca <__aeabi_d2f+0x7a>
 8000b86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8a:	bfbc      	itt	lt
 8000b8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	4770      	bxlt	lr
 8000b92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9a:	f1c2 0218 	rsb	r2, r2, #24
 8000b9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8000baa:	bf18      	it	ne
 8000bac:	f040 0001 	orrne.w	r0, r0, #1
 8000bb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bbc:	ea40 000c 	orr.w	r0, r0, ip
 8000bc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc8:	e7cc      	b.n	8000b64 <__aeabi_d2f+0x14>
 8000bca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bce:	d107      	bne.n	8000be0 <__aeabi_d2f+0x90>
 8000bd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bde:	4770      	bxne	lr
 8000be0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	d1ed      	bne.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fmul>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d06f      	beq.n	8000f04 <__aeabi_fmul+0xf8>
 8000e24:	441a      	add	r2, r3
 8000e26:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2a:	0240      	lsls	r0, r0, #9
 8000e2c:	bf18      	it	ne
 8000e2e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e32:	d01e      	beq.n	8000e72 <__aeabi_fmul+0x66>
 8000e34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e38:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e3c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e40:	fba0 3101 	umull	r3, r1, r0, r1
 8000e44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e48:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e4c:	bf3e      	ittt	cc
 8000e4e:	0049      	lslcc	r1, r1, #1
 8000e50:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e54:	005b      	lslcc	r3, r3, #1
 8000e56:	ea40 0001 	orr.w	r0, r0, r1
 8000e5a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e5e:	2afd      	cmp	r2, #253	; 0xfd
 8000e60:	d81d      	bhi.n	8000e9e <__aeabi_fmul+0x92>
 8000e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e6a:	bf08      	it	eq
 8000e6c:	f020 0001 	biceq.w	r0, r0, #1
 8000e70:	4770      	bx	lr
 8000e72:	f090 0f00 	teq	r0, #0
 8000e76:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e7a:	bf08      	it	eq
 8000e7c:	0249      	lsleq	r1, r1, #9
 8000e7e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e82:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e86:	3a7f      	subs	r2, #127	; 0x7f
 8000e88:	bfc2      	ittt	gt
 8000e8a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e8e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e92:	4770      	bxgt	lr
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	f04f 0300 	mov.w	r3, #0
 8000e9c:	3a01      	subs	r2, #1
 8000e9e:	dc5d      	bgt.n	8000f5c <__aeabi_fmul+0x150>
 8000ea0:	f112 0f19 	cmn.w	r2, #25
 8000ea4:	bfdc      	itt	le
 8000ea6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eaa:	4770      	bxle	lr
 8000eac:	f1c2 0200 	rsb	r2, r2, #0
 8000eb0:	0041      	lsls	r1, r0, #1
 8000eb2:	fa21 f102 	lsr.w	r1, r1, r2
 8000eb6:	f1c2 0220 	rsb	r2, r2, #32
 8000eba:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ec2:	f140 0000 	adc.w	r0, r0, #0
 8000ec6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eca:	bf08      	it	eq
 8000ecc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed0:	4770      	bx	lr
 8000ed2:	f092 0f00 	teq	r2, #0
 8000ed6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eda:	bf02      	ittt	eq
 8000edc:	0040      	lsleq	r0, r0, #1
 8000ede:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ee2:	3a01      	subeq	r2, #1
 8000ee4:	d0f9      	beq.n	8000eda <__aeabi_fmul+0xce>
 8000ee6:	ea40 000c 	orr.w	r0, r0, ip
 8000eea:	f093 0f00 	teq	r3, #0
 8000eee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	bf02      	ittt	eq
 8000ef4:	0049      	lsleq	r1, r1, #1
 8000ef6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000efa:	3b01      	subeq	r3, #1
 8000efc:	d0f9      	beq.n	8000ef2 <__aeabi_fmul+0xe6>
 8000efe:	ea41 010c 	orr.w	r1, r1, ip
 8000f02:	e78f      	b.n	8000e24 <__aeabi_fmul+0x18>
 8000f04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f08:	ea92 0f0c 	teq	r2, ip
 8000f0c:	bf18      	it	ne
 8000f0e:	ea93 0f0c 	teqne	r3, ip
 8000f12:	d00a      	beq.n	8000f2a <__aeabi_fmul+0x11e>
 8000f14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f18:	bf18      	it	ne
 8000f1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f1e:	d1d8      	bne.n	8000ed2 <__aeabi_fmul+0xc6>
 8000f20:	ea80 0001 	eor.w	r0, r0, r1
 8000f24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f28:	4770      	bx	lr
 8000f2a:	f090 0f00 	teq	r0, #0
 8000f2e:	bf17      	itett	ne
 8000f30:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f34:	4608      	moveq	r0, r1
 8000f36:	f091 0f00 	teqne	r1, #0
 8000f3a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f3e:	d014      	beq.n	8000f6a <__aeabi_fmul+0x15e>
 8000f40:	ea92 0f0c 	teq	r2, ip
 8000f44:	d101      	bne.n	8000f4a <__aeabi_fmul+0x13e>
 8000f46:	0242      	lsls	r2, r0, #9
 8000f48:	d10f      	bne.n	8000f6a <__aeabi_fmul+0x15e>
 8000f4a:	ea93 0f0c 	teq	r3, ip
 8000f4e:	d103      	bne.n	8000f58 <__aeabi_fmul+0x14c>
 8000f50:	024b      	lsls	r3, r1, #9
 8000f52:	bf18      	it	ne
 8000f54:	4608      	movne	r0, r1
 8000f56:	d108      	bne.n	8000f6a <__aeabi_fmul+0x15e>
 8000f58:	ea80 0001 	eor.w	r0, r0, r1
 8000f5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f68:	4770      	bx	lr
 8000f6a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f6e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_fdiv>:
 8000f74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f7c:	bf1e      	ittt	ne
 8000f7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f82:	ea92 0f0c 	teqne	r2, ip
 8000f86:	ea93 0f0c 	teqne	r3, ip
 8000f8a:	d069      	beq.n	8001060 <__aeabi_fdiv+0xec>
 8000f8c:	eba2 0203 	sub.w	r2, r2, r3
 8000f90:	ea80 0c01 	eor.w	ip, r0, r1
 8000f94:	0249      	lsls	r1, r1, #9
 8000f96:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f9a:	d037      	beq.n	800100c <__aeabi_fdiv+0x98>
 8000f9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fa4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fa8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fac:	428b      	cmp	r3, r1
 8000fae:	bf38      	it	cc
 8000fb0:	005b      	lslcc	r3, r3, #1
 8000fb2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fb6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	bf24      	itt	cs
 8000fbe:	1a5b      	subcs	r3, r3, r1
 8000fc0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fc4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fc8:	bf24      	itt	cs
 8000fca:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fce:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fd2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fd6:	bf24      	itt	cs
 8000fd8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fe4:	bf24      	itt	cs
 8000fe6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fea:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	bf18      	it	ne
 8000ff2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ff6:	d1e0      	bne.n	8000fba <__aeabi_fdiv+0x46>
 8000ff8:	2afd      	cmp	r2, #253	; 0xfd
 8000ffa:	f63f af50 	bhi.w	8000e9e <__aeabi_fmul+0x92>
 8000ffe:	428b      	cmp	r3, r1
 8001000:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001004:	bf08      	it	eq
 8001006:	f020 0001 	biceq.w	r0, r0, #1
 800100a:	4770      	bx	lr
 800100c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001010:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001014:	327f      	adds	r2, #127	; 0x7f
 8001016:	bfc2      	ittt	gt
 8001018:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800101c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001020:	4770      	bxgt	lr
 8001022:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	3a01      	subs	r2, #1
 800102c:	e737      	b.n	8000e9e <__aeabi_fmul+0x92>
 800102e:	f092 0f00 	teq	r2, #0
 8001032:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001036:	bf02      	ittt	eq
 8001038:	0040      	lsleq	r0, r0, #1
 800103a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800103e:	3a01      	subeq	r2, #1
 8001040:	d0f9      	beq.n	8001036 <__aeabi_fdiv+0xc2>
 8001042:	ea40 000c 	orr.w	r0, r0, ip
 8001046:	f093 0f00 	teq	r3, #0
 800104a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800104e:	bf02      	ittt	eq
 8001050:	0049      	lsleq	r1, r1, #1
 8001052:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001056:	3b01      	subeq	r3, #1
 8001058:	d0f9      	beq.n	800104e <__aeabi_fdiv+0xda>
 800105a:	ea41 010c 	orr.w	r1, r1, ip
 800105e:	e795      	b.n	8000f8c <__aeabi_fdiv+0x18>
 8001060:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001064:	ea92 0f0c 	teq	r2, ip
 8001068:	d108      	bne.n	800107c <__aeabi_fdiv+0x108>
 800106a:	0242      	lsls	r2, r0, #9
 800106c:	f47f af7d 	bne.w	8000f6a <__aeabi_fmul+0x15e>
 8001070:	ea93 0f0c 	teq	r3, ip
 8001074:	f47f af70 	bne.w	8000f58 <__aeabi_fmul+0x14c>
 8001078:	4608      	mov	r0, r1
 800107a:	e776      	b.n	8000f6a <__aeabi_fmul+0x15e>
 800107c:	ea93 0f0c 	teq	r3, ip
 8001080:	d104      	bne.n	800108c <__aeabi_fdiv+0x118>
 8001082:	024b      	lsls	r3, r1, #9
 8001084:	f43f af4c 	beq.w	8000f20 <__aeabi_fmul+0x114>
 8001088:	4608      	mov	r0, r1
 800108a:	e76e      	b.n	8000f6a <__aeabi_fmul+0x15e>
 800108c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001090:	bf18      	it	ne
 8001092:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001096:	d1ca      	bne.n	800102e <__aeabi_fdiv+0xba>
 8001098:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800109c:	f47f af5c 	bne.w	8000f58 <__aeabi_fmul+0x14c>
 80010a0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010a4:	f47f af3c 	bne.w	8000f20 <__aeabi_fmul+0x114>
 80010a8:	e75f      	b.n	8000f6a <__aeabi_fmul+0x15e>
 80010aa:	bf00      	nop

080010ac <__gesf2>:
 80010ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80010b0:	e006      	b.n	80010c0 <__cmpsf2+0x4>
 80010b2:	bf00      	nop

080010b4 <__lesf2>:
 80010b4:	f04f 0c01 	mov.w	ip, #1
 80010b8:	e002      	b.n	80010c0 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__cmpsf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010c4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d0:	bf18      	it	ne
 80010d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010d6:	d011      	beq.n	80010fc <__cmpsf2+0x40>
 80010d8:	b001      	add	sp, #4
 80010da:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010de:	bf18      	it	ne
 80010e0:	ea90 0f01 	teqne	r0, r1
 80010e4:	bf58      	it	pl
 80010e6:	ebb2 0003 	subspl.w	r0, r2, r3
 80010ea:	bf88      	it	hi
 80010ec:	17c8      	asrhi	r0, r1, #31
 80010ee:	bf38      	it	cc
 80010f0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010f4:	bf18      	it	ne
 80010f6:	f040 0001 	orrne.w	r0, r0, #1
 80010fa:	4770      	bx	lr
 80010fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001100:	d102      	bne.n	8001108 <__cmpsf2+0x4c>
 8001102:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001106:	d105      	bne.n	8001114 <__cmpsf2+0x58>
 8001108:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800110c:	d1e4      	bne.n	80010d8 <__cmpsf2+0x1c>
 800110e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001112:	d0e1      	beq.n	80010d8 <__cmpsf2+0x1c>
 8001114:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <__aeabi_cfrcmple>:
 800111c:	4684      	mov	ip, r0
 800111e:	4608      	mov	r0, r1
 8001120:	4661      	mov	r1, ip
 8001122:	e7ff      	b.n	8001124 <__aeabi_cfcmpeq>

08001124 <__aeabi_cfcmpeq>:
 8001124:	b50f      	push	{r0, r1, r2, r3, lr}
 8001126:	f7ff ffc9 	bl	80010bc <__cmpsf2>
 800112a:	2800      	cmp	r0, #0
 800112c:	bf48      	it	mi
 800112e:	f110 0f00 	cmnmi.w	r0, #0
 8001132:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001134 <__aeabi_fcmpeq>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff fff4 	bl	8001124 <__aeabi_cfcmpeq>
 800113c:	bf0c      	ite	eq
 800113e:	2001      	moveq	r0, #1
 8001140:	2000      	movne	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_fcmplt>:
 8001148:	f84d ed08 	str.w	lr, [sp, #-8]!
 800114c:	f7ff ffea 	bl	8001124 <__aeabi_cfcmpeq>
 8001150:	bf34      	ite	cc
 8001152:	2001      	movcc	r0, #1
 8001154:	2000      	movcs	r0, #0
 8001156:	f85d fb08 	ldr.w	pc, [sp], #8
 800115a:	bf00      	nop

0800115c <__aeabi_fcmple>:
 800115c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001160:	f7ff ffe0 	bl	8001124 <__aeabi_cfcmpeq>
 8001164:	bf94      	ite	ls
 8001166:	2001      	movls	r0, #1
 8001168:	2000      	movhi	r0, #0
 800116a:	f85d fb08 	ldr.w	pc, [sp], #8
 800116e:	bf00      	nop

08001170 <__aeabi_fcmpge>:
 8001170:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001174:	f7ff ffd2 	bl	800111c <__aeabi_cfrcmple>
 8001178:	bf94      	ite	ls
 800117a:	2001      	movls	r0, #1
 800117c:	2000      	movhi	r0, #0
 800117e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001182:	bf00      	nop

08001184 <__aeabi_fcmpgt>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff ffc8 	bl	800111c <__aeabi_cfrcmple>
 800118c:	bf34      	ite	cc
 800118e:	2001      	movcc	r0, #1
 8001190:	2000      	movcs	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_f2iz>:
 8001198:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800119c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011a0:	d30f      	bcc.n	80011c2 <__aeabi_f2iz+0x2a>
 80011a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011aa:	d90d      	bls.n	80011c8 <__aeabi_f2iz+0x30>
 80011ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011b8:	fa23 f002 	lsr.w	r0, r3, r2
 80011bc:	bf18      	it	ne
 80011be:	4240      	negne	r0, r0
 80011c0:	4770      	bx	lr
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	4770      	bx	lr
 80011c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011cc:	d101      	bne.n	80011d2 <__aeabi_f2iz+0x3a>
 80011ce:	0242      	lsls	r2, r0, #9
 80011d0:	d105      	bne.n	80011de <__aeabi_f2iz+0x46>
 80011d2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011d6:	bf08      	it	eq
 80011d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011dc:	4770      	bx	lr
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	4770      	bx	lr

080011e4 <__aeabi_uldivmod>:
 80011e4:	b953      	cbnz	r3, 80011fc <__aeabi_uldivmod+0x18>
 80011e6:	b94a      	cbnz	r2, 80011fc <__aeabi_uldivmod+0x18>
 80011e8:	2900      	cmp	r1, #0
 80011ea:	bf08      	it	eq
 80011ec:	2800      	cmpeq	r0, #0
 80011ee:	bf1c      	itt	ne
 80011f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80011f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80011f8:	f000 b974 	b.w	80014e4 <__aeabi_idiv0>
 80011fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8001200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001204:	f000 f806 	bl	8001214 <__udivmoddi4>
 8001208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800120c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001210:	b004      	add	sp, #16
 8001212:	4770      	bx	lr

08001214 <__udivmoddi4>:
 8001214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001218:	468c      	mov	ip, r1
 800121a:	4604      	mov	r4, r0
 800121c:	9e08      	ldr	r6, [sp, #32]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d14b      	bne.n	80012ba <__udivmoddi4+0xa6>
 8001222:	428a      	cmp	r2, r1
 8001224:	4615      	mov	r5, r2
 8001226:	d967      	bls.n	80012f8 <__udivmoddi4+0xe4>
 8001228:	fab2 f282 	clz	r2, r2
 800122c:	b14a      	cbz	r2, 8001242 <__udivmoddi4+0x2e>
 800122e:	f1c2 0720 	rsb	r7, r2, #32
 8001232:	fa01 f302 	lsl.w	r3, r1, r2
 8001236:	fa20 f707 	lsr.w	r7, r0, r7
 800123a:	4095      	lsls	r5, r2
 800123c:	ea47 0c03 	orr.w	ip, r7, r3
 8001240:	4094      	lsls	r4, r2
 8001242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001246:	fbbc f7fe 	udiv	r7, ip, lr
 800124a:	fa1f f885 	uxth.w	r8, r5
 800124e:	fb0e c317 	mls	r3, lr, r7, ip
 8001252:	fb07 f908 	mul.w	r9, r7, r8
 8001256:	0c21      	lsrs	r1, r4, #16
 8001258:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800125c:	4599      	cmp	r9, r3
 800125e:	d909      	bls.n	8001274 <__udivmoddi4+0x60>
 8001260:	18eb      	adds	r3, r5, r3
 8001262:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8001266:	f080 811c 	bcs.w	80014a2 <__udivmoddi4+0x28e>
 800126a:	4599      	cmp	r9, r3
 800126c:	f240 8119 	bls.w	80014a2 <__udivmoddi4+0x28e>
 8001270:	3f02      	subs	r7, #2
 8001272:	442b      	add	r3, r5
 8001274:	eba3 0309 	sub.w	r3, r3, r9
 8001278:	fbb3 f0fe 	udiv	r0, r3, lr
 800127c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001280:	fb00 f108 	mul.w	r1, r0, r8
 8001284:	b2a4      	uxth	r4, r4
 8001286:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800128a:	42a1      	cmp	r1, r4
 800128c:	d909      	bls.n	80012a2 <__udivmoddi4+0x8e>
 800128e:	192c      	adds	r4, r5, r4
 8001290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001294:	f080 8107 	bcs.w	80014a6 <__udivmoddi4+0x292>
 8001298:	42a1      	cmp	r1, r4
 800129a:	f240 8104 	bls.w	80014a6 <__udivmoddi4+0x292>
 800129e:	3802      	subs	r0, #2
 80012a0:	442c      	add	r4, r5
 80012a2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80012a6:	2700      	movs	r7, #0
 80012a8:	1a64      	subs	r4, r4, r1
 80012aa:	b11e      	cbz	r6, 80012b4 <__udivmoddi4+0xa0>
 80012ac:	2300      	movs	r3, #0
 80012ae:	40d4      	lsrs	r4, r2
 80012b0:	e9c6 4300 	strd	r4, r3, [r6]
 80012b4:	4639      	mov	r1, r7
 80012b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ba:	428b      	cmp	r3, r1
 80012bc:	d909      	bls.n	80012d2 <__udivmoddi4+0xbe>
 80012be:	2e00      	cmp	r6, #0
 80012c0:	f000 80ec 	beq.w	800149c <__udivmoddi4+0x288>
 80012c4:	2700      	movs	r7, #0
 80012c6:	e9c6 0100 	strd	r0, r1, [r6]
 80012ca:	4638      	mov	r0, r7
 80012cc:	4639      	mov	r1, r7
 80012ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d2:	fab3 f783 	clz	r7, r3
 80012d6:	2f00      	cmp	r7, #0
 80012d8:	d148      	bne.n	800136c <__udivmoddi4+0x158>
 80012da:	428b      	cmp	r3, r1
 80012dc:	d302      	bcc.n	80012e4 <__udivmoddi4+0xd0>
 80012de:	4282      	cmp	r2, r0
 80012e0:	f200 80fb 	bhi.w	80014da <__udivmoddi4+0x2c6>
 80012e4:	1a84      	subs	r4, r0, r2
 80012e6:	eb61 0303 	sbc.w	r3, r1, r3
 80012ea:	2001      	movs	r0, #1
 80012ec:	469c      	mov	ip, r3
 80012ee:	2e00      	cmp	r6, #0
 80012f0:	d0e0      	beq.n	80012b4 <__udivmoddi4+0xa0>
 80012f2:	e9c6 4c00 	strd	r4, ip, [r6]
 80012f6:	e7dd      	b.n	80012b4 <__udivmoddi4+0xa0>
 80012f8:	b902      	cbnz	r2, 80012fc <__udivmoddi4+0xe8>
 80012fa:	deff      	udf	#255	; 0xff
 80012fc:	fab2 f282 	clz	r2, r2
 8001300:	2a00      	cmp	r2, #0
 8001302:	f040 808f 	bne.w	8001424 <__udivmoddi4+0x210>
 8001306:	2701      	movs	r7, #1
 8001308:	1b49      	subs	r1, r1, r5
 800130a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800130e:	fa1f f985 	uxth.w	r9, r5
 8001312:	fbb1 fef8 	udiv	lr, r1, r8
 8001316:	fb08 111e 	mls	r1, r8, lr, r1
 800131a:	fb09 f00e 	mul.w	r0, r9, lr
 800131e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001322:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001326:	4298      	cmp	r0, r3
 8001328:	d907      	bls.n	800133a <__udivmoddi4+0x126>
 800132a:	18eb      	adds	r3, r5, r3
 800132c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8001330:	d202      	bcs.n	8001338 <__udivmoddi4+0x124>
 8001332:	4298      	cmp	r0, r3
 8001334:	f200 80cd 	bhi.w	80014d2 <__udivmoddi4+0x2be>
 8001338:	468e      	mov	lr, r1
 800133a:	1a1b      	subs	r3, r3, r0
 800133c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001340:	fb08 3310 	mls	r3, r8, r0, r3
 8001344:	fb09 f900 	mul.w	r9, r9, r0
 8001348:	b2a4      	uxth	r4, r4
 800134a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800134e:	45a1      	cmp	r9, r4
 8001350:	d907      	bls.n	8001362 <__udivmoddi4+0x14e>
 8001352:	192c      	adds	r4, r5, r4
 8001354:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001358:	d202      	bcs.n	8001360 <__udivmoddi4+0x14c>
 800135a:	45a1      	cmp	r9, r4
 800135c:	f200 80b6 	bhi.w	80014cc <__udivmoddi4+0x2b8>
 8001360:	4618      	mov	r0, r3
 8001362:	eba4 0409 	sub.w	r4, r4, r9
 8001366:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800136a:	e79e      	b.n	80012aa <__udivmoddi4+0x96>
 800136c:	f1c7 0520 	rsb	r5, r7, #32
 8001370:	40bb      	lsls	r3, r7
 8001372:	fa22 fc05 	lsr.w	ip, r2, r5
 8001376:	ea4c 0c03 	orr.w	ip, ip, r3
 800137a:	fa21 f405 	lsr.w	r4, r1, r5
 800137e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001382:	fbb4 f9fe 	udiv	r9, r4, lr
 8001386:	fa1f f88c 	uxth.w	r8, ip
 800138a:	fb0e 4419 	mls	r4, lr, r9, r4
 800138e:	fa20 f305 	lsr.w	r3, r0, r5
 8001392:	40b9      	lsls	r1, r7
 8001394:	fb09 fa08 	mul.w	sl, r9, r8
 8001398:	4319      	orrs	r1, r3
 800139a:	0c0b      	lsrs	r3, r1, #16
 800139c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013a0:	45a2      	cmp	sl, r4
 80013a2:	fa02 f207 	lsl.w	r2, r2, r7
 80013a6:	fa00 f307 	lsl.w	r3, r0, r7
 80013aa:	d90b      	bls.n	80013c4 <__udivmoddi4+0x1b0>
 80013ac:	eb1c 0404 	adds.w	r4, ip, r4
 80013b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80013b4:	f080 8088 	bcs.w	80014c8 <__udivmoddi4+0x2b4>
 80013b8:	45a2      	cmp	sl, r4
 80013ba:	f240 8085 	bls.w	80014c8 <__udivmoddi4+0x2b4>
 80013be:	f1a9 0902 	sub.w	r9, r9, #2
 80013c2:	4464      	add	r4, ip
 80013c4:	eba4 040a 	sub.w	r4, r4, sl
 80013c8:	fbb4 f0fe 	udiv	r0, r4, lr
 80013cc:	fb0e 4410 	mls	r4, lr, r0, r4
 80013d0:	fb00 fa08 	mul.w	sl, r0, r8
 80013d4:	b289      	uxth	r1, r1
 80013d6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80013da:	45a2      	cmp	sl, r4
 80013dc:	d908      	bls.n	80013f0 <__udivmoddi4+0x1dc>
 80013de:	eb1c 0404 	adds.w	r4, ip, r4
 80013e2:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80013e6:	d26b      	bcs.n	80014c0 <__udivmoddi4+0x2ac>
 80013e8:	45a2      	cmp	sl, r4
 80013ea:	d969      	bls.n	80014c0 <__udivmoddi4+0x2ac>
 80013ec:	3802      	subs	r0, #2
 80013ee:	4464      	add	r4, ip
 80013f0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013f4:	fba0 8902 	umull	r8, r9, r0, r2
 80013f8:	eba4 040a 	sub.w	r4, r4, sl
 80013fc:	454c      	cmp	r4, r9
 80013fe:	4641      	mov	r1, r8
 8001400:	46ce      	mov	lr, r9
 8001402:	d354      	bcc.n	80014ae <__udivmoddi4+0x29a>
 8001404:	d051      	beq.n	80014aa <__udivmoddi4+0x296>
 8001406:	2e00      	cmp	r6, #0
 8001408:	d069      	beq.n	80014de <__udivmoddi4+0x2ca>
 800140a:	1a5a      	subs	r2, r3, r1
 800140c:	eb64 040e 	sbc.w	r4, r4, lr
 8001410:	fa04 f505 	lsl.w	r5, r4, r5
 8001414:	fa22 f307 	lsr.w	r3, r2, r7
 8001418:	40fc      	lsrs	r4, r7
 800141a:	431d      	orrs	r5, r3
 800141c:	e9c6 5400 	strd	r5, r4, [r6]
 8001420:	2700      	movs	r7, #0
 8001422:	e747      	b.n	80012b4 <__udivmoddi4+0xa0>
 8001424:	4095      	lsls	r5, r2
 8001426:	f1c2 0320 	rsb	r3, r2, #32
 800142a:	fa21 f003 	lsr.w	r0, r1, r3
 800142e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001432:	fbb0 f7f8 	udiv	r7, r0, r8
 8001436:	fa1f f985 	uxth.w	r9, r5
 800143a:	fb08 0017 	mls	r0, r8, r7, r0
 800143e:	fa24 f303 	lsr.w	r3, r4, r3
 8001442:	4091      	lsls	r1, r2
 8001444:	fb07 fc09 	mul.w	ip, r7, r9
 8001448:	430b      	orrs	r3, r1
 800144a:	0c19      	lsrs	r1, r3, #16
 800144c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001450:	458c      	cmp	ip, r1
 8001452:	fa04 f402 	lsl.w	r4, r4, r2
 8001456:	d907      	bls.n	8001468 <__udivmoddi4+0x254>
 8001458:	1869      	adds	r1, r5, r1
 800145a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800145e:	d231      	bcs.n	80014c4 <__udivmoddi4+0x2b0>
 8001460:	458c      	cmp	ip, r1
 8001462:	d92f      	bls.n	80014c4 <__udivmoddi4+0x2b0>
 8001464:	3f02      	subs	r7, #2
 8001466:	4429      	add	r1, r5
 8001468:	eba1 010c 	sub.w	r1, r1, ip
 800146c:	fbb1 f0f8 	udiv	r0, r1, r8
 8001470:	fb08 1c10 	mls	ip, r8, r0, r1
 8001474:	fb00 fe09 	mul.w	lr, r0, r9
 8001478:	b299      	uxth	r1, r3
 800147a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800147e:	458e      	cmp	lr, r1
 8001480:	d907      	bls.n	8001492 <__udivmoddi4+0x27e>
 8001482:	1869      	adds	r1, r5, r1
 8001484:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001488:	d218      	bcs.n	80014bc <__udivmoddi4+0x2a8>
 800148a:	458e      	cmp	lr, r1
 800148c:	d916      	bls.n	80014bc <__udivmoddi4+0x2a8>
 800148e:	3802      	subs	r0, #2
 8001490:	4429      	add	r1, r5
 8001492:	eba1 010e 	sub.w	r1, r1, lr
 8001496:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800149a:	e73a      	b.n	8001312 <__udivmoddi4+0xfe>
 800149c:	4637      	mov	r7, r6
 800149e:	4630      	mov	r0, r6
 80014a0:	e708      	b.n	80012b4 <__udivmoddi4+0xa0>
 80014a2:	460f      	mov	r7, r1
 80014a4:	e6e6      	b.n	8001274 <__udivmoddi4+0x60>
 80014a6:	4618      	mov	r0, r3
 80014a8:	e6fb      	b.n	80012a2 <__udivmoddi4+0x8e>
 80014aa:	4543      	cmp	r3, r8
 80014ac:	d2ab      	bcs.n	8001406 <__udivmoddi4+0x1f2>
 80014ae:	ebb8 0102 	subs.w	r1, r8, r2
 80014b2:	eb69 020c 	sbc.w	r2, r9, ip
 80014b6:	3801      	subs	r0, #1
 80014b8:	4696      	mov	lr, r2
 80014ba:	e7a4      	b.n	8001406 <__udivmoddi4+0x1f2>
 80014bc:	4618      	mov	r0, r3
 80014be:	e7e8      	b.n	8001492 <__udivmoddi4+0x27e>
 80014c0:	4608      	mov	r0, r1
 80014c2:	e795      	b.n	80013f0 <__udivmoddi4+0x1dc>
 80014c4:	4607      	mov	r7, r0
 80014c6:	e7cf      	b.n	8001468 <__udivmoddi4+0x254>
 80014c8:	4681      	mov	r9, r0
 80014ca:	e77b      	b.n	80013c4 <__udivmoddi4+0x1b0>
 80014cc:	3802      	subs	r0, #2
 80014ce:	442c      	add	r4, r5
 80014d0:	e747      	b.n	8001362 <__udivmoddi4+0x14e>
 80014d2:	f1ae 0e02 	sub.w	lr, lr, #2
 80014d6:	442b      	add	r3, r5
 80014d8:	e72f      	b.n	800133a <__udivmoddi4+0x126>
 80014da:	4638      	mov	r0, r7
 80014dc:	e707      	b.n	80012ee <__udivmoddi4+0xda>
 80014de:	4637      	mov	r7, r6
 80014e0:	e6e8      	b.n	80012b4 <__udivmoddi4+0xa0>
 80014e2:	bf00      	nop

080014e4 <__aeabi_idiv0>:
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <AHT10_Init>:
uint8_t AHT10_Switcher = 255;

I2C_HandleTypeDef *AHT10_hi2c;

HAL_StatusTypeDef AHT10_Init(I2C_HandleTypeDef *hi2c)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	AHT10_hi2c = hi2c;
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <AHT10_Init+0x1c>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
}
 80014f6:	bf00      	nop
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200000a4 	.word	0x200000a4

08001508 <AHT10_GetRaw_Temperature_hum>:

void AHT10_GetRaw_Temperature_hum(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Receive(AHT10_hi2c, AHT10_ADRESS, (uint8_t*)AHT10_RX_Data, 6,100);
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <AHT10_GetRaw_Temperature_hum+0x20>)
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	2364      	movs	r3, #100	; 0x64
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2306      	movs	r3, #6
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <AHT10_GetRaw_Temperature_hum+0x24>)
 800151a:	2170      	movs	r1, #112	; 0x70
 800151c:	f002 fbda 	bl	8003cd4 <HAL_I2C_Master_Receive>
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000a4 	.word	0x200000a4
 800152c:	2000009c 	.word	0x2000009c

08001530 <AHT10_GetTemperature_hum>:

void AHT10_GetTemperature_hum(int8_t* Data) {
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af02      	add	r7, sp, #8
 8001536:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(AHT10_hi2c, AHT10_ADRESS, (uint8_t*)AHT10_TmpHum_Cmd, 3,100);
 8001538:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <AHT10_GetTemperature_hum+0x100>)
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	2364      	movs	r3, #100	; 0x64
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2303      	movs	r3, #3
 8001542:	4a3c      	ldr	r2, [pc, #240]	; (8001634 <AHT10_GetTemperature_hum+0x104>)
 8001544:	2170      	movs	r1, #112	; 0x70
 8001546:	f002 fac7 	bl	8003ad8 <HAL_I2C_Master_Transmit>
	AHT10_GetRaw_Temperature_hum();
 800154a:	f7ff ffdd 	bl	8001508 <AHT10_GetRaw_Temperature_hum>
	AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) | ((uint32_t)AHT10_RX_Data[4] << 8) | AHT10_RX_Data[5];
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <AHT10_GetTemperature_hum+0x108>)
 8001550:	78db      	ldrb	r3, [r3, #3]
 8001552:	041b      	lsls	r3, r3, #16
 8001554:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001558:	4b37      	ldr	r3, [pc, #220]	; (8001638 <AHT10_GetTemperature_hum+0x108>)
 800155a:	791b      	ldrb	r3, [r3, #4]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	4313      	orrs	r3, r2
 8001560:	4a35      	ldr	r2, [pc, #212]	; (8001638 <AHT10_GetTemperature_hum+0x108>)
 8001562:	7952      	ldrb	r2, [r2, #5]
 8001564:	4313      	orrs	r3, r2
 8001566:	4a35      	ldr	r2, [pc, #212]	; (800163c <AHT10_GetTemperature_hum+0x10c>)
 8001568:	6013      	str	r3, [r2, #0]
	AHT10_Temperature = (float)(AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00;
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <AHT10_GetTemperature_hum+0x10c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff9c 	bl	80004ac <__aeabi_ui2d>
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <AHT10_GetTemperature_hum+0x110>)
 800157a:	f7ff f811 	bl	80005a0 <__aeabi_dmul>
 800157e:	4603      	mov	r3, r0
 8001580:	460c      	mov	r4, r1
 8001582:	4618      	mov	r0, r3
 8001584:	4621      	mov	r1, r4
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <AHT10_GetTemperature_hum+0x114>)
 800158c:	f7ff f932 	bl	80007f4 <__aeabi_ddiv>
 8001590:	4603      	mov	r3, r0
 8001592:	460c      	mov	r4, r1
 8001594:	4618      	mov	r0, r3
 8001596:	4621      	mov	r1, r4
 8001598:	f7ff fada 	bl	8000b50 <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	492a      	ldr	r1, [pc, #168]	; (8001648 <AHT10_GetTemperature_hum+0x118>)
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fb29 	bl	8000bf8 <__aeabi_fsub>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <AHT10_GetTemperature_hum+0x11c>)
 80015ac:	601a      	str	r2, [r3, #0]

	AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) | ((uint32_t)AHT10_RX_Data[2] << 4) | (AHT10_RX_Data[3] >> 4);
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <AHT10_GetTemperature_hum+0x108>)
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	031a      	lsls	r2, r3, #12
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <AHT10_GetTemperature_hum+0x108>)
 80015b6:	789b      	ldrb	r3, [r3, #2]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4313      	orrs	r3, r2
 80015bc:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <AHT10_GetTemperature_hum+0x108>)
 80015be:	78d2      	ldrb	r2, [r2, #3]
 80015c0:	0912      	lsrs	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	4313      	orrs	r3, r2
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <AHT10_GetTemperature_hum+0x10c>)
 80015c8:	6013      	str	r3, [r2, #0]
	AHT10_Humidity = (float)(AHT10_ADC_Raw*100.00/1048576.00);
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <AHT10_GetTemperature_hum+0x10c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff6c 	bl	80004ac <__aeabi_ui2d>
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <AHT10_GetTemperature_hum+0x120>)
 80015da:	f7fe ffe1 	bl	80005a0 <__aeabi_dmul>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	4618      	mov	r0, r3
 80015e4:	4621      	mov	r1, r4
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <AHT10_GetTemperature_hum+0x114>)
 80015ec:	f7ff f902 	bl	80007f4 <__aeabi_ddiv>
 80015f0:	4603      	mov	r3, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	4618      	mov	r0, r3
 80015f6:	4621      	mov	r1, r4
 80015f8:	f7ff faaa 	bl	8000b50 <__aeabi_d2f>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <AHT10_GetTemperature_hum+0x124>)
 8001600:	601a      	str	r2, [r3, #0]

	*Data = AHT10_Temperature;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <AHT10_GetTemperature_hum+0x11c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fdc6 	bl	8001198 <__aeabi_f2iz>
 800160c:	4603      	mov	r3, r0
 800160e:	b25a      	sxtb	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	701a      	strb	r2, [r3, #0]
	*(Data+1) = AHT10_Humidity	;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <AHT10_GetTemperature_hum+0x124>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	1c5c      	adds	r4, r3, #1
 800161c:	4610      	mov	r0, r2
 800161e:	f7ff fdbb 	bl	8001198 <__aeabi_f2iz>
 8001622:	4603      	mov	r3, r0
 8001624:	b25b      	sxtb	r3, r3
 8001626:	7023      	strb	r3, [r4, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	200000a4 	.word	0x200000a4
 8001634:	20000000 	.word	0x20000000
 8001638:	2000009c 	.word	0x2000009c
 800163c:	200000b0 	.word	0x200000b0
 8001640:	40690000 	.word	0x40690000
 8001644:	41300000 	.word	0x41300000
 8001648:	42480000 	.word	0x42480000
 800164c:	200000a8 	.word	0x200000a8
 8001650:	40590000 	.word	0x40590000
 8001654:	200000ac 	.word	0x200000ac

08001658 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <BMP180_Init+0x18>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	200000cc 	.word	0x200000cc

08001674 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <BMP180_SetOversampling+0x1c>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	7013      	strb	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200000ca 	.word	0x200000ca

08001694 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
	uint8_t result[2];
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1], (uint8_t *)result);
 800169a:	22aa      	movs	r2, #170	; 0xaa
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f000 f8e9 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC1 =(result[0] << 8) | result[1];
 80016a6:	793b      	ldrb	r3, [r7, #4]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 80016b6:	801a      	strh	r2, [r3, #0]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2], (uint8_t *)result);
 80016b8:	22ac      	movs	r2, #172	; 0xac
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	4619      	mov	r1, r3
 80016be:	4610      	mov	r0, r2
 80016c0:	f000 f8da 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC2 =(result[0] << 8) | result[1];
 80016c4:	793b      	ldrb	r3, [r7, #4]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	797b      	ldrb	r3, [r7, #5]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 80016d4:	805a      	strh	r2, [r3, #2]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3], (uint8_t *)result);
 80016d6:	22ae      	movs	r2, #174	; 0xae
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f000 f8cb 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC3 = (result[0] << 8) | result[1];
 80016e2:	793b      	ldrb	r3, [r7, #4]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	797b      	ldrb	r3, [r7, #5]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 80016f2:	809a      	strh	r2, [r3, #4]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4], (uint8_t *)result);
 80016f4:	22b0      	movs	r2, #176	; 0xb0
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f000 f8bc 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC4 = (result[0] << 8) | result[1];
 8001700:	793b      	ldrb	r3, [r7, #4]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21a      	sxth	r2, r3
 8001706:	797b      	ldrb	r3, [r7, #5]
 8001708:	b21b      	sxth	r3, r3
 800170a:	4313      	orrs	r3, r2
 800170c:	b21b      	sxth	r3, r3
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 8001712:	80da      	strh	r2, [r3, #6]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5], (uint8_t *)result);
 8001714:	22b2      	movs	r2, #178	; 0xb2
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4619      	mov	r1, r3
 800171a:	4610      	mov	r0, r2
 800171c:	f000 f8ac 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC5 = (result[0] << 8) | result[1];
 8001720:	793b      	ldrb	r3, [r7, #4]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b21a      	sxth	r2, r3
 8001726:	797b      	ldrb	r3, [r7, #5]
 8001728:	b21b      	sxth	r3, r3
 800172a:	4313      	orrs	r3, r2
 800172c:	b21b      	sxth	r3, r3
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 8001732:	811a      	strh	r2, [r3, #8]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6], (uint8_t *)result);
 8001734:	22b4      	movs	r2, #180	; 0xb4
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4610      	mov	r0, r2
 800173c:	f000 f89c 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC6 = (result[0] << 8) | result[1];
 8001740:	793b      	ldrb	r3, [r7, #4]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	797b      	ldrb	r3, [r7, #5]
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b21b      	sxth	r3, r3
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 8001752:	815a      	strh	r2, [r3, #10]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1], (uint8_t *)result);
 8001754:	22b6      	movs	r2, #182	; 0xb6
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f000 f88c 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_B1 = (result[0] << 8) | result[1];
 8001760:	793b      	ldrb	r3, [r7, #4]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	b21a      	sxth	r2, r3
 8001766:	797b      	ldrb	r3, [r7, #5]
 8001768:	b21b      	sxth	r3, r3
 800176a:	4313      	orrs	r3, r2
 800176c:	b21a      	sxth	r2, r3
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 8001770:	819a      	strh	r2, [r3, #12]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2], (uint8_t *)result);
 8001772:	22b8      	movs	r2, #184	; 0xb8
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4610      	mov	r0, r2
 800177a:	f000 f87d 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_B2 = (result[0] << 8) | result[1];
 800177e:	793b      	ldrb	r3, [r7, #4]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b21a      	sxth	r2, r3
 8001784:	797b      	ldrb	r3, [r7, #5]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21a      	sxth	r2, r3
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 800178e:	81da      	strh	r2, [r3, #14]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB], (uint8_t *)result);
 8001790:	22ba      	movs	r2, #186	; 0xba
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f000 f86e 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MB = (result[0] << 8) | result[1];
 800179c:	793b      	ldrb	r3, [r7, #4]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	797b      	ldrb	r3, [r7, #5]
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 80017ac:	821a      	strh	r2, [r3, #16]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC], (uint8_t *)result);
 80017ae:	22bc      	movs	r2, #188	; 0xbc
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4610      	mov	r0, r2
 80017b6:	f000 f85f 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MC = (result[0] << 8) | result[1];
 80017ba:	793b      	ldrb	r3, [r7, #4]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b21a      	sxth	r2, r3
 80017c0:	797b      	ldrb	r3, [r7, #5]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 80017ca:	825a      	strh	r2, [r3, #18]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD], (uint8_t *)result);
 80017cc:	22be      	movs	r2, #190	; 0xbe
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f000 f850 	bl	8001878 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MD = (result[0] << 8) | result[1];
 80017d8:	793b      	ldrb	r3, [r7, #4]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b21a      	sxth	r2, r3
 80017de:	797b      	ldrb	r3, [r7, #5]
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <BMP180_UpdateCalibrationData+0x160>)
 80017e8:	829a      	strh	r2, [r3, #20]
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200000b4 	.word	0x200000b4

080017f8 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	4603      	mov	r3, r0
 8001800:	460a      	mov	r2, r1
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	733b      	strb	r3, [r7, #12]
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <BMP180_WriteReg+0x38>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	f107 020c 	add.w	r2, r7, #12
 8001818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2302      	movs	r3, #2
 8001820:	21ee      	movs	r1, #238	; 0xee
 8001822:	f002 f959 	bl	8003ad8 <HAL_I2C_Master_Transmit>
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200000cc 	.word	0x200000cc

08001834 <BMP180_ReadReg8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg8(uint8_t reg) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af02      	add	r7, sp, #8
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <BMP180_ReadReg8+0x40>)
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	1dfa      	adds	r2, r7, #7
 8001844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	21ee      	movs	r1, #238	; 0xee
 800184e:	f002 f943 	bl	8003ad8 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <BMP180_ReadReg8+0x40>)
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	f107 020f 	add.w	r2, r7, #15
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2301      	movs	r3, #1
 8001862:	21ee      	movs	r1, #238	; 0xee
 8001864:	f002 fa36 	bl	8003cd4 <HAL_I2C_Master_Receive>
	return result;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000cc 	.word	0x200000cc

08001878 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
void BMP180_ReadReg(uint8_t reg, uint8_t *result) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af02      	add	r7, sp, #8
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <BMP180_ReadReg+0x3c>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	1dfa      	adds	r2, r7, #7
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2301      	movs	r3, #1
 8001892:	21ee      	movs	r1, #238	; 0xee
 8001894:	f002 f920 	bl	8003ad8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, (uint8_t*)result, 2, BMP180_I2C_TIMEOUT);
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <BMP180_ReadReg+0x3c>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2302      	movs	r3, #2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	21ee      	movs	r1, #238	; 0xee
 80018a8:	f002 fa14 	bl	8003cd4 <HAL_I2C_Master_Receive>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200000cc 	.word	0x200000cc

080018b8 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80018be:	232e      	movs	r3, #46	; 0x2e
 80018c0:	4619      	mov	r1, r3
 80018c2:	20f4      	movs	r0, #244	; 0xf4
 80018c4:	f7ff ff98 	bl	80017f8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 80018c8:	2305      	movs	r3, #5
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fd3a 	bl	8003344 <HAL_Delay>
	uint8_t result[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result);
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	20f6      	movs	r0, #246	; 0xf6
 80018d6:	f7ff ffcf 	bl	8001878 <BMP180_ReadReg>
	int32_t ut = (result[0] << 8) | result[1];
 80018da:	793b      	ldrb	r3, [r7, #4]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	797a      	ldrb	r2, [r7, #5]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <BMP180_GetRawTemperature+0x84>)
 80018e6:	895b      	ldrh	r3, [r3, #10]
 80018e8:	461a      	mov	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <BMP180_GetRawTemperature+0x84>)
 80018f0:	8912      	ldrh	r2, [r2, #8]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	da02      	bge.n	8001900 <BMP180_GetRawTemperature+0x48>
 80018fa:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80018fe:	337f      	adds	r3, #127	; 0x7f
 8001900:	13db      	asrs	r3, r3, #15
 8001902:	613b      	str	r3, [r7, #16]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <BMP180_GetRawTemperature+0x84>)
 8001906:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800190a:	02da      	lsls	r2, r3, #11
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <BMP180_GetRawTemperature+0x84>)
 800190e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001912:	4619      	mov	r1, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	440b      	add	r3, r1
 8001918:	fb92 f3f3 	sdiv	r3, r2, r3
 800191c:	60fb      	str	r3, [r7, #12]
	int32_t b5 = x1 + x2;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60bb      	str	r3, [r7, #8]
	return (b5 + 8) / (1 << 4);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3308      	adds	r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	da00      	bge.n	8001930 <BMP180_GetRawTemperature+0x78>
 800192e:	330f      	adds	r3, #15
 8001930:	111b      	asrs	r3, r3, #4
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200000b4 	.word	0x200000b4

08001940 <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 8001946:	f7ff ffb7 	bl	80018b8 <BMP180_GetRawTemperature>
 800194a:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7fe fdbd 	bl	80004cc <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <BMP180_GetTemperature+0x34>)
 8001958:	f7fe ff4c 	bl	80007f4 <__aeabi_ddiv>
 800195c:	4603      	mov	r3, r0
 800195e:	460c      	mov	r4, r1
 8001960:	4618      	mov	r0, r3
 8001962:	4621      	mov	r1, r4
 8001964:	f7ff f8f4 	bl	8000b50 <__aeabi_d2f>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bd90      	pop	{r4, r7, pc}
 8001972:	bf00      	nop
 8001974:	40240000 	.word	0x40240000

08001978 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800197e:	232e      	movs	r3, #46	; 0x2e
 8001980:	4619      	mov	r1, r3
 8001982:	20f4      	movs	r0, #244	; 0xf4
 8001984:	f7ff ff38 	bl	80017f8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001988:	2305      	movs	r3, #5
 800198a:	4618      	mov	r0, r3
 800198c:	f001 fcda 	bl	8003344 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8001990:	f000 f904 	bl	8001b9c <BMP180_GetUT>
 8001994:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001996:	4b7c      	ldr	r3, [pc, #496]	; (8001b88 <BMP180_GetPressure+0x210>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4b7b      	ldr	r3, [pc, #492]	; (8001b8c <BMP180_GetPressure+0x214>)
 800199e:	5c9b      	ldrb	r3, [r3, r2]
 80019a0:	4619      	mov	r1, r3
 80019a2:	20f4      	movs	r0, #244	; 0xf4
 80019a4:	f7ff ff28 	bl	80017f8 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 80019a8:	4b77      	ldr	r3, [pc, #476]	; (8001b88 <BMP180_GetPressure+0x210>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b78      	ldr	r3, [pc, #480]	; (8001b90 <BMP180_GetPressure+0x218>)
 80019b0:	5c9b      	ldrb	r3, [r3, r2]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fcc6 	bl	8003344 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 80019b8:	f000 f900 	bl	8001bbc <BMP180_GetUP>
 80019bc:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80019be:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <BMP180_GetPressure+0x21c>)
 80019c0:	895b      	ldrh	r3, [r3, #10]
 80019c2:	461a      	mov	r2, r3
 80019c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	4a72      	ldr	r2, [pc, #456]	; (8001b94 <BMP180_GetPressure+0x21c>)
 80019ca:	8912      	ldrh	r2, [r2, #8]
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	da02      	bge.n	80019da <BMP180_GetPressure+0x62>
 80019d4:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80019d8:	337f      	adds	r3, #127	; 0x7f
 80019da:	13db      	asrs	r3, r3, #15
 80019dc:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80019de:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <BMP180_GetPressure+0x21c>)
 80019e0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80019e4:	02da      	lsls	r2, r3, #11
 80019e6:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <BMP180_GetPressure+0x21c>)
 80019e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80019ec:	4619      	mov	r1, r3
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	440b      	add	r3, r1
 80019f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80019f6:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4413      	add	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001a06:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001a08:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <BMP180_GetPressure+0x21c>)
 8001a0a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da01      	bge.n	8001a20 <BMP180_GetPressure+0xa8>
 8001a1c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a20:	131b      	asrs	r3, r3, #12
 8001a22:	fb03 f301 	mul.w	r3, r3, r1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da01      	bge.n	8001a2e <BMP180_GetPressure+0xb6>
 8001a2a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a2e:	12db      	asrs	r3, r3, #11
 8001a30:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 8001a32:	4b58      	ldr	r3, [pc, #352]	; (8001b94 <BMP180_GetPressure+0x21c>)
 8001a34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fb03 f302 	mul.w	r3, r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da01      	bge.n	8001a48 <BMP180_GetPressure+0xd0>
 8001a44:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a48:	12db      	asrs	r3, r3, #11
 8001a4a:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8001a4c:	6a3a      	ldr	r2, [r7, #32]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 8001a54:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <BMP180_GetPressure+0x21c>)
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	009a      	lsls	r2, r3, #2
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a49      	ldr	r2, [pc, #292]	; (8001b88 <BMP180_GetPressure+0x210>)
 8001a62:	7812      	ldrb	r2, [r2, #0]
 8001a64:	4093      	lsls	r3, r2
 8001a66:	3302      	adds	r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da00      	bge.n	8001a6e <BMP180_GetPressure+0xf6>
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	109b      	asrs	r3, r3, #2
 8001a70:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <BMP180_GetPressure+0x21c>)
 8001a74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fb03 f302 	mul.w	r3, r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da02      	bge.n	8001a8a <BMP180_GetPressure+0x112>
 8001a84:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001a88:	331f      	adds	r3, #31
 8001a8a:	135b      	asrs	r3, r3, #13
 8001a8c:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <BMP180_GetPressure+0x21c>)
 8001a90:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a94:	4619      	mov	r1, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	da01      	bge.n	8001aa6 <BMP180_GetPressure+0x12e>
 8001aa2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001aa6:	131b      	asrs	r3, r3, #12
 8001aa8:	fb03 f301 	mul.w	r3, r3, r1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da02      	bge.n	8001ab6 <BMP180_GetPressure+0x13e>
 8001ab0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001ab4:	33ff      	adds	r3, #255	; 0xff
 8001ab6:	141b      	asrs	r3, r3, #16
 8001ab8:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001aba:	6a3a      	ldr	r2, [r7, #32]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	4413      	add	r3, r2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da00      	bge.n	8001ac8 <BMP180_GetPressure+0x150>
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	109b      	asrs	r3, r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001acc:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <BMP180_GetPressure+0x21c>)
 8001ace:	88db      	ldrh	r3, [r3, #6]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ad8:	fb03 f302 	mul.w	r3, r3, r2
 8001adc:	0bdb      	lsrs	r3, r3, #15
 8001ade:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	4a28      	ldr	r2, [pc, #160]	; (8001b88 <BMP180_GetPressure+0x210>)
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	4611      	mov	r1, r2
 8001aec:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001af0:	410a      	asrs	r2, r1
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db06      	blt.n	8001b0c <BMP180_GetPressure+0x194>
		p = (b7 * 2) / b4;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	005a      	lsls	r2, r3, #1
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b0a:	e005      	b.n	8001b18 <BMP180_GetPressure+0x1a0>
	else
		p = (b7 / b4) * 2;
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8001b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da00      	bge.n	8001b20 <BMP180_GetPressure+0x1a8>
 8001b1e:	33ff      	adds	r3, #255	; 0xff
 8001b20:	121b      	asrs	r3, r3, #8
 8001b22:	461a      	mov	r2, r3
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	da00      	bge.n	8001b2c <BMP180_GetPressure+0x1b4>
 8001b2a:	33ff      	adds	r3, #255	; 0xff
 8001b2c:	121b      	asrs	r3, r3, #8
 8001b2e:	fb03 f302 	mul.w	r3, r3, r2
 8001b32:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	f640 32de 	movw	r2, #3038	; 0xbde
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da02      	bge.n	8001b48 <BMP180_GetPressure+0x1d0>
 8001b42:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b46:	33ff      	adds	r3, #255	; 0xff
 8001b48:	141b      	asrs	r3, r3, #16
 8001b4a:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8001b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <BMP180_GetPressure+0x220>)
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da02      	bge.n	8001b5e <BMP180_GetPressure+0x1e6>
 8001b58:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001b5c:	33ff      	adds	r3, #255	; 0xff
 8001b5e:	141b      	asrs	r3, r3, #16
 8001b60:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 8001b62:	6a3a      	ldr	r2, [r7, #32]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	4413      	add	r3, r2
 8001b68:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	da00      	bge.n	8001b72 <BMP180_GetPressure+0x1fa>
 8001b70:	330f      	adds	r3, #15
 8001b72:	111b      	asrs	r3, r3, #4
 8001b74:	461a      	mov	r2, r3
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	4413      	add	r3, r2
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3730      	adds	r7, #48	; 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200000ca 	.word	0x200000ca
 8001b8c:	08008400 	.word	0x08008400
 8001b90:	08008404 	.word	0x08008404
 8001b94:	200000b4 	.word	0x200000b4
 8001b98:	ffffe343 	.word	0xffffe343

08001b9c <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	uint8_t result[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result);
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	20f6      	movs	r0, #246	; 0xf6
 8001ba8:	f7ff fe66 	bl	8001878 <BMP180_ReadReg>
	return (result[0] << 8) | result[1];
 8001bac:	793b      	ldrb	r3, [r7, #4]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	797a      	ldrb	r2, [r7, #5]
 8001bb2:	4313      	orrs	r3, r2
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
	uint8_t result1[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result1);
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	20f6      	movs	r0, #246	; 0xf6
 8001bc8:	f7ff fe56 	bl	8001878 <BMP180_ReadReg>
	return ((result1[0] << 16) | (result1[1] << 8) | BMP180_ReadReg8(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001bcc:	793b      	ldrb	r3, [r7, #4]
 8001bce:	041a      	lsls	r2, r3, #16
 8001bd0:	797b      	ldrb	r3, [r7, #5]
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	ea42 0403 	orr.w	r4, r2, r3
 8001bd8:	20f8      	movs	r0, #248	; 0xf8
 8001bda:	f7ff fe2b 	bl	8001834 <BMP180_ReadReg8>
 8001bde:	4603      	mov	r3, r0
 8001be0:	ea44 0203 	orr.w	r2, r4, r3
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <BMP180_GetUP+0x3c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f1c3 0308 	rsb	r3, r3, #8
 8001bec:	fa42 f303 	asr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd90      	pop	{r4, r7, pc}
 8001bf8:	200000ca 	.word	0x200000ca

08001bfc <HCSR05_Init>:

/**
 * Initialization sensor requirments
 */
void HCSR05_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	// Init delay function
	DWT_Init();
 8001c00:	f000 ff84 	bl	8002b0c <DWT_Init>
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HCSR05_Calculate_SoundSpeed>:
 * Calculate sound speed based on Owen Cramer's method.
 * @param T Temperature (Celsius).
 * @param P Air pressure (Pa).
 * @param H Relative humidity (%).
 */
void HCSR05_Calculate_SoundSpeed(int8_t T, uint32_t P, int8_t H){
 8001c08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c0c:	b098      	sub	sp, #96	; 0x60
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	6039      	str	r1, [r7, #0]
 8001c14:	71fb      	strb	r3, [r7, #7]
 8001c16:	4613      	mov	r3, r2
 8001c18:	71bb      	strb	r3, [r7, #6]
	double_t Xc, Xw, V1, V2, V3, f, PSV, PSV1, PSV2, T_kel, T_sqr;

	// Variables description is in the report
	Xc = 400 * 1e-6;
 8001c1a:	a4d7      	add	r4, pc, #860	; (adr r4, 8001f78 <HCSR05_Calculate_SoundSpeed+0x370>)
 8001c1c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c20:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	T_kel = 273.15 + T;
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc4f 	bl	80004cc <__aeabi_i2d>
 8001c2e:	a3d4      	add	r3, pc, #848	; (adr r3, 8001f80 <HCSR05_Calculate_SoundSpeed+0x378>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fafe 	bl	8000234 <__adddf3>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	T_sqr = pow(T, 2);
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc41 	bl	80004cc <__aeabi_i2d>
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c52:	f004 fea7 	bl	80069a4 <pow>
 8001c56:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
	f = 1.00062 + 3.141593 * 1e-8 * P + T_sqr * 5.6 * 1e-7;
 8001c5a:	6838      	ldr	r0, [r7, #0]
 8001c5c:	f7fe fc26 	bl	80004ac <__aeabi_ui2d>
 8001c60:	a3c9      	add	r3, pc, #804	; (adr r3, 8001f88 <HCSR05_Calculate_SoundSpeed+0x380>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fc9b 	bl	80005a0 <__aeabi_dmul>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460c      	mov	r4, r1
 8001c6e:	4618      	mov	r0, r3
 8001c70:	4621      	mov	r1, r4
 8001c72:	a3c7      	add	r3, pc, #796	; (adr r3, 8001f90 <HCSR05_Calculate_SoundSpeed+0x388>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fadc 	bl	8000234 <__adddf3>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	4625      	mov	r5, r4
 8001c82:	461c      	mov	r4, r3
 8001c84:	a3c4      	add	r3, pc, #784	; (adr r3, 8001f98 <HCSR05_Calculate_SoundSpeed+0x390>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c8e:	f7fe fc87 	bl	80005a0 <__aeabi_dmul>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	a3c1      	add	r3, pc, #772	; (adr r3, 8001fa0 <HCSR05_Calculate_SoundSpeed+0x398>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fc7e 	bl	80005a0 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe fac2 	bl	8000234 <__adddf3>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	PSV1 = pow(T_kel, 2) * 1.2378847 * 1e-8 - 1.9121316 * 1e-2 * T_kel;
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cc0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001cc4:	f004 fe6e 	bl	80069a4 <pow>
 8001cc8:	a3b7      	add	r3, pc, #732	; (adr r3, 8001fa8 <HCSR05_Calculate_SoundSpeed+0x3a0>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc67 	bl	80005a0 <__aeabi_dmul>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4621      	mov	r1, r4
 8001cda:	a3b5      	add	r3, pc, #724	; (adr r3, 8001fb0 <HCSR05_Calculate_SoundSpeed+0x3a8>)
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f7fe fc5e 	bl	80005a0 <__aeabi_dmul>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	4625      	mov	r5, r4
 8001cea:	461c      	mov	r4, r3
 8001cec:	a3b2      	add	r3, pc, #712	; (adr r3, 8001fb8 <HCSR05_Calculate_SoundSpeed+0x3b0>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001cf6:	f7fe fc53 	bl	80005a0 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe fa95 	bl	8000230 <__aeabi_dsub>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	PSV2 = 33.93711047 - 6.3431645 * 1e3 / T_kel;
 8001d0e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d12:	a1ab      	add	r1, pc, #684	; (adr r1, 8001fc0 <HCSR05_Calculate_SoundSpeed+0x3b8>)
 8001d14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d18:	f7fe fd6c 	bl	80007f4 <__aeabi_ddiv>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	460c      	mov	r4, r1
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	a1a8      	add	r1, pc, #672	; (adr r1, 8001fc8 <HCSR05_Calculate_SoundSpeed+0x3c0>)
 8001d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d2a:	f7fe fa81 	bl	8000230 <__aeabi_dsub>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460c      	mov	r4, r1
 8001d32:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	PSV = exp(PSV1 + PSV2);
 8001d36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d3e:	f7fe fa79 	bl	8000234 <__adddf3>
 8001d42:	4603      	mov	r3, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	4618      	mov	r0, r3
 8001d48:	4621      	mov	r1, r4
 8001d4a:	f004 fd5d 	bl	8006808 <exp>
 8001d4e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	Xw = (H / 100) * f * PSV / P;
 8001d52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d56:	4abc      	ldr	r2, [pc, #752]	; (8002048 <HCSR05_Calculate_SoundSpeed+0x440>)
 8001d58:	fb82 1203 	smull	r1, r2, r2, r3
 8001d5c:	1152      	asrs	r2, r2, #5
 8001d5e:	17db      	asrs	r3, r3, #31
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbb1 	bl	80004cc <__aeabi_i2d>
 8001d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d6e:	f7fe fc17 	bl	80005a0 <__aeabi_dmul>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	4618      	mov	r0, r3
 8001d78:	4621      	mov	r1, r4
 8001d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d7e:	f7fe fc0f 	bl	80005a0 <__aeabi_dmul>
 8001d82:	4603      	mov	r3, r0
 8001d84:	460c      	mov	r4, r1
 8001d86:	4625      	mov	r5, r4
 8001d88:	461c      	mov	r4, r3
 8001d8a:	6838      	ldr	r0, [r7, #0]
 8001d8c:	f7fe fb8e 	bl	80004ac <__aeabi_ui2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe fd2c 	bl	80007f4 <__aeabi_ddiv>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	460c      	mov	r4, r1
 8001da0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	V1 = 0.603055 * T + 331.5024 - T_sqr * 5.28 * 1e-4 + (0.1495874 * T + 51.471935 -T_sqr * 7.82 * 1e-4) * Xw;
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fb8f 	bl	80004cc <__aeabi_i2d>
 8001dae:	a388      	add	r3, pc, #544	; (adr r3, 8001fd0 <HCSR05_Calculate_SoundSpeed+0x3c8>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe fbf4 	bl	80005a0 <__aeabi_dmul>
 8001db8:	4603      	mov	r3, r0
 8001dba:	460c      	mov	r4, r1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	a385      	add	r3, pc, #532	; (adr r3, 8001fd8 <HCSR05_Calculate_SoundSpeed+0x3d0>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fa35 	bl	8000234 <__adddf3>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	460c      	mov	r4, r1
 8001dce:	4625      	mov	r5, r4
 8001dd0:	461c      	mov	r4, r3
 8001dd2:	a383      	add	r3, pc, #524	; (adr r3, 8001fe0 <HCSR05_Calculate_SoundSpeed+0x3d8>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ddc:	f7fe fbe0 	bl	80005a0 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	a37f      	add	r3, pc, #508	; (adr r3, 8001fe8 <HCSR05_Calculate_SoundSpeed+0x3e0>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fbd7 	bl	80005a0 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4620      	mov	r0, r4
 8001df8:	4629      	mov	r1, r5
 8001dfa:	f7fe fa19 	bl	8000230 <__aeabi_dsub>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	4625      	mov	r5, r4
 8001e04:	461c      	mov	r4, r3
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb5e 	bl	80004cc <__aeabi_i2d>
 8001e10:	a377      	add	r3, pc, #476	; (adr r3, 8001ff0 <HCSR05_Calculate_SoundSpeed+0x3e8>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fbc3 	bl	80005a0 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	a375      	add	r3, pc, #468	; (adr r3, 8001ff8 <HCSR05_Calculate_SoundSpeed+0x3f0>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	f7fe fa04 	bl	8000234 <__adddf3>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4690      	mov	r8, r2
 8001e32:	4699      	mov	r9, r3
 8001e34:	a372      	add	r3, pc, #456	; (adr r3, 8002000 <HCSR05_Calculate_SoundSpeed+0x3f8>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001e3e:	f7fe fbaf 	bl	80005a0 <__aeabi_dmul>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	a367      	add	r3, pc, #412	; (adr r3, 8001fe8 <HCSR05_Calculate_SoundSpeed+0x3e0>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fba6 	bl	80005a0 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4640      	mov	r0, r8
 8001e5a:	4649      	mov	r1, r9
 8001e5c:	f7fe f9e8 	bl	8000230 <__aeabi_dsub>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e6c:	f7fe fb98 	bl	80005a0 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4620      	mov	r0, r4
 8001e76:	4629      	mov	r1, r5
 8001e78:	f7fe f9dc 	bl	8000234 <__adddf3>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	e9c7 3406 	strd	r3, r4, [r7, #24]
	V2 = (-1.82 * 1e-7 + 3.73 * 1e-8 * T - T_sqr * 2.93 * 1e-10) * P + (-85.20931 - 0.228525 * T + T_sqr * 5.91 * 1e-5) * Xc;
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb1f 	bl	80004cc <__aeabi_i2d>
 8001e8e:	a35e      	add	r3, pc, #376	; (adr r3, 8002008 <HCSR05_Calculate_SoundSpeed+0x400>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fb84 	bl	80005a0 <__aeabi_dmul>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	460c      	mov	r4, r1
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	a35b      	add	r3, pc, #364	; (adr r3, 8002010 <HCSR05_Calculate_SoundSpeed+0x408>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe f9c3 	bl	8000230 <__aeabi_dsub>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	460c      	mov	r4, r1
 8001eae:	4625      	mov	r5, r4
 8001eb0:	461c      	mov	r4, r3
 8001eb2:	a359      	add	r3, pc, #356	; (adr r3, 8002018 <HCSR05_Calculate_SoundSpeed+0x410>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ebc:	f7fe fb70 	bl	80005a0 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	a355      	add	r3, pc, #340	; (adr r3, 8002020 <HCSR05_Calculate_SoundSpeed+0x418>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fb67 	bl	80005a0 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe f9a9 	bl	8000230 <__aeabi_dsub>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460c      	mov	r4, r1
 8001ee2:	4625      	mov	r5, r4
 8001ee4:	461c      	mov	r4, r3
 8001ee6:	6838      	ldr	r0, [r7, #0]
 8001ee8:	f7fe fae0 	bl	80004ac <__aeabi_ui2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	f7fe fb54 	bl	80005a0 <__aeabi_dmul>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	460c      	mov	r4, r1
 8001efc:	4625      	mov	r5, r4
 8001efe:	461c      	mov	r4, r3
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fae1 	bl	80004cc <__aeabi_i2d>
 8001f0a:	a347      	add	r3, pc, #284	; (adr r3, 8002028 <HCSR05_Calculate_SoundSpeed+0x420>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe fb46 	bl	80005a0 <__aeabi_dmul>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	a145      	add	r1, pc, #276	; (adr r1, 8002030 <HCSR05_Calculate_SoundSpeed+0x428>)
 8001f1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f1e:	f7fe f987 	bl	8000230 <__aeabi_dsub>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4690      	mov	r8, r2
 8001f28:	4699      	mov	r9, r3
 8001f2a:	a343      	add	r3, pc, #268	; (adr r3, 8002038 <HCSR05_Calculate_SoundSpeed+0x430>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f34:	f7fe fb34 	bl	80005a0 <__aeabi_dmul>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	a33f      	add	r3, pc, #252	; (adr r3, 8002040 <HCSR05_Calculate_SoundSpeed+0x438>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe fb2b 	bl	80005a0 <__aeabi_dmul>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4649      	mov	r1, r9
 8001f52:	f7fe f96f 	bl	8000234 <__adddf3>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f62:	f7fe fb1d 	bl	80005a0 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	f7fe f961 	bl	8000234 <__adddf3>
 8001f72:	e06b      	b.n	800204c <HCSR05_Calculate_SoundSpeed+0x444>
 8001f74:	f3af 8000 	nop.w
 8001f78:	eb1c432c 	.word	0xeb1c432c
 8001f7c:	3f3a36e2 	.word	0x3f3a36e2
 8001f80:	66666666 	.word	0x66666666
 8001f84:	40711266 	.word	0x40711266
 8001f88:	c548725f 	.word	0xc548725f
 8001f8c:	3e60ddc5 	.word	0x3e60ddc5
 8001f90:	1dfb938a 	.word	0x1dfb938a
 8001f94:	3ff0028a 	.word	0x3ff0028a
 8001f98:	66666666 	.word	0x66666666
 8001f9c:	40166666 	.word	0x40166666
 8001fa0:	9abcaf48 	.word	0x9abcaf48
 8001fa4:	3e7ad7f2 	.word	0x3e7ad7f2
 8001fa8:	2feb8016 	.word	0x2feb8016
 8001fac:	3ff3ce60 	.word	0x3ff3ce60
 8001fb0:	e2308c3a 	.word	0xe2308c3a
 8001fb4:	3e45798e 	.word	0x3e45798e
 8001fb8:	cb818460 	.word	0xcb818460
 8001fbc:	3f939489 	.word	0x3f939489
 8001fc0:	1cac0832 	.word	0x1cac0832
 8001fc4:	40b8c72a 	.word	0x40b8c72a
 8001fc8:	3c62b1d1 	.word	0x3c62b1d1
 8001fcc:	4040f7f3 	.word	0x4040f7f3
 8001fd0:	ffd60e95 	.word	0xffd60e95
 8001fd4:	3fe34c39 	.word	0x3fe34c39
 8001fd8:	d495182b 	.word	0xd495182b
 8001fdc:	4074b809 	.word	0x4074b809
 8001fe0:	51eb851f 	.word	0x51eb851f
 8001fe4:	40151eb8 	.word	0x40151eb8
 8001fe8:	eb1c432d 	.word	0xeb1c432d
 8001fec:	3f1a36e2 	.word	0x3f1a36e2
 8001ff0:	0f7263cb 	.word	0x0f7263cb
 8001ff4:	3fc325ae 	.word	0x3fc325ae
 8001ff8:	5db76b3c 	.word	0x5db76b3c
 8001ffc:	4049bc68 	.word	0x4049bc68
 8002000:	147ae148 	.word	0x147ae148
 8002004:	401f47ae 	.word	0x401f47ae
 8002008:	1433abb9 	.word	0x1433abb9
 800200c:	3e640679 	.word	0x3e640679
 8002010:	ee17391b 	.word	0xee17391b
 8002014:	3e886d78 	.word	0x3e886d78
 8002018:	d70a3d71 	.word	0xd70a3d71
 800201c:	400770a3 	.word	0x400770a3
 8002020:	d9d7bdbb 	.word	0xd9d7bdbb
 8002024:	3ddb7cdf 	.word	0x3ddb7cdf
 8002028:	a4a8c155 	.word	0xa4a8c155
 800202c:	3fcd404e 	.word	0x3fcd404e
 8002030:	55c52e73 	.word	0x55c52e73
 8002034:	c0554d65 	.word	0xc0554d65
 8002038:	0a3d70a4 	.word	0x0a3d70a4
 800203c:	4017a3d7 	.word	0x4017a3d7
 8002040:	88e368f1 	.word	0x88e368f1
 8002044:	3ee4f8b5 	.word	0x3ee4f8b5
 8002048:	51eb851f 	.word	0x51eb851f
 800204c:	4603      	mov	r3, r0
 800204e:	460c      	mov	r4, r1
 8002050:	e9c7 3404 	strd	r3, r4, [r7, #16]
	V3 = pow(Xw, 2) * 2.835149 - pow(P, 2) * 2.15 * 1e-13 + pow(Xc, 2) * 29.179762 + 4.86 * 1e-4 * Xw * P * Xc;
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800205c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002060:	f004 fca0 	bl	80069a4 <pow>
 8002064:	a342      	add	r3, pc, #264	; (adr r3, 8002170 <HCSR05_Calculate_SoundSpeed+0x568>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fa99 	bl	80005a0 <__aeabi_dmul>
 800206e:	4603      	mov	r3, r0
 8002070:	460c      	mov	r4, r1
 8002072:	4625      	mov	r5, r4
 8002074:	461c      	mov	r4, r3
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f7fe fa18 	bl	80004ac <__aeabi_ui2d>
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002084:	f004 fc8e 	bl	80069a4 <pow>
 8002088:	a33b      	add	r3, pc, #236	; (adr r3, 8002178 <HCSR05_Calculate_SoundSpeed+0x570>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fa87 	bl	80005a0 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	a339      	add	r3, pc, #228	; (adr r3, 8002180 <HCSR05_Calculate_SoundSpeed+0x578>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe fa7e 	bl	80005a0 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4620      	mov	r0, r4
 80020aa:	4629      	mov	r1, r5
 80020ac:	f7fe f8c0 	bl	8000230 <__aeabi_dsub>
 80020b0:	4603      	mov	r3, r0
 80020b2:	460c      	mov	r4, r1
 80020b4:	4625      	mov	r5, r4
 80020b6:	461c      	mov	r4, r3
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80020c4:	f004 fc6e 	bl	80069a4 <pow>
 80020c8:	a32f      	add	r3, pc, #188	; (adr r3, 8002188 <HCSR05_Calculate_SoundSpeed+0x580>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe fa67 	bl	80005a0 <__aeabi_dmul>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4620      	mov	r0, r4
 80020d8:	4629      	mov	r1, r5
 80020da:	f7fe f8ab 	bl	8000234 <__adddf3>
 80020de:	4603      	mov	r3, r0
 80020e0:	460c      	mov	r4, r1
 80020e2:	4625      	mov	r5, r4
 80020e4:	461c      	mov	r4, r3
 80020e6:	a32a      	add	r3, pc, #168	; (adr r3, 8002190 <HCSR05_Calculate_SoundSpeed+0x588>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020f0:	f7fe fa56 	bl	80005a0 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4690      	mov	r8, r2
 80020fa:	4699      	mov	r9, r3
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f7fe f9d5 	bl	80004ac <__aeabi_ui2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4640      	mov	r0, r8
 8002108:	4649      	mov	r1, r9
 800210a:	f7fe fa49 	bl	80005a0 <__aeabi_dmul>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800211a:	f7fe fa41 	bl	80005a0 <__aeabi_dmul>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4620      	mov	r0, r4
 8002124:	4629      	mov	r1, r5
 8002126:	f7fe f885 	bl	8000234 <__adddf3>
 800212a:	4603      	mov	r3, r0
 800212c:	460c      	mov	r4, r1
 800212e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	HCSR05_SoundSpeed =  V1 + V2 - V3;
 8002132:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800213a:	f7fe f87b 	bl	8000234 <__adddf3>
 800213e:	4603      	mov	r3, r0
 8002140:	460c      	mov	r4, r1
 8002142:	4618      	mov	r0, r3
 8002144:	4621      	mov	r1, r4
 8002146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800214a:	f7fe f871 	bl	8000230 <__aeabi_dsub>
 800214e:	4603      	mov	r3, r0
 8002150:	460c      	mov	r4, r1
 8002152:	4618      	mov	r0, r3
 8002154:	4621      	mov	r1, r4
 8002156:	f7fe fcfb 	bl	8000b50 <__aeabi_d2f>
 800215a:	4602      	mov	r2, r0
 800215c:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HCSR05_Calculate_SoundSpeed+0x590>)
 800215e:	601a      	str	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	3760      	adds	r7, #96	; 0x60
 8002164:	46bd      	mov	sp, r7
 8002166:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800216a:	bf00      	nop
 800216c:	f3af 8000 	nop.w
 8002170:	99524bfd 	.word	0x99524bfd
 8002174:	4006ae62 	.word	0x4006ae62
 8002178:	33333333 	.word	0x33333333
 800217c:	40013333 	.word	0x40013333
 8002180:	68497682 	.word	0x68497682
 8002184:	3d3c25c2 	.word	0x3d3c25c2
 8002188:	e1e71045 	.word	0xe1e71045
 800218c:	403d2e04 	.word	0x403d2e04
 8002190:	1b1960fb 	.word	0x1b1960fb
 8002194:	3f3fd9ba 	.word	0x3f3fd9ba
 8002198:	200000e4 	.word	0x200000e4

0800219c <HCSR05_Calculate_TOF>:

/**
 * Calculate sound time of flight.
 */
void HCSR05_Calculate_TOF(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
	// Send 10 microsecond pulse on trigger pin
	HAL_GPIO_WritePin(HCSR05_Trigger_Port, HCSR05_Trigger_Pin, GPIO_PIN_SET);
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HCSR05_Calculate_TOF+0x7c>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HCSR05_Calculate_TOF+0x80>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4619      	mov	r1, r3
 80021ae:	f001 fb53 	bl	8003858 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 80021b2:	200a      	movs	r0, #10
 80021b4:	f000 fcca 	bl	8002b4c <DWT_Delay>
	HAL_GPIO_WritePin(HCSR05_Trigger_Port, HCSR05_Trigger_Pin, GPIO_PIN_RESET);
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <HCSR05_Calculate_TOF+0x7c>)
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <HCSR05_Calculate_TOF+0x80>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	f001 fb48 	bl	8003858 <HAL_GPIO_WritePin>

	// Start timer
	HAL_TIM_IC_Start_IT(HCSR05_Htim, HCSR05_Channel);
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HCSR05_Calculate_TOF+0x84>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b15      	ldr	r3, [pc, #84]	; (8002224 <HCSR05_Calculate_TOF+0x88>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f003 fc96 	bl	8005b04 <HAL_TIM_IC_Start_IT>

	// Wait for Echo pulse
	uint32_t startTick = HAL_GetTick();
 80021d8:	f001 f8aa 	bl	8003330 <HAL_GetTick>
 80021dc:	6078      	str	r0, [r7, #4]
	do{
		if(HCSR05_Captured) break;
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HCSR05_Calculate_TOF+0x8c>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <HCSR05_Calculate_TOF+0x5c>
	}while((HAL_GetTick() - startTick) < 500);
 80021e6:	f001 f8a3 	bl	8003330 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80021f4:	d3f3      	bcc.n	80021de <HCSR05_Calculate_TOF+0x42>
 80021f6:	e000      	b.n	80021fa <HCSR05_Calculate_TOF+0x5e>
		if(HCSR05_Captured) break;
 80021f8:	bf00      	nop

	// Reset state
	HCSR05_Captured = 0;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HCSR05_Calculate_TOF+0x8c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(HCSR05_Htim, HCSR05_Channel);
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HCSR05_Calculate_TOF+0x84>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HCSR05_Calculate_TOF+0x88>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f003 fce2 	bl	8005bd4 <HAL_TIM_IC_Stop_IT>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200000d8 	.word	0x200000d8
 800221c:	200000dc 	.word	0x200000dc
 8002220:	200000f8 	.word	0x200000f8
 8002224:	200000e8 	.word	0x200000e8
 8002228:	200000d4 	.word	0x200000d4

0800222c <HCSR05_TIM_Callback>:
/**
 * must put in HAL_TIM_IC_CaptureCallback
 */
void HCSR05_TIM_Callback(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	// If the interrupt source is on our channel
	if (htim->Channel == HCSR05_Channel) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7f1b      	ldrb	r3, [r3, #28]
 8002238:	461a      	mov	r2, r3
 800223a:	4b82      	ldr	r3, [pc, #520]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	f040 80fb 	bne.w	800243a <HCSR05_TIM_Callback+0x20e>
		// If the first val is not captured
		if (HCSR05_Is_First_Val_Captured==0) {
 8002244:	4b80      	ldr	r3, [pc, #512]	; (8002448 <HCSR05_TIM_Callback+0x21c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d16a      	bne.n	8002322 <HCSR05_TIM_Callback+0xf6>
			// Get first value
			HCSR05_IC_First_Val = HAL_TIM_ReadCapturedValue(htim, HCSR05_Channel);
 800224c:	4b7d      	ldr	r3, [pc, #500]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f003 ff8a 	bl	800616c <HAL_TIM_ReadCapturedValue>
 8002258:	4602      	mov	r2, r0
 800225a:	4b7c      	ldr	r3, [pc, #496]	; (800244c <HCSR05_TIM_Callback+0x220>)
 800225c:	601a      	str	r2, [r3, #0]
			// Set first val captured as true
			HCSR05_Is_First_Val_Captured = 1;
 800225e:	4b7a      	ldr	r3, [pc, #488]	; (8002448 <HCSR05_TIM_Callback+0x21c>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
			// change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002264:	4b77      	ldr	r3, [pc, #476]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d108      	bne.n	800227e <HCSR05_TIM_Callback+0x52>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 020a 	bic.w	r2, r2, #10
 800227a:	621a      	str	r2, [r3, #32]
 800227c:	e021      	b.n	80022c2 <HCSR05_TIM_Callback+0x96>
 800227e:	4b71      	ldr	r3, [pc, #452]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d108      	bne.n	8002298 <HCSR05_TIM_Callback+0x6c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002294:	621a      	str	r2, [r3, #32]
 8002296:	e014      	b.n	80022c2 <HCSR05_TIM_Callback+0x96>
 8002298:	4b6a      	ldr	r3, [pc, #424]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d108      	bne.n	80022b2 <HCSR05_TIM_Callback+0x86>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022ae:	621a      	str	r2, [r3, #32]
 80022b0:	e007      	b.n	80022c2 <HCSR05_TIM_Callback+0x96>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c0:	621a      	str	r2, [r3, #32]
 80022c2:	4b60      	ldr	r3, [pc, #384]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <HCSR05_TIM_Callback+0xb0>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0202 	orr.w	r2, r2, #2
 80022d8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_COUNTER(htim, 0);
			// Set polarity to rising edge for next use
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 80022da:	e0ae      	b.n	800243a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022dc:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d108      	bne.n	80022f6 <HCSR05_TIM_Callback+0xca>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0220 	orr.w	r2, r2, #32
 80022f2:	621a      	str	r2, [r3, #32]
}
 80022f4:	e0a1      	b.n	800243a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80022f6:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d108      	bne.n	8002310 <HCSR05_TIM_Callback+0xe4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230c:	621a      	str	r2, [r3, #32]
}
 800230e:	e094      	b.n	800243a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800231e:	621a      	str	r2, [r3, #32]
}
 8002320:	e08b      	b.n	800243a <HCSR05_TIM_Callback+0x20e>
		} else if (HCSR05_Is_First_Val_Captured==1) { // If first val is already captured
 8002322:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HCSR05_TIM_Callback+0x21c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	f040 8087 	bne.w	800243a <HCSR05_TIM_Callback+0x20e>
			HCSR05_IC_Second_Val = HAL_TIM_ReadCapturedValue(htim, HCSR05_Channel);
 800232c:	4b45      	ldr	r3, [pc, #276]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f003 ff1a 	bl	800616c <HAL_TIM_ReadCapturedValue>
 8002338:	4602      	mov	r2, r0
 800233a:	4b45      	ldr	r3, [pc, #276]	; (8002450 <HCSR05_TIM_Callback+0x224>)
 800233c:	601a      	str	r2, [r3, #0]
			if (HCSR05_IC_Second_Val > HCSR05_IC_First_Val) {
 800233e:	4b44      	ldr	r3, [pc, #272]	; (8002450 <HCSR05_TIM_Callback+0x224>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <HCSR05_TIM_Callback+0x220>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d907      	bls.n	800235a <HCSR05_TIM_Callback+0x12e>
				HCSR05_TOF = HCSR05_IC_Second_Val-HCSR05_IC_First_Val;
 800234a:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HCSR05_TIM_Callback+0x224>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <HCSR05_TIM_Callback+0x220>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4a3f      	ldr	r2, [pc, #252]	; (8002454 <HCSR05_TIM_Callback+0x228>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e00f      	b.n	800237a <HCSR05_TIM_Callback+0x14e>
			} else if (HCSR05_IC_First_Val > HCSR05_IC_Second_Val) {
 800235a:	4b3c      	ldr	r3, [pc, #240]	; (800244c <HCSR05_TIM_Callback+0x220>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <HCSR05_TIM_Callback+0x224>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d909      	bls.n	800237a <HCSR05_TIM_Callback+0x14e>
				HCSR05_TOF = (0xffff - HCSR05_IC_First_Val) + HCSR05_IC_Second_Val;
 8002366:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HCSR05_TIM_Callback+0x224>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b38      	ldr	r3, [pc, #224]	; (800244c <HCSR05_TIM_Callback+0x220>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002374:	33ff      	adds	r3, #255	; 0xff
 8002376:	4a37      	ldr	r2, [pc, #220]	; (8002454 <HCSR05_TIM_Callback+0x228>)
 8002378:	6013      	str	r3, [r2, #0]
			HCSR05_Captured = 1;
 800237a:	4b37      	ldr	r3, [pc, #220]	; (8002458 <HCSR05_TIM_Callback+0x22c>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
			HCSR05_Is_First_Val_Captured = 0;
 8002380:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HCSR05_TIM_Callback+0x21c>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d108      	bne.n	80023a8 <HCSR05_TIM_Callback+0x17c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 020a 	bic.w	r2, r2, #10
 80023a4:	621a      	str	r2, [r3, #32]
 80023a6:	e021      	b.n	80023ec <HCSR05_TIM_Callback+0x1c0>
 80023a8:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d108      	bne.n	80023c2 <HCSR05_TIM_Callback+0x196>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a1a      	ldr	r2, [r3, #32]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023be:	621a      	str	r2, [r3, #32]
 80023c0:	e014      	b.n	80023ec <HCSR05_TIM_Callback+0x1c0>
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d108      	bne.n	80023dc <HCSR05_TIM_Callback+0x1b0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023d8:	621a      	str	r2, [r3, #32]
 80023da:	e007      	b.n	80023ec <HCSR05_TIM_Callback+0x1c0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ea:	621a      	str	r2, [r3, #32]
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <HCSR05_TIM_Callback+0x1d6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a12      	ldr	r2, [r2, #32]
 80023fe:	621a      	str	r2, [r3, #32]
}
 8002400:	e01b      	b.n	800243a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b04      	cmp	r3, #4
 8002408:	d106      	bne.n	8002418 <HCSR05_TIM_Callback+0x1ec>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a12      	ldr	r2, [r2, #32]
 8002414:	621a      	str	r2, [r3, #32]
}
 8002416:	e010      	b.n	800243a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HCSR05_TIM_Callback+0x218>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d106      	bne.n	800242e <HCSR05_TIM_Callback+0x202>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6a12      	ldr	r2, [r2, #32]
 800242a:	621a      	str	r2, [r3, #32]
}
 800242c:	e005      	b.n	800243a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a12      	ldr	r2, [r2, #32]
 8002438:	621a      	str	r2, [r3, #32]
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200000e8 	.word	0x200000e8
 8002448:	200000ec 	.word	0x200000ec
 800244c:	200000d0 	.word	0x200000d0
 8002450:	200000f0 	.word	0x200000f0
 8002454:	200000e0 	.word	0x200000e0
 8002458:	200000d4 	.word	0x200000d4

0800245c <HCSR05_Ready>:
 * @param trig_pin HCSR05 Trigger pin.
 * @param htim HCSR05 timer.
 * @param timer_channel HCSR05 timer channel.
 * @param distance Distance between transducers (cm).
 */
void HCSR05_Ready(GPIO_TypeDef *trig_port, uint16_t trig_pin, TIM_HandleTypeDef* htim, uint32_t timer_channel, uint8_t distance){
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	460b      	mov	r3, r1
 800246a:	817b      	strh	r3, [r7, #10]
	// Set trigger port and pin global variables
	HCSR05_Trigger_Port = trig_port;
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <HCSR05_Ready+0x64>)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6013      	str	r3, [r2, #0]
	HCSR05_Trigger_Pin = trig_pin;
 8002472:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <HCSR05_Ready+0x68>)
 8002474:	897b      	ldrh	r3, [r7, #10]
 8002476:	8013      	strh	r3, [r2, #0]
	// Set timer global variables
	HCSR05_Htim = htim;
 8002478:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <HCSR05_Ready+0x6c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
	HCSR05_Channel = timer_channel;
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <HCSR05_Ready+0x70>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6013      	str	r3, [r2, #0]
	// Set distance global variable
	HCSR05_Distance = distance;
 8002484:	4a12      	ldr	r2, [pc, #72]	; (80024d0 <HCSR05_Ready+0x74>)
 8002486:	7e3b      	ldrb	r3, [r7, #24]
 8002488:	7013      	strb	r3, [r2, #0]
	// Reset measurement Variables
	HCSR05_TOF = 0;
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HCSR05_Ready+0x78>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
	HCSR05_Captured = 0;
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HCSR05_Ready+0x7c>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
	HCSR05_IC_First_Val = 0;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HCSR05_Ready+0x80>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
	HCSR05_IC_Second_Val = 0;
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HCSR05_Ready+0x84>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
	HCSR05_TOF = 0;
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <HCSR05_Ready+0x78>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
	HCSR05_Is_First_Val_Captured = 0;
 80024a8:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HCSR05_Ready+0x88>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
	HCSR05_SoundSpeed = 0;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <HCSR05_Ready+0x8c>)
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	200000d8 	.word	0x200000d8
 80024c4:	200000dc 	.word	0x200000dc
 80024c8:	200000f8 	.word	0x200000f8
 80024cc:	200000e8 	.word	0x200000e8
 80024d0:	200000f4 	.word	0x200000f4
 80024d4:	200000e0 	.word	0x200000e0
 80024d8:	200000d4 	.word	0x200000d4
 80024dc:	200000d0 	.word	0x200000d0
 80024e0:	200000f0 	.word	0x200000f0
 80024e4:	200000ec 	.word	0x200000ec
 80024e8:	200000e4 	.word	0x200000e4
 80024ec:	00000000 	.word	0x00000000

080024f0 <HCSR05_Get_WindSpeed>:
 * Get wind speed on one axis.
 * @param T Temperature (Celsius).
 * @param P Air pressure (Pa).
 * @param H Relative humidity (%).
 */
float_t HCSR05_Get_WindSpeed(int8_t T, uint32_t P, int8_t H){
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71bb      	strb	r3, [r7, #6]
	// Calculate sound speed
	HCSR05_Calculate_SoundSpeed(T, P, H);
 8002500:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	6839      	ldr	r1, [r7, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fb7c 	bl	8001c08 <HCSR05_Calculate_SoundSpeed>
	// Calculate time of flight
	HCSR05_Calculate_TOF();
 8002510:	f7ff fe44 	bl	800219c <HCSR05_Calculate_TOF>

	// If Calculated values true
	if(HCSR05_TOF > 0 && HCSR05_SoundSpeed > 0){
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HCSR05_Get_WindSpeed+0xb8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d039      	beq.n	8002590 <HCSR05_Get_WindSpeed+0xa0>
 800251c:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HCSR05_Get_WindSpeed+0xbc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f04f 0100 	mov.w	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fe2d 	bl	8001184 <__aeabi_fcmpgt>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02f      	beq.n	8002590 <HCSR05_Get_WindSpeed+0xa0>
		// Calculate and Return Wind Speed on one axis
		return (HCSR05_Distance * 1e4 / HCSR05_TOF) - HCSR05_SoundSpeed;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HCSR05_Get_WindSpeed+0xc0>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd ffc9 	bl	80004cc <__aeabi_i2d>
 800253a:	a319      	add	r3, pc, #100	; (adr r3, 80025a0 <HCSR05_Get_WindSpeed+0xb0>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe f82e 	bl	80005a0 <__aeabi_dmul>
 8002544:	4603      	mov	r3, r0
 8002546:	460c      	mov	r4, r1
 8002548:	4625      	mov	r5, r4
 800254a:	461c      	mov	r4, r3
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <HCSR05_Get_WindSpeed+0xb8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fd ffab 	bl	80004ac <__aeabi_ui2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4620      	mov	r0, r4
 800255c:	4629      	mov	r1, r5
 800255e:	f7fe f949 	bl	80007f4 <__aeabi_ddiv>
 8002562:	4603      	mov	r3, r0
 8002564:	460c      	mov	r4, r1
 8002566:	4625      	mov	r5, r4
 8002568:	461c      	mov	r4, r3
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HCSR05_Get_WindSpeed+0xbc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd ffbe 	bl	80004f0 <__aeabi_f2d>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4620      	mov	r0, r4
 800257a:	4629      	mov	r1, r5
 800257c:	f7fd fe58 	bl	8000230 <__aeabi_dsub>
 8002580:	4603      	mov	r3, r0
 8002582:	460c      	mov	r4, r1
 8002584:	4618      	mov	r0, r3
 8002586:	4621      	mov	r1, r4
 8002588:	f7fe fae2 	bl	8000b50 <__aeabi_d2f>
 800258c:	4603      	mov	r3, r0
 800258e:	e001      	b.n	8002594 <HCSR05_Get_WindSpeed+0xa4>
	}
	return 0;
 8002590:	f04f 0300 	mov.w	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bdb0      	pop	{r4, r5, r7, pc}
 800259c:	f3af 8000 	nop.w
 80025a0:	00000000 	.word	0x00000000
 80025a4:	40c38800 	.word	0x40c38800
 80025a8:	200000e0 	.word	0x200000e0
 80025ac:	200000e4 	.word	0x200000e4
 80025b0:	200000f4 	.word	0x200000f4

080025b4 <HCSR05_Calculate_WindSpeedNdAngle>:
 * Calculate speed R and theta
 * @param X_axis X axis speed.
 * @param Y_axis Y axis speed.
 * @param result Air pressure (Pa).
 */
void HCSR05_Calculate_WindSpeedNdAngle(float_t X_axis, float_t Y_axis, float_t *result){
 80025b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
	//Convert data to complex numbers
	float _Complex speed = X_axis + (Y_axis * _Complex_I);
 80025c2:	68bc      	ldr	r4, [r7, #8]
 80025c4:	f04f 0100 	mov.w	r1, #0
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7fe fc1f 	bl	8000e0c <__aeabi_fmul>
 80025ce:	4603      	mov	r3, r0
 80025d0:	68f9      	ldr	r1, [r7, #12]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fb12 	bl	8000bfc <__addsf3>
 80025d8:	4603      	mov	r3, r0
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	617c      	str	r4, [r7, #20]
	// fill result with R and theta form complex number
	*result = cabs(speed);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	697c      	ldr	r4, [r7, #20]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff84 	bl	80004f0 <__aeabi_f2d>
 80025e8:	4605      	mov	r5, r0
 80025ea:	460e      	mov	r6, r1
 80025ec:	4623      	mov	r3, r4
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ff7e 	bl	80004f0 <__aeabi_f2d>
 80025f4:	4603      	mov	r3, r0
 80025f6:	460c      	mov	r4, r1
 80025f8:	46a8      	mov	r8, r5
 80025fa:	46b1      	mov	r9, r6
 80025fc:	4625      	mov	r5, r4
 80025fe:	461c      	mov	r4, r3
 8002600:	4640      	mov	r0, r8
 8002602:	4649      	mov	r1, r9
 8002604:	4622      	mov	r2, r4
 8002606:	462b      	mov	r3, r5
 8002608:	f004 f8da 	bl	80067c0 <cabs>
 800260c:	4603      	mov	r3, r0
 800260e:	460c      	mov	r4, r1
 8002610:	4618      	mov	r0, r3
 8002612:	4621      	mov	r1, r4
 8002614:	f7fe fa9c 	bl	8000b50 <__aeabi_d2f>
 8002618:	4602      	mov	r2, r0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	601a      	str	r2, [r3, #0]
	*(result+1) = carg(speed);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	697c      	ldr	r4, [r7, #20]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ff64 	bl	80004f0 <__aeabi_f2d>
 8002628:	4605      	mov	r5, r0
 800262a:	460e      	mov	r6, r1
 800262c:	4623      	mov	r3, r4
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ff5e 	bl	80004f0 <__aeabi_f2d>
 8002634:	460a      	mov	r2, r1
 8002636:	4601      	mov	r1, r0
 8002638:	462b      	mov	r3, r5
 800263a:	4634      	mov	r4, r6
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4623      	mov	r3, r4
 8002644:	f004 f8dc 	bl	8006800 <atan2>
 8002648:	460a      	mov	r2, r1
 800264a:	4601      	mov	r1, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	1d1c      	adds	r4, r3, #4
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	f7fe fa7c 	bl	8000b50 <__aeabi_d2f>
 8002658:	4603      	mov	r3, r0
 800265a:	6023      	str	r3, [r4, #0]
}
 800265c:	bf00      	nop
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002668 <MAX44009_Begin>:
#include "MAX44009.h"

I2C_HandleTypeDef *MAX44009_hi2c;

HAL_StatusTypeDef MAX44009_Begin(I2C_HandleTypeDef *hi2c)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af04      	add	r7, sp, #16
 800266e:	6078      	str	r0, [r7, #4]
	MAX44009_hi2c = hi2c;
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <MAX44009_Begin+0x34>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6013      	str	r3, [r2, #0]
	return 	HAL_I2C_Mem_Write(MAX44009_hi2c, MAX44009_ADDR, 0x02, 1, 0x00, 1, 100);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <MAX44009_Begin+0x34>)
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	2364      	movs	r3, #100	; 0x64
 800267c:	9302      	str	r3, [sp, #8]
 800267e:	2301      	movs	r3, #1
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2300      	movs	r3, #0
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2301      	movs	r3, #1
 8002688:	2202      	movs	r2, #2
 800268a:	2194      	movs	r1, #148	; 0x94
 800268c:	f001 fd50 	bl	8004130 <HAL_I2C_Mem_Write>
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200000fc 	.word	0x200000fc

080026a0 <MAX44009_Get_Lux>:


float MAX44009_Get_Lux(void)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af04      	add	r7, sp, #16
	uint8_t data[2];

	if(HAL_I2C_Mem_Read(MAX44009_hi2c, MAX44009_ADDR, 0x03, 1, data, 1, 100) == HAL_OK){
 80026a6:	4b28      	ldr	r3, [pc, #160]	; (8002748 <MAX44009_Get_Lux+0xa8>)
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	2364      	movs	r3, #100	; 0x64
 80026ac:	9302      	str	r3, [sp, #8]
 80026ae:	2301      	movs	r3, #1
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2301      	movs	r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	2194      	movs	r1, #148	; 0x94
 80026bc:	f001 fe32 	bl	8004324 <HAL_I2C_Mem_Read>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d134      	bne.n	8002730 <MAX44009_Get_Lux+0x90>
		if(HAL_I2C_Mem_Read(MAX44009_hi2c, MAX44009_ADDR, 0x04, 1, data+1, 1, 100) == HAL_OK){
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <MAX44009_Get_Lux+0xa8>)
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	3301      	adds	r3, #1
 80026ce:	2264      	movs	r2, #100	; 0x64
 80026d0:	9202      	str	r2, [sp, #8]
 80026d2:	2201      	movs	r2, #1
 80026d4:	9201      	str	r2, [sp, #4]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2301      	movs	r3, #1
 80026da:	2204      	movs	r2, #4
 80026dc:	2194      	movs	r1, #148	; 0x94
 80026de:	f001 fe21 	bl	8004324 <HAL_I2C_Mem_Read>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d123      	bne.n	8002730 <MAX44009_Get_Lux+0x90>
				// Convert the data to lux
				uint8_t exponent = data[0]>>4;
 80026e8:	793b      	ldrb	r3, [r7, #4]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	73fb      	strb	r3, [r7, #15]
				uint32_t mantisa = ((data[0] & 0x0F)<<4) + (data[1] & 0x0F);
 80026ee:	793b      	ldrb	r3, [r7, #4]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	797b      	ldrb	r3, [r7, #5]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	4413      	add	r3, r2
 80026fc:	60bb      	str	r3, [r7, #8]
				mantisa <<= exponent;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	60bb      	str	r3, [r7, #8]
				return ((float)(mantisa) * 0.045);
 8002708:	68b8      	ldr	r0, [r7, #8]
 800270a:	f7fe fb27 	bl	8000d5c <__aeabi_ui2f>
 800270e:	4603      	mov	r3, r0
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd feed 	bl	80004f0 <__aeabi_f2d>
 8002716:	a30a      	add	r3, pc, #40	; (adr r3, 8002740 <MAX44009_Get_Lux+0xa0>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fd ff40 	bl	80005a0 <__aeabi_dmul>
 8002720:	4603      	mov	r3, r0
 8002722:	460c      	mov	r4, r1
 8002724:	4618      	mov	r0, r3
 8002726:	4621      	mov	r1, r4
 8002728:	f7fe fa12 	bl	8000b50 <__aeabi_d2f>
 800272c:	4603      	mov	r3, r0
 800272e:	e001      	b.n	8002734 <MAX44009_Get_Lux+0x94>
			}
	}
	return 0;
 8002730:	f04f 0300 	mov.w	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	f3af 8000 	nop.w
 8002740:	70a3d70a 	.word	0x70a3d70a
 8002744:	3fa70a3d 	.word	0x3fa70a3d
 8002748:	200000fc 	.word	0x200000fc

0800274c <QMC5883L_Write_Register>:
#endif

I2C_HandleTypeDef *QMC5883L_i2c;

void QMC5883L_Write_Register(uint16_t reg, int value)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af04      	add	r7, sp, #16
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(QMC5883L_i2c, QMC5883L_ADDR, reg, 1, (uint8_t *)value, 1, 100);
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <QMC5883L_Write_Register+0x30>)
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	88f9      	ldrh	r1, [r7, #6]
 8002760:	2264      	movs	r2, #100	; 0x64
 8002762:	9202      	str	r2, [sp, #8]
 8002764:	2201      	movs	r2, #1
 8002766:	9201      	str	r2, [sp, #4]
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	460a      	mov	r2, r1
 800276e:	211a      	movs	r1, #26
 8002770:	f001 fcde 	bl	8004130 <HAL_I2C_Mem_Write>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000010c 	.word	0x2000010c

08002780 <QMC5883L_Read_Register>:

void QMC5883L_Read_Register(uint8_t *data, uint16_t reg, uint16_t count)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af04      	add	r7, sp, #16
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Read(QMC5883L_i2c, QMC5883L_ADDR, reg, 1, data, count, 100);
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <QMC5883L_Read_Register+0x34>)
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	887a      	ldrh	r2, [r7, #2]
 8002796:	2364      	movs	r3, #100	; 0x64
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	883b      	ldrh	r3, [r7, #0]
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	211a      	movs	r1, #26
 80027a6:	f001 fdbd 	bl	8004324 <HAL_I2C_Mem_Read>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000010c 	.word	0x2000010c

080027b8 <QMC5883L_Reconfig>:

void QMC5883L_Reconfig()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  QMC5883L_Write_Register(QMC5883L_CONFIG,oversampling|range|rate|mode);
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <QMC5883L_Reconfig+0x2c>)
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <QMC5883L_Reconfig+0x30>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <QMC5883L_Reconfig+0x34>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <QMC5883L_Reconfig+0x38>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4619      	mov	r1, r3
 80027da:	2009      	movs	r0, #9
 80027dc:	f7ff ffb6 	bl	800274c <QMC5883L_Write_Register>
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000109 	.word	0x20000109
 80027e8:	20000110 	.word	0x20000110
 80027ec:	20000102 	.word	0x20000102
 80027f0:	20000108 	.word	0x20000108

080027f4 <QMC5883L_Reset>:

void QMC5883L_Reset()
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  QMC5883L_Write_Register(QMC5883L_RESET, 0x01);
 80027f8:	2101      	movs	r1, #1
 80027fa:	200b      	movs	r0, #11
 80027fc:	f7ff ffa6 	bl	800274c <QMC5883L_Write_Register>
  QMC5883L_Reconfig();
 8002800:	f7ff ffda 	bl	80027b8 <QMC5883L_Reconfig>
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <QMC5883L_Set_Sampling_Rate>:
  }
  QMC5883L_Reconfig();
}

void QMC5883L_Set_Sampling_Rate( int x )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  switch(x) {
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b32      	cmp	r3, #50	; 0x32
 8002814:	d00d      	beq.n	8002832 <QMC5883L_Set_Sampling_Rate+0x2a>
 8002816:	2b32      	cmp	r3, #50	; 0x32
 8002818:	dc02      	bgt.n	8002820 <QMC5883L_Set_Sampling_Rate+0x18>
 800281a:	2b0a      	cmp	r3, #10
 800281c:	d005      	beq.n	800282a <QMC5883L_Set_Sampling_Rate+0x22>
 800281e:	e014      	b.n	800284a <QMC5883L_Set_Sampling_Rate+0x42>
 8002820:	2b64      	cmp	r3, #100	; 0x64
 8002822:	d00a      	beq.n	800283a <QMC5883L_Set_Sampling_Rate+0x32>
 8002824:	2bc8      	cmp	r3, #200	; 0xc8
 8002826:	d00c      	beq.n	8002842 <QMC5883L_Set_Sampling_Rate+0x3a>
 8002828:	e00f      	b.n	800284a <QMC5883L_Set_Sampling_Rate+0x42>
    case 10:
      rate = QMC5883L_CONFIG_10HZ;
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <QMC5883L_Set_Sampling_Rate+0x50>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
      break;
 8002830:	e00b      	b.n	800284a <QMC5883L_Set_Sampling_Rate+0x42>
    case 50:
      rate = QMC5883L_CONFIG_50HZ;
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <QMC5883L_Set_Sampling_Rate+0x50>)
 8002834:	2204      	movs	r2, #4
 8002836:	701a      	strb	r2, [r3, #0]
      break;
 8002838:	e007      	b.n	800284a <QMC5883L_Set_Sampling_Rate+0x42>
    case 100:
      rate = QMC5883L_CONFIG_100HZ;
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <QMC5883L_Set_Sampling_Rate+0x50>)
 800283c:	2208      	movs	r2, #8
 800283e:	701a      	strb	r2, [r3, #0]
      break;
 8002840:	e003      	b.n	800284a <QMC5883L_Set_Sampling_Rate+0x42>
    case 200:
      rate = QMC5883L_CONFIG_200HZ;
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <QMC5883L_Set_Sampling_Rate+0x50>)
 8002844:	220c      	movs	r2, #12
 8002846:	701a      	strb	r2, [r3, #0]
      break;
 8002848:	bf00      	nop
  }
  QMC5883L_Reconfig();
 800284a:	f7ff ffb5 	bl	80027b8 <QMC5883L_Reconfig>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000102 	.word	0x20000102

0800285c <QMC5883L_Init>:

void QMC5883L_Init(I2C_HandleTypeDef *i2c) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	QMC5883L_i2c = i2c;
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <QMC5883L_Init+0x38>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  /* This assumes the wire library has been initialized. */
  addr = QMC5883L_ADDR;
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <QMC5883L_Init+0x3c>)
 800286c:	221a      	movs	r2, #26
 800286e:	701a      	strb	r2, [r3, #0]
  oversampling = QMC5883L_CONFIG_OS512;
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <QMC5883L_Init+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
  range = QMC5883L_CONFIG_2GAUSS;
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <QMC5883L_Init+0x44>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
  rate = QMC5883L_CONFIG_50HZ;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <QMC5883L_Init+0x48>)
 800287e:	2204      	movs	r2, #4
 8002880:	701a      	strb	r2, [r3, #0]
  mode = QMC5883L_CONFIG_CONT;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <QMC5883L_Init+0x4c>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
  QMC5883L_Reset();
 8002888:	f7ff ffb4 	bl	80027f4 <QMC5883L_Reset>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	2000010c 	.word	0x2000010c
 8002898:	2000010a 	.word	0x2000010a
 800289c:	20000109 	.word	0x20000109
 80028a0:	20000110 	.word	0x20000110
 80028a4:	20000102 	.word	0x20000102
 80028a8:	20000108 	.word	0x20000108

080028ac <QMC5883L_Ready>:

int QMC5883L_Ready()
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
	uint8_t data;
	QMC5883L_Read_Register(&data,QMC5883L_STATUS,1);
 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	2201      	movs	r2, #1
 80028b6:	2106      	movs	r1, #6
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff61 	bl	8002780 <QMC5883L_Read_Register>
  if(!data) return 0;
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <QMC5883L_Ready+0x1c>
 80028c4:	2300      	movs	r3, #0
 80028c6:	e002      	b.n	80028ce <QMC5883L_Ready+0x22>
  return data & QMC5883L_STATUS_DRDY;
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 0301 	and.w	r3, r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <QMC5883L_ReadRaw>:

int QMC5883L_ReadRaw( int16_t *x, int16_t *y, int16_t *z, int16_t *t )
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	603b      	str	r3, [r7, #0]
  while(!QMC5883L_Ready()) {}
 80028e4:	bf00      	nop
 80028e6:	f7ff ffe1 	bl	80028ac <QMC5883L_Ready>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0fa      	beq.n	80028e6 <QMC5883L_ReadRaw+0x10>

  uint8_t data[6];

  QMC5883L_Read_Register(&data,QMC5883L_X_LSB,6);
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	2206      	movs	r2, #6
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff41 	bl	8002780 <QMC5883L_Read_Register>

  *x = data[0] | (data[1]<<8);
 80028fe:	7c3b      	ldrb	r3, [r7, #16]
 8002900:	b21a      	sxth	r2, r3
 8002902:	7c7b      	ldrb	r3, [r7, #17]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	b21b      	sxth	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b21a      	sxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	801a      	strh	r2, [r3, #0]
  *y = data[2] | (data[3]<<8);
 8002910:	7cbb      	ldrb	r3, [r7, #18]
 8002912:	b21a      	sxth	r2, r3
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	b21b      	sxth	r3, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	b21a      	sxth	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	801a      	strh	r2, [r3, #0]
  *z = data[4] | (data[5]<<8);
 8002922:	7d3b      	ldrb	r3, [r7, #20]
 8002924:	b21a      	sxth	r2, r3
 8002926:	7d7b      	ldrb	r3, [r7, #21]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	b21b      	sxth	r3, r3
 800292c:	4313      	orrs	r3, r2
 800292e:	b21a      	sxth	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	801a      	strh	r2, [r3, #0]

  return 1;
 8002934:	2301      	movs	r3, #1
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <QMC5883L_Read_Heading>:
  xhigh = yhigh = 0;
  xlow = ylow = 0;
}

int QMC5883L_Read_Heading()
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
  int16_t x, y, z, t;

  if(!QMC5883L_ReadRaw(&x,&y,&z,&t)) return 0;
 8002946:	1d3b      	adds	r3, r7, #4
 8002948:	1dba      	adds	r2, r7, #6
 800294a:	f107 0108 	add.w	r1, r7, #8
 800294e:	f107 000a 	add.w	r0, r7, #10
 8002952:	f7ff ffc0 	bl	80028d6 <QMC5883L_ReadRaw>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <QMC5883L_Read_Heading+0x20>
 800295c:	2300      	movs	r3, #0
 800295e:	e0c1      	b.n	8002ae4 <QMC5883L_Read_Heading+0x1a4>

  /* Update the observed boundaries of the measurements */

  if(x<xlow) xlow = x;
 8002960:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002964:	4b64      	ldr	r3, [pc, #400]	; (8002af8 <QMC5883L_Read_Heading+0x1b8>)
 8002966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296a:	429a      	cmp	r2, r3
 800296c:	da03      	bge.n	8002976 <QMC5883L_Read_Heading+0x36>
 800296e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002972:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <QMC5883L_Read_Heading+0x1b8>)
 8002974:	801a      	strh	r2, [r3, #0]
  if(x>xhigh) xhigh = x;
 8002976:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800297a:	4b60      	ldr	r3, [pc, #384]	; (8002afc <QMC5883L_Read_Heading+0x1bc>)
 800297c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002980:	429a      	cmp	r2, r3
 8002982:	dd03      	ble.n	800298c <QMC5883L_Read_Heading+0x4c>
 8002984:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002988:	4b5c      	ldr	r3, [pc, #368]	; (8002afc <QMC5883L_Read_Heading+0x1bc>)
 800298a:	801a      	strh	r2, [r3, #0]
  if(y<ylow) ylow = y;
 800298c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002990:	4b5b      	ldr	r3, [pc, #364]	; (8002b00 <QMC5883L_Read_Heading+0x1c0>)
 8002992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002996:	429a      	cmp	r2, r3
 8002998:	da03      	bge.n	80029a2 <QMC5883L_Read_Heading+0x62>
 800299a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800299e:	4b58      	ldr	r3, [pc, #352]	; (8002b00 <QMC5883L_Read_Heading+0x1c0>)
 80029a0:	801a      	strh	r2, [r3, #0]
  if(y>yhigh) yhigh = y;
 80029a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80029a6:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <QMC5883L_Read_Heading+0x1c4>)
 80029a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dd03      	ble.n	80029b8 <QMC5883L_Read_Heading+0x78>
 80029b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80029b4:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <QMC5883L_Read_Heading+0x1c4>)
 80029b6:	801a      	strh	r2, [r3, #0]

  /* Bail out if not enough data is available. */

  if( xlow==xhigh || ylow==yhigh ) return 0;
 80029b8:	4b4f      	ldr	r3, [pc, #316]	; (8002af8 <QMC5883L_Read_Heading+0x1b8>)
 80029ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029be:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <QMC5883L_Read_Heading+0x1bc>)
 80029c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d007      	beq.n	80029d8 <QMC5883L_Read_Heading+0x98>
 80029c8:	4b4d      	ldr	r3, [pc, #308]	; (8002b00 <QMC5883L_Read_Heading+0x1c0>)
 80029ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029ce:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <QMC5883L_Read_Heading+0x1c4>)
 80029d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d101      	bne.n	80029dc <QMC5883L_Read_Heading+0x9c>
 80029d8:	2300      	movs	r3, #0
 80029da:	e083      	b.n	8002ae4 <QMC5883L_Read_Heading+0x1a4>

  /* Recenter the measurement by subtracting the average */

  x -= (xhigh+xlow)/2;
 80029dc:	4b47      	ldr	r3, [pc, #284]	; (8002afc <QMC5883L_Read_Heading+0x1bc>)
 80029de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <QMC5883L_Read_Heading+0x1b8>)
 80029e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ea:	4413      	add	r3, r2
 80029ec:	0fda      	lsrs	r2, r3, #31
 80029ee:	4413      	add	r3, r2
 80029f0:	105b      	asrs	r3, r3, #1
 80029f2:	425b      	negs	r3, r3
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	817b      	strh	r3, [r7, #10]
  y -= (yhigh+ylow)/2;
 8002a04:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <QMC5883L_Read_Heading+0x1c4>)
 8002a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b3c      	ldr	r3, [pc, #240]	; (8002b00 <QMC5883L_Read_Heading+0x1c0>)
 8002a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a12:	4413      	add	r3, r2
 8002a14:	0fda      	lsrs	r2, r3, #31
 8002a16:	4413      	add	r3, r2
 8002a18:	105b      	asrs	r3, r3, #1
 8002a1a:	425b      	negs	r3, r3
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	813b      	strh	r3, [r7, #8]

  /* Rescale the measurement to the range observed. */

  float fx = (float)x/(xhigh-xlow);
 8002a2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe f997 	bl	8000d64 <__aeabi_i2f>
 8002a36:	4604      	mov	r4, r0
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <QMC5883L_Read_Heading+0x1bc>)
 8002a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <QMC5883L_Read_Heading+0x1b8>)
 8002a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f98b 	bl	8000d64 <__aeabi_i2f>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4619      	mov	r1, r3
 8002a52:	4620      	mov	r0, r4
 8002a54:	f7fe fa8e 	bl	8000f74 <__aeabi_fdiv>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	613b      	str	r3, [r7, #16]
  float fy = (float)y/(yhigh-ylow);
 8002a5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe f97f 	bl	8000d64 <__aeabi_i2f>
 8002a66:	4604      	mov	r4, r0
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <QMC5883L_Read_Heading+0x1c4>)
 8002a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <QMC5883L_Read_Heading+0x1c0>)
 8002a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe f973 	bl	8000d64 <__aeabi_i2f>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4619      	mov	r1, r3
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7fe fa76 	bl	8000f74 <__aeabi_fdiv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	60fb      	str	r3, [r7, #12]

  int heading = 180.0*atan2(fy,fx)/M_PI;
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7fd fd2f 	bl	80004f0 <__aeabi_f2d>
 8002a92:	4604      	mov	r4, r0
 8002a94:	460d      	mov	r5, r1
 8002a96:	6938      	ldr	r0, [r7, #16]
 8002a98:	f7fd fd2a 	bl	80004f0 <__aeabi_f2d>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	f003 feac 	bl	8006800 <atan2>
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <QMC5883L_Read_Heading+0x1c8>)
 8002aae:	f7fd fd77 	bl	80005a0 <__aeabi_dmul>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	4621      	mov	r1, r4
 8002aba:	a30d      	add	r3, pc, #52	; (adr r3, 8002af0 <QMC5883L_Read_Heading+0x1b0>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fe98 	bl	80007f4 <__aeabi_ddiv>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	4621      	mov	r1, r4
 8002acc:	f7fe f818 	bl	8000b00 <__aeabi_d2iz>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	617b      	str	r3, [r7, #20]
  if(heading<=0) heading += 360;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	dc03      	bgt.n	8002ae2 <QMC5883L_Read_Heading+0x1a2>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ae0:	617b      	str	r3, [r7, #20]

  return heading;
 8002ae2:	697b      	ldr	r3, [r7, #20]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bdb0      	pop	{r4, r5, r7, pc}
 8002aec:	f3af 8000 	nop.w
 8002af0:	54442d18 	.word	0x54442d18
 8002af4:	400921fb 	.word	0x400921fb
 8002af8:	20000112 	.word	0x20000112
 8002afc:	20000106 	.word	0x20000106
 8002b00:	20000100 	.word	0x20000100
 8002b04:	20000104 	.word	0x20000104
 8002b08:	40668000 	.word	0x40668000

08002b0c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <DWT_Init+0x38>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10e      	bne.n	8002b3a <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <DWT_Init+0x38>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <DWT_Init+0x38>)
 8002b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b26:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <DWT_Init+0x3c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <DWT_Init+0x3c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <DWT_Init+0x3c>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6013      	str	r3, [r2, #0]
    }
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000edf0 	.word	0xe000edf0
 8002b48:	e0001000 	.word	0xe0001000

08002b4c <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <DWT_Delay+0x3c>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <DWT_Delay+0x40>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <DWT_Delay+0x44>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	0c9a      	lsrs	r2, r3, #18
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8002b6e:	bf00      	nop
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <DWT_Delay+0x3c>)
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d8f8      	bhi.n	8002b70 <DWT_Delay+0x24>
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	e0001000 	.word	0xe0001000
 8002b8c:	20000004 	.word	0x20000004
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b9a:	f000 fb71 	bl	8003280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b9e:	f000 f88f 	bl	8002cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ba2:	f000 f98d 	bl	8002ec0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ba6:	f000 f8df 	bl	8002d68 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002baa:	f000 f90b 	bl	8002dc4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	//BMP180 init
	BMP180_Init(&hi2c1);
 8002bae:	4839      	ldr	r0, [pc, #228]	; (8002c94 <main+0x100>)
 8002bb0:	f7fe fd52 	bl	8001658 <BMP180_Init>
	BMP180_SetOversampling(BMP180_LOW);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe fd5d 	bl	8001674 <BMP180_SetOversampling>
	BMP180_UpdateCalibrationData();
 8002bba:	f7fe fd6b 	bl	8001694 <BMP180_UpdateCalibrationData>
	// MAx44009 init
	MAX44009_Begin(&hi2c1);
 8002bbe:	4835      	ldr	r0, [pc, #212]	; (8002c94 <main+0x100>)
 8002bc0:	f7ff fd52 	bl	8002668 <MAX44009_Begin>
	// HMC5883L init
	QMC5883L_Init(&hi2c1);
 8002bc4:	4833      	ldr	r0, [pc, #204]	; (8002c94 <main+0x100>)
 8002bc6:	f7ff fe49 	bl	800285c <QMC5883L_Init>
	QMC5883L_Set_Sampling_Rate(50);
 8002bca:	2032      	movs	r0, #50	; 0x32
 8002bcc:	f7ff fe1c 	bl	8002808 <QMC5883L_Set_Sampling_Rate>
	// AHT10 init
	AHT10_Init(&hi2c1);
 8002bd0:	4830      	ldr	r0, [pc, #192]	; (8002c94 <main+0x100>)
 8002bd2:	f7fe fc89 	bl	80014e8 <AHT10_Init>
	// microsecond delay init
	HCSR05_Init();
 8002bd6:	f7ff f811 	bl	8001bfc <HCSR05_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Reads temperature.
	BMP180_Temperature = BMP180_GetTemperature();
 8002bda:	f7fe feb1 	bl	8001940 <BMP180_GetTemperature>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <main+0x104>)
 8002be2:	601a      	str	r2, [r3, #0]

	// Reads pressure.
	BMP180_Pressure = BMP180_GetPressure();
 8002be4:	f7fe fec8 	bl	8001978 <BMP180_GetPressure>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <main+0x108>)
 8002bec:	601a      	str	r2, [r3, #0]

	// Reads light intensity.
	lux = MAX44009_Get_Lux();
 8002bee:	f7ff fd57 	bl	80026a0 <MAX44009_Get_Lux>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <main+0x10c>)
 8002bf6:	601a      	str	r2, [r3, #0]

	// Reads compass.
	heading = QMC5883L_Read_Heading();
 8002bf8:	f7ff fea2 	bl	8002940 <QMC5883L_Read_Heading>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <main+0x110>)
 8002c00:	601a      	str	r2, [r3, #0]

	// Reads temperature and hum.
	AHT10_GetTemperature_hum(TempHum);
 8002c02:	4829      	ldr	r0, [pc, #164]	; (8002ca8 <main+0x114>)
 8002c04:	f7fe fc94 	bl	8001530 <AHT10_GetTemperature_hum>


	// Get X asis wind speed
	HCSR05_Ready(X_axis_echo_GPIO_Port, X_axis_echo_Pin, &htim1, TIM_CHANNEL_1, HCSR05_DISTANCE);
 8002c08:	2306      	movs	r3, #6
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	4a27      	ldr	r2, [pc, #156]	; (8002cac <main+0x118>)
 8002c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c14:	4826      	ldr	r0, [pc, #152]	; (8002cb0 <main+0x11c>)
 8002c16:	f7ff fc21 	bl	800245c <HCSR05_Ready>
	X_axis_wind_speed = HCSR05_Get_WindSpeed((int8_t) BMP180_Temperature, (uint32_t) BMP180_Pressure, (int8_t) TempHum[1]);
 8002c1a:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <main+0x104>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe faba 	bl	8001198 <__aeabi_f2iz>
 8002c24:	4603      	mov	r3, r0
 8002c26:	b258      	sxtb	r0, r3
 8002c28:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <main+0x108>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <main+0x114>)
 8002c30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002c34:	461a      	mov	r2, r3
 8002c36:	f7ff fc5b 	bl	80024f0 <HCSR05_Get_WindSpeed>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	; (8002cb4 <main+0x120>)
 8002c3e:	601a      	str	r2, [r3, #0]

	// Get Y asis wind speed
	HCSR05_Ready(Y_axis_echo_GPIO_Port, Y_axis_echo_Pin, &htim1, TIM_CHANNEL_2, HCSR05_DISTANCE);
 8002c40:	2306      	movs	r3, #6
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2304      	movs	r3, #4
 8002c46:	4a19      	ldr	r2, [pc, #100]	; (8002cac <main+0x118>)
 8002c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c4c:	4818      	ldr	r0, [pc, #96]	; (8002cb0 <main+0x11c>)
 8002c4e:	f7ff fc05 	bl	800245c <HCSR05_Ready>
	Y_axis_wind_speed = HCSR05_Get_WindSpeed((int8_t) BMP180_Temperature, (uint32_t) BMP180_Pressure, (int8_t) TempHum[1]);
 8002c52:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <main+0x104>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fa9e 	bl	8001198 <__aeabi_f2iz>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	b258      	sxtb	r0, r3
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <main+0x108>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4619      	mov	r1, r3
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <main+0x114>)
 8002c68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f7ff fc3f 	bl	80024f0 <HCSR05_Get_WindSpeed>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <main+0x124>)
 8002c76:	601a      	str	r2, [r3, #0]

	// Calculate wind speed and direction
	HCSR05_Calculate_WindSpeedNdAngle(X_axis_wind_speed, Y_axis_wind_speed, wind);
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <main+0x120>)
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <main+0x124>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <main+0x128>)
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7ff fc96 	bl	80025b4 <HCSR05_Calculate_WindSpeedNdAngle>

	// delay
	HAL_Delay(500);
 8002c88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c8c:	f000 fb5a 	bl	8003344 <HAL_Delay>
	BMP180_Temperature = BMP180_GetTemperature();
 8002c90:	e7a3      	b.n	8002bda <main+0x46>
 8002c92:	bf00      	nop
 8002c94:	20000114 	.word	0x20000114
 8002c98:	200001bc 	.word	0x200001bc
 8002c9c:	2000016c 	.word	0x2000016c
 8002ca0:	20000170 	.word	0x20000170
 8002ca4:	200001c0 	.word	0x200001c0
 8002ca8:	20000168 	.word	0x20000168
 8002cac:	2000017c 	.word	0x2000017c
 8002cb0:	40011800 	.word	0x40011800
 8002cb4:	20000094 	.word	0x20000094
 8002cb8:	20000098 	.word	0x20000098
 8002cbc:	20000174 	.word	0x20000174

08002cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b094      	sub	sp, #80	; 0x50
 8002cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cc6:	f107 0318 	add.w	r3, r7, #24
 8002cca:	2238      	movs	r2, #56	; 0x38
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fd6e 	bl	80067b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8002cec:	2304      	movs	r3, #4
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cf8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d04:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8002d0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002d14:	2340      	movs	r3, #64	; 0x40
 8002d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d18:	f107 0318 	add.w	r3, r7, #24
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 f999 	bl	8005054 <HAL_RCC_OscConfig>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002d28:	f000 f92d 	bl	8002f86 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d2c:	230f      	movs	r3, #15
 8002d2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d30:	2302      	movs	r3, #2
 8002d32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 fc9a 	bl	8005680 <HAL_RCC_ClockConfig>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002d52:	f000 f918 	bl	8002f86 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8002d56:	4b03      	ldr	r3, [pc, #12]	; (8002d64 <SystemClock_Config+0xa4>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	3750      	adds	r7, #80	; 0x50
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	42420070 	.word	0x42420070

08002d68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002d6e:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <MX_I2C1_Init+0x54>)
 8002d70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002d74:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <MX_I2C1_Init+0x58>)
 8002d76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002d86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002da4:	4804      	ldr	r0, [pc, #16]	; (8002db8 <MX_I2C1_Init+0x50>)
 8002da6:	f000 fd6f 	bl	8003888 <HAL_I2C_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002db0:	f000 f8e9 	bl	8002f86 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000114 	.word	0x20000114
 8002dbc:	40005400 	.word	0x40005400
 8002dc0:	000186a0 	.word	0x000186a0

08002dc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dca:	f107 0318 	add.w	r3, r7, #24
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002de2:	463b      	mov	r3, r7
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dee:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002df0:	4a32      	ldr	r2, [pc, #200]	; (8002ebc <MX_TIM1_Init+0xf8>)
 8002df2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002df6:	2247      	movs	r2, #71	; 0x47
 8002df8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002e02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002e06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e08:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e14:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e1a:	4827      	ldr	r0, [pc, #156]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002e1c:	f002 fe12 	bl	8005a44 <HAL_TIM_Base_Init>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8002e26:	f000 f8ae 	bl	8002f86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e2e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e30:	f107 0318 	add.w	r3, r7, #24
 8002e34:	4619      	mov	r1, r3
 8002e36:	4820      	ldr	r0, [pc, #128]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002e38:	f003 f8e0 	bl	8005ffc <HAL_TIM_ConfigClockSource>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002e42:	f000 f8a0 	bl	8002f86 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002e46:	481c      	ldr	r0, [pc, #112]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002e48:	f002 fe27 	bl	8005a9a <HAL_TIM_IC_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002e52:	f000 f898 	bl	8002f86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e5e:	f107 0310 	add.w	r3, r7, #16
 8002e62:	4619      	mov	r1, r3
 8002e64:	4814      	ldr	r0, [pc, #80]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002e66:	f003 fc22 	bl	80066ae <HAL_TIMEx_MasterConfigSynchronization>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8002e70:	f000 f889 	bl	8002f86 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e74:	2300      	movs	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e84:	463b      	mov	r3, r7
 8002e86:	2200      	movs	r2, #0
 8002e88:	4619      	mov	r1, r3
 8002e8a:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002e8c:	f003 f81a 	bl	8005ec4 <HAL_TIM_IC_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002e96:	f000 f876 	bl	8002f86 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_TIM1_Init+0xf4>)
 8002ea2:	f003 f80f 	bl	8005ec4 <HAL_TIM_IC_ConfigChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002eac:	f000 f86b 	bl	8002f86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002eb0:	bf00      	nop
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	2000017c 	.word	0x2000017c
 8002ebc:	40012c00 	.word	0x40012c00

08002ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec6:	f107 0310 	add.w	r3, r7, #16
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed4:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002eda:	f043 0310 	orr.w	r3, r3, #16
 8002ede:	6193      	str	r3, [r2, #24]
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef6:	6193      	str	r3, [r2, #24]
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f04:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002f0a:	f043 0304 	orr.w	r3, r3, #4
 8002f0e:	6193      	str	r3, [r2, #24]
 8002f10:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	6193      	str	r3, [r2, #24]
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <MX_GPIO_Init+0xa8>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, X_axis_trigger_Pin|Y_axis_trigger_Pin, GPIO_PIN_RESET);
 8002f34:	2200      	movs	r2, #0
 8002f36:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002f3a:	480c      	ldr	r0, [pc, #48]	; (8002f6c <MX_GPIO_Init+0xac>)
 8002f3c:	f000 fc8c 	bl	8003858 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : X_axis_trigger_Pin Y_axis_trigger_Pin */
  GPIO_InitStruct.Pin = X_axis_trigger_Pin|Y_axis_trigger_Pin;
 8002f40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f46:	2301      	movs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	4619      	mov	r1, r3
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <MX_GPIO_Init+0xac>)
 8002f5a:	f000 fb23 	bl	80035a4 <HAL_GPIO_Init>

}
 8002f5e:	bf00      	nop
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40011800 	.word	0x40011800

08002f70 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	HCSR05_TIM_Callback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff f957 	bl	800222c <HCSR05_TIM_Callback>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6193      	str	r3, [r2, #24]
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	61d3      	str	r3, [r2, #28]
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_MspInit+0x5c>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_MspInit+0x60>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_MspInit+0x60>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40010000 	.word	0x40010000

08002ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <HAL_I2C_MspInit+0x90>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d132      	bne.n	800307e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003018:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_I2C_MspInit+0x94>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_I2C_MspInit+0x94>)
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	6193      	str	r3, [r2, #24]
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_I2C_MspInit+0x94>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003030:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003036:	2312      	movs	r3, #18
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800303a:	2303      	movs	r3, #3
 800303c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303e:	f107 0314 	add.w	r3, r7, #20
 8003042:	4619      	mov	r1, r3
 8003044:	4812      	ldr	r0, [pc, #72]	; (8003090 <HAL_I2C_MspInit+0x98>)
 8003046:	f000 faad 	bl	80035a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_I2C_MspInit+0x9c>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	f043 0302 	orr.w	r3, r3, #2
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
 8003060:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <HAL_I2C_MspInit+0x9c>)
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_I2C_MspInit+0x94>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_I2C_MspInit+0x94>)
 800306c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003070:	61d3      	str	r3, [r2, #28]
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_I2C_MspInit+0x94>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800307e:	bf00      	nop
 8003080:	3728      	adds	r7, #40	; 0x28
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40005400 	.word	0x40005400
 800308c:	40021000 	.word	0x40021000
 8003090:	40010c00 	.word	0x40010c00
 8003094:	40010000 	.word	0x40010000

08003098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a23      	ldr	r2, [pc, #140]	; (8003140 <HAL_TIM_Base_MspInit+0xa8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d13e      	bne.n	8003136 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030b8:	4b22      	ldr	r3, [pc, #136]	; (8003144 <HAL_TIM_Base_MspInit+0xac>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a21      	ldr	r2, [pc, #132]	; (8003144 <HAL_TIM_Base_MspInit+0xac>)
 80030be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <HAL_TIM_Base_MspInit+0xac>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_TIM_Base_MspInit+0xac>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <HAL_TIM_Base_MspInit+0xac>)
 80030d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_TIM_Base_MspInit+0xac>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = X_axis_echo_Pin|Y_axis_echo_Pin;
 80030e8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80030ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	4812      	ldr	r0, [pc, #72]	; (8003148 <HAL_TIM_Base_MspInit+0xb0>)
 80030fe:	f000 fa51 	bl	80035a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_TIM_Base_MspInit+0xb4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <HAL_TIM_Base_MspInit+0xb4>)
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	6053      	str	r3, [r2, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003126:	2200      	movs	r2, #0
 8003128:	2100      	movs	r1, #0
 800312a:	201b      	movs	r0, #27
 800312c:	f000 fa03 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003130:	201b      	movs	r0, #27
 8003132:	f000 fa1c 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003136:	bf00      	nop
 8003138:	3728      	adds	r7, #40	; 0x28
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40012c00 	.word	0x40012c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40011800 	.word	0x40011800
 800314c:	40010000 	.word	0x40010000

08003150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003160:	e7fe      	b.n	8003160 <HardFault_Handler+0x4>

08003162 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003166:	e7fe      	b.n	8003166 <MemManage_Handler+0x4>

08003168 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800316c:	e7fe      	b.n	800316c <BusFault_Handler+0x4>

0800316e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003172:	e7fe      	b.n	8003172 <UsageFault_Handler+0x4>

08003174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800319c:	f000 f8b6 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031a8:	4802      	ldr	r0, [pc, #8]	; (80031b4 <TIM1_CC_IRQHandler+0x10>)
 80031aa:	f002 fd83 	bl	8005cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000017c 	.word	0x2000017c

080031b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <SystemInit+0x70>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <SystemInit+0x70>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <SystemInit+0x70>)
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4916      	ldr	r1, [pc, #88]	; (8003228 <SystemInit+0x70>)
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <SystemInit+0x74>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <SystemInit+0x70>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a13      	ldr	r2, [pc, #76]	; (8003228 <SystemInit+0x70>)
 80031da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <SystemInit+0x70>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0f      	ldr	r2, [pc, #60]	; (8003228 <SystemInit+0x70>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <SystemInit+0x70>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <SystemInit+0x70>)
 80031f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80031fa:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <SystemInit+0x70>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a09      	ldr	r2, [pc, #36]	; (8003228 <SystemInit+0x70>)
 8003202:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003206:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <SystemInit+0x70>)
 800320a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800320e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SystemInit+0x70>)
 8003212:	2200      	movs	r2, #0
 8003214:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <SystemInit+0x78>)
 8003218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800321c:	609a      	str	r2, [r3, #8]
#endif 
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	f0ff0000 	.word	0xf0ff0000
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003234:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003236:	e003      	b.n	8003240 <LoopCopyDataInit>

08003238 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800323a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800323c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800323e:	3104      	adds	r1, #4

08003240 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003240:	480a      	ldr	r0, [pc, #40]	; (800326c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003244:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003246:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003248:	d3f6      	bcc.n	8003238 <CopyDataInit>
  ldr r2, =_sbss
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800324c:	e002      	b.n	8003254 <LoopFillZerobss>

0800324e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003250:	f842 3b04 	str.w	r3, [r2], #4

08003254 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003256:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003258:	d3f9      	bcc.n	800324e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800325a:	f7ff ffad 	bl	80031b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800325e:	f003 fa83 	bl	8006768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003262:	f7ff fc97 	bl	8002b94 <main>
  bx lr
 8003266:	4770      	bx	lr
  ldr r3, =_sidata
 8003268:	080084f0 	.word	0x080084f0
  ldr r0, =_sdata
 800326c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003270:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8003274:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003278:	200001c8 	.word	0x200001c8

0800327c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800327c:	e7fe      	b.n	800327c <ADC1_2_IRQHandler>
	...

08003280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_Init+0x28>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_Init+0x28>)
 800328a:	f043 0310 	orr.w	r3, r3, #16
 800328e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003290:	2003      	movs	r0, #3
 8003292:	f000 f945 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003296:	2000      	movs	r0, #0
 8003298:	f000 f808 	bl	80032ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800329c:	f7ff fe7a 	bl	8002f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000

080032ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_InitTick+0x54>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_InitTick+0x58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f95d 	bl	800358a <HAL_SYSTICK_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00e      	b.n	80032f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d80a      	bhi.n	80032f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e0:	2200      	movs	r2, #0
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032e8:	f000 f925 	bl	8003536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <HAL_InitTick+0x5c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000004 	.word	0x20000004
 8003304:	2000000c 	.word	0x2000000c
 8003308:	20000008 	.word	0x20000008

0800330c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_IncTick+0x1c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_IncTick+0x20>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_IncTick+0x20>)
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	2000000c 	.word	0x2000000c
 800332c:	200001c4 	.word	0x200001c4

08003330 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return uwTick;
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <HAL_GetTick+0x10>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	200001c4 	.word	0x200001c4

08003344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff fff0 	bl	8003330 <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335c:	d005      	beq.n	800336a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_Delay+0x40>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800336a:	bf00      	nop
 800336c:	f7ff ffe0 	bl	8003330 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d8f7      	bhi.n	800336c <HAL_Delay+0x28>
  {
  }
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	2000000c 	.word	0x2000000c

08003388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a4:	4013      	ands	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ba:	4a04      	ldr	r2, [pc, #16]	; (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	60d3      	str	r3, [r2, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <__NVIC_GetPriorityGrouping+0x18>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 0307 	and.w	r3, r3, #7
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db0b      	blt.n	8003416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	4906      	ldr	r1, [pc, #24]	; (8003420 <__NVIC_EnableIRQ+0x34>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2001      	movs	r0, #1
 800340e:	fa00 f202 	lsl.w	r2, r0, r2
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ec:	d301      	bcc.n	80034f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00f      	b.n	8003512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <SysTick_Config+0x40>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fa:	210f      	movs	r1, #15
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003500:	f7ff ff90 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <SysTick_Config+0x40>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <SysTick_Config+0x40>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff2d 	bl	8003388 <__NVIC_SetPriorityGrouping>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003548:	f7ff ff42 	bl	80033d0 <__NVIC_GetPriorityGrouping>
 800354c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff90 	bl	8003478 <NVIC_EncodePriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff5f 	bl	8003424 <__NVIC_SetPriority>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff35 	bl	80033ec <__NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffa2 	bl	80034dc <SysTick_Config>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b08b      	sub	sp, #44	; 0x2c
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b6:	e127      	b.n	8003808 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035b8:	2201      	movs	r2, #1
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f040 8116 	bne.w	8003802 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d034      	beq.n	8003648 <HAL_GPIO_Init+0xa4>
 80035de:	2b12      	cmp	r3, #18
 80035e0:	d80d      	bhi.n	80035fe <HAL_GPIO_Init+0x5a>
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d02b      	beq.n	800363e <HAL_GPIO_Init+0x9a>
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d804      	bhi.n	80035f4 <HAL_GPIO_Init+0x50>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d031      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d01c      	beq.n	800362c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035f2:	e048      	b.n	8003686 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d043      	beq.n	8003680 <HAL_GPIO_Init+0xdc>
 80035f8:	2b11      	cmp	r3, #17
 80035fa:	d01b      	beq.n	8003634 <HAL_GPIO_Init+0x90>
          break;
 80035fc:	e043      	b.n	8003686 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035fe:	4a89      	ldr	r2, [pc, #548]	; (8003824 <HAL_GPIO_Init+0x280>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d026      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 8003604:	4a87      	ldr	r2, [pc, #540]	; (8003824 <HAL_GPIO_Init+0x280>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d806      	bhi.n	8003618 <HAL_GPIO_Init+0x74>
 800360a:	4a87      	ldr	r2, [pc, #540]	; (8003828 <HAL_GPIO_Init+0x284>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d020      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 8003610:	4a86      	ldr	r2, [pc, #536]	; (800382c <HAL_GPIO_Init+0x288>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01d      	beq.n	8003652 <HAL_GPIO_Init+0xae>
          break;
 8003616:	e036      	b.n	8003686 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003618:	4a85      	ldr	r2, [pc, #532]	; (8003830 <HAL_GPIO_Init+0x28c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d019      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 800361e:	4a85      	ldr	r2, [pc, #532]	; (8003834 <HAL_GPIO_Init+0x290>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d016      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 8003624:	4a84      	ldr	r2, [pc, #528]	; (8003838 <HAL_GPIO_Init+0x294>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_GPIO_Init+0xae>
          break;
 800362a:	e02c      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	623b      	str	r3, [r7, #32]
          break;
 8003632:	e028      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	3304      	adds	r3, #4
 800363a:	623b      	str	r3, [r7, #32]
          break;
 800363c:	e023      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	3308      	adds	r3, #8
 8003644:	623b      	str	r3, [r7, #32]
          break;
 8003646:	e01e      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	330c      	adds	r3, #12
 800364e:	623b      	str	r3, [r7, #32]
          break;
 8003650:	e019      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800365a:	2304      	movs	r3, #4
 800365c:	623b      	str	r3, [r7, #32]
          break;
 800365e:	e012      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003668:	2308      	movs	r3, #8
 800366a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	611a      	str	r2, [r3, #16]
          break;
 8003672:	e008      	b.n	8003686 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003674:	2308      	movs	r3, #8
 8003676:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	615a      	str	r2, [r3, #20]
          break;
 800367e:	e002      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003680:	2300      	movs	r3, #0
 8003682:	623b      	str	r3, [r7, #32]
          break;
 8003684:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2bff      	cmp	r3, #255	; 0xff
 800368a:	d801      	bhi.n	8003690 <HAL_GPIO_Init+0xec>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	e001      	b.n	8003694 <HAL_GPIO_Init+0xf0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2bff      	cmp	r3, #255	; 0xff
 800369a:	d802      	bhi.n	80036a2 <HAL_GPIO_Init+0xfe>
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_Init+0x104>
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	3b08      	subs	r3, #8
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	210f      	movs	r1, #15
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	401a      	ands	r2, r3
 80036ba:	6a39      	ldr	r1, [r7, #32]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	431a      	orrs	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8096 	beq.w	8003802 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036d6:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_GPIO_Init+0x298>)
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_GPIO_Init+0x298>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6193      	str	r3, [r2, #24]
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <HAL_GPIO_Init+0x298>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036ee:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_GPIO_Init+0x29c>)
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	220f      	movs	r2, #15
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4013      	ands	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <HAL_GPIO_Init+0x2a0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x19e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4a      	ldr	r2, [pc, #296]	; (8003848 <HAL_GPIO_Init+0x2a4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x19a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a49      	ldr	r2, [pc, #292]	; (800384c <HAL_GPIO_Init+0x2a8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x196>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a48      	ldr	r2, [pc, #288]	; (8003850 <HAL_GPIO_Init+0x2ac>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x192>
 8003732:	2303      	movs	r3, #3
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x1a0>
 8003736:	2304      	movs	r3, #4
 8003738:	e004      	b.n	8003744 <HAL_GPIO_Init+0x1a0>
 800373a:	2302      	movs	r3, #2
 800373c:	e002      	b.n	8003744 <HAL_GPIO_Init+0x1a0>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_GPIO_Init+0x1a0>
 8003742:	2300      	movs	r3, #0
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	f002 0203 	and.w	r2, r2, #3
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	4093      	lsls	r3, r2
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003754:	493a      	ldr	r1, [pc, #232]	; (8003840 <HAL_GPIO_Init+0x29c>)
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800376e:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4938      	ldr	r1, [pc, #224]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
 800377a:	e006      	b.n	800378a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800377c:	4b35      	ldr	r3, [pc, #212]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	43db      	mvns	r3, r3
 8003784:	4933      	ldr	r1, [pc, #204]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 8003786:	4013      	ands	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003796:	4b2f      	ldr	r3, [pc, #188]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	492e      	ldr	r1, [pc, #184]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
 80037a2:	e006      	b.n	80037b2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037a4:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	4929      	ldr	r1, [pc, #164]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d006      	beq.n	80037cc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037be:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	4924      	ldr	r1, [pc, #144]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
 80037ca:	e006      	b.n	80037da <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	491f      	ldr	r1, [pc, #124]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	491a      	ldr	r1, [pc, #104]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60cb      	str	r3, [r1, #12]
 80037f2:	e006      	b.n	8003802 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037f4:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	4915      	ldr	r1, [pc, #84]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037fe:	4013      	ands	r3, r2
 8003800:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	3301      	adds	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	f47f aed0 	bne.w	80035b8 <HAL_GPIO_Init+0x14>
  }
}
 8003818:	bf00      	nop
 800381a:	372c      	adds	r7, #44	; 0x2c
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	10210000 	.word	0x10210000
 8003828:	10110000 	.word	0x10110000
 800382c:	10120000 	.word	0x10120000
 8003830:	10310000 	.word	0x10310000
 8003834:	10320000 	.word	0x10320000
 8003838:	10220000 	.word	0x10220000
 800383c:	40021000 	.word	0x40021000
 8003840:	40010000 	.word	0x40010000
 8003844:	40010800 	.word	0x40010800
 8003848:	40010c00 	.word	0x40010c00
 800384c:	40011000 	.word	0x40011000
 8003850:	40011400 	.word	0x40011400
 8003854:	40010400 	.word	0x40010400

08003858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
 8003864:	4613      	mov	r3, r2
 8003866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003868:	787b      	ldrb	r3, [r7, #1]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003874:	e003      	b.n	800387e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003876:	887b      	ldrh	r3, [r7, #2]
 8003878:	041a      	lsls	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	611a      	str	r2, [r3, #16]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e10f      	b.n	8003aba <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fba2 	bl	8002ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038cc:	f002 f888 	bl	80059e0 <HAL_RCC_GetPCLK1Freq>
 80038d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a7b      	ldr	r2, [pc, #492]	; (8003ac4 <HAL_I2C_Init+0x23c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d807      	bhi.n	80038ec <HAL_I2C_Init+0x64>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a7a      	ldr	r2, [pc, #488]	; (8003ac8 <HAL_I2C_Init+0x240>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	bf94      	ite	ls
 80038e4:	2301      	movls	r3, #1
 80038e6:	2300      	movhi	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	e006      	b.n	80038fa <HAL_I2C_Init+0x72>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a77      	ldr	r2, [pc, #476]	; (8003acc <HAL_I2C_Init+0x244>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	bf94      	ite	ls
 80038f4:	2301      	movls	r3, #1
 80038f6:	2300      	movhi	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0db      	b.n	8003aba <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a72      	ldr	r2, [pc, #456]	; (8003ad0 <HAL_I2C_Init+0x248>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	0c9b      	lsrs	r3, r3, #18
 800390c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a64      	ldr	r2, [pc, #400]	; (8003ac4 <HAL_I2C_Init+0x23c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d802      	bhi.n	800393c <HAL_I2C_Init+0xb4>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3301      	adds	r3, #1
 800393a:	e009      	b.n	8003950 <HAL_I2C_Init+0xc8>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	4a63      	ldr	r2, [pc, #396]	; (8003ad4 <HAL_I2C_Init+0x24c>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	3301      	adds	r3, #1
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	430b      	orrs	r3, r1
 8003956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003962:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4956      	ldr	r1, [pc, #344]	; (8003ac4 <HAL_I2C_Init+0x23c>)
 800396c:	428b      	cmp	r3, r1
 800396e:	d80d      	bhi.n	800398c <HAL_I2C_Init+0x104>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1e59      	subs	r1, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	fbb1 f3f3 	udiv	r3, r1, r3
 800397e:	3301      	adds	r3, #1
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	2b04      	cmp	r3, #4
 8003986:	bf38      	it	cc
 8003988:	2304      	movcc	r3, #4
 800398a:	e04f      	b.n	8003a2c <HAL_I2C_Init+0x1a4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d111      	bne.n	80039b8 <HAL_I2C_Init+0x130>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	440b      	add	r3, r1
 80039a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e012      	b.n	80039de <HAL_I2C_Init+0x156>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e58      	subs	r0, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	0099      	lsls	r1, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Init+0x15e>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e022      	b.n	8003a2c <HAL_I2C_Init+0x1a4>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10e      	bne.n	8003a0c <HAL_I2C_Init+0x184>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e58      	subs	r0, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6859      	ldr	r1, [r3, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	440b      	add	r3, r1
 80039fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a0a:	e00f      	b.n	8003a2c <HAL_I2C_Init+0x1a4>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6809      	ldr	r1, [r1, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6911      	ldr	r1, [r2, #16]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68d2      	ldr	r2, [r2, #12]
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	000186a0 	.word	0x000186a0
 8003ac8:	001e847f 	.word	0x001e847f
 8003acc:	003d08ff 	.word	0x003d08ff
 8003ad0:	431bde83 	.word	0x431bde83
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	817b      	strh	r3, [r7, #10]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aec:	f7ff fc20 	bl	8003330 <HAL_GetTick>
 8003af0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	f040 80e0 	bne.w	8003cc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	2319      	movs	r3, #25
 8003b06:	2201      	movs	r2, #1
 8003b08:	4970      	ldr	r1, [pc, #448]	; (8003ccc <HAL_I2C_Master_Transmit+0x1f4>)
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f001 f8c6 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
 8003b18:	e0d3      	b.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_I2C_Master_Transmit+0x50>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e0cc      	b.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ea>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d007      	beq.n	8003b4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2221      	movs	r2, #33	; 0x21
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2210      	movs	r2, #16
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	893a      	ldrh	r2, [r7, #8]
 8003b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4a50      	ldr	r2, [pc, #320]	; (8003cd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b90:	8979      	ldrh	r1, [r7, #10]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	6a3a      	ldr	r2, [r7, #32]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fdfa 	bl	8004790 <I2C_MasterRequestWrite>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e08d      	b.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bbc:	e066      	b.n	8003c8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	6a39      	ldr	r1, [r7, #32]
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f001 f940 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00d      	beq.n	8003bea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d107      	bne.n	8003be6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e06b      	b.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d11b      	bne.n	8003c60 <HAL_I2C_Master_Transmit+0x188>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d017      	beq.n	8003c60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	781a      	ldrb	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	6a39      	ldr	r1, [r7, #32]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f001 f930 	bl	8004eca <I2C_WaitOnBTFFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d107      	bne.n	8003c88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e01a      	b.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d194      	bne.n	8003bbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	00100002 	.word	0x00100002
 8003cd0:	ffff0000 	.word	0xffff0000

08003cd4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08c      	sub	sp, #48	; 0x30
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	817b      	strh	r3, [r7, #10]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ce8:	f7ff fb22 	bl	8003330 <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	f040 8213 	bne.w	8004122 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	2319      	movs	r3, #25
 8003d02:	2201      	movs	r2, #1
 8003d04:	497e      	ldr	r1, [pc, #504]	; (8003f00 <HAL_I2C_Master_Receive+0x22c>)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 ffc8 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
 8003d14:	e206      	b.n	8004124 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_I2C_Master_Receive+0x50>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e1ff      	b.n	8004124 <HAL_I2C_Master_Receive+0x450>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d007      	beq.n	8003d4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2222      	movs	r2, #34	; 0x22
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2210      	movs	r2, #16
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	893a      	ldrh	r2, [r7, #8]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4a5e      	ldr	r2, [pc, #376]	; (8003f04 <HAL_I2C_Master_Receive+0x230>)
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d8c:	8979      	ldrh	r1, [r7, #10]
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fd72 	bl	800487c <I2C_MasterRequestRead>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e1c0      	b.n	8004124 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d113      	bne.n	8003dd2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e194      	b.n	80040fc <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d11d      	bne.n	8003e16 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e12:	b662      	cpsie	i
 8003e14:	e172      	b.n	80040fc <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d11d      	bne.n	8003e5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e2e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e56:	b662      	cpsie	i
 8003e58:	e150      	b.n	80040fc <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e80:	e13c      	b.n	80040fc <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	f200 80f5 	bhi.w	8004076 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d123      	bne.n	8003edc <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f001 f857 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e13d      	b.n	8004124 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eda:	e10f      	b.n	80040fc <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d150      	bne.n	8003f86 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	2200      	movs	r2, #0
 8003eec:	4906      	ldr	r1, [pc, #24]	; (8003f08 <HAL_I2C_Master_Receive+0x234>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fed4 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e112      	b.n	8004124 <HAL_I2C_Master_Receive+0x450>
 8003efe:	bf00      	nop
 8003f00:	00100002 	.word	0x00100002
 8003f04:	ffff0000 	.word	0xffff0000
 8003f08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f0c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f50:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f84:	e0ba      	b.n	80040fc <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	4967      	ldr	r1, [pc, #412]	; (800412c <HAL_I2C_Master_Receive+0x458>)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 fe83 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0c1      	b.n	8004124 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	2200      	movs	r2, #0
 8003fec:	494f      	ldr	r1, [pc, #316]	; (800412c <HAL_I2C_Master_Receive+0x458>)
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 fe54 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e092      	b.n	8004124 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004040:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004074:	e042      	b.n	80040fc <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 ff66 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e04c      	b.n	8004124 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d118      	bne.n	80040fc <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	f47f aebe 	bne.w	8003e82 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3728      	adds	r7, #40	; 0x28
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	00010004 	.word	0x00010004

08004130 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	461a      	mov	r2, r3
 800413e:	4603      	mov	r3, r0
 8004140:	817b      	strh	r3, [r7, #10]
 8004142:	460b      	mov	r3, r1
 8004144:	813b      	strh	r3, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800414a:	f7ff f8f1 	bl	8003330 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b20      	cmp	r3, #32
 800415a:	f040 80d9 	bne.w	8004310 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2319      	movs	r3, #25
 8004164:	2201      	movs	r2, #1
 8004166:	496d      	ldr	r1, [pc, #436]	; (800431c <HAL_I2C_Mem_Write+0x1ec>)
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 fd97 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
 8004176:	e0cc      	b.n	8004312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_I2C_Mem_Write+0x56>
 8004182:	2302      	movs	r3, #2
 8004184:	e0c5      	b.n	8004312 <HAL_I2C_Mem_Write+0x1e2>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d007      	beq.n	80041ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2221      	movs	r2, #33	; 0x21
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2240      	movs	r2, #64	; 0x40
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a3a      	ldr	r2, [r7, #32]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a4d      	ldr	r2, [pc, #308]	; (8004320 <HAL_I2C_Mem_Write+0x1f0>)
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ee:	88f8      	ldrh	r0, [r7, #6]
 80041f0:	893a      	ldrh	r2, [r7, #8]
 80041f2:	8979      	ldrh	r1, [r7, #10]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4603      	mov	r3, r0
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fbf2 	bl	80049e8 <I2C_RequestMemoryWrite>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d052      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e081      	b.n	8004312 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fe18 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2b04      	cmp	r3, #4
 8004224:	d107      	bne.n	8004236 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e06b      	b.n	8004312 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b04      	cmp	r3, #4
 8004276:	d11b      	bne.n	80042b0 <HAL_I2C_Mem_Write+0x180>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	2b00      	cmp	r3, #0
 800427e:	d017      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	b29a      	uxth	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1aa      	bne.n	800420e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fe04 	bl	8004eca <I2C_WaitOnBTFFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d107      	bne.n	80042e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e016      	b.n	8004312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
  }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	00100002 	.word	0x00100002
 8004320:	ffff0000 	.word	0xffff0000

08004324 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	; 0x30
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	461a      	mov	r2, r3
 8004332:	4603      	mov	r3, r0
 8004334:	817b      	strh	r3, [r7, #10]
 8004336:	460b      	mov	r3, r1
 8004338:	813b      	strh	r3, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800433e:	f7fe fff7 	bl	8003330 <HAL_GetTick>
 8004342:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b20      	cmp	r3, #32
 800434e:	f040 8218 	bne.w	8004782 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	2319      	movs	r3, #25
 8004358:	2201      	movs	r2, #1
 800435a:	4981      	ldr	r1, [pc, #516]	; (8004560 <HAL_I2C_Mem_Read+0x23c>)
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fc9d 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
 800436a:	e20b      	b.n	8004784 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_I2C_Mem_Read+0x56>
 8004376:	2302      	movs	r3, #2
 8004378:	e204      	b.n	8004784 <HAL_I2C_Mem_Read+0x460>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d007      	beq.n	80043a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2222      	movs	r2, #34	; 0x22
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2240      	movs	r2, #64	; 0x40
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80043d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a61      	ldr	r2, [pc, #388]	; (8004564 <HAL_I2C_Mem_Read+0x240>)
 80043e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043e2:	88f8      	ldrh	r0, [r7, #6]
 80043e4:	893a      	ldrh	r2, [r7, #8]
 80043e6:	8979      	ldrh	r1, [r7, #10]
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	4603      	mov	r3, r0
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fb82 	bl	8004afc <I2C_RequestMemoryRead>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e1c0      	b.n	8004784 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	2b00      	cmp	r3, #0
 8004408:	d113      	bne.n	8004432 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	623b      	str	r3, [r7, #32]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e194      	b.n	800475c <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	2b01      	cmp	r3, #1
 8004438:	d11d      	bne.n	8004476 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004448:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800444a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004470:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004472:	b662      	cpsie	i
 8004474:	e172      	b.n	800475c <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	2b02      	cmp	r3, #2
 800447c:	d11d      	bne.n	80044ba <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800448c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800448e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044b6:	b662      	cpsie	i
 80044b8:	e150      	b.n	800475c <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044e0:	e13c      	b.n	800475c <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	f200 80f5 	bhi.w	80046d6 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d123      	bne.n	800453c <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fd27 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e13d      	b.n	8004784 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	; 0x2a
 800453a:	e10f      	b.n	800475c <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	2b02      	cmp	r3, #2
 8004542:	d150      	bne.n	80045e6 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	2200      	movs	r2, #0
 800454c:	4906      	ldr	r1, [pc, #24]	; (8004568 <HAL_I2C_Mem_Read+0x244>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fba4 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e112      	b.n	8004784 <HAL_I2C_Mem_Read+0x460>
 800455e:	bf00      	nop
 8004560:	00100002 	.word	0x00100002
 8004564:	ffff0000 	.word	0xffff0000
 8004568:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800456c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045b0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045e4:	e0ba      	b.n	800475c <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	2200      	movs	r2, #0
 80045ee:	4967      	ldr	r1, [pc, #412]	; (800478c <HAL_I2C_Mem_Read+0x468>)
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fb53 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0c1      	b.n	8004784 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004610:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	2200      	movs	r2, #0
 800464c:	494f      	ldr	r1, [pc, #316]	; (800478c <HAL_I2C_Mem_Read+0x468>)
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fb24 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e092      	b.n	8004784 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046a0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046d4:	e042      	b.n	800475c <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fc36 	bl	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e04c      	b.n	8004784 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d118      	bne.n	800475c <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f aebe 	bne.w	80044e2 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2220      	movs	r2, #32
 800476a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3728      	adds	r7, #40	; 0x28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	00010004 	.word	0x00010004

08004790 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	460b      	mov	r3, r1
 800479e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d006      	beq.n	80047ba <I2C_MasterRequestWrite+0x2a>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d003      	beq.n	80047ba <I2C_MasterRequestWrite+0x2a>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047b8:	d108      	bne.n	80047cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e00b      	b.n	80047e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	2b12      	cmp	r3, #18
 80047d2:	d107      	bne.n	80047e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fa53 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e035      	b.n	800486c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004808:	d108      	bne.n	800481c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800480a:	897b      	ldrh	r3, [r7, #10]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004818:	611a      	str	r2, [r3, #16]
 800481a:	e01b      	b.n	8004854 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800481c:	897b      	ldrh	r3, [r7, #10]
 800481e:	11db      	asrs	r3, r3, #7
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 0306 	and.w	r3, r3, #6
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f063 030f 	orn	r3, r3, #15
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <I2C_MasterRequestWrite+0xe4>)
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fa85 	bl	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e010      	b.n	800486c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4907      	ldr	r1, [pc, #28]	; (8004878 <I2C_MasterRequestWrite+0xe8>)
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fa75 	bl	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	00010008 	.word	0x00010008
 8004878:	00010002 	.word	0x00010002

0800487c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	460b      	mov	r3, r1
 800488a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d006      	beq.n	80048b6 <I2C_MasterRequestRead+0x3a>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d003      	beq.n	80048b6 <I2C_MasterRequestRead+0x3a>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048b4:	d108      	bne.n	80048c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e00b      	b.n	80048e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	2b11      	cmp	r3, #17
 80048ce:	d107      	bne.n	80048e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f9d5 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e06d      	b.n	80049d8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004904:	d108      	bne.n	8004918 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004906:	897b      	ldrh	r3, [r7, #10]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	b2da      	uxtb	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	611a      	str	r2, [r3, #16]
 8004916:	e053      	b.n	80049c0 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004918:	897b      	ldrh	r3, [r7, #10]
 800491a:	11db      	asrs	r3, r3, #7
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f003 0306 	and.w	r3, r3, #6
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f063 030f 	orn	r3, r3, #15
 8004928:	b2da      	uxtb	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	492a      	ldr	r1, [pc, #168]	; (80049e0 <I2C_MasterRequestRead+0x164>)
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fa07 	bl	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e048      	b.n	80049d8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004946:	897b      	ldrh	r3, [r7, #10]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4923      	ldr	r1, [pc, #140]	; (80049e4 <I2C_MasterRequestRead+0x168>)
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f9f7 	bl	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e038      	b.n	80049d8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f97f 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e017      	b.n	80049d8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049a8:	897b      	ldrh	r3, [r7, #10]
 80049aa:	11db      	asrs	r3, r3, #7
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0306 	and.w	r3, r3, #6
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f063 030e 	orn	r3, r3, #14
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4907      	ldr	r1, [pc, #28]	; (80049e4 <I2C_MasterRequestRead+0x168>)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f9bf 	bl	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	00010008 	.word	0x00010008
 80049e4:	00010002 	.word	0x00010002

080049e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	817b      	strh	r3, [r7, #10]
 80049fa:	460b      	mov	r3, r1
 80049fc:	813b      	strh	r3, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f93c 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e05f      	b.n	8004aee <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a2e:	897b      	ldrh	r3, [r7, #10]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	492d      	ldr	r1, [pc, #180]	; (8004af8 <I2C_RequestMemoryWrite+0x110>)
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f980 	bl	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e04c      	b.n	8004aee <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6c:	6a39      	ldr	r1, [r7, #32]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f9ea 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d107      	bne.n	8004a92 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e02b      	b.n	8004aee <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d105      	bne.n	8004aa8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a9c:	893b      	ldrh	r3, [r7, #8]
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	611a      	str	r2, [r3, #16]
 8004aa6:	e021      	b.n	8004aec <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aa8:	893b      	ldrh	r3, [r7, #8]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	6a39      	ldr	r1, [r7, #32]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f9c4 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d107      	bne.n	8004ade <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004adc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e005      	b.n	8004aee <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae2:	893b      	ldrh	r3, [r7, #8]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	00010002 	.word	0x00010002

08004afc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	4608      	mov	r0, r1
 8004b06:	4611      	mov	r1, r2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	817b      	strh	r3, [r7, #10]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	813b      	strh	r3, [r7, #8]
 8004b12:	4613      	mov	r3, r2
 8004b14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f8aa 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e09e      	b.n	8004c90 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	6a3a      	ldr	r2, [r7, #32]
 8004b66:	494c      	ldr	r1, [pc, #304]	; (8004c98 <I2C_RequestMemoryRead+0x19c>)
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f8ee 	bl	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e08b      	b.n	8004c90 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	6a39      	ldr	r1, [r7, #32]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f958 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d107      	bne.n	8004bb6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e06a      	b.n	8004c90 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d105      	bne.n	8004bcc <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc0:	893b      	ldrh	r3, [r7, #8]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]
 8004bca:	e021      	b.n	8004c10 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bcc:	893b      	ldrh	r3, [r7, #8]
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bdc:	6a39      	ldr	r1, [r7, #32]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f932 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00d      	beq.n	8004c06 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d107      	bne.n	8004c02 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e044      	b.n	8004c90 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c06:	893b      	ldrh	r3, [r7, #8]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	6a39      	ldr	r1, [r7, #32]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f917 	bl	8004e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d107      	bne.n	8004c38 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e029      	b.n	8004c90 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f81f 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e013      	b.n	8004c90 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c68:	897b      	ldrh	r3, [r7, #10]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	6a3a      	ldr	r2, [r7, #32]
 8004c7c:	4906      	ldr	r1, [pc, #24]	; (8004c98 <I2C_RequestMemoryRead+0x19c>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f863 	bl	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	00010002 	.word	0x00010002

08004c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cac:	e025      	b.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb4:	d021      	beq.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7fe fb3b 	bl	8003330 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d116      	bne.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e023      	b.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10d      	bne.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf0c      	ite	eq
 8004d16:	2301      	moveq	r3, #1
 8004d18:	2300      	movne	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	e00c      	b.n	8004d3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	43da      	mvns	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bf0c      	ite	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	2300      	movne	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d0b6      	beq.n	8004cae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d58:	e051      	b.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d68:	d123      	bne.n	8004db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f043 0204 	orr.w	r2, r3, #4
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e046      	b.n	8004e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004db8:	d021      	beq.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dba:	f7fe fab9 	bl	8003330 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d302      	bcc.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d116      	bne.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f043 0220 	orr.w	r2, r3, #32
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e020      	b.n	8004e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d10c      	bne.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	43da      	mvns	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4013      	ands	r3, r2
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bf14      	ite	ne
 8004e1a:	2301      	movne	r3, #1
 8004e1c:	2300      	moveq	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	e00b      	b.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d18d      	bne.n	8004d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e54:	e02d      	b.n	8004eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f8ce 	bl	8004ff8 <I2C_IsAcknowledgeFailed>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e02d      	b.n	8004ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6c:	d021      	beq.n	8004eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fe fa5f 	bl	8003330 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d116      	bne.n	8004eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e007      	b.n	8004ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d1ca      	bne.n	8004e56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed6:	e02d      	b.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 f88d 	bl	8004ff8 <I2C_IsAcknowledgeFailed>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e02d      	b.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eee:	d021      	beq.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef0:	f7fe fa1e 	bl	8003330 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d302      	bcc.n	8004f06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d116      	bne.n	8004f34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e007      	b.n	8004f44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d1ca      	bne.n	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f58:	e042      	b.n	8004fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d119      	bne.n	8004f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0210 	mvn.w	r2, #16
 8004f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e029      	b.n	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9c:	f7fe f9c8 	bl	8003330 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d302      	bcc.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d116      	bne.n	8004fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e007      	b.n	8004ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fea:	2b40      	cmp	r3, #64	; 0x40
 8004fec:	d1b5      	bne.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500e:	d11b      	bne.n	8005048 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005018:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f043 0204 	orr.w	r2, r3, #4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr

08005054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e304      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8087 	beq.w	8005182 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005074:	4b92      	ldr	r3, [pc, #584]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 030c 	and.w	r3, r3, #12
 800507c:	2b04      	cmp	r3, #4
 800507e:	d00c      	beq.n	800509a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005080:	4b8f      	ldr	r3, [pc, #572]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b08      	cmp	r3, #8
 800508a:	d112      	bne.n	80050b2 <HAL_RCC_OscConfig+0x5e>
 800508c:	4b8c      	ldr	r3, [pc, #560]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005098:	d10b      	bne.n	80050b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800509a:	4b89      	ldr	r3, [pc, #548]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d06c      	beq.n	8005180 <HAL_RCC_OscConfig+0x12c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d168      	bne.n	8005180 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e2de      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x76>
 80050bc:	4b80      	ldr	r3, [pc, #512]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a7f      	ldr	r2, [pc, #508]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e02e      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10c      	bne.n	80050ec <HAL_RCC_OscConfig+0x98>
 80050d2:	4b7b      	ldr	r3, [pc, #492]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a7a      	ldr	r2, [pc, #488]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	4b78      	ldr	r3, [pc, #480]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a77      	ldr	r2, [pc, #476]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e01d      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0xbc>
 80050f6:	4b72      	ldr	r3, [pc, #456]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a71      	ldr	r2, [pc, #452]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80050fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b6f      	ldr	r3, [pc, #444]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6e      	ldr	r2, [pc, #440]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0xd4>
 8005110:	4b6b      	ldr	r3, [pc, #428]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a6a      	ldr	r2, [pc, #424]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b68      	ldr	r3, [pc, #416]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a67      	ldr	r2, [pc, #412]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005126:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fe f8fe 	bl	8003330 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005138:	f7fe f8fa 	bl	8003330 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e292      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b5d      	ldr	r3, [pc, #372]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0xe4>
 8005156:	e014      	b.n	8005182 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fe f8ea 	bl	8003330 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005160:	f7fe f8e6 	bl	8003330 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	; 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e27e      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	4b53      	ldr	r3, [pc, #332]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x10c>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d063      	beq.n	8005256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800518e:	4b4c      	ldr	r3, [pc, #304]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800519a:	4b49      	ldr	r3, [pc, #292]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d11c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x18c>
 80051a6:	4b46      	ldr	r3, [pc, #280]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b2:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_RCC_OscConfig+0x176>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e252      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b3d      	ldr	r3, [pc, #244]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4939      	ldr	r1, [pc, #228]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051de:	e03a      	b.n	8005256 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d020      	beq.n	800522a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e8:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <HAL_RCC_OscConfig+0x270>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ee:	f7fe f89f 	bl	8003330 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fe f89b 	bl	8003330 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e233      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	4b2d      	ldr	r3, [pc, #180]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b2a      	ldr	r3, [pc, #168]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4927      	ldr	r1, [pc, #156]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
 8005228:	e015      	b.n	8005256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522a:	4b26      	ldr	r3, [pc, #152]	; (80052c4 <HAL_RCC_OscConfig+0x270>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005230:	f7fe f87e 	bl	8003330 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005238:	f7fe f87a 	bl	8003330 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e212      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d03a      	beq.n	80052d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d019      	beq.n	800529e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526a:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005270:	f7fe f85e 	bl	8003330 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005278:	f7fe f85a 	bl	8003330 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e1f2      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <HAL_RCC_OscConfig+0x26c>)
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005296:	2001      	movs	r0, #1
 8005298:	f000 fbb6 	bl	8005a08 <RCC_Delay>
 800529c:	e01c      	b.n	80052d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a4:	f7fe f844 	bl	8003330 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052aa:	e00f      	b.n	80052cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ac:	f7fe f840 	bl	8003330 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d908      	bls.n	80052cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e1d8      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	42420000 	.word	0x42420000
 80052c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052cc:	4b9b      	ldr	r3, [pc, #620]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e9      	bne.n	80052ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80a6 	beq.w	8005432 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e6:	2300      	movs	r3, #0
 80052e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ea:	4b94      	ldr	r3, [pc, #592]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	4b91      	ldr	r3, [pc, #580]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	4a90      	ldr	r2, [pc, #576]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80052fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005300:	61d3      	str	r3, [r2, #28]
 8005302:	4b8e      	ldr	r3, [pc, #568]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005312:	4b8b      	ldr	r3, [pc, #556]	; (8005540 <HAL_RCC_OscConfig+0x4ec>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d118      	bne.n	8005350 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800531e:	4b88      	ldr	r3, [pc, #544]	; (8005540 <HAL_RCC_OscConfig+0x4ec>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a87      	ldr	r2, [pc, #540]	; (8005540 <HAL_RCC_OscConfig+0x4ec>)
 8005324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532a:	f7fe f801 	bl	8003330 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005332:	f7fd fffd 	bl	8003330 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b64      	cmp	r3, #100	; 0x64
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e195      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005344:	4b7e      	ldr	r3, [pc, #504]	; (8005540 <HAL_RCC_OscConfig+0x4ec>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d106      	bne.n	8005366 <HAL_RCC_OscConfig+0x312>
 8005358:	4b78      	ldr	r3, [pc, #480]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4a77      	ldr	r2, [pc, #476]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	6213      	str	r3, [r2, #32]
 8005364:	e02d      	b.n	80053c2 <HAL_RCC_OscConfig+0x36e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10c      	bne.n	8005388 <HAL_RCC_OscConfig+0x334>
 800536e:	4b73      	ldr	r3, [pc, #460]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	4a72      	ldr	r2, [pc, #456]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	6213      	str	r3, [r2, #32]
 800537a:	4b70      	ldr	r3, [pc, #448]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	4a6f      	ldr	r2, [pc, #444]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	6213      	str	r3, [r2, #32]
 8005386:	e01c      	b.n	80053c2 <HAL_RCC_OscConfig+0x36e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b05      	cmp	r3, #5
 800538e:	d10c      	bne.n	80053aa <HAL_RCC_OscConfig+0x356>
 8005390:	4b6a      	ldr	r3, [pc, #424]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	4a69      	ldr	r2, [pc, #420]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005396:	f043 0304 	orr.w	r3, r3, #4
 800539a:	6213      	str	r3, [r2, #32]
 800539c:	4b67      	ldr	r3, [pc, #412]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	4a66      	ldr	r2, [pc, #408]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	6213      	str	r3, [r2, #32]
 80053a8:	e00b      	b.n	80053c2 <HAL_RCC_OscConfig+0x36e>
 80053aa:	4b64      	ldr	r3, [pc, #400]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	4a63      	ldr	r2, [pc, #396]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	6213      	str	r3, [r2, #32]
 80053b6:	4b61      	ldr	r3, [pc, #388]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	4a60      	ldr	r2, [pc, #384]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80053bc:	f023 0304 	bic.w	r3, r3, #4
 80053c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d015      	beq.n	80053f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ca:	f7fd ffb1 	bl	8003330 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d0:	e00a      	b.n	80053e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d2:	f7fd ffad 	bl	8003330 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e143      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e8:	4b54      	ldr	r3, [pc, #336]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ee      	beq.n	80053d2 <HAL_RCC_OscConfig+0x37e>
 80053f4:	e014      	b.n	8005420 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f6:	f7fd ff9b 	bl	8003330 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fc:	e00a      	b.n	8005414 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fd ff97 	bl	8003330 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	; 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e12d      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005414:	4b49      	ldr	r3, [pc, #292]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1ee      	bne.n	80053fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d105      	bne.n	8005432 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005426:	4b45      	ldr	r3, [pc, #276]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4a44      	ldr	r2, [pc, #272]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 800542c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005430:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 808c 	beq.w	8005554 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800543c:	4b3f      	ldr	r3, [pc, #252]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d10e      	bne.n	8005468 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800544a:	4b3c      	ldr	r3, [pc, #240]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005452:	2b08      	cmp	r3, #8
 8005454:	d108      	bne.n	8005468 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005456:	4b39      	ldr	r3, [pc, #228]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800545e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005462:	d101      	bne.n	8005468 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e103      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	2b02      	cmp	r3, #2
 800546e:	d14e      	bne.n	800550e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005470:	4b32      	ldr	r3, [pc, #200]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800547c:	4b2f      	ldr	r3, [pc, #188]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0ef      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <HAL_RCC_OscConfig+0x4f0>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005496:	f7fd ff4b 	bl	8003330 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800549e:	f7fd ff47 	bl	8003330 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b64      	cmp	r3, #100	; 0x64
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e0df      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80054b0:	4b22      	ldr	r3, [pc, #136]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f0      	bne.n	800549e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80054bc:	4b1f      	ldr	r3, [pc, #124]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	491c      	ldr	r1, [pc, #112]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80054ce:	4b1b      	ldr	r3, [pc, #108]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	4918      	ldr	r1, [pc, #96]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80054e0:	4b18      	ldr	r3, [pc, #96]	; (8005544 <HAL_RCC_OscConfig+0x4f0>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e6:	f7fd ff23 	bl	8003330 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054ee:	f7fd ff1f 	bl	8003330 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b64      	cmp	r3, #100	; 0x64
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e0b7      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005500:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x49a>
 800550c:	e022      	b.n	8005554 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800550e:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	4a0a      	ldr	r2, [pc, #40]	; (800553c <HAL_RCC_OscConfig+0x4e8>)
 8005514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005518:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <HAL_RCC_OscConfig+0x4f0>)
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005520:	f7fd ff06 	bl	8003330 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005526:	e00f      	b.n	8005548 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005528:	f7fd ff02 	bl	8003330 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b64      	cmp	r3, #100	; 0x64
 8005534:	d908      	bls.n	8005548 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e09a      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	40007000 	.word	0x40007000
 8005544:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005548:	4b4b      	ldr	r3, [pc, #300]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e9      	bne.n	8005528 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8088 	beq.w	800566e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800555e:	4b46      	ldr	r3, [pc, #280]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b08      	cmp	r3, #8
 8005568:	d068      	beq.n	800563c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d14d      	bne.n	800560e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005572:	4b42      	ldr	r3, [pc, #264]	; (800567c <HAL_RCC_OscConfig+0x628>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005578:	f7fd feda 	bl	8003330 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005580:	f7fd fed6 	bl	8003330 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e06e      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005592:	4b39      	ldr	r3, [pc, #228]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a6:	d10f      	bne.n	80055c8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80055a8:	4b33      	ldr	r3, [pc, #204]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 80055aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4931      	ldr	r1, [pc, #196]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055b6:	4b30      	ldr	r3, [pc, #192]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	f023 020f 	bic.w	r2, r3, #15
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	492d      	ldr	r1, [pc, #180]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055c8:	4b2b      	ldr	r3, [pc, #172]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	430b      	orrs	r3, r1
 80055da:	4927      	ldr	r1, [pc, #156]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e0:	4b26      	ldr	r3, [pc, #152]	; (800567c <HAL_RCC_OscConfig+0x628>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fd fea3 	bl	8003330 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fd fe9f 	bl	8003330 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e037      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005600:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0x59a>
 800560c:	e02f      	b.n	800566e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	4b1b      	ldr	r3, [pc, #108]	; (800567c <HAL_RCC_OscConfig+0x628>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7fd fe8c 	bl	8003330 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561c:	f7fd fe88 	bl	8003330 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e020      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x5c8>
 800563a:	e018      	b.n	800566e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e013      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <HAL_RCC_OscConfig+0x624>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	429a      	cmp	r2, r3
 800565a:	d106      	bne.n	800566a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005666:	429a      	cmp	r2, r3
 8005668:	d001      	beq.n	800566e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40021000 	.word	0x40021000
 800567c:	42420060 	.word	0x42420060

08005680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0d0      	b.n	8005836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005694:	4b6a      	ldr	r3, [pc, #424]	; (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d910      	bls.n	80056c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a2:	4b67      	ldr	r3, [pc, #412]	; (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 0207 	bic.w	r2, r3, #7
 80056aa:	4965      	ldr	r1, [pc, #404]	; (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b63      	ldr	r3, [pc, #396]	; (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0b8      	b.n	8005836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d020      	beq.n	8005712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056dc:	4b59      	ldr	r3, [pc, #356]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4a58      	ldr	r2, [pc, #352]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80056e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80056e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f4:	4b53      	ldr	r3, [pc, #332]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	4a52      	ldr	r2, [pc, #328]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80056fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80056fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005700:	4b50      	ldr	r3, [pc, #320]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	494d      	ldr	r1, [pc, #308]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 800570e:	4313      	orrs	r3, r2
 8005710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d040      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d107      	bne.n	8005736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005726:	4b47      	ldr	r3, [pc, #284]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d115      	bne.n	800575e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e07f      	b.n	8005836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d107      	bne.n	800574e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573e:	4b41      	ldr	r3, [pc, #260]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e073      	b.n	8005836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574e:	4b3d      	ldr	r3, [pc, #244]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e06b      	b.n	8005836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800575e:	4b39      	ldr	r3, [pc, #228]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f023 0203 	bic.w	r2, r3, #3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	4936      	ldr	r1, [pc, #216]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 800576c:	4313      	orrs	r3, r2
 800576e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005770:	f7fd fdde 	bl	8003330 <HAL_GetTick>
 8005774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005776:	e00a      	b.n	800578e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005778:	f7fd fdda 	bl	8003330 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	; 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e053      	b.n	8005836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578e:	4b2d      	ldr	r3, [pc, #180]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f003 020c 	and.w	r2, r3, #12
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	429a      	cmp	r2, r3
 800579e:	d1eb      	bne.n	8005778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057a0:	4b27      	ldr	r3, [pc, #156]	; (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d210      	bcs.n	80057d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ae:	4b24      	ldr	r3, [pc, #144]	; (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f023 0207 	bic.w	r2, r3, #7
 80057b6:	4922      	ldr	r1, [pc, #136]	; (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <HAL_RCC_ClockConfig+0x1c0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e032      	b.n	8005836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4916      	ldr	r1, [pc, #88]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d009      	beq.n	800580e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	490e      	ldr	r1, [pc, #56]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 800580a:	4313      	orrs	r3, r2
 800580c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800580e:	f000 f821 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8005812:	4601      	mov	r1, r0
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_RCC_ClockConfig+0x1c4>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <HAL_RCC_ClockConfig+0x1c8>)
 8005820:	5cd3      	ldrb	r3, [r2, r3]
 8005822:	fa21 f303 	lsr.w	r3, r1, r3
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <HAL_RCC_ClockConfig+0x1cc>)
 8005828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1d0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7fd fd3c 	bl	80032ac <HAL_InitTick>

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40022000 	.word	0x40022000
 8005844:	40021000 	.word	0x40021000
 8005848:	08008408 	.word	0x08008408
 800584c:	20000004 	.word	0x20000004
 8005850:	20000008 	.word	0x20000008

08005854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005856:	b091      	sub	sp, #68	; 0x44
 8005858:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800585a:	4b56      	ldr	r3, [pc, #344]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800585c:	f107 0414 	add.w	r4, r7, #20
 8005860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005862:	c407      	stmia	r4!, {r0, r1, r2}
 8005864:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8005866:	4b54      	ldr	r3, [pc, #336]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005868:	1d3c      	adds	r4, r7, #4
 800586a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800586c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	637b      	str	r3, [r7, #52]	; 0x34
 8005874:	2300      	movs	r3, #0
 8005876:	633b      	str	r3, [r7, #48]	; 0x30
 8005878:	2300      	movs	r3, #0
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800587c:	2300      	movs	r3, #0
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
 8005888:	2300      	movs	r3, #0
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800588c:	4b4b      	ldr	r3, [pc, #300]	; (80059bc <HAL_RCC_GetSysClockFreq+0x168>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	f003 030c 	and.w	r3, r3, #12
 8005898:	2b04      	cmp	r3, #4
 800589a:	d002      	beq.n	80058a2 <HAL_RCC_GetSysClockFreq+0x4e>
 800589c:	2b08      	cmp	r3, #8
 800589e:	d003      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x54>
 80058a0:	e07f      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058a2:	4b47      	ldr	r3, [pc, #284]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058a6:	e07f      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80058a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058aa:	0c9b      	lsrs	r3, r3, #18
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80058b4:	4413      	add	r3, r2
 80058b6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80058bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d065      	beq.n	8005992 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80058c6:	4b3d      	ldr	r3, [pc, #244]	; (80059bc <HAL_RCC_GetSysClockFreq+0x168>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80058d2:	4413      	add	r3, r2
 80058d4:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80058d8:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80058da:	4b38      	ldr	r3, [pc, #224]	; (80059bc <HAL_RCC_GetSysClockFreq+0x168>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d043      	beq.n	800596e <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80058e6:	4b35      	ldr	r3, [pc, #212]	; (80059bc <HAL_RCC_GetSysClockFreq+0x168>)
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	3301      	adds	r3, #1
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80058f4:	4b31      	ldr	r3, [pc, #196]	; (80059bc <HAL_RCC_GetSysClockFreq+0x168>)
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	3302      	adds	r3, #2
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	4619      	mov	r1, r3
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	f04f 0400 	mov.w	r4, #0
 8005910:	fb03 f502 	mul.w	r5, r3, r2
 8005914:	fb01 f004 	mul.w	r0, r1, r4
 8005918:	4428      	add	r0, r5
 800591a:	fba1 3403 	umull	r3, r4, r1, r3
 800591e:	1902      	adds	r2, r0, r4
 8005920:	4614      	mov	r4, r2
 8005922:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005924:	fb02 f104 	mul.w	r1, r2, r4
 8005928:	2200      	movs	r2, #0
 800592a:	fb02 f203 	mul.w	r2, r2, r3
 800592e:	440a      	add	r2, r1
 8005930:	4923      	ldr	r1, [pc, #140]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005932:	fba3 5601 	umull	r5, r6, r3, r1
 8005936:	1993      	adds	r3, r2, r6
 8005938:	461e      	mov	r6, r3
 800593a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593c:	4619      	mov	r1, r3
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	f04f 0400 	mov.w	r4, #0
 8005948:	fb03 fc02 	mul.w	ip, r3, r2
 800594c:	fb01 f004 	mul.w	r0, r1, r4
 8005950:	4460      	add	r0, ip
 8005952:	fba1 3403 	umull	r3, r4, r1, r3
 8005956:	1902      	adds	r2, r0, r4
 8005958:	4614      	mov	r4, r2
 800595a:	461a      	mov	r2, r3
 800595c:	4623      	mov	r3, r4
 800595e:	4628      	mov	r0, r5
 8005960:	4631      	mov	r1, r6
 8005962:	f7fb fc3f 	bl	80011e4 <__aeabi_uldivmod>
 8005966:	4603      	mov	r3, r0
 8005968:	460c      	mov	r4, r1
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596c:	e007      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8005972:	fb02 f203 	mul.w	r2, r2, r3
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800597e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005982:	461a      	mov	r2, r3
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	4293      	cmp	r3, r2
 8005988:	d108      	bne.n	800599c <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800598a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005990:	e004      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	4a0b      	ldr	r2, [pc, #44]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x170>)
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 800599c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800599e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059a0:	e002      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x174>)
 80059a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80059a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3744      	adds	r7, #68	; 0x44
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	080083e0 	.word	0x080083e0
 80059b8:	080083f0 	.word	0x080083f0
 80059bc:	40021000 	.word	0x40021000
 80059c0:	017d7840 	.word	0x017d7840
 80059c4:	003d0900 	.word	0x003d0900
 80059c8:	007a1200 	.word	0x007a1200

080059cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d0:	4b02      	ldr	r3, [pc, #8]	; (80059dc <HAL_RCC_GetHCLKFreq+0x10>)
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr
 80059dc:	20000004 	.word	0x20000004

080059e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059e4:	f7ff fff2 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 80059e8:	4601      	mov	r1, r0
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	0a1b      	lsrs	r3, r3, #8
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4a03      	ldr	r2, [pc, #12]	; (8005a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f6:	5cd3      	ldrb	r3, [r2, r3]
 80059f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40021000 	.word	0x40021000
 8005a04:	08008418 	.word	0x08008418

08005a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <RCC_Delay+0x34>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <RCC_Delay+0x38>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0a5b      	lsrs	r3, r3, #9
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a24:	bf00      	nop
  }
  while (Delay --);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	60fa      	str	r2, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f9      	bne.n	8005a24 <RCC_Delay+0x1c>
}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20000004 	.word	0x20000004
 8005a40:	10624dd3 	.word	0x10624dd3

08005a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e01d      	b.n	8005a92 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fd fb14 	bl	8003098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f000 fbda 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e01d      	b.n	8005ae8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f815 	bl	8005af0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f000 fbaf 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b0c      	cmp	r3, #12
 8005b12:	d841      	bhi.n	8005b98 <HAL_TIM_IC_Start_IT+0x94>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <HAL_TIM_IC_Start_IT+0x18>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b51 	.word	0x08005b51
 8005b20:	08005b99 	.word	0x08005b99
 8005b24:	08005b99 	.word	0x08005b99
 8005b28:	08005b99 	.word	0x08005b99
 8005b2c:	08005b63 	.word	0x08005b63
 8005b30:	08005b99 	.word	0x08005b99
 8005b34:	08005b99 	.word	0x08005b99
 8005b38:	08005b99 	.word	0x08005b99
 8005b3c:	08005b75 	.word	0x08005b75
 8005b40:	08005b99 	.word	0x08005b99
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005b99 	.word	0x08005b99
 8005b4c:	08005b87 	.word	0x08005b87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0202 	orr.w	r2, r2, #2
 8005b5e:	60da      	str	r2, [r3, #12]
      break;
 8005b60:	e01b      	b.n	8005b9a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0204 	orr.w	r2, r2, #4
 8005b70:	60da      	str	r2, [r3, #12]
      break;
 8005b72:	e012      	b.n	8005b9a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0208 	orr.w	r2, r2, #8
 8005b82:	60da      	str	r2, [r3, #12]
      break;
 8005b84:	e009      	b.n	8005b9a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0210 	orr.w	r2, r2, #16
 8005b94:	60da      	str	r2, [r3, #12]
      break;
 8005b96:	e000      	b.n	8005b9a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005b98:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fd5f 	bl	8006666 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b06      	cmp	r3, #6
 8005bb8:	d007      	beq.n	8005bca <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b0c      	cmp	r3, #12
 8005be2:	d841      	bhi.n	8005c68 <HAL_TIM_IC_Stop_IT+0x94>
 8005be4:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <HAL_TIM_IC_Stop_IT+0x18>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c21 	.word	0x08005c21
 8005bf0:	08005c69 	.word	0x08005c69
 8005bf4:	08005c69 	.word	0x08005c69
 8005bf8:	08005c69 	.word	0x08005c69
 8005bfc:	08005c33 	.word	0x08005c33
 8005c00:	08005c69 	.word	0x08005c69
 8005c04:	08005c69 	.word	0x08005c69
 8005c08:	08005c69 	.word	0x08005c69
 8005c0c:	08005c45 	.word	0x08005c45
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c69 	.word	0x08005c69
 8005c18:	08005c69 	.word	0x08005c69
 8005c1c:	08005c57 	.word	0x08005c57
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0202 	bic.w	r2, r2, #2
 8005c2e:	60da      	str	r2, [r3, #12]
      break;
 8005c30:	e01b      	b.n	8005c6a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0204 	bic.w	r2, r2, #4
 8005c40:	60da      	str	r2, [r3, #12]
      break;
 8005c42:	e012      	b.n	8005c6a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0208 	bic.w	r2, r2, #8
 8005c52:	60da      	str	r2, [r3, #12]
      break;
 8005c54:	e009      	b.n	8005c6a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0210 	bic.w	r2, r2, #16
 8005c64:	60da      	str	r2, [r3, #12]
      break;
 8005c66:	e000      	b.n	8005c6a <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8005c68:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 fcf7 	bl	8006666 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a1a      	ldr	r2, [r3, #32]
 8005c7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c82:	4013      	ands	r3, r2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10f      	bne.n	8005ca8 <HAL_TIM_IC_Stop_IT+0xd4>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6a1a      	ldr	r2, [r3, #32]
 8005c8e:	f240 4344 	movw	r3, #1092	; 0x444
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d107      	bne.n	8005ca8 <HAL_TIM_IC_Stop_IT+0xd4>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop

08005cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d122      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d11b      	bne.n	8005d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0202 	mvn.w	r2, #2
 8005ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fd f93a 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8005cfc:	e005      	b.n	8005d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa81 	bl	8006206 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fa87 	bl	8006218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d122      	bne.n	8005d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d11b      	bne.n	8005d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0204 	mvn.w	r2, #4
 8005d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fd f910 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8005d50:	e005      	b.n	8005d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa57 	bl	8006206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fa5d 	bl	8006218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d122      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0308 	and.w	r3, r3, #8
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d11b      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0208 	mvn.w	r2, #8
 8005d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fd f8e6 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8005da4:	e005      	b.n	8005db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa2d 	bl	8006206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fa33 	bl	8006218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 0310 	and.w	r3, r3, #16
 8005dc2:	2b10      	cmp	r3, #16
 8005dc4:	d122      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d11b      	bne.n	8005e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0210 	mvn.w	r2, #16
 8005ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2208      	movs	r2, #8
 8005de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fd f8bc 	bl	8002f70 <HAL_TIM_IC_CaptureCallback>
 8005df8:	e005      	b.n	8005e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa03 	bl	8006206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fa09 	bl	8006218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d10e      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d107      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0201 	mvn.w	r2, #1
 8005e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9de 	bl	80061f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d10e      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e50:	2b80      	cmp	r3, #128	; 0x80
 8005e52:	d107      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fc72 	bl	8006748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d10e      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d107      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f9cd 	bl	800622a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d10e      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d107      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0220 	mvn.w	r2, #32
 8005eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fc3d 	bl	8006736 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_TIM_IC_ConfigChannel+0x1a>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e08a      	b.n	8005ff4 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11b      	bne.n	8005f2c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6819      	ldr	r1, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f000 fa06 	bl	8006314 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 020c 	bic.w	r2, r2, #12
 8005f16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6999      	ldr	r1, [r3, #24]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	619a      	str	r2, [r3, #24]
 8005f2a:	e05a      	b.n	8005fe2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d11c      	bne.n	8005f6c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6819      	ldr	r1, [r3, #0]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f000 fa75 	bl	8006430 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6999      	ldr	r1, [r3, #24]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	021a      	lsls	r2, r3, #8
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	619a      	str	r2, [r3, #24]
 8005f6a:	e03a      	b.n	8005fe2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d11b      	bne.n	8005faa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6819      	ldr	r1, [r3, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	f000 fac0 	bl	8006506 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 020c 	bic.w	r2, r2, #12
 8005f94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69d9      	ldr	r1, [r3, #28]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	61da      	str	r2, [r3, #28]
 8005fa8:	e01b      	b.n	8005fe2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6819      	ldr	r1, [r3, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f000 fadf 	bl	800657c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fcc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	021a      	lsls	r2, r3, #8
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_TIM_ConfigClockSource+0x18>
 8006010:	2302      	movs	r3, #2
 8006012:	e0a6      	b.n	8006162 <HAL_TIM_ConfigClockSource+0x166>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800603a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d067      	beq.n	800611c <HAL_TIM_ConfigClockSource+0x120>
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d80b      	bhi.n	8006068 <HAL_TIM_ConfigClockSource+0x6c>
 8006050:	2b10      	cmp	r3, #16
 8006052:	d073      	beq.n	800613c <HAL_TIM_ConfigClockSource+0x140>
 8006054:	2b10      	cmp	r3, #16
 8006056:	d802      	bhi.n	800605e <HAL_TIM_ConfigClockSource+0x62>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d06f      	beq.n	800613c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800605c:	e078      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800605e:	2b20      	cmp	r3, #32
 8006060:	d06c      	beq.n	800613c <HAL_TIM_ConfigClockSource+0x140>
 8006062:	2b30      	cmp	r3, #48	; 0x30
 8006064:	d06a      	beq.n	800613c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006066:	e073      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006068:	2b70      	cmp	r3, #112	; 0x70
 800606a:	d00d      	beq.n	8006088 <HAL_TIM_ConfigClockSource+0x8c>
 800606c:	2b70      	cmp	r3, #112	; 0x70
 800606e:	d804      	bhi.n	800607a <HAL_TIM_ConfigClockSource+0x7e>
 8006070:	2b50      	cmp	r3, #80	; 0x50
 8006072:	d033      	beq.n	80060dc <HAL_TIM_ConfigClockSource+0xe0>
 8006074:	2b60      	cmp	r3, #96	; 0x60
 8006076:	d041      	beq.n	80060fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006078:	e06a      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800607a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607e:	d066      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x152>
 8006080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006084:	d017      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006086:	e063      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	6899      	ldr	r1, [r3, #8]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f000 fac6 	bl	8006628 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	609a      	str	r2, [r3, #8]
      break;
 80060b4:	e04c      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6899      	ldr	r1, [r3, #8]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f000 faaf 	bl	8006628 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060d8:	609a      	str	r2, [r3, #8]
      break;
 80060da:	e039      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6859      	ldr	r1, [r3, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	461a      	mov	r2, r3
 80060ea:	f000 f973 	bl	80063d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2150      	movs	r1, #80	; 0x50
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 fa7d 	bl	80065f4 <TIM_ITRx_SetConfig>
      break;
 80060fa:	e029      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	6859      	ldr	r1, [r3, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	461a      	mov	r2, r3
 800610a:	f000 f9cd 	bl	80064a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2160      	movs	r1, #96	; 0x60
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fa6d 	bl	80065f4 <TIM_ITRx_SetConfig>
      break;
 800611a:	e019      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	6859      	ldr	r1, [r3, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	461a      	mov	r2, r3
 800612a:	f000 f953 	bl	80063d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2140      	movs	r1, #64	; 0x40
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fa5d 	bl	80065f4 <TIM_ITRx_SetConfig>
      break;
 800613a:	e009      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f000 fa54 	bl	80065f4 <TIM_ITRx_SetConfig>
      break;
 800614c:	e000      	b.n	8006150 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800614e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d831      	bhi.n	80061e4 <HAL_TIM_ReadCapturedValue+0x78>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080061e5 	.word	0x080061e5
 8006190:	080061e5 	.word	0x080061e5
 8006194:	080061e5 	.word	0x080061e5
 8006198:	080061c7 	.word	0x080061c7
 800619c:	080061e5 	.word	0x080061e5
 80061a0:	080061e5 	.word	0x080061e5
 80061a4:	080061e5 	.word	0x080061e5
 80061a8:	080061d1 	.word	0x080061d1
 80061ac:	080061e5 	.word	0x080061e5
 80061b0:	080061e5 	.word	0x080061e5
 80061b4:	080061e5 	.word	0x080061e5
 80061b8:	080061db 	.word	0x080061db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	60fb      	str	r3, [r7, #12]

      break;
 80061c4:	e00f      	b.n	80061e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	60fb      	str	r3, [r7, #12]

      break;
 80061ce:	e00a      	b.n	80061e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	60fb      	str	r3, [r7, #12]

      break;
 80061d8:	e005      	b.n	80061e6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	60fb      	str	r3, [r7, #12]

      break;
 80061e2:	e000      	b.n	80061e6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80061e4:	bf00      	nop
  }

  return tmpreg;
 80061e6:	68fb      	ldr	r3, [r7, #12]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop

080061f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr

08006206 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	bc80      	pop	{r7}
 8006216:	4770      	bx	lr

08006218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a2d      	ldr	r2, [pc, #180]	; (8006304 <TIM_Base_SetConfig+0xc8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00f      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d00b      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a2a      	ldr	r2, [pc, #168]	; (8006308 <TIM_Base_SetConfig+0xcc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d007      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a29      	ldr	r2, [pc, #164]	; (800630c <TIM_Base_SetConfig+0xd0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_Base_SetConfig+0x38>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a28      	ldr	r2, [pc, #160]	; (8006310 <TIM_Base_SetConfig+0xd4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d108      	bne.n	8006286 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1e      	ldr	r2, [pc, #120]	; (8006304 <TIM_Base_SetConfig+0xc8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00f      	beq.n	80062ae <TIM_Base_SetConfig+0x72>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006294:	d00b      	beq.n	80062ae <TIM_Base_SetConfig+0x72>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a1b      	ldr	r2, [pc, #108]	; (8006308 <TIM_Base_SetConfig+0xcc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d007      	beq.n	80062ae <TIM_Base_SetConfig+0x72>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a1a      	ldr	r2, [pc, #104]	; (800630c <TIM_Base_SetConfig+0xd0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d003      	beq.n	80062ae <TIM_Base_SetConfig+0x72>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a19      	ldr	r2, [pc, #100]	; (8006310 <TIM_Base_SetConfig+0xd4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d108      	bne.n	80062c0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a07      	ldr	r2, [pc, #28]	; (8006304 <TIM_Base_SetConfig+0xc8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d103      	bne.n	80062f4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	615a      	str	r2, [r3, #20]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr
 8006304:	40012c00 	.word	0x40012c00
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40000c00 	.word	0x40000c00

08006314 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0201 	bic.w	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <TIM_TI1_SetConfig+0xb0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d00f      	beq.n	8006362 <TIM_TI1_SetConfig+0x4e>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d00b      	beq.n	8006362 <TIM_TI1_SetConfig+0x4e>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <TIM_TI1_SetConfig+0xb4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d007      	beq.n	8006362 <TIM_TI1_SetConfig+0x4e>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <TIM_TI1_SetConfig+0xb8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d003      	beq.n	8006362 <TIM_TI1_SetConfig+0x4e>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <TIM_TI1_SetConfig+0xbc>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d101      	bne.n	8006366 <TIM_TI1_SetConfig+0x52>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <TIM_TI1_SetConfig+0x54>
 8006366:	2300      	movs	r3, #0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 0303 	bic.w	r3, r3, #3
 8006372:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e003      	b.n	8006386 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f043 0301 	orr.w	r3, r3, #1
 8006384:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800638c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	b2db      	uxtb	r3, r3
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f023 030a 	bic.w	r3, r3, #10
 80063a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f003 030a 	and.w	r3, r3, #10
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	40012c00 	.word	0x40012c00
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40000c00 	.word	0x40000c00

080063d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0201 	bic.w	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 030a 	bic.w	r3, r3, #10
 8006410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr

08006430 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0210 	bic.w	r2, r3, #16
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800646e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	031b      	lsls	r3, r3, #12
 8006474:	b29b      	uxth	r3, r3
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006482:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	621a      	str	r2, [r3, #32]
}
 800649e:	bf00      	nop
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr

080064a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f023 0210 	bic.w	r2, r3, #16
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	031b      	lsls	r3, r3, #12
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	621a      	str	r2, [r3, #32]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006506:	b480      	push	{r7}
 8006508:	b087      	sub	sp, #28
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
 8006512:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006542:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	b2db      	uxtb	r3, r3
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006556:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr

0800657c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	031b      	lsls	r3, r3, #12
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	031b      	lsls	r3, r3, #12
 80065d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4313      	orrs	r3, r2
 8006612:	f043 0307 	orr.w	r3, r3, #7
 8006616:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	609a      	str	r2, [r3, #8]
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr

08006628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	431a      	orrs	r2, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4313      	orrs	r3, r2
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr

08006666 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006666:	b480      	push	{r7}
 8006668:	b087      	sub	sp, #28
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	2201      	movs	r2, #1
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a1a      	ldr	r2, [r3, #32]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	43db      	mvns	r3, r3
 8006688:	401a      	ands	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1a      	ldr	r2, [r3, #32]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	fa01 f303 	lsl.w	r3, r1, r3
 800669e:	431a      	orrs	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	621a      	str	r2, [r3, #32]
}
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr

080066ae <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e032      	b.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fe:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	4313      	orrs	r3, r2
 8006708:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr
	...

0800675c <__errno>:
 800675c:	4b01      	ldr	r3, [pc, #4]	; (8006764 <__errno+0x8>)
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	20000010 	.word	0x20000010

08006768 <__libc_init_array>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	2500      	movs	r5, #0
 800676c:	4e0c      	ldr	r6, [pc, #48]	; (80067a0 <__libc_init_array+0x38>)
 800676e:	4c0d      	ldr	r4, [pc, #52]	; (80067a4 <__libc_init_array+0x3c>)
 8006770:	1ba4      	subs	r4, r4, r6
 8006772:	10a4      	asrs	r4, r4, #2
 8006774:	42a5      	cmp	r5, r4
 8006776:	d109      	bne.n	800678c <__libc_init_array+0x24>
 8006778:	f001 fe26 	bl	80083c8 <_init>
 800677c:	2500      	movs	r5, #0
 800677e:	4e0a      	ldr	r6, [pc, #40]	; (80067a8 <__libc_init_array+0x40>)
 8006780:	4c0a      	ldr	r4, [pc, #40]	; (80067ac <__libc_init_array+0x44>)
 8006782:	1ba4      	subs	r4, r4, r6
 8006784:	10a4      	asrs	r4, r4, #2
 8006786:	42a5      	cmp	r5, r4
 8006788:	d105      	bne.n	8006796 <__libc_init_array+0x2e>
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006790:	4798      	blx	r3
 8006792:	3501      	adds	r5, #1
 8006794:	e7ee      	b.n	8006774 <__libc_init_array+0xc>
 8006796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800679a:	4798      	blx	r3
 800679c:	3501      	adds	r5, #1
 800679e:	e7f2      	b.n	8006786 <__libc_init_array+0x1e>
 80067a0:	080084e8 	.word	0x080084e8
 80067a4:	080084e8 	.word	0x080084e8
 80067a8:	080084e8 	.word	0x080084e8
 80067ac:	080084ec 	.word	0x080084ec

080067b0 <memset>:
 80067b0:	4603      	mov	r3, r0
 80067b2:	4402      	add	r2, r0
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d100      	bne.n	80067ba <memset+0xa>
 80067b8:	4770      	bx	lr
 80067ba:	f803 1b01 	strb.w	r1, [r3], #1
 80067be:	e7f9      	b.n	80067b4 <memset+0x4>

080067c0 <cabs>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	4606      	mov	r6, r0
 80067c6:	460f      	mov	r7, r1
 80067c8:	4614      	mov	r4, r2
 80067ca:	461d      	mov	r5, r3
 80067cc:	4622      	mov	r2, r4
 80067ce:	462b      	mov	r3, r5
 80067d0:	4630      	mov	r0, r6
 80067d2:	4639      	mov	r1, r7
 80067d4:	f000 f813 	bl	80067fe <creal>
 80067d8:	4622      	mov	r2, r4
 80067da:	4680      	mov	r8, r0
 80067dc:	4689      	mov	r9, r1
 80067de:	462b      	mov	r3, r5
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f000 f808 	bl	80067f8 <cimag>
 80067e8:	4602      	mov	r2, r0
 80067ea:	460b      	mov	r3, r1
 80067ec:	4640      	mov	r0, r8
 80067ee:	4649      	mov	r1, r9
 80067f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	f000 b880 	b.w	80068f8 <hypot>

080067f8 <cimag>:
 80067f8:	4610      	mov	r0, r2
 80067fa:	4619      	mov	r1, r3
 80067fc:	4770      	bx	lr

080067fe <creal>:
 80067fe:	4770      	bx	lr

08006800 <atan2>:
 8006800:	f000 ba2e 	b.w	8006c60 <__ieee754_atan2>
 8006804:	0000      	movs	r0, r0
	...

08006808 <exp>:
 8006808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800680c:	b08b      	sub	sp, #44	; 0x2c
 800680e:	4604      	mov	r4, r0
 8006810:	460d      	mov	r5, r1
 8006812:	f000 fb05 	bl	8006e20 <__ieee754_exp>
 8006816:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80068f4 <exp+0xec>
 800681a:	4606      	mov	r6, r0
 800681c:	f998 3000 	ldrsb.w	r3, [r8]
 8006820:	460f      	mov	r7, r1
 8006822:	3301      	adds	r3, #1
 8006824:	d02c      	beq.n	8006880 <exp+0x78>
 8006826:	4620      	mov	r0, r4
 8006828:	4629      	mov	r1, r5
 800682a:	f001 fcbb 	bl	80081a4 <finite>
 800682e:	b338      	cbz	r0, 8006880 <exp+0x78>
 8006830:	a329      	add	r3, pc, #164	; (adr r3, 80068d8 <exp+0xd0>)
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	4620      	mov	r0, r4
 8006838:	4629      	mov	r1, r5
 800683a:	f7fa f941 	bl	8000ac0 <__aeabi_dcmpgt>
 800683e:	4681      	mov	r9, r0
 8006840:	2800      	cmp	r0, #0
 8006842:	d02d      	beq.n	80068a0 <exp+0x98>
 8006844:	2303      	movs	r3, #3
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <exp+0xe0>)
 800684a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	2300      	movs	r3, #0
 8006852:	9308      	str	r3, [sp, #32]
 8006854:	f998 3000 	ldrsb.w	r3, [r8]
 8006858:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800685c:	b9ab      	cbnz	r3, 800688a <exp+0x82>
 800685e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006862:	4b22      	ldr	r3, [pc, #136]	; (80068ec <exp+0xe4>)
 8006864:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006868:	4668      	mov	r0, sp
 800686a:	f001 fca1 	bl	80081b0 <matherr>
 800686e:	b190      	cbz	r0, 8006896 <exp+0x8e>
 8006870:	9b08      	ldr	r3, [sp, #32]
 8006872:	b11b      	cbz	r3, 800687c <exp+0x74>
 8006874:	f7ff ff72 	bl	800675c <__errno>
 8006878:	9b08      	ldr	r3, [sp, #32]
 800687a:	6003      	str	r3, [r0, #0]
 800687c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8006880:	4630      	mov	r0, r6
 8006882:	4639      	mov	r1, r7
 8006884:	b00b      	add	sp, #44	; 0x2c
 8006886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800688a:	2000      	movs	r0, #0
 800688c:	4918      	ldr	r1, [pc, #96]	; (80068f0 <exp+0xe8>)
 800688e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d1e8      	bne.n	8006868 <exp+0x60>
 8006896:	f7ff ff61 	bl	800675c <__errno>
 800689a:	2322      	movs	r3, #34	; 0x22
 800689c:	6003      	str	r3, [r0, #0]
 800689e:	e7e7      	b.n	8006870 <exp+0x68>
 80068a0:	a30f      	add	r3, pc, #60	; (adr r3, 80068e0 <exp+0xd8>)
 80068a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a6:	4620      	mov	r0, r4
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7fa f8eb 	bl	8000a84 <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d0e6      	beq.n	8006880 <exp+0x78>
 80068b2:	2304      	movs	r3, #4
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <exp+0xe0>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	2300      	movs	r3, #0
 80068be:	f8cd 9020 	str.w	r9, [sp, #32]
 80068c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068c6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80068ca:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80068ce:	f998 3000 	ldrsb.w	r3, [r8]
 80068d2:	e7de      	b.n	8006892 <exp+0x8a>
 80068d4:	f3af 8000 	nop.w
 80068d8:	fefa39ef 	.word	0xfefa39ef
 80068dc:	40862e42 	.word	0x40862e42
 80068e0:	d52d3051 	.word	0xd52d3051
 80068e4:	c0874910 	.word	0xc0874910
 80068e8:	08008420 	.word	0x08008420
 80068ec:	47efffff 	.word	0x47efffff
 80068f0:	7ff00000 	.word	0x7ff00000
 80068f4:	20000074 	.word	0x20000074

080068f8 <hypot>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	b08b      	sub	sp, #44	; 0x2c
 80068fe:	461f      	mov	r7, r3
 8006900:	4680      	mov	r8, r0
 8006902:	4689      	mov	r9, r1
 8006904:	4616      	mov	r6, r2
 8006906:	f000 fbf1 	bl	80070ec <__ieee754_hypot>
 800690a:	f8df a094 	ldr.w	sl, [pc, #148]	; 80069a0 <hypot+0xa8>
 800690e:	4604      	mov	r4, r0
 8006910:	f99a 3000 	ldrsb.w	r3, [sl]
 8006914:	460d      	mov	r5, r1
 8006916:	3301      	adds	r3, #1
 8006918:	d02b      	beq.n	8006972 <hypot+0x7a>
 800691a:	f001 fc43 	bl	80081a4 <finite>
 800691e:	4683      	mov	fp, r0
 8006920:	bb38      	cbnz	r0, 8006972 <hypot+0x7a>
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f001 fc3d 	bl	80081a4 <finite>
 800692a:	b310      	cbz	r0, 8006972 <hypot+0x7a>
 800692c:	4630      	mov	r0, r6
 800692e:	4639      	mov	r1, r7
 8006930:	f001 fc38 	bl	80081a4 <finite>
 8006934:	b1e8      	cbz	r0, 8006972 <hypot+0x7a>
 8006936:	2303      	movs	r3, #3
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4b16      	ldr	r3, [pc, #88]	; (8006994 <hypot+0x9c>)
 800693c:	f8cd b020 	str.w	fp, [sp, #32]
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	f99a 3000 	ldrsb.w	r3, [sl]
 8006946:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800694a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800694e:	b9ab      	cbnz	r3, 800697c <hypot+0x84>
 8006950:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006954:	4b10      	ldr	r3, [pc, #64]	; (8006998 <hypot+0xa0>)
 8006956:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800695a:	4668      	mov	r0, sp
 800695c:	f001 fc28 	bl	80081b0 <matherr>
 8006960:	b190      	cbz	r0, 8006988 <hypot+0x90>
 8006962:	9b08      	ldr	r3, [sp, #32]
 8006964:	b11b      	cbz	r3, 800696e <hypot+0x76>
 8006966:	f7ff fef9 	bl	800675c <__errno>
 800696a:	9b08      	ldr	r3, [sp, #32]
 800696c:	6003      	str	r3, [r0, #0]
 800696e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006972:	4620      	mov	r0, r4
 8006974:	4629      	mov	r1, r5
 8006976:	b00b      	add	sp, #44	; 0x2c
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	2000      	movs	r0, #0
 800697e:	4907      	ldr	r1, [pc, #28]	; (800699c <hypot+0xa4>)
 8006980:	2b02      	cmp	r3, #2
 8006982:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006986:	d1e8      	bne.n	800695a <hypot+0x62>
 8006988:	f7ff fee8 	bl	800675c <__errno>
 800698c:	2322      	movs	r3, #34	; 0x22
 800698e:	6003      	str	r3, [r0, #0]
 8006990:	e7e7      	b.n	8006962 <hypot+0x6a>
 8006992:	bf00      	nop
 8006994:	08008424 	.word	0x08008424
 8006998:	47efffff 	.word	0x47efffff
 800699c:	7ff00000 	.word	0x7ff00000
 80069a0:	20000074 	.word	0x20000074

080069a4 <pow>:
 80069a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a8:	b08f      	sub	sp, #60	; 0x3c
 80069aa:	461d      	mov	r5, r3
 80069ac:	4680      	mov	r8, r0
 80069ae:	4689      	mov	r9, r1
 80069b0:	4614      	mov	r4, r2
 80069b2:	f000 fcb1 	bl	8007318 <__ieee754_pow>
 80069b6:	4fa1      	ldr	r7, [pc, #644]	; (8006c3c <pow+0x298>)
 80069b8:	e9cd 0100 	strd	r0, r1, [sp]
 80069bc:	f997 3000 	ldrsb.w	r3, [r7]
 80069c0:	463e      	mov	r6, r7
 80069c2:	9302      	str	r3, [sp, #8]
 80069c4:	3301      	adds	r3, #1
 80069c6:	d05f      	beq.n	8006a88 <pow+0xe4>
 80069c8:	4622      	mov	r2, r4
 80069ca:	462b      	mov	r3, r5
 80069cc:	4620      	mov	r0, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	f7fa f880 	bl	8000ad4 <__aeabi_dcmpun>
 80069d4:	4682      	mov	sl, r0
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d156      	bne.n	8006a88 <pow+0xe4>
 80069da:	4642      	mov	r2, r8
 80069dc:	464b      	mov	r3, r9
 80069de:	4640      	mov	r0, r8
 80069e0:	4649      	mov	r1, r9
 80069e2:	f7fa f877 	bl	8000ad4 <__aeabi_dcmpun>
 80069e6:	9003      	str	r0, [sp, #12]
 80069e8:	b1e8      	cbz	r0, 8006a26 <pow+0x82>
 80069ea:	2200      	movs	r2, #0
 80069ec:	2300      	movs	r3, #0
 80069ee:	4620      	mov	r0, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7fa f83d 	bl	8000a70 <__aeabi_dcmpeq>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d046      	beq.n	8006a88 <pow+0xe4>
 80069fa:	2301      	movs	r3, #1
 80069fc:	2200      	movs	r2, #0
 80069fe:	9304      	str	r3, [sp, #16]
 8006a00:	4b8f      	ldr	r3, [pc, #572]	; (8006c40 <pow+0x29c>)
 8006a02:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006a06:	9305      	str	r3, [sp, #20]
 8006a08:	4b8e      	ldr	r3, [pc, #568]	; (8006c44 <pow+0x2a0>)
 8006a0a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006a0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a12:	9b02      	ldr	r3, [sp, #8]
 8006a14:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d031      	beq.n	8006a80 <pow+0xdc>
 8006a1c:	a804      	add	r0, sp, #16
 8006a1e:	f001 fbc7 	bl	80081b0 <matherr>
 8006a22:	bb38      	cbnz	r0, 8006a74 <pow+0xd0>
 8006a24:	e058      	b.n	8006ad8 <pow+0x134>
 8006a26:	f04f 0a00 	mov.w	sl, #0
 8006a2a:	f04f 0b00 	mov.w	fp, #0
 8006a2e:	4652      	mov	r2, sl
 8006a30:	465b      	mov	r3, fp
 8006a32:	4640      	mov	r0, r8
 8006a34:	4649      	mov	r1, r9
 8006a36:	f7fa f81b 	bl	8000a70 <__aeabi_dcmpeq>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d051      	beq.n	8006ae2 <pow+0x13e>
 8006a3e:	4652      	mov	r2, sl
 8006a40:	465b      	mov	r3, fp
 8006a42:	4620      	mov	r0, r4
 8006a44:	4629      	mov	r1, r5
 8006a46:	f7fa f813 	bl	8000a70 <__aeabi_dcmpeq>
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	b308      	cbz	r0, 8006a92 <pow+0xee>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	4b7b      	ldr	r3, [pc, #492]	; (8006c40 <pow+0x29c>)
 8006a54:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006a58:	9305      	str	r3, [sp, #20]
 8006a5a:	9b03      	ldr	r3, [sp, #12]
 8006a5c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006a60:	930c      	str	r3, [sp, #48]	; 0x30
 8006a62:	9b02      	ldr	r3, [sp, #8]
 8006a64:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0d7      	beq.n	8006a1c <pow+0x78>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4b75      	ldr	r3, [pc, #468]	; (8006c44 <pow+0x2a0>)
 8006a70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a76:	b11b      	cbz	r3, 8006a80 <pow+0xdc>
 8006a78:	f7ff fe70 	bl	800675c <__errno>
 8006a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a7e:	6003      	str	r3, [r0, #0]
 8006a80:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8006a84:	e9cd 3400 	strd	r3, r4, [sp]
 8006a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a8c:	b00f      	add	sp, #60	; 0x3c
 8006a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a92:	4620      	mov	r0, r4
 8006a94:	4629      	mov	r1, r5
 8006a96:	f001 fb85 	bl	80081a4 <finite>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d0f4      	beq.n	8006a88 <pow+0xe4>
 8006a9e:	4652      	mov	r2, sl
 8006aa0:	465b      	mov	r3, fp
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	f7f9 ffed 	bl	8000a84 <__aeabi_dcmplt>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d0ec      	beq.n	8006a88 <pow+0xe4>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	9304      	str	r3, [sp, #16]
 8006ab2:	4b63      	ldr	r3, [pc, #396]	; (8006c40 <pow+0x29c>)
 8006ab4:	960c      	str	r6, [sp, #48]	; 0x30
 8006ab6:	9305      	str	r3, [sp, #20]
 8006ab8:	f997 3000 	ldrsb.w	r3, [r7]
 8006abc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006ac0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006ac4:	b913      	cbnz	r3, 8006acc <pow+0x128>
 8006ac6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006aca:	e7a7      	b.n	8006a1c <pow+0x78>
 8006acc:	2000      	movs	r0, #0
 8006ace:	495e      	ldr	r1, [pc, #376]	; (8006c48 <pow+0x2a4>)
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ad6:	d1a1      	bne.n	8006a1c <pow+0x78>
 8006ad8:	f7ff fe40 	bl	800675c <__errno>
 8006adc:	2321      	movs	r3, #33	; 0x21
 8006ade:	6003      	str	r3, [r0, #0]
 8006ae0:	e7c8      	b.n	8006a74 <pow+0xd0>
 8006ae2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ae6:	f001 fb5d 	bl	80081a4 <finite>
 8006aea:	9002      	str	r0, [sp, #8]
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d177      	bne.n	8006be0 <pow+0x23c>
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	f001 fb56 	bl	80081a4 <finite>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d071      	beq.n	8006be0 <pow+0x23c>
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f001 fb50 	bl	80081a4 <finite>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d06b      	beq.n	8006be0 <pow+0x23c>
 8006b08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f7f9 ffe0 	bl	8000ad4 <__aeabi_dcmpun>
 8006b14:	f997 7000 	ldrsb.w	r7, [r7]
 8006b18:	4b49      	ldr	r3, [pc, #292]	; (8006c40 <pow+0x29c>)
 8006b1a:	b1a0      	cbz	r0, 8006b46 <pow+0x1a2>
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006b28:	930c      	str	r3, [sp, #48]	; 0x30
 8006b2a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006b2e:	2f00      	cmp	r7, #0
 8006b30:	d0c9      	beq.n	8006ac6 <pow+0x122>
 8006b32:	4652      	mov	r2, sl
 8006b34:	465b      	mov	r3, fp
 8006b36:	4650      	mov	r0, sl
 8006b38:	4659      	mov	r1, fp
 8006b3a:	f7f9 fe5b 	bl	80007f4 <__aeabi_ddiv>
 8006b3e:	2f02      	cmp	r7, #2
 8006b40:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b44:	e7c7      	b.n	8006ad6 <pow+0x132>
 8006b46:	2203      	movs	r2, #3
 8006b48:	900c      	str	r0, [sp, #48]	; 0x30
 8006b4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b4e:	4620      	mov	r0, r4
 8006b50:	4629      	mov	r1, r5
 8006b52:	2200      	movs	r2, #0
 8006b54:	4b3d      	ldr	r3, [pc, #244]	; (8006c4c <pow+0x2a8>)
 8006b56:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006b5a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006b5e:	f7f9 fd1f 	bl	80005a0 <__aeabi_dmul>
 8006b62:	4604      	mov	r4, r0
 8006b64:	460d      	mov	r5, r1
 8006b66:	bb17      	cbnz	r7, 8006bae <pow+0x20a>
 8006b68:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006b6c:	4b38      	ldr	r3, [pc, #224]	; (8006c50 <pow+0x2ac>)
 8006b6e:	4640      	mov	r0, r8
 8006b70:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006b74:	4649      	mov	r1, r9
 8006b76:	4652      	mov	r2, sl
 8006b78:	465b      	mov	r3, fp
 8006b7a:	f7f9 ff83 	bl	8000a84 <__aeabi_dcmplt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d054      	beq.n	8006c2c <pow+0x288>
 8006b82:	4620      	mov	r0, r4
 8006b84:	4629      	mov	r1, r5
 8006b86:	f001 fb1b 	bl	80081c0 <rint>
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	f7f9 ff6f 	bl	8000a70 <__aeabi_dcmpeq>
 8006b92:	b920      	cbnz	r0, 8006b9e <pow+0x1fa>
 8006b94:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006b98:	4b2e      	ldr	r3, [pc, #184]	; (8006c54 <pow+0x2b0>)
 8006b9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006b9e:	f996 3000 	ldrsb.w	r3, [r6]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d142      	bne.n	8006c2c <pow+0x288>
 8006ba6:	f7ff fdd9 	bl	800675c <__errno>
 8006baa:	2322      	movs	r3, #34	; 0x22
 8006bac:	e797      	b.n	8006ade <pow+0x13a>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <pow+0x2b4>)
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006bb8:	4649      	mov	r1, r9
 8006bba:	4652      	mov	r2, sl
 8006bbc:	465b      	mov	r3, fp
 8006bbe:	f7f9 ff61 	bl	8000a84 <__aeabi_dcmplt>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d0eb      	beq.n	8006b9e <pow+0x1fa>
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f001 faf9 	bl	80081c0 <rint>
 8006bce:	4622      	mov	r2, r4
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	f7f9 ff4d 	bl	8000a70 <__aeabi_dcmpeq>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d1e1      	bne.n	8006b9e <pow+0x1fa>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4b1a      	ldr	r3, [pc, #104]	; (8006c48 <pow+0x2a4>)
 8006bde:	e7dc      	b.n	8006b9a <pow+0x1f6>
 8006be0:	2200      	movs	r2, #0
 8006be2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006be6:	2300      	movs	r3, #0
 8006be8:	f7f9 ff42 	bl	8000a70 <__aeabi_dcmpeq>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f43f af4b 	beq.w	8006a88 <pow+0xe4>
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f001 fad5 	bl	80081a4 <finite>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	f43f af44 	beq.w	8006a88 <pow+0xe4>
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	f001 face 	bl	80081a4 <finite>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	f43f af3d 	beq.w	8006a88 <pow+0xe4>
 8006c0e:	2304      	movs	r3, #4
 8006c10:	9304      	str	r3, [sp, #16]
 8006c12:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <pow+0x29c>)
 8006c14:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006c18:	9305      	str	r3, [sp, #20]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2400      	movs	r4, #0
 8006c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8006c20:	2300      	movs	r3, #0
 8006c22:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006c26:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006c2a:	e7b8      	b.n	8006b9e <pow+0x1fa>
 8006c2c:	a804      	add	r0, sp, #16
 8006c2e:	f001 fabf 	bl	80081b0 <matherr>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f47f af1e 	bne.w	8006a74 <pow+0xd0>
 8006c38:	e7b5      	b.n	8006ba6 <pow+0x202>
 8006c3a:	bf00      	nop
 8006c3c:	20000074 	.word	0x20000074
 8006c40:	0800842a 	.word	0x0800842a
 8006c44:	3ff00000 	.word	0x3ff00000
 8006c48:	fff00000 	.word	0xfff00000
 8006c4c:	3fe00000 	.word	0x3fe00000
 8006c50:	47efffff 	.word	0x47efffff
 8006c54:	c7efffff 	.word	0xc7efffff
 8006c58:	7ff00000 	.word	0x7ff00000
 8006c5c:	00000000 	.word	0x00000000

08006c60 <__ieee754_atan2>:
 8006c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	4256      	negs	r6, r2
 8006c66:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8006c6a:	4316      	orrs	r6, r2
 8006c6c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006e18 <__ieee754_atan2+0x1b8>
 8006c70:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8006c74:	454e      	cmp	r6, r9
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
 8006c7a:	469e      	mov	lr, r3
 8006c7c:	d808      	bhi.n	8006c90 <__ieee754_atan2+0x30>
 8006c7e:	4246      	negs	r6, r0
 8006c80:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006c84:	4306      	orrs	r6, r0
 8006c86:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8006c8a:	454e      	cmp	r6, r9
 8006c8c:	4688      	mov	r8, r1
 8006c8e:	d906      	bls.n	8006c9e <__ieee754_atan2+0x3e>
 8006c90:	4620      	mov	r0, r4
 8006c92:	4629      	mov	r1, r5
 8006c94:	f7f9 face 	bl	8000234 <__adddf3>
 8006c98:	4604      	mov	r4, r0
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	e030      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006c9e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006ca2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006ca6:	4316      	orrs	r6, r2
 8006ca8:	d103      	bne.n	8006cb2 <__ieee754_atan2+0x52>
 8006caa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cae:	f001 b8eb 	b.w	8007e88 <atan>
 8006cb2:	179e      	asrs	r6, r3, #30
 8006cb4:	f006 0602 	and.w	r6, r6, #2
 8006cb8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006cbc:	ea57 0100 	orrs.w	r1, r7, r0
 8006cc0:	d107      	bne.n	8006cd2 <__ieee754_atan2+0x72>
 8006cc2:	2e02      	cmp	r6, #2
 8006cc4:	d079      	beq.n	8006dba <__ieee754_atan2+0x15a>
 8006cc6:	2e03      	cmp	r6, #3
 8006cc8:	d11a      	bne.n	8006d00 <__ieee754_atan2+0xa0>
 8006cca:	a541      	add	r5, pc, #260	; (adr r5, 8006dd0 <__ieee754_atan2+0x170>)
 8006ccc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006cd0:	e016      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006cd2:	ea5c 0102 	orrs.w	r1, ip, r2
 8006cd6:	d106      	bne.n	8006ce6 <__ieee754_atan2+0x86>
 8006cd8:	f1b8 0f00 	cmp.w	r8, #0
 8006cdc:	da71      	bge.n	8006dc2 <__ieee754_atan2+0x162>
 8006cde:	a53e      	add	r5, pc, #248	; (adr r5, 8006dd8 <__ieee754_atan2+0x178>)
 8006ce0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ce4:	e00c      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006ce6:	45cc      	cmp	ip, r9
 8006ce8:	d123      	bne.n	8006d32 <__ieee754_atan2+0xd2>
 8006cea:	4567      	cmp	r7, ip
 8006cec:	d114      	bne.n	8006d18 <__ieee754_atan2+0xb8>
 8006cee:	2e02      	cmp	r6, #2
 8006cf0:	d00a      	beq.n	8006d08 <__ieee754_atan2+0xa8>
 8006cf2:	2e03      	cmp	r6, #3
 8006cf4:	d00c      	beq.n	8006d10 <__ieee754_atan2+0xb0>
 8006cf6:	2e01      	cmp	r6, #1
 8006cf8:	d15b      	bne.n	8006db2 <__ieee754_atan2+0x152>
 8006cfa:	a539      	add	r5, pc, #228	; (adr r5, 8006de0 <__ieee754_atan2+0x180>)
 8006cfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d00:	4620      	mov	r0, r4
 8006d02:	4629      	mov	r1, r5
 8006d04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d08:	a537      	add	r5, pc, #220	; (adr r5, 8006de8 <__ieee754_atan2+0x188>)
 8006d0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d0e:	e7f7      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006d10:	a537      	add	r5, pc, #220	; (adr r5, 8006df0 <__ieee754_atan2+0x190>)
 8006d12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d16:	e7f3      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006d18:	2e02      	cmp	r6, #2
 8006d1a:	d04e      	beq.n	8006dba <__ieee754_atan2+0x15a>
 8006d1c:	2e03      	cmp	r6, #3
 8006d1e:	d0d4      	beq.n	8006cca <__ieee754_atan2+0x6a>
 8006d20:	2e01      	cmp	r6, #1
 8006d22:	f04f 0400 	mov.w	r4, #0
 8006d26:	d102      	bne.n	8006d2e <__ieee754_atan2+0xce>
 8006d28:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006d2c:	e7e8      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006d2e:	2500      	movs	r5, #0
 8006d30:	e7e6      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006d32:	454f      	cmp	r7, r9
 8006d34:	d0d0      	beq.n	8006cd8 <__ieee754_atan2+0x78>
 8006d36:	eba7 070c 	sub.w	r7, r7, ip
 8006d3a:	153f      	asrs	r7, r7, #20
 8006d3c:	2f3c      	cmp	r7, #60	; 0x3c
 8006d3e:	dc1e      	bgt.n	8006d7e <__ieee754_atan2+0x11e>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	da01      	bge.n	8006d48 <__ieee754_atan2+0xe8>
 8006d44:	373c      	adds	r7, #60	; 0x3c
 8006d46:	db1e      	blt.n	8006d86 <__ieee754_atan2+0x126>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f7f9 fd52 	bl	80007f4 <__aeabi_ddiv>
 8006d50:	f001 fa24 	bl	800819c <fabs>
 8006d54:	f001 f898 	bl	8007e88 <atan>
 8006d58:	4604      	mov	r4, r0
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	2e01      	cmp	r6, #1
 8006d5e:	d015      	beq.n	8006d8c <__ieee754_atan2+0x12c>
 8006d60:	2e02      	cmp	r6, #2
 8006d62:	d017      	beq.n	8006d94 <__ieee754_atan2+0x134>
 8006d64:	2e00      	cmp	r6, #0
 8006d66:	d0cb      	beq.n	8006d00 <__ieee754_atan2+0xa0>
 8006d68:	a323      	add	r3, pc, #140	; (adr r3, 8006df8 <__ieee754_atan2+0x198>)
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7f9 fa5d 	bl	8000230 <__aeabi_dsub>
 8006d76:	a322      	add	r3, pc, #136	; (adr r3, 8006e00 <__ieee754_atan2+0x1a0>)
 8006d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7c:	e016      	b.n	8006dac <__ieee754_atan2+0x14c>
 8006d7e:	a522      	add	r5, pc, #136	; (adr r5, 8006e08 <__ieee754_atan2+0x1a8>)
 8006d80:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d84:	e7ea      	b.n	8006d5c <__ieee754_atan2+0xfc>
 8006d86:	2400      	movs	r4, #0
 8006d88:	2500      	movs	r5, #0
 8006d8a:	e7e7      	b.n	8006d5c <__ieee754_atan2+0xfc>
 8006d8c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006d90:	461d      	mov	r5, r3
 8006d92:	e7b5      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006d94:	a318      	add	r3, pc, #96	; (adr r3, 8006df8 <__ieee754_atan2+0x198>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f7f9 fa47 	bl	8000230 <__aeabi_dsub>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	a116      	add	r1, pc, #88	; (adr r1, 8006e00 <__ieee754_atan2+0x1a0>)
 8006da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dac:	f7f9 fa40 	bl	8000230 <__aeabi_dsub>
 8006db0:	e772      	b.n	8006c98 <__ieee754_atan2+0x38>
 8006db2:	a517      	add	r5, pc, #92	; (adr r5, 8006e10 <__ieee754_atan2+0x1b0>)
 8006db4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006db8:	e7a2      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006dba:	a511      	add	r5, pc, #68	; (adr r5, 8006e00 <__ieee754_atan2+0x1a0>)
 8006dbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006dc0:	e79e      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006dc2:	a511      	add	r5, pc, #68	; (adr r5, 8006e08 <__ieee754_atan2+0x1a8>)
 8006dc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006dc8:	e79a      	b.n	8006d00 <__ieee754_atan2+0xa0>
 8006dca:	bf00      	nop
 8006dcc:	f3af 8000 	nop.w
 8006dd0:	54442d18 	.word	0x54442d18
 8006dd4:	c00921fb 	.word	0xc00921fb
 8006dd8:	54442d18 	.word	0x54442d18
 8006ddc:	bff921fb 	.word	0xbff921fb
 8006de0:	54442d18 	.word	0x54442d18
 8006de4:	bfe921fb 	.word	0xbfe921fb
 8006de8:	7f3321d2 	.word	0x7f3321d2
 8006dec:	4002d97c 	.word	0x4002d97c
 8006df0:	7f3321d2 	.word	0x7f3321d2
 8006df4:	c002d97c 	.word	0xc002d97c
 8006df8:	33145c07 	.word	0x33145c07
 8006dfc:	3ca1a626 	.word	0x3ca1a626
 8006e00:	54442d18 	.word	0x54442d18
 8006e04:	400921fb 	.word	0x400921fb
 8006e08:	54442d18 	.word	0x54442d18
 8006e0c:	3ff921fb 	.word	0x3ff921fb
 8006e10:	54442d18 	.word	0x54442d18
 8006e14:	3fe921fb 	.word	0x3fe921fb
 8006e18:	7ff00000 	.word	0x7ff00000
 8006e1c:	00000000 	.word	0x00000000

08006e20 <__ieee754_exp>:
 8006e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e24:	4aa8      	ldr	r2, [pc, #672]	; (80070c8 <__ieee754_exp+0x2a8>)
 8006e26:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006e2a:	4296      	cmp	r6, r2
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8006e34:	d92c      	bls.n	8006e90 <__ieee754_exp+0x70>
 8006e36:	4aa5      	ldr	r2, [pc, #660]	; (80070cc <__ieee754_exp+0x2ac>)
 8006e38:	4296      	cmp	r6, r2
 8006e3a:	d910      	bls.n	8006e5e <__ieee754_exp+0x3e>
 8006e3c:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8006e40:	4303      	orrs	r3, r0
 8006e42:	4602      	mov	r2, r0
 8006e44:	d005      	beq.n	8006e52 <__ieee754_exp+0x32>
 8006e46:	460b      	mov	r3, r1
 8006e48:	f7f9 f9f4 	bl	8000234 <__adddf3>
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	e000      	b.n	8006e54 <__ieee754_exp+0x34>
 8006e52:	b9d7      	cbnz	r7, 8006e8a <__ieee754_exp+0x6a>
 8006e54:	4628      	mov	r0, r5
 8006e56:	4621      	mov	r1, r4
 8006e58:	b004      	add	sp, #16
 8006e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5e:	a384      	add	r3, pc, #528	; (adr r3, 8007070 <__ieee754_exp+0x250>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f7f9 fe2c 	bl	8000ac0 <__aeabi_dcmpgt>
 8006e68:	b138      	cbz	r0, 8006e7a <__ieee754_exp+0x5a>
 8006e6a:	a383      	add	r3, pc, #524	; (adr r3, 8007078 <__ieee754_exp+0x258>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	4610      	mov	r0, r2
 8006e72:	4619      	mov	r1, r3
 8006e74:	f7f9 fb94 	bl	80005a0 <__aeabi_dmul>
 8006e78:	e7e8      	b.n	8006e4c <__ieee754_exp+0x2c>
 8006e7a:	a381      	add	r3, pc, #516	; (adr r3, 8007080 <__ieee754_exp+0x260>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	4628      	mov	r0, r5
 8006e82:	4621      	mov	r1, r4
 8006e84:	f7f9 fdfe 	bl	8000a84 <__aeabi_dcmplt>
 8006e88:	b130      	cbz	r0, 8006e98 <__ieee754_exp+0x78>
 8006e8a:	2500      	movs	r5, #0
 8006e8c:	462c      	mov	r4, r5
 8006e8e:	e7e1      	b.n	8006e54 <__ieee754_exp+0x34>
 8006e90:	4b8f      	ldr	r3, [pc, #572]	; (80070d0 <__ieee754_exp+0x2b0>)
 8006e92:	429e      	cmp	r6, r3
 8006e94:	f240 80a6 	bls.w	8006fe4 <__ieee754_exp+0x1c4>
 8006e98:	4b8e      	ldr	r3, [pc, #568]	; (80070d4 <__ieee754_exp+0x2b4>)
 8006e9a:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8006e9e:	429e      	cmp	r6, r3
 8006ea0:	d875      	bhi.n	8006f8e <__ieee754_exp+0x16e>
 8006ea2:	4b8d      	ldr	r3, [pc, #564]	; (80070d8 <__ieee754_exp+0x2b8>)
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	4443      	add	r3, r8
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	4621      	mov	r1, r4
 8006eae:	f7f9 f9bf 	bl	8000230 <__aeabi_dsub>
 8006eb2:	4e8a      	ldr	r6, [pc, #552]	; (80070dc <__ieee754_exp+0x2bc>)
 8006eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8006eb8:	f1c7 0a01 	rsb	sl, r7, #1
 8006ebc:	4446      	add	r6, r8
 8006ebe:	ebaa 0a07 	sub.w	sl, sl, r7
 8006ec2:	e9d6 8900 	ldrd	r8, r9, [r6]
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ecc:	464b      	mov	r3, r9
 8006ece:	f7f9 f9af 	bl	8000230 <__aeabi_dsub>
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	462a      	mov	r2, r5
 8006ed8:	4623      	mov	r3, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	4621      	mov	r1, r4
 8006ede:	f7f9 fb5f 	bl	80005a0 <__aeabi_dmul>
 8006ee2:	a369      	add	r3, pc, #420	; (adr r3, 8007088 <__ieee754_exp+0x268>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	4606      	mov	r6, r0
 8006eea:	460f      	mov	r7, r1
 8006eec:	f7f9 fb58 	bl	80005a0 <__aeabi_dmul>
 8006ef0:	a367      	add	r3, pc, #412	; (adr r3, 8007090 <__ieee754_exp+0x270>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 f99b 	bl	8000230 <__aeabi_dsub>
 8006efa:	4632      	mov	r2, r6
 8006efc:	463b      	mov	r3, r7
 8006efe:	f7f9 fb4f 	bl	80005a0 <__aeabi_dmul>
 8006f02:	a365      	add	r3, pc, #404	; (adr r3, 8007098 <__ieee754_exp+0x278>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	f7f9 f994 	bl	8000234 <__adddf3>
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	463b      	mov	r3, r7
 8006f10:	f7f9 fb46 	bl	80005a0 <__aeabi_dmul>
 8006f14:	a362      	add	r3, pc, #392	; (adr r3, 80070a0 <__ieee754_exp+0x280>)
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	f7f9 f989 	bl	8000230 <__aeabi_dsub>
 8006f1e:	4632      	mov	r2, r6
 8006f20:	463b      	mov	r3, r7
 8006f22:	f7f9 fb3d 	bl	80005a0 <__aeabi_dmul>
 8006f26:	a360      	add	r3, pc, #384	; (adr r3, 80070a8 <__ieee754_exp+0x288>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f7f9 f982 	bl	8000234 <__adddf3>
 8006f30:	4632      	mov	r2, r6
 8006f32:	463b      	mov	r3, r7
 8006f34:	f7f9 fb34 	bl	80005a0 <__aeabi_dmul>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	4621      	mov	r1, r4
 8006f40:	f7f9 f976 	bl	8000230 <__aeabi_dsub>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4606      	mov	r6, r0
 8006f4a:	460f      	mov	r7, r1
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	4621      	mov	r1, r4
 8006f50:	f7f9 fb26 	bl	80005a0 <__aeabi_dmul>
 8006f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f58:	f1ba 0f00 	cmp.w	sl, #0
 8006f5c:	d159      	bne.n	8007012 <__ieee754_exp+0x1f2>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f64:	4630      	mov	r0, r6
 8006f66:	4639      	mov	r1, r7
 8006f68:	f7f9 f962 	bl	8000230 <__aeabi_dsub>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f74:	f7f9 fc3e 	bl	80007f4 <__aeabi_ddiv>
 8006f78:	462a      	mov	r2, r5
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	f7f9 f958 	bl	8000230 <__aeabi_dsub>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	2000      	movs	r0, #0
 8006f86:	4956      	ldr	r1, [pc, #344]	; (80070e0 <__ieee754_exp+0x2c0>)
 8006f88:	f7f9 f952 	bl	8000230 <__aeabi_dsub>
 8006f8c:	e75e      	b.n	8006e4c <__ieee754_exp+0x2c>
 8006f8e:	4e55      	ldr	r6, [pc, #340]	; (80070e4 <__ieee754_exp+0x2c4>)
 8006f90:	a347      	add	r3, pc, #284	; (adr r3, 80070b0 <__ieee754_exp+0x290>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	4446      	add	r6, r8
 8006f98:	4628      	mov	r0, r5
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	f7f9 fb00 	bl	80005a0 <__aeabi_dmul>
 8006fa0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fa4:	f7f9 f946 	bl	8000234 <__adddf3>
 8006fa8:	f7f9 fdaa 	bl	8000b00 <__aeabi_d2iz>
 8006fac:	4682      	mov	sl, r0
 8006fae:	f7f9 fa8d 	bl	80004cc <__aeabi_i2d>
 8006fb2:	a341      	add	r3, pc, #260	; (adr r3, 80070b8 <__ieee754_exp+0x298>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	4606      	mov	r6, r0
 8006fba:	460f      	mov	r7, r1
 8006fbc:	f7f9 faf0 	bl	80005a0 <__aeabi_dmul>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	f7f9 f932 	bl	8000230 <__aeabi_dsub>
 8006fcc:	a33c      	add	r3, pc, #240	; (adr r3, 80070c0 <__ieee754_exp+0x2a0>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	e9cd 0100 	strd	r0, r1, [sp]
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4639      	mov	r1, r7
 8006fda:	f7f9 fae1 	bl	80005a0 <__aeabi_dmul>
 8006fde:	4680      	mov	r8, r0
 8006fe0:	4689      	mov	r9, r1
 8006fe2:	e770      	b.n	8006ec6 <__ieee754_exp+0xa6>
 8006fe4:	4b40      	ldr	r3, [pc, #256]	; (80070e8 <__ieee754_exp+0x2c8>)
 8006fe6:	429e      	cmp	r6, r3
 8006fe8:	d80e      	bhi.n	8007008 <__ieee754_exp+0x1e8>
 8006fea:	a323      	add	r3, pc, #140	; (adr r3, 8007078 <__ieee754_exp+0x258>)
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f7f9 f920 	bl	8000234 <__adddf3>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4b3a      	ldr	r3, [pc, #232]	; (80070e0 <__ieee754_exp+0x2c0>)
 8006ff8:	f7f9 fd62 	bl	8000ac0 <__aeabi_dcmpgt>
 8006ffc:	b138      	cbz	r0, 800700e <__ieee754_exp+0x1ee>
 8006ffe:	2200      	movs	r2, #0
 8007000:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <__ieee754_exp+0x2c0>)
 8007002:	4628      	mov	r0, r5
 8007004:	4621      	mov	r1, r4
 8007006:	e71f      	b.n	8006e48 <__ieee754_exp+0x28>
 8007008:	f04f 0a00 	mov.w	sl, #0
 800700c:	e763      	b.n	8006ed6 <__ieee754_exp+0xb6>
 800700e:	4682      	mov	sl, r0
 8007010:	e761      	b.n	8006ed6 <__ieee754_exp+0xb6>
 8007012:	4632      	mov	r2, r6
 8007014:	463b      	mov	r3, r7
 8007016:	2000      	movs	r0, #0
 8007018:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800701c:	f7f9 f908 	bl	8000230 <__aeabi_dsub>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007028:	f7f9 fbe4 	bl	80007f4 <__aeabi_ddiv>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4640      	mov	r0, r8
 8007032:	4649      	mov	r1, r9
 8007034:	f7f9 f8fc 	bl	8000230 <__aeabi_dsub>
 8007038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800703c:	f7f9 f8f8 	bl	8000230 <__aeabi_dsub>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	2000      	movs	r0, #0
 8007046:	4926      	ldr	r1, [pc, #152]	; (80070e0 <__ieee754_exp+0x2c0>)
 8007048:	f7f9 f8f2 	bl	8000230 <__aeabi_dsub>
 800704c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007050:	4592      	cmp	sl, r2
 8007052:	db02      	blt.n	800705a <__ieee754_exp+0x23a>
 8007054:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007058:	e6f8      	b.n	8006e4c <__ieee754_exp+0x2c>
 800705a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800705e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007062:	2200      	movs	r2, #0
 8007064:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8007068:	e704      	b.n	8006e74 <__ieee754_exp+0x54>
 800706a:	bf00      	nop
 800706c:	f3af 8000 	nop.w
 8007070:	fefa39ef 	.word	0xfefa39ef
 8007074:	40862e42 	.word	0x40862e42
 8007078:	8800759c 	.word	0x8800759c
 800707c:	7e37e43c 	.word	0x7e37e43c
 8007080:	d52d3051 	.word	0xd52d3051
 8007084:	c0874910 	.word	0xc0874910
 8007088:	72bea4d0 	.word	0x72bea4d0
 800708c:	3e663769 	.word	0x3e663769
 8007090:	c5d26bf1 	.word	0xc5d26bf1
 8007094:	3ebbbd41 	.word	0x3ebbbd41
 8007098:	af25de2c 	.word	0xaf25de2c
 800709c:	3f11566a 	.word	0x3f11566a
 80070a0:	16bebd93 	.word	0x16bebd93
 80070a4:	3f66c16c 	.word	0x3f66c16c
 80070a8:	5555553e 	.word	0x5555553e
 80070ac:	3fc55555 	.word	0x3fc55555
 80070b0:	652b82fe 	.word	0x652b82fe
 80070b4:	3ff71547 	.word	0x3ff71547
 80070b8:	fee00000 	.word	0xfee00000
 80070bc:	3fe62e42 	.word	0x3fe62e42
 80070c0:	35793c76 	.word	0x35793c76
 80070c4:	3dea39ef 	.word	0x3dea39ef
 80070c8:	40862e41 	.word	0x40862e41
 80070cc:	7fefffff 	.word	0x7fefffff
 80070d0:	3fd62e42 	.word	0x3fd62e42
 80070d4:	3ff0a2b1 	.word	0x3ff0a2b1
 80070d8:	08008440 	.word	0x08008440
 80070dc:	08008450 	.word	0x08008450
 80070e0:	3ff00000 	.word	0x3ff00000
 80070e4:	08008430 	.word	0x08008430
 80070e8:	3e2fffff 	.word	0x3e2fffff

080070ec <__ieee754_hypot>:
 80070ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80070f4:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80070f8:	42b7      	cmp	r7, r6
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	da05      	bge.n	800710a <__ieee754_hypot+0x1e>
 80070fe:	463c      	mov	r4, r7
 8007100:	4637      	mov	r7, r6
 8007102:	4626      	mov	r6, r4
 8007104:	4604      	mov	r4, r0
 8007106:	4610      	mov	r0, r2
 8007108:	4622      	mov	r2, r4
 800710a:	1bbb      	subs	r3, r7, r6
 800710c:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 8007110:	4639      	mov	r1, r7
 8007112:	4682      	mov	sl, r0
 8007114:	46bb      	mov	fp, r7
 8007116:	4690      	mov	r8, r2
 8007118:	46b1      	mov	r9, r6
 800711a:	dd06      	ble.n	800712a <__ieee754_hypot+0x3e>
 800711c:	4633      	mov	r3, r6
 800711e:	4639      	mov	r1, r7
 8007120:	f7f9 f888 	bl	8000234 <__adddf3>
 8007124:	4682      	mov	sl, r0
 8007126:	468b      	mov	fp, r1
 8007128:	e019      	b.n	800715e <__ieee754_hypot+0x72>
 800712a:	4b77      	ldr	r3, [pc, #476]	; (8007308 <__ieee754_hypot+0x21c>)
 800712c:	429f      	cmp	r7, r3
 800712e:	f340 809a 	ble.w	8007266 <__ieee754_hypot+0x17a>
 8007132:	4b76      	ldr	r3, [pc, #472]	; (800730c <__ieee754_hypot+0x220>)
 8007134:	429f      	cmp	r7, r3
 8007136:	dd17      	ble.n	8007168 <__ieee754_hypot+0x7c>
 8007138:	4603      	mov	r3, r0
 800713a:	f3c7 0713 	ubfx	r7, r7, #0, #20
 800713e:	433b      	orrs	r3, r7
 8007140:	d004      	beq.n	800714c <__ieee754_hypot+0x60>
 8007142:	4633      	mov	r3, r6
 8007144:	f7f9 f876 	bl	8000234 <__adddf3>
 8007148:	4682      	mov	sl, r0
 800714a:	468b      	mov	fp, r1
 800714c:	4643      	mov	r3, r8
 800714e:	f086 46ff 	eor.w	r6, r6, #2139095040	; 0x7f800000
 8007152:	f486 06e0 	eor.w	r6, r6, #7340032	; 0x700000
 8007156:	4333      	orrs	r3, r6
 8007158:	d101      	bne.n	800715e <__ieee754_hypot+0x72>
 800715a:	46c2      	mov	sl, r8
 800715c:	46cb      	mov	fp, r9
 800715e:	4650      	mov	r0, sl
 8007160:	4659      	mov	r1, fp
 8007162:	b009      	add	sp, #36	; 0x24
 8007164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007168:	f1a7 5716 	sub.w	r7, r7, #629145600	; 0x25800000
 800716c:	f1a6 5616 	sub.w	r6, r6, #629145600	; 0x25800000
 8007170:	46bb      	mov	fp, r7
 8007172:	46b1      	mov	r9, r6
 8007174:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	4b65      	ldr	r3, [pc, #404]	; (8007310 <__ieee754_hypot+0x224>)
 800717c:	429e      	cmp	r6, r3
 800717e:	dc1b      	bgt.n	80071b8 <__ieee754_hypot+0xcc>
 8007180:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 8007184:	da71      	bge.n	800726a <__ieee754_hypot+0x17e>
 8007186:	4643      	mov	r3, r8
 8007188:	4333      	orrs	r3, r6
 800718a:	d0e8      	beq.n	800715e <__ieee754_hypot+0x72>
 800718c:	2400      	movs	r4, #0
 800718e:	4d61      	ldr	r5, [pc, #388]	; (8007314 <__ieee754_hypot+0x228>)
 8007190:	4622      	mov	r2, r4
 8007192:	462b      	mov	r3, r5
 8007194:	4640      	mov	r0, r8
 8007196:	4649      	mov	r1, r9
 8007198:	f7f9 fa02 	bl	80005a0 <__aeabi_dmul>
 800719c:	462b      	mov	r3, r5
 800719e:	4680      	mov	r8, r0
 80071a0:	4689      	mov	r9, r1
 80071a2:	4650      	mov	r0, sl
 80071a4:	4659      	mov	r1, fp
 80071a6:	4622      	mov	r2, r4
 80071a8:	f7f9 f9fa 	bl	80005a0 <__aeabi_dmul>
 80071ac:	4682      	mov	sl, r0
 80071ae:	468b      	mov	fp, r1
 80071b0:	9b01      	ldr	r3, [sp, #4]
 80071b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	4650      	mov	r0, sl
 80071be:	4659      	mov	r1, fp
 80071c0:	f7f9 f836 	bl	8000230 <__aeabi_dsub>
 80071c4:	4605      	mov	r5, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f9 fc58 	bl	8000a84 <__aeabi_dcmplt>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d053      	beq.n	8007280 <__ieee754_hypot+0x194>
 80071d8:	2400      	movs	r4, #0
 80071da:	463b      	mov	r3, r7
 80071dc:	4622      	mov	r2, r4
 80071de:	4639      	mov	r1, r7
 80071e0:	4620      	mov	r0, r4
 80071e2:	f7f9 f9dd 	bl	80005a0 <__aeabi_dmul>
 80071e6:	4642      	mov	r2, r8
 80071e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071ec:	464b      	mov	r3, r9
 80071ee:	4640      	mov	r0, r8
 80071f0:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 80071f4:	f7f9 f9d4 	bl	80005a0 <__aeabi_dmul>
 80071f8:	463d      	mov	r5, r7
 80071fa:	4606      	mov	r6, r0
 80071fc:	460f      	mov	r7, r1
 80071fe:	4622      	mov	r2, r4
 8007200:	462b      	mov	r3, r5
 8007202:	4650      	mov	r0, sl
 8007204:	4659      	mov	r1, fp
 8007206:	f7f9 f815 	bl	8000234 <__adddf3>
 800720a:	4622      	mov	r2, r4
 800720c:	4680      	mov	r8, r0
 800720e:	4689      	mov	r9, r1
 8007210:	462b      	mov	r3, r5
 8007212:	4650      	mov	r0, sl
 8007214:	4659      	mov	r1, fp
 8007216:	f7f9 f80b 	bl	8000230 <__aeabi_dsub>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4640      	mov	r0, r8
 8007220:	4649      	mov	r1, r9
 8007222:	f7f9 f9bd 	bl	80005a0 <__aeabi_dmul>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4630      	mov	r0, r6
 800722c:	4639      	mov	r1, r7
 800722e:	f7f8 ffff 	bl	8000230 <__aeabi_dsub>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723a:	f7f8 fff9 	bl	8000230 <__aeabi_dsub>
 800723e:	f000 fd75 	bl	8007d2c <__ieee754_sqrt>
 8007242:	9b01      	ldr	r3, [sp, #4]
 8007244:	4682      	mov	sl, r0
 8007246:	468b      	mov	fp, r1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d088      	beq.n	800715e <__ieee754_hypot+0x72>
 800724c:	2000      	movs	r0, #0
 800724e:	051b      	lsls	r3, r3, #20
 8007250:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007254:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4650      	mov	r0, sl
 800725e:	4659      	mov	r1, fp
 8007260:	f7f9 f99e 	bl	80005a0 <__aeabi_dmul>
 8007264:	e75e      	b.n	8007124 <__ieee754_hypot+0x38>
 8007266:	2300      	movs	r3, #0
 8007268:	e786      	b.n	8007178 <__ieee754_hypot+0x8c>
 800726a:	9b01      	ldr	r3, [sp, #4]
 800726c:	f107 5716 	add.w	r7, r7, #629145600	; 0x25800000
 8007270:	f106 5616 	add.w	r6, r6, #629145600	; 0x25800000
 8007274:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8007278:	9301      	str	r3, [sp, #4]
 800727a:	46bb      	mov	fp, r7
 800727c:	46b1      	mov	r9, r6
 800727e:	e79b      	b.n	80071b8 <__ieee754_hypot+0xcc>
 8007280:	4633      	mov	r3, r6
 8007282:	2200      	movs	r2, #0
 8007284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728c:	2200      	movs	r2, #0
 800728e:	f507 1380 	add.w	r3, r7, #1048576	; 0x100000
 8007292:	4616      	mov	r6, r2
 8007294:	461f      	mov	r7, r3
 8007296:	f7f9 f983 	bl	80005a0 <__aeabi_dmul>
 800729a:	462a      	mov	r2, r5
 800729c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072a0:	4623      	mov	r3, r4
 80072a2:	4628      	mov	r0, r5
 80072a4:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80072a8:	f7f9 f97a 	bl	80005a0 <__aeabi_dmul>
 80072ac:	4652      	mov	r2, sl
 80072ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072b2:	465b      	mov	r3, fp
 80072b4:	4650      	mov	r0, sl
 80072b6:	4659      	mov	r1, fp
 80072b8:	f7f8 ffbc 	bl	8000234 <__adddf3>
 80072bc:	4632      	mov	r2, r6
 80072be:	463b      	mov	r3, r7
 80072c0:	f7f8 ffb6 	bl	8000230 <__aeabi_dsub>
 80072c4:	4642      	mov	r2, r8
 80072c6:	464b      	mov	r3, r9
 80072c8:	f7f9 f96a 	bl	80005a0 <__aeabi_dmul>
 80072cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072d0:	4604      	mov	r4, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	4640      	mov	r0, r8
 80072d6:	4649      	mov	r1, r9
 80072d8:	f7f8 ffaa 	bl	8000230 <__aeabi_dsub>
 80072dc:	4632      	mov	r2, r6
 80072de:	463b      	mov	r3, r7
 80072e0:	f7f9 f95e 	bl	80005a0 <__aeabi_dmul>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4620      	mov	r0, r4
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7f8 ffa2 	bl	8000234 <__adddf3>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072f8:	f7f8 ff9a 	bl	8000230 <__aeabi_dsub>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007304:	e799      	b.n	800723a <__ieee754_hypot+0x14e>
 8007306:	bf00      	nop
 8007308:	5f300000 	.word	0x5f300000
 800730c:	7fefffff 	.word	0x7fefffff
 8007310:	20afffff 	.word	0x20afffff
 8007314:	7fd00000 	.word	0x7fd00000

08007318 <__ieee754_pow>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	b091      	sub	sp, #68	; 0x44
 800731e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007322:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8007326:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800732a:	ea55 0302 	orrs.w	r3, r5, r2
 800732e:	4607      	mov	r7, r0
 8007330:	4688      	mov	r8, r1
 8007332:	f000 84b7 	beq.w	8007ca4 <__ieee754_pow+0x98c>
 8007336:	4b80      	ldr	r3, [pc, #512]	; (8007538 <__ieee754_pow+0x220>)
 8007338:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800733c:	429c      	cmp	r4, r3
 800733e:	4689      	mov	r9, r1
 8007340:	4682      	mov	sl, r0
 8007342:	dc09      	bgt.n	8007358 <__ieee754_pow+0x40>
 8007344:	d103      	bne.n	800734e <__ieee754_pow+0x36>
 8007346:	b938      	cbnz	r0, 8007358 <__ieee754_pow+0x40>
 8007348:	42a5      	cmp	r5, r4
 800734a:	dc0d      	bgt.n	8007368 <__ieee754_pow+0x50>
 800734c:	e001      	b.n	8007352 <__ieee754_pow+0x3a>
 800734e:	429d      	cmp	r5, r3
 8007350:	dc02      	bgt.n	8007358 <__ieee754_pow+0x40>
 8007352:	429d      	cmp	r5, r3
 8007354:	d10e      	bne.n	8007374 <__ieee754_pow+0x5c>
 8007356:	b16a      	cbz	r2, 8007374 <__ieee754_pow+0x5c>
 8007358:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800735c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007360:	ea54 030a 	orrs.w	r3, r4, sl
 8007364:	f000 849e 	beq.w	8007ca4 <__ieee754_pow+0x98c>
 8007368:	4874      	ldr	r0, [pc, #464]	; (800753c <__ieee754_pow+0x224>)
 800736a:	b011      	add	sp, #68	; 0x44
 800736c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	f000 bf20 	b.w	80081b4 <nan>
 8007374:	f1b9 0f00 	cmp.w	r9, #0
 8007378:	da53      	bge.n	8007422 <__ieee754_pow+0x10a>
 800737a:	4b71      	ldr	r3, [pc, #452]	; (8007540 <__ieee754_pow+0x228>)
 800737c:	429d      	cmp	r5, r3
 800737e:	dc4e      	bgt.n	800741e <__ieee754_pow+0x106>
 8007380:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007384:	429d      	cmp	r5, r3
 8007386:	dd4c      	ble.n	8007422 <__ieee754_pow+0x10a>
 8007388:	152b      	asrs	r3, r5, #20
 800738a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800738e:	2b14      	cmp	r3, #20
 8007390:	dd28      	ble.n	80073e4 <__ieee754_pow+0xcc>
 8007392:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007396:	fa22 f103 	lsr.w	r1, r2, r3
 800739a:	fa01 f303 	lsl.w	r3, r1, r3
 800739e:	4293      	cmp	r3, r2
 80073a0:	d13f      	bne.n	8007422 <__ieee754_pow+0x10a>
 80073a2:	f001 0101 	and.w	r1, r1, #1
 80073a6:	f1c1 0302 	rsb	r3, r1, #2
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	2a00      	cmp	r2, #0
 80073ae:	d15c      	bne.n	800746a <__ieee754_pow+0x152>
 80073b0:	4b61      	ldr	r3, [pc, #388]	; (8007538 <__ieee754_pow+0x220>)
 80073b2:	429d      	cmp	r5, r3
 80073b4:	d126      	bne.n	8007404 <__ieee754_pow+0xec>
 80073b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80073ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80073be:	ea53 030a 	orrs.w	r3, r3, sl
 80073c2:	f000 846f 	beq.w	8007ca4 <__ieee754_pow+0x98c>
 80073c6:	4b5f      	ldr	r3, [pc, #380]	; (8007544 <__ieee754_pow+0x22c>)
 80073c8:	429c      	cmp	r4, r3
 80073ca:	dd2c      	ble.n	8007426 <__ieee754_pow+0x10e>
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	f280 846f 	bge.w	8007cb0 <__ieee754_pow+0x998>
 80073d2:	f04f 0b00 	mov.w	fp, #0
 80073d6:	f04f 0c00 	mov.w	ip, #0
 80073da:	4658      	mov	r0, fp
 80073dc:	4661      	mov	r1, ip
 80073de:	b011      	add	sp, #68	; 0x44
 80073e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	d13e      	bne.n	8007466 <__ieee754_pow+0x14e>
 80073e8:	f1c3 0314 	rsb	r3, r3, #20
 80073ec:	fa45 f103 	asr.w	r1, r5, r3
 80073f0:	fa01 f303 	lsl.w	r3, r1, r3
 80073f4:	42ab      	cmp	r3, r5
 80073f6:	f040 8463 	bne.w	8007cc0 <__ieee754_pow+0x9a8>
 80073fa:	f001 0101 	and.w	r1, r1, #1
 80073fe:	f1c1 0302 	rsb	r3, r1, #2
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	4b50      	ldr	r3, [pc, #320]	; (8007548 <__ieee754_pow+0x230>)
 8007406:	429d      	cmp	r5, r3
 8007408:	d114      	bne.n	8007434 <__ieee754_pow+0x11c>
 800740a:	2e00      	cmp	r6, #0
 800740c:	f280 8454 	bge.w	8007cb8 <__ieee754_pow+0x9a0>
 8007410:	463a      	mov	r2, r7
 8007412:	4643      	mov	r3, r8
 8007414:	2000      	movs	r0, #0
 8007416:	494c      	ldr	r1, [pc, #304]	; (8007548 <__ieee754_pow+0x230>)
 8007418:	f7f9 f9ec 	bl	80007f4 <__aeabi_ddiv>
 800741c:	e013      	b.n	8007446 <__ieee754_pow+0x12e>
 800741e:	2302      	movs	r3, #2
 8007420:	e7c3      	b.n	80073aa <__ieee754_pow+0x92>
 8007422:	2300      	movs	r3, #0
 8007424:	e7c1      	b.n	80073aa <__ieee754_pow+0x92>
 8007426:	2e00      	cmp	r6, #0
 8007428:	dad3      	bge.n	80073d2 <__ieee754_pow+0xba>
 800742a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800742e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007432:	e7d2      	b.n	80073da <__ieee754_pow+0xc2>
 8007434:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007438:	d108      	bne.n	800744c <__ieee754_pow+0x134>
 800743a:	463a      	mov	r2, r7
 800743c:	4643      	mov	r3, r8
 800743e:	4638      	mov	r0, r7
 8007440:	4641      	mov	r1, r8
 8007442:	f7f9 f8ad 	bl	80005a0 <__aeabi_dmul>
 8007446:	4683      	mov	fp, r0
 8007448:	468c      	mov	ip, r1
 800744a:	e7c6      	b.n	80073da <__ieee754_pow+0xc2>
 800744c:	4b3f      	ldr	r3, [pc, #252]	; (800754c <__ieee754_pow+0x234>)
 800744e:	429e      	cmp	r6, r3
 8007450:	d10b      	bne.n	800746a <__ieee754_pow+0x152>
 8007452:	f1b9 0f00 	cmp.w	r9, #0
 8007456:	db08      	blt.n	800746a <__ieee754_pow+0x152>
 8007458:	4638      	mov	r0, r7
 800745a:	4641      	mov	r1, r8
 800745c:	b011      	add	sp, #68	; 0x44
 800745e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007462:	f000 bc63 	b.w	8007d2c <__ieee754_sqrt>
 8007466:	2300      	movs	r3, #0
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4638      	mov	r0, r7
 800746c:	4641      	mov	r1, r8
 800746e:	f000 fe95 	bl	800819c <fabs>
 8007472:	4683      	mov	fp, r0
 8007474:	468c      	mov	ip, r1
 8007476:	f1ba 0f00 	cmp.w	sl, #0
 800747a:	d12b      	bne.n	80074d4 <__ieee754_pow+0x1bc>
 800747c:	b124      	cbz	r4, 8007488 <__ieee754_pow+0x170>
 800747e:	4b32      	ldr	r3, [pc, #200]	; (8007548 <__ieee754_pow+0x230>)
 8007480:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8007484:	429a      	cmp	r2, r3
 8007486:	d125      	bne.n	80074d4 <__ieee754_pow+0x1bc>
 8007488:	2e00      	cmp	r6, #0
 800748a:	da07      	bge.n	800749c <__ieee754_pow+0x184>
 800748c:	465a      	mov	r2, fp
 800748e:	4663      	mov	r3, ip
 8007490:	2000      	movs	r0, #0
 8007492:	492d      	ldr	r1, [pc, #180]	; (8007548 <__ieee754_pow+0x230>)
 8007494:	f7f9 f9ae 	bl	80007f4 <__aeabi_ddiv>
 8007498:	4683      	mov	fp, r0
 800749a:	468c      	mov	ip, r1
 800749c:	f1b9 0f00 	cmp.w	r9, #0
 80074a0:	da9b      	bge.n	80073da <__ieee754_pow+0xc2>
 80074a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80074a6:	9b00      	ldr	r3, [sp, #0]
 80074a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80074ac:	4323      	orrs	r3, r4
 80074ae:	d108      	bne.n	80074c2 <__ieee754_pow+0x1aa>
 80074b0:	465a      	mov	r2, fp
 80074b2:	4663      	mov	r3, ip
 80074b4:	4658      	mov	r0, fp
 80074b6:	4661      	mov	r1, ip
 80074b8:	f7f8 feba 	bl	8000230 <__aeabi_dsub>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	e7aa      	b.n	8007418 <__ieee754_pow+0x100>
 80074c2:	9b00      	ldr	r3, [sp, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d188      	bne.n	80073da <__ieee754_pow+0xc2>
 80074c8:	4658      	mov	r0, fp
 80074ca:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80074ce:	4683      	mov	fp, r0
 80074d0:	469c      	mov	ip, r3
 80074d2:	e782      	b.n	80073da <__ieee754_pow+0xc2>
 80074d4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80074d8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80074dc:	930d      	str	r3, [sp, #52]	; 0x34
 80074de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074e0:	9b00      	ldr	r3, [sp, #0]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	d104      	bne.n	80074f0 <__ieee754_pow+0x1d8>
 80074e6:	463a      	mov	r2, r7
 80074e8:	4643      	mov	r3, r8
 80074ea:	4638      	mov	r0, r7
 80074ec:	4641      	mov	r1, r8
 80074ee:	e7e3      	b.n	80074b8 <__ieee754_pow+0x1a0>
 80074f0:	4b17      	ldr	r3, [pc, #92]	; (8007550 <__ieee754_pow+0x238>)
 80074f2:	429d      	cmp	r5, r3
 80074f4:	f340 80fe 	ble.w	80076f4 <__ieee754_pow+0x3dc>
 80074f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80074fc:	429d      	cmp	r5, r3
 80074fe:	dd0b      	ble.n	8007518 <__ieee754_pow+0x200>
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <__ieee754_pow+0x22c>)
 8007502:	429c      	cmp	r4, r3
 8007504:	dc0e      	bgt.n	8007524 <__ieee754_pow+0x20c>
 8007506:	2e00      	cmp	r6, #0
 8007508:	f6bf af63 	bge.w	80073d2 <__ieee754_pow+0xba>
 800750c:	a308      	add	r3, pc, #32	; (adr r3, 8007530 <__ieee754_pow+0x218>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	e794      	b.n	8007442 <__ieee754_pow+0x12a>
 8007518:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <__ieee754_pow+0x23c>)
 800751a:	429c      	cmp	r4, r3
 800751c:	ddf3      	ble.n	8007506 <__ieee754_pow+0x1ee>
 800751e:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <__ieee754_pow+0x230>)
 8007520:	429c      	cmp	r4, r3
 8007522:	dd19      	ble.n	8007558 <__ieee754_pow+0x240>
 8007524:	2e00      	cmp	r6, #0
 8007526:	dcf1      	bgt.n	800750c <__ieee754_pow+0x1f4>
 8007528:	e753      	b.n	80073d2 <__ieee754_pow+0xba>
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w
 8007530:	8800759c 	.word	0x8800759c
 8007534:	7e37e43c 	.word	0x7e37e43c
 8007538:	7ff00000 	.word	0x7ff00000
 800753c:	08008423 	.word	0x08008423
 8007540:	433fffff 	.word	0x433fffff
 8007544:	3fefffff 	.word	0x3fefffff
 8007548:	3ff00000 	.word	0x3ff00000
 800754c:	3fe00000 	.word	0x3fe00000
 8007550:	41e00000 	.word	0x41e00000
 8007554:	3feffffe 	.word	0x3feffffe
 8007558:	4661      	mov	r1, ip
 800755a:	2200      	movs	r2, #0
 800755c:	4b60      	ldr	r3, [pc, #384]	; (80076e0 <__ieee754_pow+0x3c8>)
 800755e:	4658      	mov	r0, fp
 8007560:	f7f8 fe66 	bl	8000230 <__aeabi_dsub>
 8007564:	a354      	add	r3, pc, #336	; (adr r3, 80076b8 <__ieee754_pow+0x3a0>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	4604      	mov	r4, r0
 800756c:	460d      	mov	r5, r1
 800756e:	f7f9 f817 	bl	80005a0 <__aeabi_dmul>
 8007572:	a353      	add	r3, pc, #332	; (adr r3, 80076c0 <__ieee754_pow+0x3a8>)
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	4606      	mov	r6, r0
 800757a:	460f      	mov	r7, r1
 800757c:	4620      	mov	r0, r4
 800757e:	4629      	mov	r1, r5
 8007580:	f7f9 f80e 	bl	80005a0 <__aeabi_dmul>
 8007584:	2200      	movs	r2, #0
 8007586:	4682      	mov	sl, r0
 8007588:	468b      	mov	fp, r1
 800758a:	4b56      	ldr	r3, [pc, #344]	; (80076e4 <__ieee754_pow+0x3cc>)
 800758c:	4620      	mov	r0, r4
 800758e:	4629      	mov	r1, r5
 8007590:	f7f9 f806 	bl	80005a0 <__aeabi_dmul>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	a14b      	add	r1, pc, #300	; (adr r1, 80076c8 <__ieee754_pow+0x3b0>)
 800759a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800759e:	f7f8 fe47 	bl	8000230 <__aeabi_dsub>
 80075a2:	4622      	mov	r2, r4
 80075a4:	462b      	mov	r3, r5
 80075a6:	f7f8 fffb 	bl	80005a0 <__aeabi_dmul>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	2000      	movs	r0, #0
 80075b0:	494d      	ldr	r1, [pc, #308]	; (80076e8 <__ieee754_pow+0x3d0>)
 80075b2:	f7f8 fe3d 	bl	8000230 <__aeabi_dsub>
 80075b6:	4622      	mov	r2, r4
 80075b8:	462b      	mov	r3, r5
 80075ba:	4680      	mov	r8, r0
 80075bc:	4689      	mov	r9, r1
 80075be:	4620      	mov	r0, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	f7f8 ffed 	bl	80005a0 <__aeabi_dmul>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4640      	mov	r0, r8
 80075cc:	4649      	mov	r1, r9
 80075ce:	f7f8 ffe7 	bl	80005a0 <__aeabi_dmul>
 80075d2:	a33f      	add	r3, pc, #252	; (adr r3, 80076d0 <__ieee754_pow+0x3b8>)
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f7f8 ffe2 	bl	80005a0 <__aeabi_dmul>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4650      	mov	r0, sl
 80075e2:	4659      	mov	r1, fp
 80075e4:	f7f8 fe24 	bl	8000230 <__aeabi_dsub>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4604      	mov	r4, r0
 80075ee:	460d      	mov	r5, r1
 80075f0:	4630      	mov	r0, r6
 80075f2:	4639      	mov	r1, r7
 80075f4:	f7f8 fe1e 	bl	8000234 <__adddf3>
 80075f8:	2000      	movs	r0, #0
 80075fa:	468b      	mov	fp, r1
 80075fc:	4682      	mov	sl, r0
 80075fe:	4632      	mov	r2, r6
 8007600:	463b      	mov	r3, r7
 8007602:	f7f8 fe15 	bl	8000230 <__aeabi_dsub>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	4620      	mov	r0, r4
 800760c:	4629      	mov	r1, r5
 800760e:	f7f8 fe0f 	bl	8000230 <__aeabi_dsub>
 8007612:	9b00      	ldr	r3, [sp, #0]
 8007614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007616:	3b01      	subs	r3, #1
 8007618:	4313      	orrs	r3, r2
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	bf0c      	ite	eq
 8007620:	4c32      	ldreq	r4, [pc, #200]	; (80076ec <__ieee754_pow+0x3d4>)
 8007622:	4c2f      	ldrne	r4, [pc, #188]	; (80076e0 <__ieee754_pow+0x3c8>)
 8007624:	4606      	mov	r6, r0
 8007626:	e9cd 3400 	strd	r3, r4, [sp]
 800762a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800762e:	2400      	movs	r4, #0
 8007630:	460f      	mov	r7, r1
 8007632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007636:	4622      	mov	r2, r4
 8007638:	462b      	mov	r3, r5
 800763a:	f7f8 fdf9 	bl	8000230 <__aeabi_dsub>
 800763e:	4652      	mov	r2, sl
 8007640:	465b      	mov	r3, fp
 8007642:	f7f8 ffad 	bl	80005a0 <__aeabi_dmul>
 8007646:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800764a:	4680      	mov	r8, r0
 800764c:	4689      	mov	r9, r1
 800764e:	4630      	mov	r0, r6
 8007650:	4639      	mov	r1, r7
 8007652:	f7f8 ffa5 	bl	80005a0 <__aeabi_dmul>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	4640      	mov	r0, r8
 800765c:	4649      	mov	r1, r9
 800765e:	f7f8 fde9 	bl	8000234 <__adddf3>
 8007662:	4622      	mov	r2, r4
 8007664:	462b      	mov	r3, r5
 8007666:	4680      	mov	r8, r0
 8007668:	4689      	mov	r9, r1
 800766a:	4650      	mov	r0, sl
 800766c:	4659      	mov	r1, fp
 800766e:	f7f8 ff97 	bl	80005a0 <__aeabi_dmul>
 8007672:	4604      	mov	r4, r0
 8007674:	460d      	mov	r5, r1
 8007676:	460b      	mov	r3, r1
 8007678:	4602      	mov	r2, r0
 800767a:	4649      	mov	r1, r9
 800767c:	4640      	mov	r0, r8
 800767e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007682:	f7f8 fdd7 	bl	8000234 <__adddf3>
 8007686:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <__ieee754_pow+0x3d8>)
 8007688:	4682      	mov	sl, r0
 800768a:	4299      	cmp	r1, r3
 800768c:	460f      	mov	r7, r1
 800768e:	460e      	mov	r6, r1
 8007690:	f340 82e1 	ble.w	8007c56 <__ieee754_pow+0x93e>
 8007694:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007698:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800769c:	4303      	orrs	r3, r0
 800769e:	f000 81db 	beq.w	8007a58 <__ieee754_pow+0x740>
 80076a2:	a30d      	add	r3, pc, #52	; (adr r3, 80076d8 <__ieee754_pow+0x3c0>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076ac:	f7f8 ff78 	bl	80005a0 <__aeabi_dmul>
 80076b0:	a309      	add	r3, pc, #36	; (adr r3, 80076d8 <__ieee754_pow+0x3c0>)
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	e6c4      	b.n	8007442 <__ieee754_pow+0x12a>
 80076b8:	60000000 	.word	0x60000000
 80076bc:	3ff71547 	.word	0x3ff71547
 80076c0:	f85ddf44 	.word	0xf85ddf44
 80076c4:	3e54ae0b 	.word	0x3e54ae0b
 80076c8:	55555555 	.word	0x55555555
 80076cc:	3fd55555 	.word	0x3fd55555
 80076d0:	652b82fe 	.word	0x652b82fe
 80076d4:	3ff71547 	.word	0x3ff71547
 80076d8:	8800759c 	.word	0x8800759c
 80076dc:	7e37e43c 	.word	0x7e37e43c
 80076e0:	3ff00000 	.word	0x3ff00000
 80076e4:	3fd00000 	.word	0x3fd00000
 80076e8:	3fe00000 	.word	0x3fe00000
 80076ec:	bff00000 	.word	0xbff00000
 80076f0:	408fffff 	.word	0x408fffff
 80076f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	da08      	bge.n	8007710 <__ieee754_pow+0x3f8>
 80076fe:	4658      	mov	r0, fp
 8007700:	4bcd      	ldr	r3, [pc, #820]	; (8007a38 <__ieee754_pow+0x720>)
 8007702:	4661      	mov	r1, ip
 8007704:	f7f8 ff4c 	bl	80005a0 <__aeabi_dmul>
 8007708:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800770c:	4683      	mov	fp, r0
 800770e:	460c      	mov	r4, r1
 8007710:	1523      	asrs	r3, r4, #20
 8007712:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007716:	4413      	add	r3, r2
 8007718:	930c      	str	r3, [sp, #48]	; 0x30
 800771a:	4bc8      	ldr	r3, [pc, #800]	; (8007a3c <__ieee754_pow+0x724>)
 800771c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007720:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007724:	429c      	cmp	r4, r3
 8007726:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800772a:	dd08      	ble.n	800773e <__ieee754_pow+0x426>
 800772c:	4bc4      	ldr	r3, [pc, #784]	; (8007a40 <__ieee754_pow+0x728>)
 800772e:	429c      	cmp	r4, r3
 8007730:	f340 815b 	ble.w	80079ea <__ieee754_pow+0x6d2>
 8007734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007736:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800773a:	3301      	adds	r3, #1
 800773c:	930c      	str	r3, [sp, #48]	; 0x30
 800773e:	f04f 0800 	mov.w	r8, #0
 8007742:	4658      	mov	r0, fp
 8007744:	4629      	mov	r1, r5
 8007746:	4bbf      	ldr	r3, [pc, #764]	; (8007a44 <__ieee754_pow+0x72c>)
 8007748:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800774c:	444b      	add	r3, r9
 800774e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007752:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007756:	461a      	mov	r2, r3
 8007758:	4623      	mov	r3, r4
 800775a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800775e:	f7f8 fd67 	bl	8000230 <__aeabi_dsub>
 8007762:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007766:	4606      	mov	r6, r0
 8007768:	460f      	mov	r7, r1
 800776a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800776e:	f7f8 fd61 	bl	8000234 <__adddf3>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	2000      	movs	r0, #0
 8007778:	49b3      	ldr	r1, [pc, #716]	; (8007a48 <__ieee754_pow+0x730>)
 800777a:	f7f9 f83b 	bl	80007f4 <__aeabi_ddiv>
 800777e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4630      	mov	r0, r6
 8007788:	4639      	mov	r1, r7
 800778a:	f7f8 ff09 	bl	80005a0 <__aeabi_dmul>
 800778e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007792:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007796:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800779a:	2300      	movs	r3, #0
 800779c:	2200      	movs	r2, #0
 800779e:	106d      	asrs	r5, r5, #1
 80077a0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80077aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80077ae:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80077b2:	4650      	mov	r0, sl
 80077b4:	4659      	mov	r1, fp
 80077b6:	4614      	mov	r4, r2
 80077b8:	461d      	mov	r5, r3
 80077ba:	f7f8 fef1 	bl	80005a0 <__aeabi_dmul>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f8 fd33 	bl	8000230 <__aeabi_dsub>
 80077ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077ce:	4606      	mov	r6, r0
 80077d0:	460f      	mov	r7, r1
 80077d2:	4620      	mov	r0, r4
 80077d4:	4629      	mov	r1, r5
 80077d6:	f7f8 fd2b 	bl	8000230 <__aeabi_dsub>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077e2:	f7f8 fd25 	bl	8000230 <__aeabi_dsub>
 80077e6:	4652      	mov	r2, sl
 80077e8:	465b      	mov	r3, fp
 80077ea:	f7f8 fed9 	bl	80005a0 <__aeabi_dmul>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4630      	mov	r0, r6
 80077f4:	4639      	mov	r1, r7
 80077f6:	f7f8 fd1b 	bl	8000230 <__aeabi_dsub>
 80077fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80077fe:	f7f8 fecf 	bl	80005a0 <__aeabi_dmul>
 8007802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007806:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800780a:	4610      	mov	r0, r2
 800780c:	4619      	mov	r1, r3
 800780e:	f7f8 fec7 	bl	80005a0 <__aeabi_dmul>
 8007812:	a377      	add	r3, pc, #476	; (adr r3, 80079f0 <__ieee754_pow+0x6d8>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	4604      	mov	r4, r0
 800781a:	460d      	mov	r5, r1
 800781c:	f7f8 fec0 	bl	80005a0 <__aeabi_dmul>
 8007820:	a375      	add	r3, pc, #468	; (adr r3, 80079f8 <__ieee754_pow+0x6e0>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f8 fd05 	bl	8000234 <__adddf3>
 800782a:	4622      	mov	r2, r4
 800782c:	462b      	mov	r3, r5
 800782e:	f7f8 feb7 	bl	80005a0 <__aeabi_dmul>
 8007832:	a373      	add	r3, pc, #460	; (adr r3, 8007a00 <__ieee754_pow+0x6e8>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 fcfc 	bl	8000234 <__adddf3>
 800783c:	4622      	mov	r2, r4
 800783e:	462b      	mov	r3, r5
 8007840:	f7f8 feae 	bl	80005a0 <__aeabi_dmul>
 8007844:	a370      	add	r3, pc, #448	; (adr r3, 8007a08 <__ieee754_pow+0x6f0>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f7f8 fcf3 	bl	8000234 <__adddf3>
 800784e:	4622      	mov	r2, r4
 8007850:	462b      	mov	r3, r5
 8007852:	f7f8 fea5 	bl	80005a0 <__aeabi_dmul>
 8007856:	a36e      	add	r3, pc, #440	; (adr r3, 8007a10 <__ieee754_pow+0x6f8>)
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f7f8 fcea 	bl	8000234 <__adddf3>
 8007860:	4622      	mov	r2, r4
 8007862:	462b      	mov	r3, r5
 8007864:	f7f8 fe9c 	bl	80005a0 <__aeabi_dmul>
 8007868:	a36b      	add	r3, pc, #428	; (adr r3, 8007a18 <__ieee754_pow+0x700>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	f7f8 fce1 	bl	8000234 <__adddf3>
 8007872:	4622      	mov	r2, r4
 8007874:	4606      	mov	r6, r0
 8007876:	460f      	mov	r7, r1
 8007878:	462b      	mov	r3, r5
 800787a:	4620      	mov	r0, r4
 800787c:	4629      	mov	r1, r5
 800787e:	f7f8 fe8f 	bl	80005a0 <__aeabi_dmul>
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	4630      	mov	r0, r6
 8007888:	4639      	mov	r1, r7
 800788a:	f7f8 fe89 	bl	80005a0 <__aeabi_dmul>
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007896:	4652      	mov	r2, sl
 8007898:	465b      	mov	r3, fp
 800789a:	f7f8 fccb 	bl	8000234 <__adddf3>
 800789e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078a2:	f7f8 fe7d 	bl	80005a0 <__aeabi_dmul>
 80078a6:	4622      	mov	r2, r4
 80078a8:	462b      	mov	r3, r5
 80078aa:	f7f8 fcc3 	bl	8000234 <__adddf3>
 80078ae:	4652      	mov	r2, sl
 80078b0:	4606      	mov	r6, r0
 80078b2:	460f      	mov	r7, r1
 80078b4:	465b      	mov	r3, fp
 80078b6:	4650      	mov	r0, sl
 80078b8:	4659      	mov	r1, fp
 80078ba:	f7f8 fe71 	bl	80005a0 <__aeabi_dmul>
 80078be:	2200      	movs	r2, #0
 80078c0:	4b62      	ldr	r3, [pc, #392]	; (8007a4c <__ieee754_pow+0x734>)
 80078c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078c6:	f7f8 fcb5 	bl	8000234 <__adddf3>
 80078ca:	4632      	mov	r2, r6
 80078cc:	463b      	mov	r3, r7
 80078ce:	f7f8 fcb1 	bl	8000234 <__adddf3>
 80078d2:	9804      	ldr	r0, [sp, #16]
 80078d4:	460d      	mov	r5, r1
 80078d6:	4604      	mov	r4, r0
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4650      	mov	r0, sl
 80078de:	4659      	mov	r1, fp
 80078e0:	f7f8 fe5e 	bl	80005a0 <__aeabi_dmul>
 80078e4:	2200      	movs	r2, #0
 80078e6:	4682      	mov	sl, r0
 80078e8:	468b      	mov	fp, r1
 80078ea:	4b58      	ldr	r3, [pc, #352]	; (8007a4c <__ieee754_pow+0x734>)
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	f7f8 fc9e 	bl	8000230 <__aeabi_dsub>
 80078f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078f8:	f7f8 fc9a 	bl	8000230 <__aeabi_dsub>
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4630      	mov	r0, r6
 8007902:	4639      	mov	r1, r7
 8007904:	f7f8 fc94 	bl	8000230 <__aeabi_dsub>
 8007908:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800790c:	f7f8 fe48 	bl	80005a0 <__aeabi_dmul>
 8007910:	4622      	mov	r2, r4
 8007912:	4606      	mov	r6, r0
 8007914:	460f      	mov	r7, r1
 8007916:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800791a:	462b      	mov	r3, r5
 800791c:	f7f8 fe40 	bl	80005a0 <__aeabi_dmul>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4630      	mov	r0, r6
 8007926:	4639      	mov	r1, r7
 8007928:	f7f8 fc84 	bl	8000234 <__adddf3>
 800792c:	4606      	mov	r6, r0
 800792e:	460f      	mov	r7, r1
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4650      	mov	r0, sl
 8007936:	4659      	mov	r1, fp
 8007938:	f7f8 fc7c 	bl	8000234 <__adddf3>
 800793c:	a338      	add	r3, pc, #224	; (adr r3, 8007a20 <__ieee754_pow+0x708>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	9804      	ldr	r0, [sp, #16]
 8007944:	460d      	mov	r5, r1
 8007946:	4604      	mov	r4, r0
 8007948:	f7f8 fe2a 	bl	80005a0 <__aeabi_dmul>
 800794c:	4652      	mov	r2, sl
 800794e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007952:	465b      	mov	r3, fp
 8007954:	4620      	mov	r0, r4
 8007956:	4629      	mov	r1, r5
 8007958:	f7f8 fc6a 	bl	8000230 <__aeabi_dsub>
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4630      	mov	r0, r6
 8007962:	4639      	mov	r1, r7
 8007964:	f7f8 fc64 	bl	8000230 <__aeabi_dsub>
 8007968:	a32f      	add	r3, pc, #188	; (adr r3, 8007a28 <__ieee754_pow+0x710>)
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	f7f8 fe17 	bl	80005a0 <__aeabi_dmul>
 8007972:	a32f      	add	r3, pc, #188	; (adr r3, 8007a30 <__ieee754_pow+0x718>)
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	4606      	mov	r6, r0
 800797a:	460f      	mov	r7, r1
 800797c:	4620      	mov	r0, r4
 800797e:	4629      	mov	r1, r5
 8007980:	f7f8 fe0e 	bl	80005a0 <__aeabi_dmul>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f8 fc52 	bl	8000234 <__adddf3>
 8007990:	4b2f      	ldr	r3, [pc, #188]	; (8007a50 <__ieee754_pow+0x738>)
 8007992:	444b      	add	r3, r9
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f7f8 fc4c 	bl	8000234 <__adddf3>
 800799c:	4604      	mov	r4, r0
 800799e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079a0:	460d      	mov	r5, r1
 80079a2:	f7f8 fd93 	bl	80004cc <__aeabi_i2d>
 80079a6:	4606      	mov	r6, r0
 80079a8:	460f      	mov	r7, r1
 80079aa:	4b2a      	ldr	r3, [pc, #168]	; (8007a54 <__ieee754_pow+0x73c>)
 80079ac:	4622      	mov	r2, r4
 80079ae:	444b      	add	r3, r9
 80079b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079b4:	462b      	mov	r3, r5
 80079b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ba:	f7f8 fc3b 	bl	8000234 <__adddf3>
 80079be:	4642      	mov	r2, r8
 80079c0:	464b      	mov	r3, r9
 80079c2:	f7f8 fc37 	bl	8000234 <__adddf3>
 80079c6:	4632      	mov	r2, r6
 80079c8:	463b      	mov	r3, r7
 80079ca:	f7f8 fc33 	bl	8000234 <__adddf3>
 80079ce:	9804      	ldr	r0, [sp, #16]
 80079d0:	4632      	mov	r2, r6
 80079d2:	463b      	mov	r3, r7
 80079d4:	4682      	mov	sl, r0
 80079d6:	468b      	mov	fp, r1
 80079d8:	f7f8 fc2a 	bl	8000230 <__aeabi_dsub>
 80079dc:	4642      	mov	r2, r8
 80079de:	464b      	mov	r3, r9
 80079e0:	f7f8 fc26 	bl	8000230 <__aeabi_dsub>
 80079e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079e8:	e60b      	b.n	8007602 <__ieee754_pow+0x2ea>
 80079ea:	f04f 0801 	mov.w	r8, #1
 80079ee:	e6a8      	b.n	8007742 <__ieee754_pow+0x42a>
 80079f0:	4a454eef 	.word	0x4a454eef
 80079f4:	3fca7e28 	.word	0x3fca7e28
 80079f8:	93c9db65 	.word	0x93c9db65
 80079fc:	3fcd864a 	.word	0x3fcd864a
 8007a00:	a91d4101 	.word	0xa91d4101
 8007a04:	3fd17460 	.word	0x3fd17460
 8007a08:	518f264d 	.word	0x518f264d
 8007a0c:	3fd55555 	.word	0x3fd55555
 8007a10:	db6fabff 	.word	0xdb6fabff
 8007a14:	3fdb6db6 	.word	0x3fdb6db6
 8007a18:	33333303 	.word	0x33333303
 8007a1c:	3fe33333 	.word	0x3fe33333
 8007a20:	e0000000 	.word	0xe0000000
 8007a24:	3feec709 	.word	0x3feec709
 8007a28:	dc3a03fd 	.word	0xdc3a03fd
 8007a2c:	3feec709 	.word	0x3feec709
 8007a30:	145b01f5 	.word	0x145b01f5
 8007a34:	be3e2fe0 	.word	0xbe3e2fe0
 8007a38:	43400000 	.word	0x43400000
 8007a3c:	0003988e 	.word	0x0003988e
 8007a40:	000bb679 	.word	0x000bb679
 8007a44:	08008460 	.word	0x08008460
 8007a48:	3ff00000 	.word	0x3ff00000
 8007a4c:	40080000 	.word	0x40080000
 8007a50:	08008480 	.word	0x08008480
 8007a54:	08008470 	.word	0x08008470
 8007a58:	a39b      	add	r3, pc, #620	; (adr r3, 8007cc8 <__ieee754_pow+0x9b0>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	4640      	mov	r0, r8
 8007a60:	4649      	mov	r1, r9
 8007a62:	f7f8 fbe7 	bl	8000234 <__adddf3>
 8007a66:	4622      	mov	r2, r4
 8007a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	4650      	mov	r0, sl
 8007a70:	4639      	mov	r1, r7
 8007a72:	f7f8 fbdd 	bl	8000230 <__aeabi_dsub>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a7e:	f7f9 f81f 	bl	8000ac0 <__aeabi_dcmpgt>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f47f ae0d 	bne.w	80076a2 <__ieee754_pow+0x38a>
 8007a88:	4aa3      	ldr	r2, [pc, #652]	; (8007d18 <__ieee754_pow+0xa00>)
 8007a8a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	f340 8103 	ble.w	8007c9a <__ieee754_pow+0x982>
 8007a94:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007a98:	2000      	movs	r0, #0
 8007a9a:	151b      	asrs	r3, r3, #20
 8007a9c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007aa0:	fa4a f303 	asr.w	r3, sl, r3
 8007aa4:	4433      	add	r3, r6
 8007aa6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007aaa:	4f9c      	ldr	r7, [pc, #624]	; (8007d1c <__ieee754_pow+0xa04>)
 8007aac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007ab0:	4117      	asrs	r7, r2
 8007ab2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007ab6:	ea23 0107 	bic.w	r1, r3, r7
 8007aba:	f1c2 0214 	rsb	r2, r2, #20
 8007abe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007ac2:	fa4a fa02 	asr.w	sl, sl, r2
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4620      	mov	r0, r4
 8007ace:	4629      	mov	r1, r5
 8007ad0:	bfb8      	it	lt
 8007ad2:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ad6:	f7f8 fbab 	bl	8000230 <__aeabi_dsub>
 8007ada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ae2:	4642      	mov	r2, r8
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	f7f8 fba5 	bl	8000234 <__adddf3>
 8007aea:	a379      	add	r3, pc, #484	; (adr r3, 8007cd0 <__ieee754_pow+0x9b8>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	2000      	movs	r0, #0
 8007af2:	460d      	mov	r5, r1
 8007af4:	4604      	mov	r4, r0
 8007af6:	f7f8 fd53 	bl	80005a0 <__aeabi_dmul>
 8007afa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007afe:	4606      	mov	r6, r0
 8007b00:	460f      	mov	r7, r1
 8007b02:	4620      	mov	r0, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	f7f8 fb93 	bl	8000230 <__aeabi_dsub>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f8 fb8d 	bl	8000230 <__aeabi_dsub>
 8007b16:	a370      	add	r3, pc, #448	; (adr r3, 8007cd8 <__ieee754_pow+0x9c0>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f7f8 fd40 	bl	80005a0 <__aeabi_dmul>
 8007b20:	a36f      	add	r3, pc, #444	; (adr r3, 8007ce0 <__ieee754_pow+0x9c8>)
 8007b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b26:	4680      	mov	r8, r0
 8007b28:	4689      	mov	r9, r1
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	f7f8 fd37 	bl	80005a0 <__aeabi_dmul>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4640      	mov	r0, r8
 8007b38:	4649      	mov	r1, r9
 8007b3a:	f7f8 fb7b 	bl	8000234 <__adddf3>
 8007b3e:	4604      	mov	r4, r0
 8007b40:	460d      	mov	r5, r1
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4630      	mov	r0, r6
 8007b48:	4639      	mov	r1, r7
 8007b4a:	f7f8 fb73 	bl	8000234 <__adddf3>
 8007b4e:	4632      	mov	r2, r6
 8007b50:	463b      	mov	r3, r7
 8007b52:	4680      	mov	r8, r0
 8007b54:	4689      	mov	r9, r1
 8007b56:	f7f8 fb6b 	bl	8000230 <__aeabi_dsub>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	4620      	mov	r0, r4
 8007b60:	4629      	mov	r1, r5
 8007b62:	f7f8 fb65 	bl	8000230 <__aeabi_dsub>
 8007b66:	4642      	mov	r2, r8
 8007b68:	4606      	mov	r6, r0
 8007b6a:	460f      	mov	r7, r1
 8007b6c:	464b      	mov	r3, r9
 8007b6e:	4640      	mov	r0, r8
 8007b70:	4649      	mov	r1, r9
 8007b72:	f7f8 fd15 	bl	80005a0 <__aeabi_dmul>
 8007b76:	a35c      	add	r3, pc, #368	; (adr r3, 8007ce8 <__ieee754_pow+0x9d0>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	460d      	mov	r5, r1
 8007b80:	f7f8 fd0e 	bl	80005a0 <__aeabi_dmul>
 8007b84:	a35a      	add	r3, pc, #360	; (adr r3, 8007cf0 <__ieee754_pow+0x9d8>)
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f7f8 fb51 	bl	8000230 <__aeabi_dsub>
 8007b8e:	4622      	mov	r2, r4
 8007b90:	462b      	mov	r3, r5
 8007b92:	f7f8 fd05 	bl	80005a0 <__aeabi_dmul>
 8007b96:	a358      	add	r3, pc, #352	; (adr r3, 8007cf8 <__ieee754_pow+0x9e0>)
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	f7f8 fb4a 	bl	8000234 <__adddf3>
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	462b      	mov	r3, r5
 8007ba4:	f7f8 fcfc 	bl	80005a0 <__aeabi_dmul>
 8007ba8:	a355      	add	r3, pc, #340	; (adr r3, 8007d00 <__ieee754_pow+0x9e8>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fb3f 	bl	8000230 <__aeabi_dsub>
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	f7f8 fcf3 	bl	80005a0 <__aeabi_dmul>
 8007bba:	a353      	add	r3, pc, #332	; (adr r3, 8007d08 <__ieee754_pow+0x9f0>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f7f8 fb38 	bl	8000234 <__adddf3>
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	462b      	mov	r3, r5
 8007bc8:	f7f8 fcea 	bl	80005a0 <__aeabi_dmul>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	4649      	mov	r1, r9
 8007bd4:	f7f8 fb2c 	bl	8000230 <__aeabi_dsub>
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4640      	mov	r0, r8
 8007be2:	4649      	mov	r1, r9
 8007be4:	f7f8 fcdc 	bl	80005a0 <__aeabi_dmul>
 8007be8:	2200      	movs	r2, #0
 8007bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	f7f8 fb1b 	bl	8000230 <__aeabi_dsub>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c02:	f7f8 fdf7 	bl	80007f4 <__aeabi_ddiv>
 8007c06:	4632      	mov	r2, r6
 8007c08:	4604      	mov	r4, r0
 8007c0a:	460d      	mov	r5, r1
 8007c0c:	463b      	mov	r3, r7
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4649      	mov	r1, r9
 8007c12:	f7f8 fcc5 	bl	80005a0 <__aeabi_dmul>
 8007c16:	4632      	mov	r2, r6
 8007c18:	463b      	mov	r3, r7
 8007c1a:	f7f8 fb0b 	bl	8000234 <__adddf3>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	4620      	mov	r0, r4
 8007c24:	4629      	mov	r1, r5
 8007c26:	f7f8 fb03 	bl	8000230 <__aeabi_dsub>
 8007c2a:	4642      	mov	r2, r8
 8007c2c:	464b      	mov	r3, r9
 8007c2e:	f7f8 faff 	bl	8000230 <__aeabi_dsub>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	2000      	movs	r0, #0
 8007c38:	4939      	ldr	r1, [pc, #228]	; (8007d20 <__ieee754_pow+0xa08>)
 8007c3a:	f7f8 faf9 	bl	8000230 <__aeabi_dsub>
 8007c3e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007c42:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007c46:	da2b      	bge.n	8007ca0 <__ieee754_pow+0x988>
 8007c48:	4652      	mov	r2, sl
 8007c4a:	f000 fb45 	bl	80082d8 <scalbn>
 8007c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c52:	f7ff bbf6 	b.w	8007442 <__ieee754_pow+0x12a>
 8007c56:	4b33      	ldr	r3, [pc, #204]	; (8007d24 <__ieee754_pow+0xa0c>)
 8007c58:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007c5c:	429f      	cmp	r7, r3
 8007c5e:	f77f af13 	ble.w	8007a88 <__ieee754_pow+0x770>
 8007c62:	4b31      	ldr	r3, [pc, #196]	; (8007d28 <__ieee754_pow+0xa10>)
 8007c64:	440b      	add	r3, r1
 8007c66:	4303      	orrs	r3, r0
 8007c68:	d00b      	beq.n	8007c82 <__ieee754_pow+0x96a>
 8007c6a:	a329      	add	r3, pc, #164	; (adr r3, 8007d10 <__ieee754_pow+0x9f8>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c74:	f7f8 fc94 	bl	80005a0 <__aeabi_dmul>
 8007c78:	a325      	add	r3, pc, #148	; (adr r3, 8007d10 <__ieee754_pow+0x9f8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7ff bbe0 	b.w	8007442 <__ieee754_pow+0x12a>
 8007c82:	4622      	mov	r2, r4
 8007c84:	462b      	mov	r3, r5
 8007c86:	f7f8 fad3 	bl	8000230 <__aeabi_dsub>
 8007c8a:	4642      	mov	r2, r8
 8007c8c:	464b      	mov	r3, r9
 8007c8e:	f7f8 ff0d 	bl	8000aac <__aeabi_dcmpge>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f43f aef8 	beq.w	8007a88 <__ieee754_pow+0x770>
 8007c98:	e7e7      	b.n	8007c6a <__ieee754_pow+0x952>
 8007c9a:	f04f 0a00 	mov.w	sl, #0
 8007c9e:	e71e      	b.n	8007ade <__ieee754_pow+0x7c6>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	e7d4      	b.n	8007c4e <__ieee754_pow+0x936>
 8007ca4:	f04f 0b00 	mov.w	fp, #0
 8007ca8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007d20 <__ieee754_pow+0xa08>
 8007cac:	f7ff bb95 	b.w	80073da <__ieee754_pow+0xc2>
 8007cb0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007cb4:	f7ff bb91 	b.w	80073da <__ieee754_pow+0xc2>
 8007cb8:	4638      	mov	r0, r7
 8007cba:	4641      	mov	r1, r8
 8007cbc:	f7ff bbc3 	b.w	8007446 <__ieee754_pow+0x12e>
 8007cc0:	9200      	str	r2, [sp, #0]
 8007cc2:	f7ff bb9f 	b.w	8007404 <__ieee754_pow+0xec>
 8007cc6:	bf00      	nop
 8007cc8:	652b82fe 	.word	0x652b82fe
 8007ccc:	3c971547 	.word	0x3c971547
 8007cd0:	00000000 	.word	0x00000000
 8007cd4:	3fe62e43 	.word	0x3fe62e43
 8007cd8:	fefa39ef 	.word	0xfefa39ef
 8007cdc:	3fe62e42 	.word	0x3fe62e42
 8007ce0:	0ca86c39 	.word	0x0ca86c39
 8007ce4:	be205c61 	.word	0xbe205c61
 8007ce8:	72bea4d0 	.word	0x72bea4d0
 8007cec:	3e663769 	.word	0x3e663769
 8007cf0:	c5d26bf1 	.word	0xc5d26bf1
 8007cf4:	3ebbbd41 	.word	0x3ebbbd41
 8007cf8:	af25de2c 	.word	0xaf25de2c
 8007cfc:	3f11566a 	.word	0x3f11566a
 8007d00:	16bebd93 	.word	0x16bebd93
 8007d04:	3f66c16c 	.word	0x3f66c16c
 8007d08:	5555553e 	.word	0x5555553e
 8007d0c:	3fc55555 	.word	0x3fc55555
 8007d10:	c2f8f359 	.word	0xc2f8f359
 8007d14:	01a56e1f 	.word	0x01a56e1f
 8007d18:	3fe00000 	.word	0x3fe00000
 8007d1c:	000fffff 	.word	0x000fffff
 8007d20:	3ff00000 	.word	0x3ff00000
 8007d24:	4090cbff 	.word	0x4090cbff
 8007d28:	3f6f3400 	.word	0x3f6f3400

08007d2c <__ieee754_sqrt>:
 8007d2c:	4b54      	ldr	r3, [pc, #336]	; (8007e80 <__ieee754_sqrt+0x154>)
 8007d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d32:	438b      	bics	r3, r1
 8007d34:	4606      	mov	r6, r0
 8007d36:	460d      	mov	r5, r1
 8007d38:	460a      	mov	r2, r1
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	d10f      	bne.n	8007d5e <__ieee754_sqrt+0x32>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	f7f8 fc2d 	bl	80005a0 <__aeabi_dmul>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	f7f8 fa71 	bl	8000234 <__adddf3>
 8007d52:	4606      	mov	r6, r0
 8007d54:	460d      	mov	r5, r1
 8007d56:	4630      	mov	r0, r6
 8007d58:	4629      	mov	r1, r5
 8007d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	4607      	mov	r7, r0
 8007d62:	4603      	mov	r3, r0
 8007d64:	dc0e      	bgt.n	8007d84 <__ieee754_sqrt+0x58>
 8007d66:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007d6a:	ea5c 0707 	orrs.w	r7, ip, r7
 8007d6e:	d0f2      	beq.n	8007d56 <__ieee754_sqrt+0x2a>
 8007d70:	b141      	cbz	r1, 8007d84 <__ieee754_sqrt+0x58>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	f7f8 fa5b 	bl	8000230 <__aeabi_dsub>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	f7f8 fd39 	bl	80007f4 <__aeabi_ddiv>
 8007d82:	e7e6      	b.n	8007d52 <__ieee754_sqrt+0x26>
 8007d84:	1512      	asrs	r2, r2, #20
 8007d86:	d074      	beq.n	8007e72 <__ieee754_sqrt+0x146>
 8007d88:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007d8c:	07d5      	lsls	r5, r2, #31
 8007d8e:	f04f 0500 	mov.w	r5, #0
 8007d92:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007d96:	bf48      	it	mi
 8007d98:	0fd9      	lsrmi	r1, r3, #31
 8007d9a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007d9e:	bf44      	itt	mi
 8007da0:	005b      	lslmi	r3, r3, #1
 8007da2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8007da6:	1051      	asrs	r1, r2, #1
 8007da8:	0fda      	lsrs	r2, r3, #31
 8007daa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8007dae:	4628      	mov	r0, r5
 8007db0:	2216      	movs	r2, #22
 8007db2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	1987      	adds	r7, r0, r6
 8007dba:	42a7      	cmp	r7, r4
 8007dbc:	bfde      	ittt	le
 8007dbe:	19b8      	addle	r0, r7, r6
 8007dc0:	1be4      	suble	r4, r4, r7
 8007dc2:	19ad      	addle	r5, r5, r6
 8007dc4:	0fdf      	lsrs	r7, r3, #31
 8007dc6:	3a01      	subs	r2, #1
 8007dc8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8007dcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007dd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007dd4:	d1f0      	bne.n	8007db8 <__ieee754_sqrt+0x8c>
 8007dd6:	f04f 0c20 	mov.w	ip, #32
 8007dda:	4696      	mov	lr, r2
 8007ddc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007de0:	4284      	cmp	r4, r0
 8007de2:	eb06 070e 	add.w	r7, r6, lr
 8007de6:	dc02      	bgt.n	8007dee <__ieee754_sqrt+0xc2>
 8007de8:	d112      	bne.n	8007e10 <__ieee754_sqrt+0xe4>
 8007dea:	429f      	cmp	r7, r3
 8007dec:	d810      	bhi.n	8007e10 <__ieee754_sqrt+0xe4>
 8007dee:	2f00      	cmp	r7, #0
 8007df0:	eb07 0e06 	add.w	lr, r7, r6
 8007df4:	da42      	bge.n	8007e7c <__ieee754_sqrt+0x150>
 8007df6:	f1be 0f00 	cmp.w	lr, #0
 8007dfa:	db3f      	blt.n	8007e7c <__ieee754_sqrt+0x150>
 8007dfc:	f100 0801 	add.w	r8, r0, #1
 8007e00:	1a24      	subs	r4, r4, r0
 8007e02:	4640      	mov	r0, r8
 8007e04:	429f      	cmp	r7, r3
 8007e06:	bf88      	it	hi
 8007e08:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8007e0c:	1bdb      	subs	r3, r3, r7
 8007e0e:	4432      	add	r2, r6
 8007e10:	0064      	lsls	r4, r4, #1
 8007e12:	f1bc 0c01 	subs.w	ip, ip, #1
 8007e16:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8007e1a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007e1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e22:	d1dd      	bne.n	8007de0 <__ieee754_sqrt+0xb4>
 8007e24:	4323      	orrs	r3, r4
 8007e26:	d006      	beq.n	8007e36 <__ieee754_sqrt+0x10a>
 8007e28:	1c54      	adds	r4, r2, #1
 8007e2a:	bf0b      	itete	eq
 8007e2c:	4662      	moveq	r2, ip
 8007e2e:	3201      	addne	r2, #1
 8007e30:	3501      	addeq	r5, #1
 8007e32:	f022 0201 	bicne.w	r2, r2, #1
 8007e36:	106b      	asrs	r3, r5, #1
 8007e38:	0852      	lsrs	r2, r2, #1
 8007e3a:	07e8      	lsls	r0, r5, #31
 8007e3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007e40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007e44:	bf48      	it	mi
 8007e46:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007e4a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8007e4e:	4616      	mov	r6, r2
 8007e50:	e781      	b.n	8007d56 <__ieee754_sqrt+0x2a>
 8007e52:	0adc      	lsrs	r4, r3, #11
 8007e54:	3915      	subs	r1, #21
 8007e56:	055b      	lsls	r3, r3, #21
 8007e58:	2c00      	cmp	r4, #0
 8007e5a:	d0fa      	beq.n	8007e52 <__ieee754_sqrt+0x126>
 8007e5c:	02e6      	lsls	r6, r4, #11
 8007e5e:	d50a      	bpl.n	8007e76 <__ieee754_sqrt+0x14a>
 8007e60:	f1c2 0020 	rsb	r0, r2, #32
 8007e64:	fa23 f000 	lsr.w	r0, r3, r0
 8007e68:	1e55      	subs	r5, r2, #1
 8007e6a:	4093      	lsls	r3, r2
 8007e6c:	4304      	orrs	r4, r0
 8007e6e:	1b4a      	subs	r2, r1, r5
 8007e70:	e78a      	b.n	8007d88 <__ieee754_sqrt+0x5c>
 8007e72:	4611      	mov	r1, r2
 8007e74:	e7f0      	b.n	8007e58 <__ieee754_sqrt+0x12c>
 8007e76:	0064      	lsls	r4, r4, #1
 8007e78:	3201      	adds	r2, #1
 8007e7a:	e7ef      	b.n	8007e5c <__ieee754_sqrt+0x130>
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	e7bf      	b.n	8007e00 <__ieee754_sqrt+0xd4>
 8007e80:	7ff00000 	.word	0x7ff00000
 8007e84:	00000000 	.word	0x00000000

08007e88 <atan>:
 8007e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	4bb6      	ldr	r3, [pc, #728]	; (8008168 <atan+0x2e0>)
 8007e8e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007e92:	429e      	cmp	r6, r3
 8007e94:	4604      	mov	r4, r0
 8007e96:	460d      	mov	r5, r1
 8007e98:	468b      	mov	fp, r1
 8007e9a:	dd17      	ble.n	8007ecc <atan+0x44>
 8007e9c:	4bb3      	ldr	r3, [pc, #716]	; (800816c <atan+0x2e4>)
 8007e9e:	429e      	cmp	r6, r3
 8007ea0:	dc01      	bgt.n	8007ea6 <atan+0x1e>
 8007ea2:	d109      	bne.n	8007eb8 <atan+0x30>
 8007ea4:	b140      	cbz	r0, 8007eb8 <atan+0x30>
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	4620      	mov	r0, r4
 8007eac:	4629      	mov	r1, r5
 8007eae:	f7f8 f9c1 	bl	8000234 <__adddf3>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	460d      	mov	r5, r1
 8007eb6:	e005      	b.n	8007ec4 <atan+0x3c>
 8007eb8:	f1bb 0f00 	cmp.w	fp, #0
 8007ebc:	4cac      	ldr	r4, [pc, #688]	; (8008170 <atan+0x2e8>)
 8007ebe:	f340 8121 	ble.w	8008104 <atan+0x27c>
 8007ec2:	4dac      	ldr	r5, [pc, #688]	; (8008174 <atan+0x2ec>)
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	4baa      	ldr	r3, [pc, #680]	; (8008178 <atan+0x2f0>)
 8007ece:	429e      	cmp	r6, r3
 8007ed0:	dc11      	bgt.n	8007ef6 <atan+0x6e>
 8007ed2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007ed6:	429e      	cmp	r6, r3
 8007ed8:	dc0a      	bgt.n	8007ef0 <atan+0x68>
 8007eda:	a38b      	add	r3, pc, #556	; (adr r3, 8008108 <atan+0x280>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f7f8 f9a8 	bl	8000234 <__adddf3>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	4ba5      	ldr	r3, [pc, #660]	; (800817c <atan+0x2f4>)
 8007ee8:	f7f8 fdea 	bl	8000ac0 <__aeabi_dcmpgt>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d1e9      	bne.n	8007ec4 <atan+0x3c>
 8007ef0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007ef4:	e027      	b.n	8007f46 <atan+0xbe>
 8007ef6:	f000 f951 	bl	800819c <fabs>
 8007efa:	4ba1      	ldr	r3, [pc, #644]	; (8008180 <atan+0x2f8>)
 8007efc:	4604      	mov	r4, r0
 8007efe:	429e      	cmp	r6, r3
 8007f00:	460d      	mov	r5, r1
 8007f02:	f300 80b8 	bgt.w	8008076 <atan+0x1ee>
 8007f06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007f0a:	429e      	cmp	r6, r3
 8007f0c:	f300 809c 	bgt.w	8008048 <atan+0x1c0>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	f7f8 f98e 	bl	8000234 <__adddf3>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	4b98      	ldr	r3, [pc, #608]	; (800817c <atan+0x2f4>)
 8007f1c:	f7f8 f988 	bl	8000230 <__aeabi_dsub>
 8007f20:	2200      	movs	r2, #0
 8007f22:	4606      	mov	r6, r0
 8007f24:	460f      	mov	r7, r1
 8007f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	f7f8 f981 	bl	8000234 <__adddf3>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4630      	mov	r0, r6
 8007f38:	4639      	mov	r1, r7
 8007f3a:	f7f8 fc5b 	bl	80007f4 <__aeabi_ddiv>
 8007f3e:	f04f 0a00 	mov.w	sl, #0
 8007f42:	4604      	mov	r4, r0
 8007f44:	460d      	mov	r5, r1
 8007f46:	4622      	mov	r2, r4
 8007f48:	462b      	mov	r3, r5
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	f7f8 fb27 	bl	80005a0 <__aeabi_dmul>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4680      	mov	r8, r0
 8007f58:	4689      	mov	r9, r1
 8007f5a:	f7f8 fb21 	bl	80005a0 <__aeabi_dmul>
 8007f5e:	a36c      	add	r3, pc, #432	; (adr r3, 8008110 <atan+0x288>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	4606      	mov	r6, r0
 8007f66:	460f      	mov	r7, r1
 8007f68:	f7f8 fb1a 	bl	80005a0 <__aeabi_dmul>
 8007f6c:	a36a      	add	r3, pc, #424	; (adr r3, 8008118 <atan+0x290>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f7f8 f95f 	bl	8000234 <__adddf3>
 8007f76:	4632      	mov	r2, r6
 8007f78:	463b      	mov	r3, r7
 8007f7a:	f7f8 fb11 	bl	80005a0 <__aeabi_dmul>
 8007f7e:	a368      	add	r3, pc, #416	; (adr r3, 8008120 <atan+0x298>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 f956 	bl	8000234 <__adddf3>
 8007f88:	4632      	mov	r2, r6
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	f7f8 fb08 	bl	80005a0 <__aeabi_dmul>
 8007f90:	a365      	add	r3, pc, #404	; (adr r3, 8008128 <atan+0x2a0>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 f94d 	bl	8000234 <__adddf3>
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	f7f8 faff 	bl	80005a0 <__aeabi_dmul>
 8007fa2:	a363      	add	r3, pc, #396	; (adr r3, 8008130 <atan+0x2a8>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 f944 	bl	8000234 <__adddf3>
 8007fac:	4632      	mov	r2, r6
 8007fae:	463b      	mov	r3, r7
 8007fb0:	f7f8 faf6 	bl	80005a0 <__aeabi_dmul>
 8007fb4:	a360      	add	r3, pc, #384	; (adr r3, 8008138 <atan+0x2b0>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 f93b 	bl	8000234 <__adddf3>
 8007fbe:	4642      	mov	r2, r8
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	f7f8 faed 	bl	80005a0 <__aeabi_dmul>
 8007fc6:	a35e      	add	r3, pc, #376	; (adr r3, 8008140 <atan+0x2b8>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	4680      	mov	r8, r0
 8007fce:	4689      	mov	r9, r1
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 fae4 	bl	80005a0 <__aeabi_dmul>
 8007fd8:	a35b      	add	r3, pc, #364	; (adr r3, 8008148 <atan+0x2c0>)
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 f927 	bl	8000230 <__aeabi_dsub>
 8007fe2:	4632      	mov	r2, r6
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	f7f8 fadb 	bl	80005a0 <__aeabi_dmul>
 8007fea:	a359      	add	r3, pc, #356	; (adr r3, 8008150 <atan+0x2c8>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f7f8 f91e 	bl	8000230 <__aeabi_dsub>
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	f7f8 fad2 	bl	80005a0 <__aeabi_dmul>
 8007ffc:	a356      	add	r3, pc, #344	; (adr r3, 8008158 <atan+0x2d0>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 f915 	bl	8000230 <__aeabi_dsub>
 8008006:	4632      	mov	r2, r6
 8008008:	463b      	mov	r3, r7
 800800a:	f7f8 fac9 	bl	80005a0 <__aeabi_dmul>
 800800e:	a354      	add	r3, pc, #336	; (adr r3, 8008160 <atan+0x2d8>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f7f8 f90c 	bl	8000230 <__aeabi_dsub>
 8008018:	4632      	mov	r2, r6
 800801a:	463b      	mov	r3, r7
 800801c:	f7f8 fac0 	bl	80005a0 <__aeabi_dmul>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4640      	mov	r0, r8
 8008026:	4649      	mov	r1, r9
 8008028:	f7f8 f904 	bl	8000234 <__adddf3>
 800802c:	4622      	mov	r2, r4
 800802e:	462b      	mov	r3, r5
 8008030:	f7f8 fab6 	bl	80005a0 <__aeabi_dmul>
 8008034:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	d144      	bne.n	80080c8 <atan+0x240>
 800803e:	4620      	mov	r0, r4
 8008040:	4629      	mov	r1, r5
 8008042:	f7f8 f8f5 	bl	8000230 <__aeabi_dsub>
 8008046:	e734      	b.n	8007eb2 <atan+0x2a>
 8008048:	2200      	movs	r2, #0
 800804a:	4b4c      	ldr	r3, [pc, #304]	; (800817c <atan+0x2f4>)
 800804c:	f7f8 f8f0 	bl	8000230 <__aeabi_dsub>
 8008050:	2200      	movs	r2, #0
 8008052:	4606      	mov	r6, r0
 8008054:	460f      	mov	r7, r1
 8008056:	4b49      	ldr	r3, [pc, #292]	; (800817c <atan+0x2f4>)
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	f7f8 f8ea 	bl	8000234 <__adddf3>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4630      	mov	r0, r6
 8008066:	4639      	mov	r1, r7
 8008068:	f7f8 fbc4 	bl	80007f4 <__aeabi_ddiv>
 800806c:	f04f 0a01 	mov.w	sl, #1
 8008070:	4604      	mov	r4, r0
 8008072:	460d      	mov	r5, r1
 8008074:	e767      	b.n	8007f46 <atan+0xbe>
 8008076:	4b43      	ldr	r3, [pc, #268]	; (8008184 <atan+0x2fc>)
 8008078:	429e      	cmp	r6, r3
 800807a:	dc1a      	bgt.n	80080b2 <atan+0x22a>
 800807c:	2200      	movs	r2, #0
 800807e:	4b42      	ldr	r3, [pc, #264]	; (8008188 <atan+0x300>)
 8008080:	f7f8 f8d6 	bl	8000230 <__aeabi_dsub>
 8008084:	2200      	movs	r2, #0
 8008086:	4606      	mov	r6, r0
 8008088:	460f      	mov	r7, r1
 800808a:	4b3f      	ldr	r3, [pc, #252]	; (8008188 <atan+0x300>)
 800808c:	4620      	mov	r0, r4
 800808e:	4629      	mov	r1, r5
 8008090:	f7f8 fa86 	bl	80005a0 <__aeabi_dmul>
 8008094:	2200      	movs	r2, #0
 8008096:	4b39      	ldr	r3, [pc, #228]	; (800817c <atan+0x2f4>)
 8008098:	f7f8 f8cc 	bl	8000234 <__adddf3>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4630      	mov	r0, r6
 80080a2:	4639      	mov	r1, r7
 80080a4:	f7f8 fba6 	bl	80007f4 <__aeabi_ddiv>
 80080a8:	f04f 0a02 	mov.w	sl, #2
 80080ac:	4604      	mov	r4, r0
 80080ae:	460d      	mov	r5, r1
 80080b0:	e749      	b.n	8007f46 <atan+0xbe>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	2000      	movs	r0, #0
 80080b8:	4934      	ldr	r1, [pc, #208]	; (800818c <atan+0x304>)
 80080ba:	f7f8 fb9b 	bl	80007f4 <__aeabi_ddiv>
 80080be:	f04f 0a03 	mov.w	sl, #3
 80080c2:	4604      	mov	r4, r0
 80080c4:	460d      	mov	r5, r1
 80080c6:	e73e      	b.n	8007f46 <atan+0xbe>
 80080c8:	4b31      	ldr	r3, [pc, #196]	; (8008190 <atan+0x308>)
 80080ca:	4e32      	ldr	r6, [pc, #200]	; (8008194 <atan+0x30c>)
 80080cc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80080d0:	4456      	add	r6, sl
 80080d2:	449a      	add	sl, r3
 80080d4:	e9da 2300 	ldrd	r2, r3, [sl]
 80080d8:	f7f8 f8aa 	bl	8000230 <__aeabi_dsub>
 80080dc:	4622      	mov	r2, r4
 80080de:	462b      	mov	r3, r5
 80080e0:	f7f8 f8a6 	bl	8000230 <__aeabi_dsub>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80080ec:	f7f8 f8a0 	bl	8000230 <__aeabi_dsub>
 80080f0:	f1bb 0f00 	cmp.w	fp, #0
 80080f4:	4604      	mov	r4, r0
 80080f6:	460d      	mov	r5, r1
 80080f8:	f6bf aee4 	bge.w	8007ec4 <atan+0x3c>
 80080fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008100:	461d      	mov	r5, r3
 8008102:	e6df      	b.n	8007ec4 <atan+0x3c>
 8008104:	4d24      	ldr	r5, [pc, #144]	; (8008198 <atan+0x310>)
 8008106:	e6dd      	b.n	8007ec4 <atan+0x3c>
 8008108:	8800759c 	.word	0x8800759c
 800810c:	7e37e43c 	.word	0x7e37e43c
 8008110:	e322da11 	.word	0xe322da11
 8008114:	3f90ad3a 	.word	0x3f90ad3a
 8008118:	24760deb 	.word	0x24760deb
 800811c:	3fa97b4b 	.word	0x3fa97b4b
 8008120:	a0d03d51 	.word	0xa0d03d51
 8008124:	3fb10d66 	.word	0x3fb10d66
 8008128:	c54c206e 	.word	0xc54c206e
 800812c:	3fb745cd 	.word	0x3fb745cd
 8008130:	920083ff 	.word	0x920083ff
 8008134:	3fc24924 	.word	0x3fc24924
 8008138:	5555550d 	.word	0x5555550d
 800813c:	3fd55555 	.word	0x3fd55555
 8008140:	2c6a6c2f 	.word	0x2c6a6c2f
 8008144:	bfa2b444 	.word	0xbfa2b444
 8008148:	52defd9a 	.word	0x52defd9a
 800814c:	3fadde2d 	.word	0x3fadde2d
 8008150:	af749a6d 	.word	0xaf749a6d
 8008154:	3fb3b0f2 	.word	0x3fb3b0f2
 8008158:	fe231671 	.word	0xfe231671
 800815c:	3fbc71c6 	.word	0x3fbc71c6
 8008160:	9998ebc4 	.word	0x9998ebc4
 8008164:	3fc99999 	.word	0x3fc99999
 8008168:	440fffff 	.word	0x440fffff
 800816c:	7ff00000 	.word	0x7ff00000
 8008170:	54442d18 	.word	0x54442d18
 8008174:	3ff921fb 	.word	0x3ff921fb
 8008178:	3fdbffff 	.word	0x3fdbffff
 800817c:	3ff00000 	.word	0x3ff00000
 8008180:	3ff2ffff 	.word	0x3ff2ffff
 8008184:	40037fff 	.word	0x40037fff
 8008188:	3ff80000 	.word	0x3ff80000
 800818c:	bff00000 	.word	0xbff00000
 8008190:	080084b0 	.word	0x080084b0
 8008194:	08008490 	.word	0x08008490
 8008198:	bff921fb 	.word	0xbff921fb

0800819c <fabs>:
 800819c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081a0:	4619      	mov	r1, r3
 80081a2:	4770      	bx	lr

080081a4 <finite>:
 80081a4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80081a8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80081ac:	0fc0      	lsrs	r0, r0, #31
 80081ae:	4770      	bx	lr

080081b0 <matherr>:
 80081b0:	2000      	movs	r0, #0
 80081b2:	4770      	bx	lr

080081b4 <nan>:
 80081b4:	2000      	movs	r0, #0
 80081b6:	4901      	ldr	r1, [pc, #4]	; (80081bc <nan+0x8>)
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	7ff80000 	.word	0x7ff80000

080081c0 <rint>:
 80081c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80081c6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80081ca:	f1bc 0f13 	cmp.w	ip, #19
 80081ce:	4604      	mov	r4, r0
 80081d0:	460d      	mov	r5, r1
 80081d2:	460b      	mov	r3, r1
 80081d4:	4606      	mov	r6, r0
 80081d6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 80081da:	dc5a      	bgt.n	8008292 <rint+0xd2>
 80081dc:	f1bc 0f00 	cmp.w	ip, #0
 80081e0:	da2b      	bge.n	800823a <rint+0x7a>
 80081e2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80081e6:	4302      	orrs	r2, r0
 80081e8:	d023      	beq.n	8008232 <rint+0x72>
 80081ea:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80081ee:	4302      	orrs	r2, r0
 80081f0:	4256      	negs	r6, r2
 80081f2:	4316      	orrs	r6, r2
 80081f4:	0c4b      	lsrs	r3, r1, #17
 80081f6:	0b36      	lsrs	r6, r6, #12
 80081f8:	4934      	ldr	r1, [pc, #208]	; (80082cc <rint+0x10c>)
 80081fa:	045b      	lsls	r3, r3, #17
 80081fc:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8008200:	ea46 0503 	orr.w	r5, r6, r3
 8008204:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8008208:	4602      	mov	r2, r0
 800820a:	462b      	mov	r3, r5
 800820c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8008210:	4620      	mov	r0, r4
 8008212:	4629      	mov	r1, r5
 8008214:	f7f8 f80e 	bl	8000234 <__adddf3>
 8008218:	e9cd 0100 	strd	r0, r1, [sp]
 800821c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008220:	462b      	mov	r3, r5
 8008222:	4622      	mov	r2, r4
 8008224:	f7f8 f804 	bl	8000230 <__aeabi_dsub>
 8008228:	4604      	mov	r4, r0
 800822a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800822e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8008232:	4620      	mov	r0, r4
 8008234:	4629      	mov	r1, r5
 8008236:	b003      	add	sp, #12
 8008238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800823a:	4a25      	ldr	r2, [pc, #148]	; (80082d0 <rint+0x110>)
 800823c:	fa42 f20c 	asr.w	r2, r2, ip
 8008240:	4011      	ands	r1, r2
 8008242:	4301      	orrs	r1, r0
 8008244:	d0f5      	beq.n	8008232 <rint+0x72>
 8008246:	0852      	lsrs	r2, r2, #1
 8008248:	ea05 0102 	and.w	r1, r5, r2
 800824c:	ea50 0601 	orrs.w	r6, r0, r1
 8008250:	d00c      	beq.n	800826c <rint+0xac>
 8008252:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008256:	f1bc 0f13 	cmp.w	ip, #19
 800825a:	bf0c      	ite	eq
 800825c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8008260:	2600      	movne	r6, #0
 8008262:	ea25 0202 	bic.w	r2, r5, r2
 8008266:	fa43 f30c 	asr.w	r3, r3, ip
 800826a:	4313      	orrs	r3, r2
 800826c:	4917      	ldr	r1, [pc, #92]	; (80082cc <rint+0x10c>)
 800826e:	4632      	mov	r2, r6
 8008270:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8008274:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008278:	4620      	mov	r0, r4
 800827a:	4629      	mov	r1, r5
 800827c:	f7f7 ffda 	bl	8000234 <__adddf3>
 8008280:	e9cd 0100 	strd	r0, r1, [sp]
 8008284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008288:	4622      	mov	r2, r4
 800828a:	462b      	mov	r3, r5
 800828c:	f7f7 ffd0 	bl	8000230 <__aeabi_dsub>
 8008290:	e008      	b.n	80082a4 <rint+0xe4>
 8008292:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8008296:	dd08      	ble.n	80082aa <rint+0xea>
 8008298:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800829c:	d1c9      	bne.n	8008232 <rint+0x72>
 800829e:	4602      	mov	r2, r0
 80082a0:	f7f7 ffc8 	bl	8000234 <__adddf3>
 80082a4:	4604      	mov	r4, r0
 80082a6:	460d      	mov	r5, r1
 80082a8:	e7c3      	b.n	8008232 <rint+0x72>
 80082aa:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80082ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082b2:	40ca      	lsrs	r2, r1
 80082b4:	4210      	tst	r0, r2
 80082b6:	d0bc      	beq.n	8008232 <rint+0x72>
 80082b8:	0852      	lsrs	r2, r2, #1
 80082ba:	4210      	tst	r0, r2
 80082bc:	bf1f      	itttt	ne
 80082be:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80082c2:	ea20 0202 	bicne.w	r2, r0, r2
 80082c6:	410e      	asrne	r6, r1
 80082c8:	4316      	orrne	r6, r2
 80082ca:	e7cf      	b.n	800826c <rint+0xac>
 80082cc:	080084d0 	.word	0x080084d0
 80082d0:	000fffff 	.word	0x000fffff
 80082d4:	00000000 	.word	0x00000000

080082d8 <scalbn>:
 80082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082da:	4616      	mov	r6, r2
 80082dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80082e0:	4604      	mov	r4, r0
 80082e2:	460d      	mov	r5, r1
 80082e4:	460b      	mov	r3, r1
 80082e6:	b982      	cbnz	r2, 800830a <scalbn+0x32>
 80082e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082ec:	4303      	orrs	r3, r0
 80082ee:	d034      	beq.n	800835a <scalbn+0x82>
 80082f0:	4b2d      	ldr	r3, [pc, #180]	; (80083a8 <scalbn+0xd0>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	f7f8 f954 	bl	80005a0 <__aeabi_dmul>
 80082f8:	4b2c      	ldr	r3, [pc, #176]	; (80083ac <scalbn+0xd4>)
 80082fa:	4604      	mov	r4, r0
 80082fc:	429e      	cmp	r6, r3
 80082fe:	460d      	mov	r5, r1
 8008300:	da0d      	bge.n	800831e <scalbn+0x46>
 8008302:	a325      	add	r3, pc, #148	; (adr r3, 8008398 <scalbn+0xc0>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	e01c      	b.n	8008344 <scalbn+0x6c>
 800830a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800830e:	42ba      	cmp	r2, r7
 8008310:	d109      	bne.n	8008326 <scalbn+0x4e>
 8008312:	4602      	mov	r2, r0
 8008314:	f7f7 ff8e 	bl	8000234 <__adddf3>
 8008318:	4604      	mov	r4, r0
 800831a:	460d      	mov	r5, r1
 800831c:	e01d      	b.n	800835a <scalbn+0x82>
 800831e:	460b      	mov	r3, r1
 8008320:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008324:	3a36      	subs	r2, #54	; 0x36
 8008326:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800832a:	4432      	add	r2, r6
 800832c:	428a      	cmp	r2, r1
 800832e:	dd0c      	ble.n	800834a <scalbn+0x72>
 8008330:	4622      	mov	r2, r4
 8008332:	462b      	mov	r3, r5
 8008334:	a11a      	add	r1, pc, #104	; (adr r1, 80083a0 <scalbn+0xc8>)
 8008336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800833a:	f000 f83b 	bl	80083b4 <copysign>
 800833e:	a318      	add	r3, pc, #96	; (adr r3, 80083a0 <scalbn+0xc8>)
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	f7f8 f92c 	bl	80005a0 <__aeabi_dmul>
 8008348:	e7e6      	b.n	8008318 <scalbn+0x40>
 800834a:	2a00      	cmp	r2, #0
 800834c:	dd08      	ble.n	8008360 <scalbn+0x88>
 800834e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008352:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008356:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800835a:	4620      	mov	r0, r4
 800835c:	4629      	mov	r1, r5
 800835e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008360:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008364:	da0b      	bge.n	800837e <scalbn+0xa6>
 8008366:	f24c 3350 	movw	r3, #50000	; 0xc350
 800836a:	429e      	cmp	r6, r3
 800836c:	4622      	mov	r2, r4
 800836e:	462b      	mov	r3, r5
 8008370:	dce0      	bgt.n	8008334 <scalbn+0x5c>
 8008372:	a109      	add	r1, pc, #36	; (adr r1, 8008398 <scalbn+0xc0>)
 8008374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008378:	f000 f81c 	bl	80083b4 <copysign>
 800837c:	e7c1      	b.n	8008302 <scalbn+0x2a>
 800837e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008382:	3236      	adds	r2, #54	; 0x36
 8008384:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008388:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800838c:	4620      	mov	r0, r4
 800838e:	4629      	mov	r1, r5
 8008390:	2200      	movs	r2, #0
 8008392:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <scalbn+0xd8>)
 8008394:	e7d6      	b.n	8008344 <scalbn+0x6c>
 8008396:	bf00      	nop
 8008398:	c2f8f359 	.word	0xc2f8f359
 800839c:	01a56e1f 	.word	0x01a56e1f
 80083a0:	8800759c 	.word	0x8800759c
 80083a4:	7e37e43c 	.word	0x7e37e43c
 80083a8:	43500000 	.word	0x43500000
 80083ac:	ffff3cb0 	.word	0xffff3cb0
 80083b0:	3c900000 	.word	0x3c900000

080083b4 <copysign>:
 80083b4:	b530      	push	{r4, r5, lr}
 80083b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80083ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083be:	ea42 0503 	orr.w	r5, r2, r3
 80083c2:	4629      	mov	r1, r5
 80083c4:	bd30      	pop	{r4, r5, pc}
	...

080083c8 <_init>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	bf00      	nop
 80083cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ce:	bc08      	pop	{r3}
 80083d0:	469e      	mov	lr, r3
 80083d2:	4770      	bx	lr

080083d4 <_fini>:
 80083d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d6:	bf00      	nop
 80083d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083da:	bc08      	pop	{r3}
 80083dc:	469e      	mov	lr, r3
 80083de:	4770      	bx	lr
