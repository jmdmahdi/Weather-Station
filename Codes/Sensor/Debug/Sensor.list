
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a298  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800a480  0800a480  0001a480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c0  0800a5c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5c0  0800a5c0  0001a5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5c8  0800a5c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5c8  0800a5c8  0001a5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5cc  0800a5cc  0001a5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a5d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000078  0800a648  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  0800a648  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014135  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bc9  00000000  00000000  000341d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001258  00000000  00000000  00036da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001110  00000000  00000000  00037ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e1c0  00000000  00000000  00039108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e12e  00000000  00000000  000572c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a76ca  00000000  00000000  000653f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010cac0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005354  00000000  00000000  0010cb3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a468 	.word	0x0800a468

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	0800a468 	.word	0x0800a468

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_d2f>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b58:	bf24      	itt	cs
 8000b5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_d2f+0x30>
 8000b64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b78:	bf08      	it	eq
 8000b7a:	f020 0001 	biceq.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b84:	d121      	bne.n	8000bca <__aeabi_d2f+0x7a>
 8000b86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8a:	bfbc      	itt	lt
 8000b8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	4770      	bxlt	lr
 8000b92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9a:	f1c2 0218 	rsb	r2, r2, #24
 8000b9e:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ba6:	fa20 f002 	lsr.w	r0, r0, r2
 8000baa:	bf18      	it	ne
 8000bac:	f040 0001 	orrne.w	r0, r0, #1
 8000bb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bbc:	ea40 000c 	orr.w	r0, r0, ip
 8000bc0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc8:	e7cc      	b.n	8000b64 <__aeabi_d2f+0x14>
 8000bca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bce:	d107      	bne.n	8000be0 <__aeabi_d2f+0x90>
 8000bd0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bde:	4770      	bxne	lr
 8000be0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	d1ed      	bne.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__gesf2>:
 8000e0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e10:	e006      	b.n	8000e20 <__cmpsf2+0x4>
 8000e12:	bf00      	nop

08000e14 <__lesf2>:
 8000e14:	f04f 0c01 	mov.w	ip, #1
 8000e18:	e002      	b.n	8000e20 <__cmpsf2+0x4>
 8000e1a:	bf00      	nop

08000e1c <__cmpsf2>:
 8000e1c:	f04f 0c01 	mov.w	ip, #1
 8000e20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e30:	bf18      	it	ne
 8000e32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e36:	d011      	beq.n	8000e5c <__cmpsf2+0x40>
 8000e38:	b001      	add	sp, #4
 8000e3a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e3e:	bf18      	it	ne
 8000e40:	ea90 0f01 	teqne	r0, r1
 8000e44:	bf58      	it	pl
 8000e46:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e4a:	bf88      	it	hi
 8000e4c:	17c8      	asrhi	r0, r1, #31
 8000e4e:	bf38      	it	cc
 8000e50:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e54:	bf18      	it	ne
 8000e56:	f040 0001 	orrne.w	r0, r0, #1
 8000e5a:	4770      	bx	lr
 8000e5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e60:	d102      	bne.n	8000e68 <__cmpsf2+0x4c>
 8000e62:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e66:	d105      	bne.n	8000e74 <__cmpsf2+0x58>
 8000e68:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e6c:	d1e4      	bne.n	8000e38 <__cmpsf2+0x1c>
 8000e6e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e72:	d0e1      	beq.n	8000e38 <__cmpsf2+0x1c>
 8000e74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_cfrcmple>:
 8000e7c:	4684      	mov	ip, r0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	4661      	mov	r1, ip
 8000e82:	e7ff      	b.n	8000e84 <__aeabi_cfcmpeq>

08000e84 <__aeabi_cfcmpeq>:
 8000e84:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e86:	f7ff ffc9 	bl	8000e1c <__cmpsf2>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f110 0f00 	cmnmi.w	r0, #0
 8000e92:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e94 <__aeabi_fcmpeq>:
 8000e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e98:	f7ff fff4 	bl	8000e84 <__aeabi_cfcmpeq>
 8000e9c:	bf0c      	ite	eq
 8000e9e:	2001      	moveq	r0, #1
 8000ea0:	2000      	movne	r0, #0
 8000ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_fcmplt>:
 8000ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eac:	f7ff ffea 	bl	8000e84 <__aeabi_cfcmpeq>
 8000eb0:	bf34      	ite	cc
 8000eb2:	2001      	movcc	r0, #1
 8000eb4:	2000      	movcs	r0, #0
 8000eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eba:	bf00      	nop

08000ebc <__aeabi_fcmple>:
 8000ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec0:	f7ff ffe0 	bl	8000e84 <__aeabi_cfcmpeq>
 8000ec4:	bf94      	ite	ls
 8000ec6:	2001      	movls	r0, #1
 8000ec8:	2000      	movhi	r0, #0
 8000eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ece:	bf00      	nop

08000ed0 <__aeabi_fcmpge>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff ffd2 	bl	8000e7c <__aeabi_cfrcmple>
 8000ed8:	bf94      	ite	ls
 8000eda:	2001      	movls	r0, #1
 8000edc:	2000      	movhi	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmpgt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffc8 	bl	8000e7c <__aeabi_cfrcmple>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_f2iz>:
 8000ef8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f00:	d30f      	bcc.n	8000f22 <__aeabi_f2iz+0x2a>
 8000f02:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f0a:	d90d      	bls.n	8000f28 <__aeabi_f2iz+0x30>
 8000f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f14:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f18:	fa23 f002 	lsr.w	r0, r3, r2
 8000f1c:	bf18      	it	ne
 8000f1e:	4240      	negne	r0, r0
 8000f20:	4770      	bx	lr
 8000f22:	f04f 0000 	mov.w	r0, #0
 8000f26:	4770      	bx	lr
 8000f28:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f2c:	d101      	bne.n	8000f32 <__aeabi_f2iz+0x3a>
 8000f2e:	0242      	lsls	r2, r0, #9
 8000f30:	d105      	bne.n	8000f3e <__aeabi_f2iz+0x46>
 8000f32:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f36:	bf08      	it	eq
 8000f38:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f3c:	4770      	bx	lr
 8000f3e:	f04f 0000 	mov.w	r0, #0
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f58:	f000 b974 	b.w	8001244 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f806 	bl	8000f74 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__udivmoddi4>:
 8000f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	468c      	mov	ip, r1
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	9e08      	ldr	r6, [sp, #32]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d14b      	bne.n	800101a <__udivmoddi4+0xa6>
 8000f82:	428a      	cmp	r2, r1
 8000f84:	4615      	mov	r5, r2
 8000f86:	d967      	bls.n	8001058 <__udivmoddi4+0xe4>
 8000f88:	fab2 f282 	clz	r2, r2
 8000f8c:	b14a      	cbz	r2, 8000fa2 <__udivmoddi4+0x2e>
 8000f8e:	f1c2 0720 	rsb	r7, r2, #32
 8000f92:	fa01 f302 	lsl.w	r3, r1, r2
 8000f96:	fa20 f707 	lsr.w	r7, r0, r7
 8000f9a:	4095      	lsls	r5, r2
 8000f9c:	ea47 0c03 	orr.w	ip, r7, r3
 8000fa0:	4094      	lsls	r4, r2
 8000fa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fa6:	fbbc f7fe 	udiv	r7, ip, lr
 8000faa:	fa1f f885 	uxth.w	r8, r5
 8000fae:	fb0e c317 	mls	r3, lr, r7, ip
 8000fb2:	fb07 f908 	mul.w	r9, r7, r8
 8000fb6:	0c21      	lsrs	r1, r4, #16
 8000fb8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000fbc:	4599      	cmp	r9, r3
 8000fbe:	d909      	bls.n	8000fd4 <__udivmoddi4+0x60>
 8000fc0:	18eb      	adds	r3, r5, r3
 8000fc2:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000fc6:	f080 811c 	bcs.w	8001202 <__udivmoddi4+0x28e>
 8000fca:	4599      	cmp	r9, r3
 8000fcc:	f240 8119 	bls.w	8001202 <__udivmoddi4+0x28e>
 8000fd0:	3f02      	subs	r7, #2
 8000fd2:	442b      	add	r3, r5
 8000fd4:	eba3 0309 	sub.w	r3, r3, r9
 8000fd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fe0:	fb00 f108 	mul.w	r1, r0, r8
 8000fe4:	b2a4      	uxth	r4, r4
 8000fe6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fea:	42a1      	cmp	r1, r4
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0x8e>
 8000fee:	192c      	adds	r4, r5, r4
 8000ff0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ff4:	f080 8107 	bcs.w	8001206 <__udivmoddi4+0x292>
 8000ff8:	42a1      	cmp	r1, r4
 8000ffa:	f240 8104 	bls.w	8001206 <__udivmoddi4+0x292>
 8000ffe:	3802      	subs	r0, #2
 8001000:	442c      	add	r4, r5
 8001002:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001006:	2700      	movs	r7, #0
 8001008:	1a64      	subs	r4, r4, r1
 800100a:	b11e      	cbz	r6, 8001014 <__udivmoddi4+0xa0>
 800100c:	2300      	movs	r3, #0
 800100e:	40d4      	lsrs	r4, r2
 8001010:	e9c6 4300 	strd	r4, r3, [r6]
 8001014:	4639      	mov	r1, r7
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	428b      	cmp	r3, r1
 800101c:	d909      	bls.n	8001032 <__udivmoddi4+0xbe>
 800101e:	2e00      	cmp	r6, #0
 8001020:	f000 80ec 	beq.w	80011fc <__udivmoddi4+0x288>
 8001024:	2700      	movs	r7, #0
 8001026:	e9c6 0100 	strd	r0, r1, [r6]
 800102a:	4638      	mov	r0, r7
 800102c:	4639      	mov	r1, r7
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001032:	fab3 f783 	clz	r7, r3
 8001036:	2f00      	cmp	r7, #0
 8001038:	d148      	bne.n	80010cc <__udivmoddi4+0x158>
 800103a:	428b      	cmp	r3, r1
 800103c:	d302      	bcc.n	8001044 <__udivmoddi4+0xd0>
 800103e:	4282      	cmp	r2, r0
 8001040:	f200 80fb 	bhi.w	800123a <__udivmoddi4+0x2c6>
 8001044:	1a84      	subs	r4, r0, r2
 8001046:	eb61 0303 	sbc.w	r3, r1, r3
 800104a:	2001      	movs	r0, #1
 800104c:	469c      	mov	ip, r3
 800104e:	2e00      	cmp	r6, #0
 8001050:	d0e0      	beq.n	8001014 <__udivmoddi4+0xa0>
 8001052:	e9c6 4c00 	strd	r4, ip, [r6]
 8001056:	e7dd      	b.n	8001014 <__udivmoddi4+0xa0>
 8001058:	b902      	cbnz	r2, 800105c <__udivmoddi4+0xe8>
 800105a:	deff      	udf	#255	; 0xff
 800105c:	fab2 f282 	clz	r2, r2
 8001060:	2a00      	cmp	r2, #0
 8001062:	f040 808f 	bne.w	8001184 <__udivmoddi4+0x210>
 8001066:	2701      	movs	r7, #1
 8001068:	1b49      	subs	r1, r1, r5
 800106a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800106e:	fa1f f985 	uxth.w	r9, r5
 8001072:	fbb1 fef8 	udiv	lr, r1, r8
 8001076:	fb08 111e 	mls	r1, r8, lr, r1
 800107a:	fb09 f00e 	mul.w	r0, r9, lr
 800107e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001082:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001086:	4298      	cmp	r0, r3
 8001088:	d907      	bls.n	800109a <__udivmoddi4+0x126>
 800108a:	18eb      	adds	r3, r5, r3
 800108c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8001090:	d202      	bcs.n	8001098 <__udivmoddi4+0x124>
 8001092:	4298      	cmp	r0, r3
 8001094:	f200 80cd 	bhi.w	8001232 <__udivmoddi4+0x2be>
 8001098:	468e      	mov	lr, r1
 800109a:	1a1b      	subs	r3, r3, r0
 800109c:	fbb3 f0f8 	udiv	r0, r3, r8
 80010a0:	fb08 3310 	mls	r3, r8, r0, r3
 80010a4:	fb09 f900 	mul.w	r9, r9, r0
 80010a8:	b2a4      	uxth	r4, r4
 80010aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010ae:	45a1      	cmp	r9, r4
 80010b0:	d907      	bls.n	80010c2 <__udivmoddi4+0x14e>
 80010b2:	192c      	adds	r4, r5, r4
 80010b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80010b8:	d202      	bcs.n	80010c0 <__udivmoddi4+0x14c>
 80010ba:	45a1      	cmp	r9, r4
 80010bc:	f200 80b6 	bhi.w	800122c <__udivmoddi4+0x2b8>
 80010c0:	4618      	mov	r0, r3
 80010c2:	eba4 0409 	sub.w	r4, r4, r9
 80010c6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80010ca:	e79e      	b.n	800100a <__udivmoddi4+0x96>
 80010cc:	f1c7 0520 	rsb	r5, r7, #32
 80010d0:	40bb      	lsls	r3, r7
 80010d2:	fa22 fc05 	lsr.w	ip, r2, r5
 80010d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80010da:	fa21 f405 	lsr.w	r4, r1, r5
 80010de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010e2:	fbb4 f9fe 	udiv	r9, r4, lr
 80010e6:	fa1f f88c 	uxth.w	r8, ip
 80010ea:	fb0e 4419 	mls	r4, lr, r9, r4
 80010ee:	fa20 f305 	lsr.w	r3, r0, r5
 80010f2:	40b9      	lsls	r1, r7
 80010f4:	fb09 fa08 	mul.w	sl, r9, r8
 80010f8:	4319      	orrs	r1, r3
 80010fa:	0c0b      	lsrs	r3, r1, #16
 80010fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001100:	45a2      	cmp	sl, r4
 8001102:	fa02 f207 	lsl.w	r2, r2, r7
 8001106:	fa00 f307 	lsl.w	r3, r0, r7
 800110a:	d90b      	bls.n	8001124 <__udivmoddi4+0x1b0>
 800110c:	eb1c 0404 	adds.w	r4, ip, r4
 8001110:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001114:	f080 8088 	bcs.w	8001228 <__udivmoddi4+0x2b4>
 8001118:	45a2      	cmp	sl, r4
 800111a:	f240 8085 	bls.w	8001228 <__udivmoddi4+0x2b4>
 800111e:	f1a9 0902 	sub.w	r9, r9, #2
 8001122:	4464      	add	r4, ip
 8001124:	eba4 040a 	sub.w	r4, r4, sl
 8001128:	fbb4 f0fe 	udiv	r0, r4, lr
 800112c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001130:	fb00 fa08 	mul.w	sl, r0, r8
 8001134:	b289      	uxth	r1, r1
 8001136:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800113a:	45a2      	cmp	sl, r4
 800113c:	d908      	bls.n	8001150 <__udivmoddi4+0x1dc>
 800113e:	eb1c 0404 	adds.w	r4, ip, r4
 8001142:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001146:	d26b      	bcs.n	8001220 <__udivmoddi4+0x2ac>
 8001148:	45a2      	cmp	sl, r4
 800114a:	d969      	bls.n	8001220 <__udivmoddi4+0x2ac>
 800114c:	3802      	subs	r0, #2
 800114e:	4464      	add	r4, ip
 8001150:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001154:	fba0 8902 	umull	r8, r9, r0, r2
 8001158:	eba4 040a 	sub.w	r4, r4, sl
 800115c:	454c      	cmp	r4, r9
 800115e:	4641      	mov	r1, r8
 8001160:	46ce      	mov	lr, r9
 8001162:	d354      	bcc.n	800120e <__udivmoddi4+0x29a>
 8001164:	d051      	beq.n	800120a <__udivmoddi4+0x296>
 8001166:	2e00      	cmp	r6, #0
 8001168:	d069      	beq.n	800123e <__udivmoddi4+0x2ca>
 800116a:	1a5a      	subs	r2, r3, r1
 800116c:	eb64 040e 	sbc.w	r4, r4, lr
 8001170:	fa04 f505 	lsl.w	r5, r4, r5
 8001174:	fa22 f307 	lsr.w	r3, r2, r7
 8001178:	40fc      	lsrs	r4, r7
 800117a:	431d      	orrs	r5, r3
 800117c:	e9c6 5400 	strd	r5, r4, [r6]
 8001180:	2700      	movs	r7, #0
 8001182:	e747      	b.n	8001014 <__udivmoddi4+0xa0>
 8001184:	4095      	lsls	r5, r2
 8001186:	f1c2 0320 	rsb	r3, r2, #32
 800118a:	fa21 f003 	lsr.w	r0, r1, r3
 800118e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8001192:	fbb0 f7f8 	udiv	r7, r0, r8
 8001196:	fa1f f985 	uxth.w	r9, r5
 800119a:	fb08 0017 	mls	r0, r8, r7, r0
 800119e:	fa24 f303 	lsr.w	r3, r4, r3
 80011a2:	4091      	lsls	r1, r2
 80011a4:	fb07 fc09 	mul.w	ip, r7, r9
 80011a8:	430b      	orrs	r3, r1
 80011aa:	0c19      	lsrs	r1, r3, #16
 80011ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011b0:	458c      	cmp	ip, r1
 80011b2:	fa04 f402 	lsl.w	r4, r4, r2
 80011b6:	d907      	bls.n	80011c8 <__udivmoddi4+0x254>
 80011b8:	1869      	adds	r1, r5, r1
 80011ba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80011be:	d231      	bcs.n	8001224 <__udivmoddi4+0x2b0>
 80011c0:	458c      	cmp	ip, r1
 80011c2:	d92f      	bls.n	8001224 <__udivmoddi4+0x2b0>
 80011c4:	3f02      	subs	r7, #2
 80011c6:	4429      	add	r1, r5
 80011c8:	eba1 010c 	sub.w	r1, r1, ip
 80011cc:	fbb1 f0f8 	udiv	r0, r1, r8
 80011d0:	fb08 1c10 	mls	ip, r8, r0, r1
 80011d4:	fb00 fe09 	mul.w	lr, r0, r9
 80011d8:	b299      	uxth	r1, r3
 80011da:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80011de:	458e      	cmp	lr, r1
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x27e>
 80011e2:	1869      	adds	r1, r5, r1
 80011e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80011e8:	d218      	bcs.n	800121c <__udivmoddi4+0x2a8>
 80011ea:	458e      	cmp	lr, r1
 80011ec:	d916      	bls.n	800121c <__udivmoddi4+0x2a8>
 80011ee:	3802      	subs	r0, #2
 80011f0:	4429      	add	r1, r5
 80011f2:	eba1 010e 	sub.w	r1, r1, lr
 80011f6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011fa:	e73a      	b.n	8001072 <__udivmoddi4+0xfe>
 80011fc:	4637      	mov	r7, r6
 80011fe:	4630      	mov	r0, r6
 8001200:	e708      	b.n	8001014 <__udivmoddi4+0xa0>
 8001202:	460f      	mov	r7, r1
 8001204:	e6e6      	b.n	8000fd4 <__udivmoddi4+0x60>
 8001206:	4618      	mov	r0, r3
 8001208:	e6fb      	b.n	8001002 <__udivmoddi4+0x8e>
 800120a:	4543      	cmp	r3, r8
 800120c:	d2ab      	bcs.n	8001166 <__udivmoddi4+0x1f2>
 800120e:	ebb8 0102 	subs.w	r1, r8, r2
 8001212:	eb69 020c 	sbc.w	r2, r9, ip
 8001216:	3801      	subs	r0, #1
 8001218:	4696      	mov	lr, r2
 800121a:	e7a4      	b.n	8001166 <__udivmoddi4+0x1f2>
 800121c:	4618      	mov	r0, r3
 800121e:	e7e8      	b.n	80011f2 <__udivmoddi4+0x27e>
 8001220:	4608      	mov	r0, r1
 8001222:	e795      	b.n	8001150 <__udivmoddi4+0x1dc>
 8001224:	4607      	mov	r7, r0
 8001226:	e7cf      	b.n	80011c8 <__udivmoddi4+0x254>
 8001228:	4681      	mov	r9, r0
 800122a:	e77b      	b.n	8001124 <__udivmoddi4+0x1b0>
 800122c:	3802      	subs	r0, #2
 800122e:	442c      	add	r4, r5
 8001230:	e747      	b.n	80010c2 <__udivmoddi4+0x14e>
 8001232:	f1ae 0e02 	sub.w	lr, lr, #2
 8001236:	442b      	add	r3, r5
 8001238:	e72f      	b.n	800109a <__udivmoddi4+0x126>
 800123a:	4638      	mov	r0, r7
 800123c:	e707      	b.n	800104e <__udivmoddi4+0xda>
 800123e:	4637      	mov	r7, r6
 8001240:	e6e8      	b.n	8001014 <__udivmoddi4+0xa0>
 8001242:	bf00      	nop

08001244 <__aeabi_idiv0>:
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <AHT10_Init>:
uint8_t T_100ms = 255;
uint8_t AHT10_Switcher = 255;

I2C_HandleTypeDef *AHT10_hi2c;

void AHT10_Init(I2C_HandleTypeDef *hi2c) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	AHT10_hi2c = hi2c;
 8001250:	4a03      	ldr	r2, [pc, #12]	; (8001260 <AHT10_Init+0x18>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	200000a4 	.word	0x200000a4

08001264 <AHT10_GetRaw_Temperature_hum>:

void AHT10_GetRaw_Temperature_hum(void) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Receive(AHT10_hi2c, AHT10_ADRESS, (uint8_t*) AHT10_RX_Data,
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <AHT10_GetRaw_Temperature_hum+0x20>)
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	2364      	movs	r3, #100	; 0x64
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2306      	movs	r3, #6
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <AHT10_GetRaw_Temperature_hum+0x24>)
 8001276:	2170      	movs	r1, #112	; 0x70
 8001278:	f003 f8a8 	bl	80043cc <HAL_I2C_Master_Receive>
			6, 100);
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000a4 	.word	0x200000a4
 8001288:	2000009c 	.word	0x2000009c

0800128c <AHT10_GetTemperature_hum>:

void AHT10_GetTemperature_hum(int8_t *Data) {
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b085      	sub	sp, #20
 8001290:	af02      	add	r7, sp, #8
 8001292:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(AHT10_hi2c, AHT10_ADRESS,
 8001294:	4b3d      	ldr	r3, [pc, #244]	; (800138c <AHT10_GetTemperature_hum+0x100>)
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	2364      	movs	r3, #100	; 0x64
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2303      	movs	r3, #3
 800129e:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <AHT10_GetTemperature_hum+0x104>)
 80012a0:	2170      	movs	r1, #112	; 0x70
 80012a2:	f002 ff95 	bl	80041d0 <HAL_I2C_Master_Transmit>
			(uint8_t*) AHT10_TmpHum_Cmd, 3, 100);
	AHT10_GetRaw_Temperature_hum();
 80012a6:	f7ff ffdd 	bl	8001264 <AHT10_GetRaw_Temperature_hum>
	AHT10_ADC_Raw = (((uint32_t) AHT10_RX_Data[3] & 15) << 16)
 80012aa:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <AHT10_GetTemperature_hum+0x108>)
 80012ac:	78db      	ldrb	r3, [r3, #3]
 80012ae:	041b      	lsls	r3, r3, #16
 80012b0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
			| ((uint32_t) AHT10_RX_Data[4] << 8) | AHT10_RX_Data[5];
 80012b4:	4b37      	ldr	r3, [pc, #220]	; (8001394 <AHT10_GetTemperature_hum+0x108>)
 80012b6:	791b      	ldrb	r3, [r3, #4]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	4313      	orrs	r3, r2
 80012bc:	4a35      	ldr	r2, [pc, #212]	; (8001394 <AHT10_GetTemperature_hum+0x108>)
 80012be:	7952      	ldrb	r2, [r2, #5]
 80012c0:	4313      	orrs	r3, r2
	AHT10_ADC_Raw = (((uint32_t) AHT10_RX_Data[3] & 15) << 16)
 80012c2:	4a35      	ldr	r2, [pc, #212]	; (8001398 <AHT10_GetTemperature_hum+0x10c>)
 80012c4:	6013      	str	r3, [r2, #0]
	AHT10_Temperature = (float) (AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00;
 80012c6:	4b34      	ldr	r3, [pc, #208]	; (8001398 <AHT10_GetTemperature_hum+0x10c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f8ee 	bl	80004ac <__aeabi_ui2d>
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <AHT10_GetTemperature_hum+0x110>)
 80012d6:	f7ff f963 	bl	80005a0 <__aeabi_dmul>
 80012da:	4603      	mov	r3, r0
 80012dc:	460c      	mov	r4, r1
 80012de:	4618      	mov	r0, r3
 80012e0:	4621      	mov	r1, r4
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <AHT10_GetTemperature_hum+0x114>)
 80012e8:	f7ff fa84 	bl	80007f4 <__aeabi_ddiv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	460c      	mov	r4, r1
 80012f0:	4618      	mov	r0, r3
 80012f2:	4621      	mov	r1, r4
 80012f4:	f7ff fc2c 	bl	8000b50 <__aeabi_d2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	492a      	ldr	r1, [pc, #168]	; (80013a4 <AHT10_GetTemperature_hum+0x118>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fc7b 	bl	8000bf8 <__aeabi_fsub>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <AHT10_GetTemperature_hum+0x11c>)
 8001308:	601a      	str	r2, [r3, #0]

	AHT10_ADC_Raw = ((uint32_t) AHT10_RX_Data[1] << 12)
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <AHT10_GetTemperature_hum+0x108>)
 800130c:	785b      	ldrb	r3, [r3, #1]
 800130e:	031a      	lsls	r2, r3, #12
			| ((uint32_t) AHT10_RX_Data[2] << 4) | (AHT10_RX_Data[3] >> 4);
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <AHT10_GetTemperature_hum+0x108>)
 8001312:	789b      	ldrb	r3, [r3, #2]
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4313      	orrs	r3, r2
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <AHT10_GetTemperature_hum+0x108>)
 800131a:	78d2      	ldrb	r2, [r2, #3]
 800131c:	0912      	lsrs	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	4313      	orrs	r3, r2
	AHT10_ADC_Raw = ((uint32_t) AHT10_RX_Data[1] << 12)
 8001322:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <AHT10_GetTemperature_hum+0x10c>)
 8001324:	6013      	str	r3, [r2, #0]
	AHT10_Humidity = (float) (AHT10_ADC_Raw * 100.00 / 1048576.00);
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <AHT10_GetTemperature_hum+0x10c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8be 	bl	80004ac <__aeabi_ui2d>
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <AHT10_GetTemperature_hum+0x120>)
 8001336:	f7ff f933 	bl	80005a0 <__aeabi_dmul>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	4618      	mov	r0, r3
 8001340:	4621      	mov	r1, r4
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <AHT10_GetTemperature_hum+0x114>)
 8001348:	f7ff fa54 	bl	80007f4 <__aeabi_ddiv>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	4618      	mov	r0, r3
 8001352:	4621      	mov	r1, r4
 8001354:	f7ff fbfc 	bl	8000b50 <__aeabi_d2f>
 8001358:	4602      	mov	r2, r0
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <AHT10_GetTemperature_hum+0x124>)
 800135c:	601a      	str	r2, [r3, #0]

	*Data = AHT10_Temperature;
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <AHT10_GetTemperature_hum+0x11c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fdc8 	bl	8000ef8 <__aeabi_f2iz>
 8001368:	4603      	mov	r3, r0
 800136a:	b25a      	sxtb	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	701a      	strb	r2, [r3, #0]
	*(Data + 1) = AHT10_Humidity;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <AHT10_GetTemperature_hum+0x124>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1c5c      	adds	r4, r3, #1
 8001378:	4610      	mov	r0, r2
 800137a:	f7ff fdbd 	bl	8000ef8 <__aeabi_f2iz>
 800137e:	4603      	mov	r3, r0
 8001380:	b25b      	sxtb	r3, r3
 8001382:	7023      	strb	r3, [r4, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	200000a4 	.word	0x200000a4
 8001390:	20000000 	.word	0x20000000
 8001394:	2000009c 	.word	0x2000009c
 8001398:	200000b0 	.word	0x200000b0
 800139c:	40690000 	.word	0x40690000
 80013a0:	41300000 	.word	0x41300000
 80013a4:	42480000 	.word	0x42480000
 80013a8:	200000a8 	.word	0x200000a8
 80013ac:	40590000 	.word	0x40590000
 80013b0:	200000ac 	.word	0x200000ac

080013b4 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <BMP180_Init+0x18>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	200000cc 	.word	0x200000cc

080013d0 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <BMP180_SetOversampling+0x1c>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	7013      	strb	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200000ca 	.word	0x200000ca

080013f0 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	uint8_t result[2];
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1], (uint8_t *)result);
 80013f6:	22aa      	movs	r2, #170	; 0xaa
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f000 f8e9 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC1 =(result[0] << 8) | result[1];
 8001402:	793b      	ldrb	r3, [r7, #4]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b21a      	sxth	r2, r3
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	b21b      	sxth	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b21a      	sxth	r2, r3
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 8001412:	801a      	strh	r2, [r3, #0]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2], (uint8_t *)result);
 8001414:	22ac      	movs	r2, #172	; 0xac
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4610      	mov	r0, r2
 800141c:	f000 f8da 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC2 =(result[0] << 8) | result[1];
 8001420:	793b      	ldrb	r3, [r7, #4]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b48      	ldr	r3, [pc, #288]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 8001430:	805a      	strh	r2, [r3, #2]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3], (uint8_t *)result);
 8001432:	22ae      	movs	r2, #174	; 0xae
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4619      	mov	r1, r3
 8001438:	4610      	mov	r0, r2
 800143a:	f000 f8cb 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC3 = (result[0] << 8) | result[1];
 800143e:	793b      	ldrb	r3, [r7, #4]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b21a      	sxth	r2, r3
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21a      	sxth	r2, r3
 800144c:	4b40      	ldr	r3, [pc, #256]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 800144e:	809a      	strh	r2, [r3, #4]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4], (uint8_t *)result);
 8001450:	22b0      	movs	r2, #176	; 0xb0
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f000 f8bc 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC4 = (result[0] << 8) | result[1];
 800145c:	793b      	ldrb	r3, [r7, #4]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	797b      	ldrb	r3, [r7, #5]
 8001464:	b21b      	sxth	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b21b      	sxth	r3, r3
 800146a:	b29a      	uxth	r2, r3
 800146c:	4b38      	ldr	r3, [pc, #224]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 800146e:	80da      	strh	r2, [r3, #6]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5], (uint8_t *)result);
 8001470:	22b2      	movs	r2, #178	; 0xb2
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f000 f8ac 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC5 = (result[0] << 8) | result[1];
 800147c:	793b      	ldrb	r3, [r7, #4]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	797b      	ldrb	r3, [r7, #5]
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21b      	sxth	r3, r3
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 800148e:	811a      	strh	r2, [r3, #8]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6], (uint8_t *)result);
 8001490:	22b4      	movs	r2, #180	; 0xb4
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4619      	mov	r1, r3
 8001496:	4610      	mov	r0, r2
 8001498:	f000 f89c 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC6 = (result[0] << 8) | result[1];
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	797b      	ldrb	r3, [r7, #5]
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 80014ae:	815a      	strh	r2, [r3, #10]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1], (uint8_t *)result);
 80014b0:	22b6      	movs	r2, #182	; 0xb6
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f000 f88c 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_B1 = (result[0] << 8) | result[1];
 80014bc:	793b      	ldrb	r3, [r7, #4]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	797b      	ldrb	r3, [r7, #5]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 80014cc:	819a      	strh	r2, [r3, #12]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2], (uint8_t *)result);
 80014ce:	22b8      	movs	r2, #184	; 0xb8
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4610      	mov	r0, r2
 80014d6:	f000 f87d 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_B2 = (result[0] << 8) | result[1];
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	797b      	ldrb	r3, [r7, #5]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 80014ea:	81da      	strh	r2, [r3, #14]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB], (uint8_t *)result);
 80014ec:	22ba      	movs	r2, #186	; 0xba
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f000 f86e 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MB = (result[0] << 8) | result[1];
 80014f8:	793b      	ldrb	r3, [r7, #4]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	797b      	ldrb	r3, [r7, #5]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21a      	sxth	r2, r3
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 8001508:	821a      	strh	r2, [r3, #16]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC], (uint8_t *)result);
 800150a:	22bc      	movs	r2, #188	; 0xbc
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	4619      	mov	r1, r3
 8001510:	4610      	mov	r0, r2
 8001512:	f000 f85f 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MC = (result[0] << 8) | result[1];
 8001516:	793b      	ldrb	r3, [r7, #4]
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	b21a      	sxth	r2, r3
 800151c:	797b      	ldrb	r3, [r7, #5]
 800151e:	b21b      	sxth	r3, r3
 8001520:	4313      	orrs	r3, r2
 8001522:	b21a      	sxth	r2, r3
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 8001526:	825a      	strh	r2, [r3, #18]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD], (uint8_t *)result);
 8001528:	22be      	movs	r2, #190	; 0xbe
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f000 f850 	bl	80015d4 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MD = (result[0] << 8) | result[1];
 8001534:	793b      	ldrb	r3, [r7, #4]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	797b      	ldrb	r3, [r7, #5]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b03      	ldr	r3, [pc, #12]	; (8001550 <BMP180_UpdateCalibrationData+0x160>)
 8001544:	829a      	strh	r2, [r3, #20]
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200000b4 	.word	0x200000b4

08001554 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	4603      	mov	r3, r0
 800155c:	460a      	mov	r2, r1
 800155e:	71fb      	strb	r3, [r7, #7]
 8001560:	4613      	mov	r3, r2
 8001562:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	733b      	strb	r3, [r7, #12]
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <BMP180_WriteReg+0x38>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	f107 020c 	add.w	r2, r7, #12
 8001574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2302      	movs	r3, #2
 800157c:	21ee      	movs	r1, #238	; 0xee
 800157e:	f002 fe27 	bl	80041d0 <HAL_I2C_Master_Transmit>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200000cc 	.word	0x200000cc

08001590 <BMP180_ReadReg8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg8(uint8_t reg) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af02      	add	r7, sp, #8
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <BMP180_ReadReg8+0x40>)
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	1dfa      	adds	r2, r7, #7
 80015a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	21ee      	movs	r1, #238	; 0xee
 80015aa:	f002 fe11 	bl	80041d0 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <BMP180_ReadReg8+0x40>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f107 020f 	add.w	r2, r7, #15
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	21ee      	movs	r1, #238	; 0xee
 80015c0:	f002 ff04 	bl	80043cc <HAL_I2C_Master_Receive>
	return result;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200000cc 	.word	0x200000cc

080015d4 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
void BMP180_ReadReg(uint8_t reg, uint8_t *result) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af02      	add	r7, sp, #8
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <BMP180_ReadReg+0x3c>)
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	1dfa      	adds	r2, r7, #7
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	21ee      	movs	r1, #238	; 0xee
 80015f0:	f002 fdee 	bl	80041d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, (uint8_t*)result, 2, BMP180_I2C_TIMEOUT);
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <BMP180_ReadReg+0x3c>)
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	21ee      	movs	r1, #238	; 0xee
 8001604:	f002 fee2 	bl	80043cc <HAL_I2C_Master_Receive>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000cc 	.word	0x200000cc

08001614 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 800161a:	232e      	movs	r3, #46	; 0x2e
 800161c:	4619      	mov	r1, r3
 800161e:	20f4      	movs	r0, #244	; 0xf4
 8001620:	f7ff ff98 	bl	8001554 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001624:	2305      	movs	r3, #5
 8001626:	4618      	mov	r0, r3
 8001628:	f002 f9d4 	bl	80039d4 <HAL_Delay>
	uint8_t result[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result);
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4619      	mov	r1, r3
 8001630:	20f6      	movs	r0, #246	; 0xf6
 8001632:	f7ff ffcf 	bl	80015d4 <BMP180_ReadReg>
	int32_t ut = (result[0] << 8) | result[1];
 8001636:	793b      	ldrb	r3, [r7, #4]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	797a      	ldrb	r2, [r7, #5]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <BMP180_GetRawTemperature+0x84>)
 8001642:	895b      	ldrh	r3, [r3, #10]
 8001644:	461a      	mov	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	4a13      	ldr	r2, [pc, #76]	; (8001698 <BMP180_GetRawTemperature+0x84>)
 800164c:	8912      	ldrh	r2, [r2, #8]
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	da02      	bge.n	800165c <BMP180_GetRawTemperature+0x48>
 8001656:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800165a:	337f      	adds	r3, #127	; 0x7f
 800165c:	13db      	asrs	r3, r3, #15
 800165e:	613b      	str	r3, [r7, #16]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <BMP180_GetRawTemperature+0x84>)
 8001662:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001666:	02da      	lsls	r2, r3, #11
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <BMP180_GetRawTemperature+0x84>)
 800166a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800166e:	4619      	mov	r1, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	440b      	add	r3, r1
 8001674:	fb92 f3f3 	sdiv	r3, r2, r3
 8001678:	60fb      	str	r3, [r7, #12]
	int32_t b5 = x1 + x2;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60bb      	str	r3, [r7, #8]
	return (b5 + 8) / (1 << 4);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3308      	adds	r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	da00      	bge.n	800168c <BMP180_GetRawTemperature+0x78>
 800168a:	330f      	adds	r3, #15
 800168c:	111b      	asrs	r3, r3, #4
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000b4 	.word	0x200000b4

0800169c <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 80016a2:	f7ff ffb7 	bl	8001614 <BMP180_GetRawTemperature>
 80016a6:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7fe ff0f 	bl	80004cc <__aeabi_i2d>
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <BMP180_GetTemperature+0x34>)
 80016b4:	f7ff f89e 	bl	80007f4 <__aeabi_ddiv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	4618      	mov	r0, r3
 80016be:	4621      	mov	r1, r4
 80016c0:	f7ff fa46 	bl	8000b50 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40240000 	.word	0x40240000

080016d4 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80016da:	232e      	movs	r3, #46	; 0x2e
 80016dc:	4619      	mov	r1, r3
 80016de:	20f4      	movs	r0, #244	; 0xf4
 80016e0:	f7ff ff38 	bl	8001554 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 80016e4:	2305      	movs	r3, #5
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 f974 	bl	80039d4 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 80016ec:	f000 f904 	bl	80018f8 <BMP180_GetUT>
 80016f0:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 80016f2:	4b7c      	ldr	r3, [pc, #496]	; (80018e4 <BMP180_GetPressure+0x210>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b7b      	ldr	r3, [pc, #492]	; (80018e8 <BMP180_GetPressure+0x214>)
 80016fa:	5c9b      	ldrb	r3, [r3, r2]
 80016fc:	4619      	mov	r1, r3
 80016fe:	20f4      	movs	r0, #244	; 0xf4
 8001700:	f7ff ff28 	bl	8001554 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001704:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <BMP180_GetPressure+0x210>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b78      	ldr	r3, [pc, #480]	; (80018ec <BMP180_GetPressure+0x218>)
 800170c:	5c9b      	ldrb	r3, [r3, r2]
 800170e:	4618      	mov	r0, r3
 8001710:	f002 f960 	bl	80039d4 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001714:	f000 f900 	bl	8001918 <BMP180_GetUP>
 8001718:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800171a:	4b75      	ldr	r3, [pc, #468]	; (80018f0 <BMP180_GetPressure+0x21c>)
 800171c:	895b      	ldrh	r3, [r3, #10]
 800171e:	461a      	mov	r2, r3
 8001720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001722:	1a9b      	subs	r3, r3, r2
 8001724:	4a72      	ldr	r2, [pc, #456]	; (80018f0 <BMP180_GetPressure+0x21c>)
 8001726:	8912      	ldrh	r2, [r2, #8]
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	da02      	bge.n	8001736 <BMP180_GetPressure+0x62>
 8001730:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001734:	337f      	adds	r3, #127	; 0x7f
 8001736:	13db      	asrs	r3, r3, #15
 8001738:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800173a:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <BMP180_GetPressure+0x21c>)
 800173c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001740:	02da      	lsls	r2, r3, #11
 8001742:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <BMP180_GetPressure+0x21c>)
 8001744:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001748:	4619      	mov	r1, r3
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	440b      	add	r3, r1
 800174e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001752:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8001754:	6a3a      	ldr	r2, [r7, #32]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001762:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001764:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <BMP180_GetPressure+0x21c>)
 8001766:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800176a:	4619      	mov	r1, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	da01      	bge.n	800177c <BMP180_GetPressure+0xa8>
 8001778:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800177c:	131b      	asrs	r3, r3, #12
 800177e:	fb03 f301 	mul.w	r3, r3, r1
 8001782:	2b00      	cmp	r3, #0
 8001784:	da01      	bge.n	800178a <BMP180_GetPressure+0xb6>
 8001786:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800178a:	12db      	asrs	r3, r3, #11
 800178c:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 800178e:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <BMP180_GetPressure+0x21c>)
 8001790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001794:	461a      	mov	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fb03 f302 	mul.w	r3, r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	da01      	bge.n	80017a4 <BMP180_GetPressure+0xd0>
 80017a0:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80017a4:	12db      	asrs	r3, r3, #11
 80017a6:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80017a8:	6a3a      	ldr	r2, [r7, #32]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80017b0:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <BMP180_GetPressure+0x21c>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	009a      	lsls	r2, r3, #2
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a49      	ldr	r2, [pc, #292]	; (80018e4 <BMP180_GetPressure+0x210>)
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	4093      	lsls	r3, r2
 80017c2:	3302      	adds	r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	da00      	bge.n	80017ca <BMP180_GetPressure+0xf6>
 80017c8:	3303      	adds	r3, #3
 80017ca:	109b      	asrs	r3, r3, #2
 80017cc:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 80017ce:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <BMP180_GetPressure+0x21c>)
 80017d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017d4:	461a      	mov	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fb03 f302 	mul.w	r3, r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da02      	bge.n	80017e6 <BMP180_GetPressure+0x112>
 80017e0:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80017e4:	331f      	adds	r3, #31
 80017e6:	135b      	asrs	r3, r3, #13
 80017e8:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 80017ea:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <BMP180_GetPressure+0x21c>)
 80017ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017f0:	4619      	mov	r1, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da01      	bge.n	8001802 <BMP180_GetPressure+0x12e>
 80017fe:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001802:	131b      	asrs	r3, r3, #12
 8001804:	fb03 f301 	mul.w	r3, r3, r1
 8001808:	2b00      	cmp	r3, #0
 800180a:	da02      	bge.n	8001812 <BMP180_GetPressure+0x13e>
 800180c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001810:	33ff      	adds	r3, #255	; 0xff
 8001812:	141b      	asrs	r3, r3, #16
 8001814:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001816:	6a3a      	ldr	r2, [r7, #32]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	4413      	add	r3, r2
 800181c:	3302      	adds	r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	da00      	bge.n	8001824 <BMP180_GetPressure+0x150>
 8001822:	3303      	adds	r3, #3
 8001824:	109b      	asrs	r3, r3, #2
 8001826:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001828:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <BMP180_GetPressure+0x21c>)
 800182a:	88db      	ldrh	r3, [r3, #6]
 800182c:	461a      	mov	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001834:	fb03 f302 	mul.w	r3, r3, r2
 8001838:	0bdb      	lsrs	r3, r3, #15
 800183a:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 800183c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <BMP180_GetPressure+0x210>)
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	4611      	mov	r1, r2
 8001848:	f24c 3250 	movw	r2, #50000	; 0xc350
 800184c:	410a      	asrs	r2, r1
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db06      	blt.n	8001868 <BMP180_GetPressure+0x194>
		p = (b7 * 2) / b4;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	005a      	lsls	r2, r3, #1
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001866:	e005      	b.n	8001874 <BMP180_GetPressure+0x1a0>
	else
		p = (b7 / b4) * 2;
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8001874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001876:	2b00      	cmp	r3, #0
 8001878:	da00      	bge.n	800187c <BMP180_GetPressure+0x1a8>
 800187a:	33ff      	adds	r3, #255	; 0xff
 800187c:	121b      	asrs	r3, r3, #8
 800187e:	461a      	mov	r2, r3
 8001880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001882:	2b00      	cmp	r3, #0
 8001884:	da00      	bge.n	8001888 <BMP180_GetPressure+0x1b4>
 8001886:	33ff      	adds	r3, #255	; 0xff
 8001888:	121b      	asrs	r3, r3, #8
 800188a:	fb03 f302 	mul.w	r3, r3, r2
 800188e:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f640 32de 	movw	r2, #3038	; 0xbde
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	da02      	bge.n	80018a4 <BMP180_GetPressure+0x1d0>
 800189e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018a2:	33ff      	adds	r3, #255	; 0xff
 80018a4:	141b      	asrs	r3, r3, #16
 80018a6:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <BMP180_GetPressure+0x220>)
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da02      	bge.n	80018ba <BMP180_GetPressure+0x1e6>
 80018b4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018b8:	33ff      	adds	r3, #255	; 0xff
 80018ba:	141b      	asrs	r3, r3, #16
 80018bc:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80018be:	6a3a      	ldr	r2, [r7, #32]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4413      	add	r3, r2
 80018c4:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da00      	bge.n	80018ce <BMP180_GetPressure+0x1fa>
 80018cc:	330f      	adds	r3, #15
 80018ce:	111b      	asrs	r3, r3, #4
 80018d0:	461a      	mov	r2, r3
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d4:	4413      	add	r3, r2
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 80018d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3730      	adds	r7, #48	; 0x30
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200000ca 	.word	0x200000ca
 80018e8:	0800a4c0 	.word	0x0800a4c0
 80018ec:	0800a4c4 	.word	0x0800a4c4
 80018f0:	200000b4 	.word	0x200000b4
 80018f4:	ffffe343 	.word	0xffffe343

080018f8 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	uint8_t result[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result);
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	20f6      	movs	r0, #246	; 0xf6
 8001904:	f7ff fe66 	bl	80015d4 <BMP180_ReadReg>
	return (result[0] << 8) | result[1];
 8001908:	793b      	ldrb	r3, [r7, #4]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	797a      	ldrb	r2, [r7, #5]
 800190e:	4313      	orrs	r3, r2
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
	uint8_t result1[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result1);
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4619      	mov	r1, r3
 8001922:	20f6      	movs	r0, #246	; 0xf6
 8001924:	f7ff fe56 	bl	80015d4 <BMP180_ReadReg>
	return ((result1[0] << 16) | (result1[1] << 8) | BMP180_ReadReg8(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001928:	793b      	ldrb	r3, [r7, #4]
 800192a:	041a      	lsls	r2, r3, #16
 800192c:	797b      	ldrb	r3, [r7, #5]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	ea42 0403 	orr.w	r4, r2, r3
 8001934:	20f8      	movs	r0, #248	; 0xf8
 8001936:	f7ff fe2b 	bl	8001590 <BMP180_ReadReg8>
 800193a:	4603      	mov	r3, r0
 800193c:	ea44 0203 	orr.w	r2, r4, r3
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <BMP180_GetUP+0x3c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f1c3 0308 	rsb	r3, r3, #8
 8001948:	fa42 f303 	asr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	200000ca 	.word	0x200000ca

08001958 <HCSR05_Init>:

/**
 * @brief Initialization sensor requirments.
 */
void HCSR05_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	// Init delay function
	DWT_Init();
 800195c:	f001 fa10 	bl	8002d80 <DWT_Init>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	0000      	movs	r0, r0
	...

08001968 <HCSR05_Calculate_SoundSpeed>:
 * @brief Calculate sound speed based on Owen Cramer's method.
 * @param T Temperature (Celsius).
 * @param P Air pressure (Pa).
 * @param H Relative humidity (%).
 */
void HCSR05_Calculate_SoundSpeed(int8_t T, uint32_t P, int8_t H){
 8001968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800196c:	b098      	sub	sp, #96	; 0x60
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	6039      	str	r1, [r7, #0]
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	4613      	mov	r3, r2
 8001978:	71bb      	strb	r3, [r7, #6]
	double_t Xc, Xw, V1, V2, V3, f, PSV, PSV1, PSV2, T_kel, T_sqr;

	// Variables description is in the report
	Xc = 400 * 1e-6;
 800197a:	a4d7      	add	r4, pc, #860	; (adr r4, 8001cd8 <HCSR05_Calculate_SoundSpeed+0x370>)
 800197c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001980:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	T_kel = 273.15 + T;
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fd9f 	bl	80004cc <__aeabi_i2d>
 800198e:	a3d4      	add	r3, pc, #848	; (adr r3, 8001ce0 <HCSR05_Calculate_SoundSpeed+0x378>)
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fc4e 	bl	8000234 <__adddf3>
 8001998:	4603      	mov	r3, r0
 800199a:	460c      	mov	r4, r1
 800199c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	T_sqr = pow(T, 2);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fd91 	bl	80004cc <__aeabi_i2d>
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b2:	f007 f847 	bl	8008a44 <pow>
 80019b6:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
	f = 1.00062 + 3.141593 * 1e-8 * P + T_sqr * 5.6 * 1e-7;
 80019ba:	6838      	ldr	r0, [r7, #0]
 80019bc:	f7fe fd76 	bl	80004ac <__aeabi_ui2d>
 80019c0:	a3c9      	add	r3, pc, #804	; (adr r3, 8001ce8 <HCSR05_Calculate_SoundSpeed+0x380>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe fdeb 	bl	80005a0 <__aeabi_dmul>
 80019ca:	4603      	mov	r3, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	4618      	mov	r0, r3
 80019d0:	4621      	mov	r1, r4
 80019d2:	a3c7      	add	r3, pc, #796	; (adr r3, 8001cf0 <HCSR05_Calculate_SoundSpeed+0x388>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fc2c 	bl	8000234 <__adddf3>
 80019dc:	4603      	mov	r3, r0
 80019de:	460c      	mov	r4, r1
 80019e0:	4625      	mov	r5, r4
 80019e2:	461c      	mov	r4, r3
 80019e4:	a3c4      	add	r3, pc, #784	; (adr r3, 8001cf8 <HCSR05_Calculate_SoundSpeed+0x390>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019ee:	f7fe fdd7 	bl	80005a0 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	a3c1      	add	r3, pc, #772	; (adr r3, 8001d00 <HCSR05_Calculate_SoundSpeed+0x398>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fdce 	bl	80005a0 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fc12 	bl	8000234 <__adddf3>
 8001a10:	4603      	mov	r3, r0
 8001a12:	460c      	mov	r4, r1
 8001a14:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	PSV1 = pow(T_kel, 2) * 1.2378847 * 1e-8 - 1.9121316 * 1e-2 * T_kel;
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a20:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a24:	f007 f80e 	bl	8008a44 <pow>
 8001a28:	a3b7      	add	r3, pc, #732	; (adr r3, 8001d08 <HCSR05_Calculate_SoundSpeed+0x3a0>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fdb7 	bl	80005a0 <__aeabi_dmul>
 8001a32:	4603      	mov	r3, r0
 8001a34:	460c      	mov	r4, r1
 8001a36:	4618      	mov	r0, r3
 8001a38:	4621      	mov	r1, r4
 8001a3a:	a3b5      	add	r3, pc, #724	; (adr r3, 8001d10 <HCSR05_Calculate_SoundSpeed+0x3a8>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fdae 	bl	80005a0 <__aeabi_dmul>
 8001a44:	4603      	mov	r3, r0
 8001a46:	460c      	mov	r4, r1
 8001a48:	4625      	mov	r5, r4
 8001a4a:	461c      	mov	r4, r3
 8001a4c:	a3b2      	add	r3, pc, #712	; (adr r3, 8001d18 <HCSR05_Calculate_SoundSpeed+0x3b0>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a56:	f7fe fda3 	bl	80005a0 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4620      	mov	r0, r4
 8001a60:	4629      	mov	r1, r5
 8001a62:	f7fe fbe5 	bl	8000230 <__aeabi_dsub>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	PSV2 = 33.93711047 - 6.3431645 * 1e3 / T_kel;
 8001a6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001a72:	a1ab      	add	r1, pc, #684	; (adr r1, 8001d20 <HCSR05_Calculate_SoundSpeed+0x3b8>)
 8001a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a78:	f7fe febc 	bl	80007f4 <__aeabi_ddiv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	460c      	mov	r4, r1
 8001a80:	461a      	mov	r2, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	a1a8      	add	r1, pc, #672	; (adr r1, 8001d28 <HCSR05_Calculate_SoundSpeed+0x3c0>)
 8001a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a8a:	f7fe fbd1 	bl	8000230 <__aeabi_dsub>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460c      	mov	r4, r1
 8001a92:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	PSV = exp(PSV1 + PSV2);
 8001a96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a9a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a9e:	f7fe fbc9 	bl	8000234 <__adddf3>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460c      	mov	r4, r1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	f006 fefd 	bl	80088a8 <exp>
 8001aae:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	Xw = (H / 100) * f * PSV / P;
 8001ab2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ab6:	4abc      	ldr	r2, [pc, #752]	; (8001da8 <HCSR05_Calculate_SoundSpeed+0x440>)
 8001ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8001abc:	1152      	asrs	r2, r2, #5
 8001abe:	17db      	asrs	r3, r3, #31
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fd01 	bl	80004cc <__aeabi_i2d>
 8001aca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ace:	f7fe fd67 	bl	80005a0 <__aeabi_dmul>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4621      	mov	r1, r4
 8001ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ade:	f7fe fd5f 	bl	80005a0 <__aeabi_dmul>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	4625      	mov	r5, r4
 8001ae8:	461c      	mov	r4, r3
 8001aea:	6838      	ldr	r0, [r7, #0]
 8001aec:	f7fe fcde 	bl	80004ac <__aeabi_ui2d>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4620      	mov	r0, r4
 8001af6:	4629      	mov	r1, r5
 8001af8:	f7fe fe7c 	bl	80007f4 <__aeabi_ddiv>
 8001afc:	4603      	mov	r3, r0
 8001afe:	460c      	mov	r4, r1
 8001b00:	e9c7 3408 	strd	r3, r4, [r7, #32]
	V1 = 0.603055 * T + 331.5024 - T_sqr * 5.28 * 1e-4 + (0.1495874 * T + 51.471935 -T_sqr * 7.82 * 1e-4) * Xw;
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fcdf 	bl	80004cc <__aeabi_i2d>
 8001b0e:	a388      	add	r3, pc, #544	; (adr r3, 8001d30 <HCSR05_Calculate_SoundSpeed+0x3c8>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd44 	bl	80005a0 <__aeabi_dmul>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	460c      	mov	r4, r1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	4621      	mov	r1, r4
 8001b20:	a385      	add	r3, pc, #532	; (adr r3, 8001d38 <HCSR05_Calculate_SoundSpeed+0x3d0>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fb85 	bl	8000234 <__adddf3>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	4625      	mov	r5, r4
 8001b30:	461c      	mov	r4, r3
 8001b32:	a383      	add	r3, pc, #524	; (adr r3, 8001d40 <HCSR05_Calculate_SoundSpeed+0x3d8>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b3c:	f7fe fd30 	bl	80005a0 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	a37f      	add	r3, pc, #508	; (adr r3, 8001d48 <HCSR05_Calculate_SoundSpeed+0x3e0>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f7fe fd27 	bl	80005a0 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	f7fe fb69 	bl	8000230 <__aeabi_dsub>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460c      	mov	r4, r1
 8001b62:	4625      	mov	r5, r4
 8001b64:	461c      	mov	r4, r3
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcae 	bl	80004cc <__aeabi_i2d>
 8001b70:	a377      	add	r3, pc, #476	; (adr r3, 8001d50 <HCSR05_Calculate_SoundSpeed+0x3e8>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe fd13 	bl	80005a0 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	a375      	add	r3, pc, #468	; (adr r3, 8001d58 <HCSR05_Calculate_SoundSpeed+0x3f0>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fb54 	bl	8000234 <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4690      	mov	r8, r2
 8001b92:	4699      	mov	r9, r3
 8001b94:	a372      	add	r3, pc, #456	; (adr r3, 8001d60 <HCSR05_Calculate_SoundSpeed+0x3f8>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b9e:	f7fe fcff 	bl	80005a0 <__aeabi_dmul>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	a367      	add	r3, pc, #412	; (adr r3, 8001d48 <HCSR05_Calculate_SoundSpeed+0x3e0>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fcf6 	bl	80005a0 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4640      	mov	r0, r8
 8001bba:	4649      	mov	r1, r9
 8001bbc:	f7fe fb38 	bl	8000230 <__aeabi_dsub>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bcc:	f7fe fce8 	bl	80005a0 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fb2c 	bl	8000234 <__adddf3>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	460c      	mov	r4, r1
 8001be0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	V2 = (-1.82 * 1e-7 + 3.73 * 1e-8 * T - T_sqr * 2.93 * 1e-10) * P + (-85.20931 - 0.228525 * T + T_sqr * 5.91 * 1e-5) * Xc;
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fc6f 	bl	80004cc <__aeabi_i2d>
 8001bee:	a35e      	add	r3, pc, #376	; (adr r3, 8001d68 <HCSR05_Calculate_SoundSpeed+0x400>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fcd4 	bl	80005a0 <__aeabi_dmul>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	4621      	mov	r1, r4
 8001c00:	a35b      	add	r3, pc, #364	; (adr r3, 8001d70 <HCSR05_Calculate_SoundSpeed+0x408>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fb13 	bl	8000230 <__aeabi_dsub>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460c      	mov	r4, r1
 8001c0e:	4625      	mov	r5, r4
 8001c10:	461c      	mov	r4, r3
 8001c12:	a359      	add	r3, pc, #356	; (adr r3, 8001d78 <HCSR05_Calculate_SoundSpeed+0x410>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c1c:	f7fe fcc0 	bl	80005a0 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	a355      	add	r3, pc, #340	; (adr r3, 8001d80 <HCSR05_Calculate_SoundSpeed+0x418>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fcb7 	bl	80005a0 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe faf9 	bl	8000230 <__aeabi_dsub>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460c      	mov	r4, r1
 8001c42:	4625      	mov	r5, r4
 8001c44:	461c      	mov	r4, r3
 8001c46:	6838      	ldr	r0, [r7, #0]
 8001c48:	f7fe fc30 	bl	80004ac <__aeabi_ui2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4620      	mov	r0, r4
 8001c52:	4629      	mov	r1, r5
 8001c54:	f7fe fca4 	bl	80005a0 <__aeabi_dmul>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	4625      	mov	r5, r4
 8001c5e:	461c      	mov	r4, r3
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc31 	bl	80004cc <__aeabi_i2d>
 8001c6a:	a347      	add	r3, pc, #284	; (adr r3, 8001d88 <HCSR05_Calculate_SoundSpeed+0x420>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fc96 	bl	80005a0 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	a145      	add	r1, pc, #276	; (adr r1, 8001d90 <HCSR05_Calculate_SoundSpeed+0x428>)
 8001c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c7e:	f7fe fad7 	bl	8000230 <__aeabi_dsub>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4690      	mov	r8, r2
 8001c88:	4699      	mov	r9, r3
 8001c8a:	a343      	add	r3, pc, #268	; (adr r3, 8001d98 <HCSR05_Calculate_SoundSpeed+0x430>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c94:	f7fe fc84 	bl	80005a0 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	a33f      	add	r3, pc, #252	; (adr r3, 8001da0 <HCSR05_Calculate_SoundSpeed+0x438>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	f7fe fc7b 	bl	80005a0 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4640      	mov	r0, r8
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	f7fe fabf 	bl	8000234 <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cc2:	f7fe fc6d 	bl	80005a0 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f7fe fab1 	bl	8000234 <__adddf3>
 8001cd2:	e06b      	b.n	8001dac <HCSR05_Calculate_SoundSpeed+0x444>
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	eb1c432c 	.word	0xeb1c432c
 8001cdc:	3f3a36e2 	.word	0x3f3a36e2
 8001ce0:	66666666 	.word	0x66666666
 8001ce4:	40711266 	.word	0x40711266
 8001ce8:	c548725f 	.word	0xc548725f
 8001cec:	3e60ddc5 	.word	0x3e60ddc5
 8001cf0:	1dfb938a 	.word	0x1dfb938a
 8001cf4:	3ff0028a 	.word	0x3ff0028a
 8001cf8:	66666666 	.word	0x66666666
 8001cfc:	40166666 	.word	0x40166666
 8001d00:	9abcaf48 	.word	0x9abcaf48
 8001d04:	3e7ad7f2 	.word	0x3e7ad7f2
 8001d08:	2feb8016 	.word	0x2feb8016
 8001d0c:	3ff3ce60 	.word	0x3ff3ce60
 8001d10:	e2308c3a 	.word	0xe2308c3a
 8001d14:	3e45798e 	.word	0x3e45798e
 8001d18:	cb818460 	.word	0xcb818460
 8001d1c:	3f939489 	.word	0x3f939489
 8001d20:	1cac0832 	.word	0x1cac0832
 8001d24:	40b8c72a 	.word	0x40b8c72a
 8001d28:	3c62b1d1 	.word	0x3c62b1d1
 8001d2c:	4040f7f3 	.word	0x4040f7f3
 8001d30:	ffd60e95 	.word	0xffd60e95
 8001d34:	3fe34c39 	.word	0x3fe34c39
 8001d38:	d495182b 	.word	0xd495182b
 8001d3c:	4074b809 	.word	0x4074b809
 8001d40:	51eb851f 	.word	0x51eb851f
 8001d44:	40151eb8 	.word	0x40151eb8
 8001d48:	eb1c432d 	.word	0xeb1c432d
 8001d4c:	3f1a36e2 	.word	0x3f1a36e2
 8001d50:	0f7263cb 	.word	0x0f7263cb
 8001d54:	3fc325ae 	.word	0x3fc325ae
 8001d58:	5db76b3c 	.word	0x5db76b3c
 8001d5c:	4049bc68 	.word	0x4049bc68
 8001d60:	147ae148 	.word	0x147ae148
 8001d64:	401f47ae 	.word	0x401f47ae
 8001d68:	1433abb9 	.word	0x1433abb9
 8001d6c:	3e640679 	.word	0x3e640679
 8001d70:	ee17391b 	.word	0xee17391b
 8001d74:	3e886d78 	.word	0x3e886d78
 8001d78:	d70a3d71 	.word	0xd70a3d71
 8001d7c:	400770a3 	.word	0x400770a3
 8001d80:	d9d7bdbb 	.word	0xd9d7bdbb
 8001d84:	3ddb7cdf 	.word	0x3ddb7cdf
 8001d88:	a4a8c155 	.word	0xa4a8c155
 8001d8c:	3fcd404e 	.word	0x3fcd404e
 8001d90:	55c52e73 	.word	0x55c52e73
 8001d94:	c0554d65 	.word	0xc0554d65
 8001d98:	0a3d70a4 	.word	0x0a3d70a4
 8001d9c:	4017a3d7 	.word	0x4017a3d7
 8001da0:	88e368f1 	.word	0x88e368f1
 8001da4:	3ee4f8b5 	.word	0x3ee4f8b5
 8001da8:	51eb851f 	.word	0x51eb851f
 8001dac:	4603      	mov	r3, r0
 8001dae:	460c      	mov	r4, r1
 8001db0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	V3 = pow(Xw, 2) * 2.835149 - pow(P, 2) * 2.15 * 1e-13 + pow(Xc, 2) * 29.179762 + 4.86 * 1e-4 * Xw * P * Xc;
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dc0:	f006 fe40 	bl	8008a44 <pow>
 8001dc4:	a342      	add	r3, pc, #264	; (adr r3, 8001ed0 <HCSR05_Calculate_SoundSpeed+0x568>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fbe9 	bl	80005a0 <__aeabi_dmul>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	4625      	mov	r5, r4
 8001dd4:	461c      	mov	r4, r3
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f7fe fb68 	bl	80004ac <__aeabi_ui2d>
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de4:	f006 fe2e 	bl	8008a44 <pow>
 8001de8:	a33b      	add	r3, pc, #236	; (adr r3, 8001ed8 <HCSR05_Calculate_SoundSpeed+0x570>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fbd7 	bl	80005a0 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	a339      	add	r3, pc, #228	; (adr r3, 8001ee0 <HCSR05_Calculate_SoundSpeed+0x578>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fbce 	bl	80005a0 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4620      	mov	r0, r4
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	f7fe fa10 	bl	8000230 <__aeabi_dsub>
 8001e10:	4603      	mov	r3, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	4625      	mov	r5, r4
 8001e16:	461c      	mov	r4, r3
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e20:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e24:	f006 fe0e 	bl	8008a44 <pow>
 8001e28:	a32f      	add	r3, pc, #188	; (adr r3, 8001ee8 <HCSR05_Calculate_SoundSpeed+0x580>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fbb7 	bl	80005a0 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4620      	mov	r0, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7fe f9fb 	bl	8000234 <__adddf3>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460c      	mov	r4, r1
 8001e42:	4625      	mov	r5, r4
 8001e44:	461c      	mov	r4, r3
 8001e46:	a32a      	add	r3, pc, #168	; (adr r3, 8001ef0 <HCSR05_Calculate_SoundSpeed+0x588>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e50:	f7fe fba6 	bl	80005a0 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4690      	mov	r8, r2
 8001e5a:	4699      	mov	r9, r3
 8001e5c:	6838      	ldr	r0, [r7, #0]
 8001e5e:	f7fe fb25 	bl	80004ac <__aeabi_ui2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4640      	mov	r0, r8
 8001e68:	4649      	mov	r1, r9
 8001e6a:	f7fe fb99 	bl	80005a0 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e7a:	f7fe fb91 	bl	80005a0 <__aeabi_dmul>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4620      	mov	r0, r4
 8001e84:	4629      	mov	r1, r5
 8001e86:	f7fe f9d5 	bl	8000234 <__adddf3>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460c      	mov	r4, r1
 8001e8e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	HCSR05_SoundSpeed =  V1 + V2 - V3;
 8001e92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e9a:	f7fe f9cb 	bl	8000234 <__adddf3>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eaa:	f7fe f9c1 	bl	8000230 <__aeabi_dsub>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460c      	mov	r4, r1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	f7fe fe4b 	bl	8000b50 <__aeabi_d2f>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HCSR05_Calculate_SoundSpeed+0x590>)
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	3760      	adds	r7, #96	; 0x60
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w
 8001ed0:	99524bfd 	.word	0x99524bfd
 8001ed4:	4006ae62 	.word	0x4006ae62
 8001ed8:	33333333 	.word	0x33333333
 8001edc:	40013333 	.word	0x40013333
 8001ee0:	68497682 	.word	0x68497682
 8001ee4:	3d3c25c2 	.word	0x3d3c25c2
 8001ee8:	e1e71045 	.word	0xe1e71045
 8001eec:	403d2e04 	.word	0x403d2e04
 8001ef0:	1b1960fb 	.word	0x1b1960fb
 8001ef4:	3f3fd9ba 	.word	0x3f3fd9ba
 8001ef8:	200000e4 	.word	0x200000e4

08001efc <HCSR05_Calculate_TOF>:

/**
 * @brief Calculate sound time of flight.
 */
void HCSR05_Calculate_TOF(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
	// Send 10 microsecond pulse on trigger pin
	HAL_GPIO_WritePin(HCSR05_Trigger_Port, HCSR05_Trigger_Pin, GPIO_PIN_SET);
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HCSR05_Calculate_TOF+0x7c>)
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HCSR05_Calculate_TOF+0x80>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f002 f81e 	bl	8003f4e <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8001f12:	200a      	movs	r0, #10
 8001f14:	f000 ff54 	bl	8002dc0 <DWT_Delay>
	HAL_GPIO_WritePin(HCSR05_Trigger_Port, HCSR05_Trigger_Pin, GPIO_PIN_RESET);
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HCSR05_Calculate_TOF+0x7c>)
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HCSR05_Calculate_TOF+0x80>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	4619      	mov	r1, r3
 8001f24:	f002 f813 	bl	8003f4e <HAL_GPIO_WritePin>

	// Start timer
	HAL_TIM_IC_Start_IT(HCSR05_Htim, HCSR05_Channel);
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HCSR05_Calculate_TOF+0x84>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HCSR05_Calculate_TOF+0x88>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f005 fe58 	bl	8007be8 <HAL_TIM_IC_Start_IT>

	// Wait for Echo pulse
	uint32_t startTick = HAL_GetTick();
 8001f38:	f001 fd42 	bl	80039c0 <HAL_GetTick>
 8001f3c:	6078      	str	r0, [r7, #4]
	do{
		if(HCSR05_Captured) break;
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HCSR05_Calculate_TOF+0x8c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d108      	bne.n	8001f58 <HCSR05_Calculate_TOF+0x5c>
	}while((HAL_GetTick() - startTick) < 500);
 8001f46:	f001 fd3b 	bl	80039c0 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f54:	d3f3      	bcc.n	8001f3e <HCSR05_Calculate_TOF+0x42>
 8001f56:	e000      	b.n	8001f5a <HCSR05_Calculate_TOF+0x5e>
		if(HCSR05_Captured) break;
 8001f58:	bf00      	nop

	// Reset state
	HCSR05_Captured = 0;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HCSR05_Calculate_TOF+0x8c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(HCSR05_Htim, HCSR05_Channel);
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HCSR05_Calculate_TOF+0x84>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HCSR05_Calculate_TOF+0x88>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f005 fea4 	bl	8007cb8 <HAL_TIM_IC_Stop_IT>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200000d8 	.word	0x200000d8
 8001f7c:	200000dc 	.word	0x200000dc
 8001f80:	200000f8 	.word	0x200000f8
 8001f84:	200000e8 	.word	0x200000e8
 8001f88:	200000d5 	.word	0x200000d5

08001f8c <HCSR05_TIM_Callback>:
/**
 * @brief must put in HAL_TIM_IC_CaptureCallback.
 */
void HCSR05_TIM_Callback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	// If the interrupt source is on our channel
	if (htim->Channel == HCSR05_Channel) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7f1b      	ldrb	r3, [r3, #28]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b82      	ldr	r3, [pc, #520]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	f040 80fb 	bne.w	800219a <HCSR05_TIM_Callback+0x20e>
		// If the first val is not captured
		if (HCSR05_Is_First_Val_Captured==0) {
 8001fa4:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <HCSR05_TIM_Callback+0x21c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d16a      	bne.n	8002082 <HCSR05_TIM_Callback+0xf6>
			// Get first value
			HCSR05_IC_First_Val = HAL_TIM_ReadCapturedValue(htim, HCSR05_Channel);
 8001fac:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f006 f94c 	bl	8008250 <HAL_TIM_ReadCapturedValue>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <HCSR05_TIM_Callback+0x220>)
 8001fbc:	601a      	str	r2, [r3, #0]
			// Set first val captured as true
			HCSR05_Is_First_Val_Captured = 1;
 8001fbe:	4b7a      	ldr	r3, [pc, #488]	; (80021a8 <HCSR05_TIM_Callback+0x21c>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
			// change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001fc4:	4b77      	ldr	r3, [pc, #476]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d108      	bne.n	8001fde <HCSR05_TIM_Callback+0x52>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6a1a      	ldr	r2, [r3, #32]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 020a 	bic.w	r2, r2, #10
 8001fda:	621a      	str	r2, [r3, #32]
 8001fdc:	e021      	b.n	8002022 <HCSR05_TIM_Callback+0x96>
 8001fde:	4b71      	ldr	r3, [pc, #452]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d108      	bne.n	8001ff8 <HCSR05_TIM_Callback+0x6c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a1a      	ldr	r2, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ff4:	621a      	str	r2, [r3, #32]
 8001ff6:	e014      	b.n	8002022 <HCSR05_TIM_Callback+0x96>
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d108      	bne.n	8002012 <HCSR05_TIM_Callback+0x86>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800200e:	621a      	str	r2, [r3, #32]
 8002010:	e007      	b.n	8002022 <HCSR05_TIM_Callback+0x96>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002020:	621a      	str	r2, [r3, #32]
 8002022:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d108      	bne.n	800203c <HCSR05_TIM_Callback+0xb0>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0202 	orr.w	r2, r2, #2
 8002038:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_COUNTER(htim, 0);
			// Set polarity to rising edge for next use
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 800203a:	e0ae      	b.n	800219a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d108      	bne.n	8002056 <HCSR05_TIM_Callback+0xca>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6a1a      	ldr	r2, [r3, #32]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0220 	orr.w	r2, r2, #32
 8002052:	621a      	str	r2, [r3, #32]
}
 8002054:	e0a1      	b.n	800219a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b08      	cmp	r3, #8
 800205c:	d108      	bne.n	8002070 <HCSR05_TIM_Callback+0xe4>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206c:	621a      	str	r2, [r3, #32]
}
 800206e:	e094      	b.n	800219a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800207e:	621a      	str	r2, [r3, #32]
}
 8002080:	e08b      	b.n	800219a <HCSR05_TIM_Callback+0x20e>
		} else if (HCSR05_Is_First_Val_Captured==1) { // If first val is already captured
 8002082:	4b49      	ldr	r3, [pc, #292]	; (80021a8 <HCSR05_TIM_Callback+0x21c>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	f040 8087 	bne.w	800219a <HCSR05_TIM_Callback+0x20e>
			HCSR05_IC_Second_Val = HAL_TIM_ReadCapturedValue(htim, HCSR05_Channel);
 800208c:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f006 f8dc 	bl	8008250 <HAL_TIM_ReadCapturedValue>
 8002098:	4602      	mov	r2, r0
 800209a:	4b45      	ldr	r3, [pc, #276]	; (80021b0 <HCSR05_TIM_Callback+0x224>)
 800209c:	601a      	str	r2, [r3, #0]
			if (HCSR05_IC_Second_Val > HCSR05_IC_First_Val) {
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <HCSR05_TIM_Callback+0x224>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b42      	ldr	r3, [pc, #264]	; (80021ac <HCSR05_TIM_Callback+0x220>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d907      	bls.n	80020ba <HCSR05_TIM_Callback+0x12e>
				HCSR05_TOF = HCSR05_IC_Second_Val-HCSR05_IC_First_Val;
 80020aa:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HCSR05_TIM_Callback+0x224>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HCSR05_TIM_Callback+0x220>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	4a3f      	ldr	r2, [pc, #252]	; (80021b4 <HCSR05_TIM_Callback+0x228>)
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e00f      	b.n	80020da <HCSR05_TIM_Callback+0x14e>
			} else if (HCSR05_IC_First_Val > HCSR05_IC_Second_Val) {
 80020ba:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <HCSR05_TIM_Callback+0x220>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b3c      	ldr	r3, [pc, #240]	; (80021b0 <HCSR05_TIM_Callback+0x224>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d909      	bls.n	80020da <HCSR05_TIM_Callback+0x14e>
				HCSR05_TOF = (0xffff - HCSR05_IC_First_Val) + HCSR05_IC_Second_Val;
 80020c6:	4b3a      	ldr	r3, [pc, #232]	; (80021b0 <HCSR05_TIM_Callback+0x224>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HCSR05_TIM_Callback+0x220>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80020d4:	33ff      	adds	r3, #255	; 0xff
 80020d6:	4a37      	ldr	r2, [pc, #220]	; (80021b4 <HCSR05_TIM_Callback+0x228>)
 80020d8:	6013      	str	r3, [r2, #0]
			HCSR05_Captured = 1;
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <HCSR05_TIM_Callback+0x22c>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
			HCSR05_Is_First_Val_Captured = 0;
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HCSR05_TIM_Callback+0x21c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80020ee:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d108      	bne.n	8002108 <HCSR05_TIM_Callback+0x17c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 020a 	bic.w	r2, r2, #10
 8002104:	621a      	str	r2, [r3, #32]
 8002106:	e021      	b.n	800214c <HCSR05_TIM_Callback+0x1c0>
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d108      	bne.n	8002122 <HCSR05_TIM_Callback+0x196>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6a1a      	ldr	r2, [r3, #32]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800211e:	621a      	str	r2, [r3, #32]
 8002120:	e014      	b.n	800214c <HCSR05_TIM_Callback+0x1c0>
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b08      	cmp	r3, #8
 8002128:	d108      	bne.n	800213c <HCSR05_TIM_Callback+0x1b0>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002138:	621a      	str	r2, [r3, #32]
 800213a:	e007      	b.n	800214c <HCSR05_TIM_Callback+0x1c0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a1a      	ldr	r2, [r3, #32]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800214a:	621a      	str	r2, [r3, #32]
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d106      	bne.n	8002162 <HCSR05_TIM_Callback+0x1d6>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6a12      	ldr	r2, [r2, #32]
 800215e:	621a      	str	r2, [r3, #32]
}
 8002160:	e01b      	b.n	800219a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d106      	bne.n	8002178 <HCSR05_TIM_Callback+0x1ec>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a12      	ldr	r2, [r2, #32]
 8002174:	621a      	str	r2, [r3, #32]
}
 8002176:	e010      	b.n	800219a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HCSR05_TIM_Callback+0x218>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d106      	bne.n	800218e <HCSR05_TIM_Callback+0x202>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a12      	ldr	r2, [r2, #32]
 800218a:	621a      	str	r2, [r3, #32]
}
 800218c:	e005      	b.n	800219a <HCSR05_TIM_Callback+0x20e>
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR05_Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a12      	ldr	r2, [r2, #32]
 8002198:	621a      	str	r2, [r3, #32]
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200000e8 	.word	0x200000e8
 80021a8:	200000ec 	.word	0x200000ec
 80021ac:	200000d0 	.word	0x200000d0
 80021b0:	200000f0 	.word	0x200000f0
 80021b4:	200000e0 	.word	0x200000e0
 80021b8:	200000d5 	.word	0x200000d5

080021bc <HCSR05_Ready>:
 * @param trig_pin HCSR05 Trigger pin.
 * @param htim HCSR05 timer.
 * @param timer_channel HCSR05 timer channel.
 * @param distance Distance between transducers (cm).
 */
void HCSR05_Ready(GPIO_TypeDef *trig_port, uint16_t trig_pin, TIM_HandleTypeDef* htim, uint32_t timer_channel, uint8_t distance, int8_t angle_difference){
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	460b      	mov	r3, r1
 80021ca:	817b      	strh	r3, [r7, #10]
	// Set trigger port and pin global variables
	HCSR05_Trigger_Port = trig_port;
 80021cc:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HCSR05_Ready+0x6c>)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6013      	str	r3, [r2, #0]
	HCSR05_Trigger_Pin = trig_pin;
 80021d2:	4a16      	ldr	r2, [pc, #88]	; (800222c <HCSR05_Ready+0x70>)
 80021d4:	897b      	ldrh	r3, [r7, #10]
 80021d6:	8013      	strh	r3, [r2, #0]
	// Set timer global variables
	HCSR05_Htim = htim;
 80021d8:	4a15      	ldr	r2, [pc, #84]	; (8002230 <HCSR05_Ready+0x74>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
	HCSR05_Channel = timer_channel;
 80021de:	4a15      	ldr	r2, [pc, #84]	; (8002234 <HCSR05_Ready+0x78>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6013      	str	r3, [r2, #0]
	// Set distance global variable
	HCSR05_Distance = distance;
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HCSR05_Ready+0x7c>)
 80021e6:	7e3b      	ldrb	r3, [r7, #24]
 80021e8:	7013      	strb	r3, [r2, #0]
	// Set angle difference global variable
	HCSR05_Angle_Difference = angle_difference;
 80021ea:	4a14      	ldr	r2, [pc, #80]	; (800223c <HCSR05_Ready+0x80>)
 80021ec:	7f3b      	ldrb	r3, [r7, #28]
 80021ee:	7013      	strb	r3, [r2, #0]
	// Reset measurement Variables
	HCSR05_TOF = 0;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HCSR05_Ready+0x84>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
	HCSR05_Captured = 0;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HCSR05_Ready+0x88>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
	HCSR05_IC_First_Val = 0;
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HCSR05_Ready+0x8c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
	HCSR05_IC_Second_Val = 0;
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HCSR05_Ready+0x90>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
	HCSR05_TOF = 0;
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HCSR05_Ready+0x84>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
	HCSR05_Is_First_Val_Captured = 0;
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HCSR05_Ready+0x94>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
	HCSR05_SoundSpeed = 0;
 8002214:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HCSR05_Ready+0x98>)
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	200000d8 	.word	0x200000d8
 800222c:	200000dc 	.word	0x200000dc
 8002230:	200000f8 	.word	0x200000f8
 8002234:	200000e8 	.word	0x200000e8
 8002238:	200000f4 	.word	0x200000f4
 800223c:	200000d4 	.word	0x200000d4
 8002240:	200000e0 	.word	0x200000e0
 8002244:	200000d5 	.word	0x200000d5
 8002248:	200000d0 	.word	0x200000d0
 800224c:	200000f0 	.word	0x200000f0
 8002250:	200000ec 	.word	0x200000ec
 8002254:	200000e4 	.word	0x200000e4

08002258 <HCSR05_Get_WindSpeed>:
 * @brief Get wind speed on one axis.
 * @param T Temperature (Celsius).
 * @param P Air pressure (Pa).
 * @param H Relative humidity (%).
 */
float_t HCSR05_Get_WindSpeed(int8_t T, uint32_t P, int8_t H){
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4613      	mov	r3, r2
 8002266:	71bb      	strb	r3, [r7, #6]
	// Calculate sound speed
	HCSR05_Calculate_SoundSpeed(T, P, H);
 8002268:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	6839      	ldr	r1, [r7, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fb78 	bl	8001968 <HCSR05_Calculate_SoundSpeed>
	// Calculate time of flight
	HCSR05_Calculate_TOF();
 8002278:	f7ff fe40 	bl	8001efc <HCSR05_Calculate_TOF>

	// If Calculated values true
	if(HCSR05_TOF > 0 && HCSR05_SoundSpeed > 0){
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HCSR05_Get_WindSpeed+0xb8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d039      	beq.n	80022f8 <HCSR05_Get_WindSpeed+0xa0>
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HCSR05_Get_WindSpeed+0xbc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f04f 0100 	mov.w	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fe29 	bl	8000ee4 <__aeabi_fcmpgt>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02f      	beq.n	80022f8 <HCSR05_Get_WindSpeed+0xa0>
		// Calculate and Return Wind Speed on one axis
		return (HCSR05_Distance * 1e4 / HCSR05_TOF) - HCSR05_SoundSpeed;
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HCSR05_Get_WindSpeed+0xc0>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f915 	bl	80004cc <__aeabi_i2d>
 80022a2:	a319      	add	r3, pc, #100	; (adr r3, 8002308 <HCSR05_Get_WindSpeed+0xb0>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe f97a 	bl	80005a0 <__aeabi_dmul>
 80022ac:	4603      	mov	r3, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	4625      	mov	r5, r4
 80022b2:	461c      	mov	r4, r3
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HCSR05_Get_WindSpeed+0xb8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f8f7 	bl	80004ac <__aeabi_ui2d>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4620      	mov	r0, r4
 80022c4:	4629      	mov	r1, r5
 80022c6:	f7fe fa95 	bl	80007f4 <__aeabi_ddiv>
 80022ca:	4603      	mov	r3, r0
 80022cc:	460c      	mov	r4, r1
 80022ce:	4625      	mov	r5, r4
 80022d0:	461c      	mov	r4, r3
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HCSR05_Get_WindSpeed+0xbc>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f90a 	bl	80004f0 <__aeabi_f2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7fd ffa4 	bl	8000230 <__aeabi_dsub>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	4618      	mov	r0, r3
 80022ee:	4621      	mov	r1, r4
 80022f0:	f7fe fc2e 	bl	8000b50 <__aeabi_d2f>
 80022f4:	4603      	mov	r3, r0
 80022f6:	e001      	b.n	80022fc <HCSR05_Get_WindSpeed+0xa4>
	}
	return 0;
 80022f8:	f04f 0300 	mov.w	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bdb0      	pop	{r4, r5, r7, pc}
 8002304:	f3af 8000 	nop.w
 8002308:	00000000 	.word	0x00000000
 800230c:	40c38800 	.word	0x40c38800
 8002310:	200000e0 	.word	0x200000e0
 8002314:	200000e4 	.word	0x200000e4
 8002318:	200000f4 	.word	0x200000f4
 800231c:	00000000 	.word	0x00000000

08002320 <HCSR05_Calculate_Angle>:

/**
 * @brief Calculate angle from x and y.
 * @return Angle in degree.
 */
float_t HCSR05_Calculate_Angle(double_t x, double_t y){
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800232a:	e9c7 2300 	strd	r2, r3, [r7]
	// Calculate angle and convert to degree
	return atan2(y, x) * 180.0 / PI;
 800232e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002336:	f006 fab5 	bl	80088a4 <atan2>
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HCSR05_Calculate_Angle+0x58>)
 8002340:	f7fe f92e 	bl	80005a0 <__aeabi_dmul>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	4618      	mov	r0, r3
 800234a:	4621      	mov	r1, r4
 800234c:	a308      	add	r3, pc, #32	; (adr r3, 8002370 <HCSR05_Calculate_Angle+0x50>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe fa4f 	bl	80007f4 <__aeabi_ddiv>
 8002356:	4603      	mov	r3, r0
 8002358:	460c      	mov	r4, r1
 800235a:	4618      	mov	r0, r3
 800235c:	4621      	mov	r1, r4
 800235e:	f7fe fbf7 	bl	8000b50 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	f3af 8000 	nop.w
 8002370:	54442d18 	.word	0x54442d18
 8002374:	400921fb 	.word	0x400921fb
 8002378:	40668000 	.word	0x40668000

0800237c <HCSR05_Calculate_WindSpeedNdAngle>:
 * @param Y_axis Y axis speed.
 * @param compass_x compass measured x.
 * @param compass_y compass measured y.
 * @param result will fill with calculated speed and angle
 */
void HCSR05_Calculate_WindSpeedNdAngle(float_t X_axis, float_t Y_axis, int16_t compass_x, int16_t compass_y, float_t *result){
 800237c:	b5b0      	push	{r4, r5, r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	460b      	mov	r3, r1
 800238c:	80fb      	strh	r3, [r7, #6]
 800238e:	4613      	mov	r3, r2
 8002390:	80bb      	strh	r3, [r7, #4]
	// Calculate angle
	float_t compose_angle = HCSR05_Calculate_Angle(compass_x, compass_y);
 8002392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f898 	bl	80004cc <__aeabi_i2d>
 800239c:	4604      	mov	r4, r0
 800239e:	460d      	mov	r5, r1
 80023a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f891 	bl	80004cc <__aeabi_i2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4620      	mov	r0, r4
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7ff ffb5 	bl	8002320 <HCSR05_Calculate_Angle>
 80023b6:	61b8      	str	r0, [r7, #24]
	float_t wind_angle = HCSR05_Calculate_Angle(X_axis, Y_axis);
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7fe f899 	bl	80004f0 <__aeabi_f2d>
 80023be:	4604      	mov	r4, r0
 80023c0:	460d      	mov	r5, r1
 80023c2:	68b8      	ldr	r0, [r7, #8]
 80023c4:	f7fe f894 	bl	80004f0 <__aeabi_f2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4620      	mov	r0, r4
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7ff ffa6 	bl	8002320 <HCSR05_Calculate_Angle>
 80023d4:	6178      	str	r0, [r7, #20]
	float_t angle = compose_angle + wind_angle + HCSR05_Angle_Difference;
 80023d6:	6979      	ldr	r1, [r7, #20]
 80023d8:	69b8      	ldr	r0, [r7, #24]
 80023da:	f7fe fc0f 	bl	8000bfc <__addsf3>
 80023de:	4603      	mov	r3, r0
 80023e0:	461c      	mov	r4, r3
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HCSR05_Calculate_WindSpeedNdAngle+0xdc>)
 80023e4:	f993 3000 	ldrsb.w	r3, [r3]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fcbb 	bl	8000d64 <__aeabi_i2f>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7fe fc02 	bl	8000bfc <__addsf3>
 80023f8:	4603      	mov	r3, r0
 80023fa:	61fb      	str	r3, [r7, #28]
	if(angle<=0) angle += 360;
 80023fc:	f04f 0100 	mov.w	r1, #0
 8002400:	69f8      	ldr	r0, [r7, #28]
 8002402:	f7fe fd5b 	bl	8000ebc <__aeabi_fcmple>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HCSR05_Calculate_WindSpeedNdAngle+0x9c>
 800240c:	4913      	ldr	r1, [pc, #76]	; (800245c <HCSR05_Calculate_WindSpeedNdAngle+0xe0>)
 800240e:	69f8      	ldr	r0, [r7, #28]
 8002410:	f7fe fbf4 	bl	8000bfc <__addsf3>
 8002414:	4603      	mov	r3, r0
 8002416:	61fb      	str	r3, [r7, #28]
	// Fill result with R(speed) and theta(angle)
	*result = hypot(X_axis, Y_axis);
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f7fe f869 	bl	80004f0 <__aeabi_f2d>
 800241e:	4604      	mov	r4, r0
 8002420:	460d      	mov	r5, r1
 8002422:	68b8      	ldr	r0, [r7, #8]
 8002424:	f7fe f864 	bl	80004f0 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f006 fab2 	bl	8008998 <hypot>
 8002434:	4603      	mov	r3, r0
 8002436:	460c      	mov	r4, r1
 8002438:	4618      	mov	r0, r3
 800243a:	4621      	mov	r1, r4
 800243c:	f7fe fb88 	bl	8000b50 <__aeabi_d2f>
 8002440:	4602      	mov	r2, r0
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	601a      	str	r2, [r3, #0]
	*(result+1) = angle;
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	3304      	adds	r3, #4
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	601a      	str	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bdb0      	pop	{r4, r5, r7, pc}
 8002456:	bf00      	nop
 8002458:	200000d4 	.word	0x200000d4
 800245c:	43b40000 	.word	0x43b40000

08002460 <MAX44009_Begin>:
#include "MAX44009.h"

I2C_HandleTypeDef *MAX44009_hi2c;

HAL_StatusTypeDef MAX44009_Begin(I2C_HandleTypeDef *hi2c) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af04      	add	r7, sp, #16
 8002466:	6078      	str	r0, [r7, #4]
	MAX44009_hi2c = hi2c;
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <MAX44009_Begin+0x34>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6013      	str	r3, [r2, #0]
	return HAL_I2C_Mem_Write(MAX44009_hi2c, MAX44009_ADDR, 0x02, 1, 0x00, 1,
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <MAX44009_Begin+0x34>)
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	2364      	movs	r3, #100	; 0x64
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	2301      	movs	r3, #1
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	2300      	movs	r3, #0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2301      	movs	r3, #1
 8002480:	2202      	movs	r2, #2
 8002482:	2194      	movs	r1, #148	; 0x94
 8002484:	f002 f9d0 	bl	8004828 <HAL_I2C_Mem_Write>
 8002488:	4603      	mov	r3, r0
			100);
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200000fc 	.word	0x200000fc

08002498 <MAX44009_Get_Lux>:

float MAX44009_Get_Lux(void) {
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af04      	add	r7, sp, #16
	uint8_t data[2];

	if (HAL_I2C_Mem_Read(MAX44009_hi2c, MAX44009_ADDR, 0x03, 1, data, 1, 100)
 800249e:	4b28      	ldr	r3, [pc, #160]	; (8002540 <MAX44009_Get_Lux+0xa8>)
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	2364      	movs	r3, #100	; 0x64
 80024a4:	9302      	str	r3, [sp, #8]
 80024a6:	2301      	movs	r3, #1
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2301      	movs	r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	2194      	movs	r1, #148	; 0x94
 80024b4:	f002 fab2 	bl	8004a1c <HAL_I2C_Mem_Read>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d134      	bne.n	8002528 <MAX44009_Get_Lux+0x90>
			== HAL_OK) {
		if (HAL_I2C_Mem_Read(MAX44009_hi2c, MAX44009_ADDR, 0x04, 1, data + 1, 1,
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <MAX44009_Get_Lux+0xa8>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	3301      	adds	r3, #1
 80024c6:	2264      	movs	r2, #100	; 0x64
 80024c8:	9202      	str	r2, [sp, #8]
 80024ca:	2201      	movs	r2, #1
 80024cc:	9201      	str	r2, [sp, #4]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2301      	movs	r3, #1
 80024d2:	2204      	movs	r2, #4
 80024d4:	2194      	movs	r1, #148	; 0x94
 80024d6:	f002 faa1 	bl	8004a1c <HAL_I2C_Mem_Read>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d123      	bne.n	8002528 <MAX44009_Get_Lux+0x90>
				100) == HAL_OK) {
			// Convert the data to lux
			uint8_t exponent = data[0] >> 4;
 80024e0:	793b      	ldrb	r3, [r7, #4]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	73fb      	strb	r3, [r7, #15]
			uint32_t mantisa = ((data[0] & 0x0F) << 4) + (data[1] & 0x0F);
 80024e6:	793b      	ldrb	r3, [r7, #4]
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	797b      	ldrb	r3, [r7, #5]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4413      	add	r3, r2
 80024f4:	60bb      	str	r3, [r7, #8]
			mantisa <<= exponent;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	60bb      	str	r3, [r7, #8]
			return ((float) (mantisa) * 0.045);
 8002500:	68b8      	ldr	r0, [r7, #8]
 8002502:	f7fe fc2b 	bl	8000d5c <__aeabi_ui2f>
 8002506:	4603      	mov	r3, r0
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fff1 	bl	80004f0 <__aeabi_f2d>
 800250e:	a30a      	add	r3, pc, #40	; (adr r3, 8002538 <MAX44009_Get_Lux+0xa0>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fe f844 	bl	80005a0 <__aeabi_dmul>
 8002518:	4603      	mov	r3, r0
 800251a:	460c      	mov	r4, r1
 800251c:	4618      	mov	r0, r3
 800251e:	4621      	mov	r1, r4
 8002520:	f7fe fb16 	bl	8000b50 <__aeabi_d2f>
 8002524:	4603      	mov	r3, r0
 8002526:	e001      	b.n	800252c <MAX44009_Get_Lux+0x94>
		}
	}
	return 0;
 8002528:	f04f 0300 	mov.w	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	f3af 8000 	nop.w
 8002538:	70a3d70a 	.word	0x70a3d70a
 800253c:	3fa70a3d 	.word	0x3fa70a3d
 8002540:	200000fc 	.word	0x200000fc

08002544 <QMC5883L_Write_Register>:
#define PI 3.14159265358979323846264338327950288
#endif

I2C_HandleTypeDef *QMC5883L_i2c;

void QMC5883L_Write_Register(uint16_t reg, int value) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af04      	add	r7, sp, #16
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(QMC5883L_i2c, QMC5883L_ADDR, reg, 1, (uint8_t*) value, 1,
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <QMC5883L_Write_Register+0x30>)
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	88f9      	ldrh	r1, [r7, #6]
 8002558:	2264      	movs	r2, #100	; 0x64
 800255a:	9202      	str	r2, [sp, #8]
 800255c:	2201      	movs	r2, #1
 800255e:	9201      	str	r2, [sp, #4]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2301      	movs	r3, #1
 8002564:	460a      	mov	r2, r1
 8002566:	211a      	movs	r1, #26
 8002568:	f002 f95e 	bl	8004828 <HAL_I2C_Mem_Write>
			100);
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	2000010c 	.word	0x2000010c

08002578 <QMC5883L_Read_Register>:

void QMC5883L_Read_Register(uint8_t *data, uint16_t reg, uint16_t count) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af04      	add	r7, sp, #16
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Read(QMC5883L_i2c, QMC5883L_ADDR, reg, 1, data, count, 100);
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <QMC5883L_Read_Register+0x34>)
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	887a      	ldrh	r2, [r7, #2]
 800258e:	2364      	movs	r3, #100	; 0x64
 8002590:	9302      	str	r3, [sp, #8]
 8002592:	883b      	ldrh	r3, [r7, #0]
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2301      	movs	r3, #1
 800259c:	211a      	movs	r1, #26
 800259e:	f002 fa3d 	bl	8004a1c <HAL_I2C_Mem_Read>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2000010c 	.word	0x2000010c

080025b0 <QMC5883L_Reconfig>:

void QMC5883L_Reconfig() {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	QMC5883L_Write_Register(QMC5883L_CONFIG,
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <QMC5883L_Reconfig+0x2c>)
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <QMC5883L_Reconfig+0x30>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4313      	orrs	r3, r2
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <QMC5883L_Reconfig+0x34>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <QMC5883L_Reconfig+0x38>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4619      	mov	r1, r3
 80025d2:	2009      	movs	r0, #9
 80025d4:	f7ff ffb6 	bl	8002544 <QMC5883L_Write_Register>
			oversampling | range | rate | mode);
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000109 	.word	0x20000109
 80025e0:	20000110 	.word	0x20000110
 80025e4:	20000102 	.word	0x20000102
 80025e8:	20000108 	.word	0x20000108

080025ec <QMC5883L_Reset>:

void QMC5883L_Reset() {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
	QMC5883L_Write_Register(QMC5883L_RESET, 0x01);
 80025f0:	2101      	movs	r1, #1
 80025f2:	200b      	movs	r0, #11
 80025f4:	f7ff ffa6 	bl	8002544 <QMC5883L_Write_Register>
	QMC5883L_Reconfig();
 80025f8:	f7ff ffda 	bl	80025b0 <QMC5883L_Reconfig>
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}

08002600 <QMC5883L_Set_Sampling_Rate>:
		break;
	}
	QMC5883L_Reconfig();
}

void QMC5883L_Set_Sampling_Rate(int x) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	switch (x) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b32      	cmp	r3, #50	; 0x32
 800260c:	d00d      	beq.n	800262a <QMC5883L_Set_Sampling_Rate+0x2a>
 800260e:	2b32      	cmp	r3, #50	; 0x32
 8002610:	dc02      	bgt.n	8002618 <QMC5883L_Set_Sampling_Rate+0x18>
 8002612:	2b0a      	cmp	r3, #10
 8002614:	d005      	beq.n	8002622 <QMC5883L_Set_Sampling_Rate+0x22>
 8002616:	e014      	b.n	8002642 <QMC5883L_Set_Sampling_Rate+0x42>
 8002618:	2b64      	cmp	r3, #100	; 0x64
 800261a:	d00a      	beq.n	8002632 <QMC5883L_Set_Sampling_Rate+0x32>
 800261c:	2bc8      	cmp	r3, #200	; 0xc8
 800261e:	d00c      	beq.n	800263a <QMC5883L_Set_Sampling_Rate+0x3a>
 8002620:	e00f      	b.n	8002642 <QMC5883L_Set_Sampling_Rate+0x42>
	case 10:
		rate = QMC5883L_CONFIG_10HZ;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <QMC5883L_Set_Sampling_Rate+0x50>)
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
		break;
 8002628:	e00b      	b.n	8002642 <QMC5883L_Set_Sampling_Rate+0x42>
	case 50:
		rate = QMC5883L_CONFIG_50HZ;
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <QMC5883L_Set_Sampling_Rate+0x50>)
 800262c:	2204      	movs	r2, #4
 800262e:	701a      	strb	r2, [r3, #0]
		break;
 8002630:	e007      	b.n	8002642 <QMC5883L_Set_Sampling_Rate+0x42>
	case 100:
		rate = QMC5883L_CONFIG_100HZ;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <QMC5883L_Set_Sampling_Rate+0x50>)
 8002634:	2208      	movs	r2, #8
 8002636:	701a      	strb	r2, [r3, #0]
		break;
 8002638:	e003      	b.n	8002642 <QMC5883L_Set_Sampling_Rate+0x42>
	case 200:
		rate = QMC5883L_CONFIG_200HZ;
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <QMC5883L_Set_Sampling_Rate+0x50>)
 800263c:	220c      	movs	r2, #12
 800263e:	701a      	strb	r2, [r3, #0]
		break;
 8002640:	bf00      	nop
	}
	QMC5883L_Reconfig();
 8002642:	f7ff ffb5 	bl	80025b0 <QMC5883L_Reconfig>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000102 	.word	0x20000102

08002654 <QMC5883L_Init>:

void QMC5883L_Init(I2C_HandleTypeDef *i2c) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	QMC5883L_i2c = i2c;
 800265c:	4a0b      	ldr	r2, [pc, #44]	; (800268c <QMC5883L_Init+0x38>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
	/* This assumes the wire library has been initialized. */
	addr = QMC5883L_ADDR;
 8002662:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <QMC5883L_Init+0x3c>)
 8002664:	221a      	movs	r2, #26
 8002666:	701a      	strb	r2, [r3, #0]
	oversampling = QMC5883L_CONFIG_OS512;
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <QMC5883L_Init+0x40>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
	range = QMC5883L_CONFIG_2GAUSS;
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <QMC5883L_Init+0x44>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
	rate = QMC5883L_CONFIG_50HZ;
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <QMC5883L_Init+0x48>)
 8002676:	2204      	movs	r2, #4
 8002678:	701a      	strb	r2, [r3, #0]
	mode = QMC5883L_CONFIG_STANDBY;
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <QMC5883L_Init+0x4c>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
	QMC5883L_Reset();
 8002680:	f7ff ffb4 	bl	80025ec <QMC5883L_Reset>
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	2000010c 	.word	0x2000010c
 8002690:	2000010a 	.word	0x2000010a
 8002694:	20000109 	.word	0x20000109
 8002698:	20000110 	.word	0x20000110
 800269c:	20000102 	.word	0x20000102
 80026a0:	20000108 	.word	0x20000108

080026a4 <QMC5883L_Sleep>:

void QMC5883L_Sleep() {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	mode = QMC5883L_CONFIG_STANDBY;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <QMC5883L_Sleep+0x14>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
	QMC5883L_Reset();
 80026ae:	f7ff ff9d 	bl	80025ec <QMC5883L_Reset>
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000108 	.word	0x20000108

080026bc <QMC5883L_Ready>:

int QMC5883L_Ready() {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
	uint8_t data;
	QMC5883L_Read_Register(&data, QMC5883L_STATUS, 1);
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	2201      	movs	r2, #1
 80026c6:	2106      	movs	r1, #6
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff55 	bl	8002578 <QMC5883L_Read_Register>
	if (!data)
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <QMC5883L_Ready+0x1c>
		return 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e002      	b.n	80026de <QMC5883L_Ready+0x22>
	return data & QMC5883L_STATUS_DRDY;
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 0301 	and.w	r3, r3, #1
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <QMC5883L_ReadRaw>:

int QMC5883L_ReadRaw(int16_t *x, int16_t *y, int16_t *z) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	mode = QMC5883L_CONFIG_CONT;
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <QMC5883L_ReadRaw+0x70>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
	QMC5883L_Reset();
 80026fa:	f7ff ff77 	bl	80025ec <QMC5883L_Reset>
	while (!QMC5883L_Ready()) {
 80026fe:	bf00      	nop
 8002700:	f7ff ffdc 	bl	80026bc <QMC5883L_Ready>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0fa      	beq.n	8002700 <QMC5883L_ReadRaw+0x18>
	}

	uint8_t data[6];

	QMC5883L_Read_Register(data, QMC5883L_X_LSB, 6);
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	2206      	movs	r2, #6
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff30 	bl	8002578 <QMC5883L_Read_Register>

	*x = data[0] | (data[1] << 8);
 8002718:	7c3b      	ldrb	r3, [r7, #16]
 800271a:	b21a      	sxth	r2, r3
 800271c:	7c7b      	ldrb	r3, [r7, #17]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	b21b      	sxth	r3, r3
 8002722:	4313      	orrs	r3, r2
 8002724:	b21a      	sxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	801a      	strh	r2, [r3, #0]
	*y = data[2] | (data[3] << 8);
 800272a:	7cbb      	ldrb	r3, [r7, #18]
 800272c:	b21a      	sxth	r2, r3
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b21a      	sxth	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	801a      	strh	r2, [r3, #0]
	*z = data[4] | (data[5] << 8);
 800273c:	7d3b      	ldrb	r3, [r7, #20]
 800273e:	b21a      	sxth	r2, r3
 8002740:	7d7b      	ldrb	r3, [r7, #21]
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	b21b      	sxth	r3, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	b21a      	sxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	801a      	strh	r2, [r3, #0]

	return 1;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000108 	.word	0x20000108

0800275c <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

__weak void SX1278_hw_init(SX1278_hw_t * hw) {
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8002764:	2101      	movs	r1, #1
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f80d 	bl	8002786 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6858      	ldr	r0, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b29b      	uxth	r3, r3
 8002776:	2201      	movs	r2, #1
 8002778:	4619      	mov	r1, r3
 800277a:	f001 fbe8 	bl	8003f4e <HAL_GPIO_WritePin>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6958      	ldr	r0, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	b299      	uxth	r1, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	f001 fbd1 	bl	8003f4e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t * hw) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80027bc:	2101      	movs	r1, #1
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffe1 	bl	8002786 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6858      	ldr	r0, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2200      	movs	r2, #0
 80027d0:	4619      	mov	r1, r3
 80027d2:	f001 fbbc 	bl	8003f4e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f000 f855 	bl	8002886 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6858      	ldr	r0, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2201      	movs	r2, #1
 80027e8:	4619      	mov	r1, r3
 80027ea:	f001 fbb0 	bl	8003f4e <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80027ee:	2064      	movs	r0, #100	; 0x64
 80027f0:	f000 f849 	bl	8002886 <SX1278_hw_DelayMs>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff ffbb 	bl	8002786 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6998      	ldr	r0, [r3, #24]
 8002814:	1cf9      	adds	r1, r7, #3
 8002816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800281a:	2201      	movs	r2, #1
 800281c:	f004 fe19 	bl	8007452 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8002820:	bf00      	nop
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	4618      	mov	r0, r3
 8002828:	f005 f8e9 	bl	80079fe <HAL_SPI_GetState>
 800282c:	4603      	mov	r3, r0
 800282e:	2b01      	cmp	r3, #1
 8002830:	d1f7      	bne.n	8002822 <SX1278_hw_SPICommand+0x26>
		;
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af02      	add	r7, sp, #8
 8002840:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800284a:	2100      	movs	r1, #0
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff9a 	bl	8002786 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6998      	ldr	r0, [r3, #24]
 8002856:	f107 020e 	add.w	r2, r7, #14
 800285a:	f107 010f 	add.w	r1, r7, #15
 800285e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2301      	movs	r3, #1
 8002866:	f004 ff28 	bl	80076ba <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800286a:	bf00      	nop
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4618      	mov	r0, r3
 8002872:	f005 f8c4 	bl	80079fe <HAL_SPI_GetState>
 8002876:	4603      	mov	r3, r0
 8002878:	2b01      	cmp	r3, #1
 800287a:	d1f7      	bne.n	800286c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800287c:	7bbb      	ldrb	r3, [r7, #14]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f001 f8a0 	bl	80039d4 <HAL_Delay>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t * hw) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f001 fb35 	bl	8003f20 <HAL_GPIO_ReadPin>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff8c 	bl	80027fc <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ffa6 	bl	800283a <SX1278_hw_SPIReadByte>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2101      	movs	r1, #1
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff44 	bl	8002786 <SX1278_hw_SetNSS>
	return tmp;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
 8002914:	4613      	mov	r3, r2
 8002916:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2100      	movs	r1, #0
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff ff31 	bl	8002786 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f7ff ff62 	bl	80027fc <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	78ba      	ldrb	r2, [r7, #2]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5b 	bl	80027fc <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2101      	movs	r1, #1
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff1a 	bl	8002786 <SX1278_hw_SetNSS>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	461a      	mov	r2, r3
 8002966:	460b      	mov	r3, r1
 8002968:	72fb      	strb	r3, [r7, #11]
 800296a:	4613      	mov	r3, r2
 800296c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800296e:	7abb      	ldrb	r3, [r7, #10]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d929      	bls.n	80029c8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff03 	bl	8002786 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800298a:	b2db      	uxtb	r3, r3
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f7ff ff34 	bl	80027fc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8002994:	2300      	movs	r3, #0
 8002996:	75fb      	strb	r3, [r7, #23]
 8002998:	e00b      	b.n	80029b2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7ff ff28 	bl	80027fc <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	3301      	adds	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
 80029b2:	7dfa      	ldrb	r2, [r7, #23]
 80029b4:	7abb      	ldrb	r3, [r7, #10]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d3ef      	bcc.n	800299a <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fee0 	bl	8002786 <SX1278_hw_SetNSS>
 80029c6:	e000      	b.n	80029ca <SX1278_SPIBurstWrite+0x70>
		return;
 80029c8:	bf00      	nop
	}
}
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7919      	ldrb	r1, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	795a      	ldrb	r2, [r3, #5]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7998      	ldrb	r0, [r3, #6]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	79db      	ldrb	r3, [r3, #7]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4603      	mov	r3, r0
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f805 	bl	80029fc <SX1278_config>
			module->LoRa_BW);
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	70fb      	strb	r3, [r7, #3]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70bb      	strb	r3, [r7, #2]
 8002a12:	4613      	mov	r3, r2
 8002a14:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8aa 	bl	8002b70 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8002a1c:	200f      	movs	r0, #15
 8002a1e:	f7ff ff32 	bl	8002886 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8b4 	bl	8002b90 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
			(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a43      	ldr	r2, [pc, #268]	; (8002b40 <SX1278_config+0x144>)
 8002a32:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8002a34:	2303      	movs	r3, #3
 8002a36:	2106      	movs	r1, #6
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff ff8e 	bl	800295a <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[power]); //Setting output power parameter
 8002a3e:	78bb      	ldrb	r3, [r7, #2]
 8002a40:	4a40      	ldr	r2, [pc, #256]	; (8002b44 <SX1278_config+0x148>)
 8002a42:	5cd3      	ldrb	r3, [r2, r3]
 8002a44:	461a      	mov	r2, r3
 8002a46:	2109      	movs	r1, #9
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff5d 	bl	8002908 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8002a4e:	220b      	movs	r2, #11
 8002a50:	210b      	movs	r1, #11
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff58 	bl	8002908 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8002a58:	2223      	movs	r2, #35	; 0x23
 8002a5a:	210c      	movs	r1, #12
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff53 	bl	8002908 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8002a62:	787b      	ldrb	r3, [r7, #1]
 8002a64:	4a38      	ldr	r2, [pc, #224]	; (8002b48 <SX1278_config+0x14c>)
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	2b06      	cmp	r3, #6
 8002a6a:	d131      	bne.n	8002ad0 <SX1278_config+0xd4>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002a6c:	7e3b      	ldrb	r3, [r7, #24]
 8002a6e:	4a37      	ldr	r2, [pc, #220]	; (8002b4c <SX1278_config+0x150>)
 8002a70:	5cd3      	ldrb	r3, [r2, r3]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002a76:	3303      	adds	r3, #3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	211d      	movs	r1, #29
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff ff42 	bl	8002908 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	4a30      	ldr	r2, [pc, #192]	; (8002b48 <SX1278_config+0x14c>)
 8002a88:	5cd3      	ldrb	r3, [r2, r3]
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002a8e:	3307      	adds	r3, #7
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	211e      	movs	r1, #30
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ff36 	bl	8002908 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 8002a9c:	2131      	movs	r1, #49	; 0x31
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ff13 	bl	80028ca <SX1278_SPIRead>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	f023 0307 	bic.w	r3, r3, #7
 8002aae:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	f043 0305 	orr.w	r3, r3, #5
 8002ab6:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	461a      	mov	r2, r3
 8002abc:	2131      	movs	r1, #49	; 0x31
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ff22 	bl	8002908 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8002ac4:	220c      	movs	r2, #12
 8002ac6:	2137      	movs	r1, #55	; 0x37
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff1d 	bl	8002908 <SX1278_SPIWrite>
 8002ace:	e017      	b.n	8002b00 <SX1278_config+0x104>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8002ad0:	7e3b      	ldrb	r3, [r7, #24]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <SX1278_config+0x150>)
 8002ad4:	5cd3      	ldrb	r3, [r2, r3]
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002ada:	3302      	adds	r3, #2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	211d      	movs	r1, #29
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ff10 	bl	8002908 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <SX1278_config+0x14c>)
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8002af2:	3307      	adds	r3, #7
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	211e      	movs	r1, #30
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ff04 	bl	8002908 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	211f      	movs	r1, #31
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff feff 	bl	8002908 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2120      	movs	r1, #32
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fefa 	bl	8002908 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8002b14:	220c      	movs	r2, #12
 8002b16:	2121      	movs	r1, #33	; 0x21
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fef5 	bl	8002908 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2141      	movs	r1, #65	; 0x41
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fef0 	bl	8002908 <SX1278_SPIWrite>
	module->readBytes = 0;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f80d 	bl	8002b50 <SX1278_standby>
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	0800a4c8 	.word	0x0800a4c8
 8002b44:	0800a4cc 	.word	0x0800a4cc
 8002b48:	0800a4d0 	.word	0x0800a4d0
 8002b4c:	0800a4d8 	.word	0x0800a4d8

08002b50 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8002b58:	2209      	movs	r2, #9
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff fed3 	bl	8002908 <SX1278_SPIWrite>
	module->status = STANDBY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	725a      	strb	r2, [r3, #9]
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8002b78:	2208      	movs	r2, #8
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff fec3 	bl	8002908 <SX1278_SPIWrite>
	module->status = SLEEP;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	725a      	strb	r2, [r3, #9]
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8002b98:	2288      	movs	r2, #136	; 0x88
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff feb3 	bl	8002908 <SX1278_SPIWrite>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8002bb2:	22ff      	movs	r2, #255	; 0xff
 8002bb4:	2112      	movs	r1, #18
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff fea6 	bl	8002908 <SX1278_SPIWrite>
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	7afa      	ldrb	r2, [r7, #11]
 8002bd6:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module); //setting base parameter
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff fef9 	bl	80029d0 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8002bde:	2287      	movs	r2, #135	; 0x87
 8002be0:	214d      	movs	r1, #77	; 0x4d
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff fe90 	bl	8002908 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8002be8:	2200      	movs	r2, #0
 8002bea:	2124      	movs	r1, #36	; 0x24
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff fe8b 	bl	8002908 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8002bf2:	2241      	movs	r2, #65	; 0x41
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff fe86 	bl	8002908 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff ffd4 	bl	8002baa <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8002c02:	22f7      	movs	r2, #247	; 0xf7
 8002c04:	2111      	movs	r1, #17
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7ff fe7e 	bl	8002908 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 8002c0c:	7afb      	ldrb	r3, [r7, #11]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2122      	movs	r1, #34	; 0x22
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff fe78 	bl	8002908 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8002c18:	210e      	movs	r1, #14
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fe55 	bl	80028ca <SX1278_SPIRead>
 8002c20:	4603      	mov	r3, r0
 8002c22:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	461a      	mov	r2, r3
 8002c28:	210d      	movs	r1, #13
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7ff fe6c 	bl	8002908 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8002c30:	2122      	movs	r1, #34	; 0x22
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff fe49 	bl	80028ca <SX1278_SPIRead>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 8002c3c:	7dba      	ldrb	r2, [r7, #22]
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d104      	bne.n	8002c4e <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2202      	movs	r2, #2
 8002c48:	725a      	strb	r2, [r3, #9]
			return 1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00e      	b.n	8002c6c <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ea      	bne.n	8002c30 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fda8 	bl	80027b4 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f7ff feb3 	bl	80029d0 <SX1278_defaultConfig>
			return 0;
 8002c6a:	2300      	movs	r3, #0
		}
	}
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length,
		uint32_t timeout) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	2100      	movs	r1, #0
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f7ff fe65 	bl	800295a <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8002c90:	228b      	movs	r2, #139	; 0x8b
 8002c92:	2101      	movs	r1, #1
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff fe37 	bl	8002908 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fdfc 	bl	800289c <SX1278_hw_GetDIO0>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8002caa:	2112      	movs	r1, #18
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f7ff fe0c 	bl	80028ca <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f7ff ff79 	bl	8002baa <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff ff49 	bl	8002b50 <SX1278_standby>
			return 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e013      	b.n	8002cea <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fd6e 	bl	80027b4 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff fe79 	bl	80029d0 <SX1278_defaultConfig>
			return 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e003      	b.n	8002cea <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	f7ff fdcf 	bl	8002886 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8002ce8:	e7d7      	b.n	8002c9a <SX1278_LoRaTxPacket+0x26>
	}
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <SX1278_begin>:

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	4608      	mov	r0, r1
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4603      	mov	r3, r0
 8002d02:	70fb      	strb	r3, [r7, #3]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70bb      	strb	r3, [r7, #2]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fd23 	bl	800275c <SX1278_hw_init>
	module->frequency = frequency;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	78ba      	ldrb	r2, [r7, #2]
 8002d20:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	787a      	ldrb	r2, [r7, #1]
 8002d26:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7c3a      	ldrb	r2, [r7, #16]
 8002d2c:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7d3a      	ldrb	r2, [r7, #20]
 8002d32:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff fe4b 	bl	80029d0 <SX1278_defaultConfig>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <SX1278_transmit>:

int SX1278_transmit(SX1278_t * module, uint8_t* txBuf, uint8_t length,
		uint32_t timeout) {
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	71fb      	strb	r3, [r7, #7]
	if (SX1278_LoRaEntryTx(module, length, timeout)) {
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff ff33 	bl	8002bc4 <SX1278_LoRaEntryTx>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d007      	beq.n	8002d74 <SX1278_transmit+0x32>
		return SX1278_LoRaTxPacket(module, txBuf, length, timeout);
 8002d64:	79fa      	ldrb	r2, [r7, #7]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff82 	bl	8002c74 <SX1278_LoRaTxPacket>
 8002d70:	4603      	mov	r3, r0
 8002d72:	e000      	b.n	8002d76 <SX1278_transmit+0x34>
	}
	return 0;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <DWT_Init+0x38>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10e      	bne.n	8002dae <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <DWT_Init+0x38>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <DWT_Init+0x38>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9a:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8002d9c:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <DWT_Init+0x3c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <DWT_Init+0x3c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <DWT_Init+0x3c>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6013      	str	r3, [r2, #0]
    }
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000edf0 	.word	0xe000edf0
 8002dbc:	e0001000 	.word	0xe0001000

08002dc0 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <DWT_Delay+0x3c>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <DWT_Delay+0x40>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a0c      	ldr	r2, [pc, #48]	; (8002e04 <DWT_Delay+0x44>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	0c9a      	lsrs	r2, r3, #18
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8002de2:	bf00      	nop
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <DWT_Delay+0x3c>)
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d8f8      	bhi.n	8002de4 <DWT_Delay+0x24>
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	e0001000 	.word	0xe0001000
 8002e00:	20000004 	.word	0x20000004
 8002e04:	431bde83 	.word	0x431bde83

08002e08 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002e0e:	f000 fd7f 	bl	8003910 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002e12:	f000 f929 	bl	8003068 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002e16:	f000 fad9 	bl	80033cc <MX_GPIO_Init>
	MX_I2C1_Init();
 8002e1a:	f000 f991 	bl	8003140 <MX_I2C1_Init>
	MX_RTC_Init();
 8002e1e:	f000 f9bd 	bl	800319c <MX_RTC_Init>
	MX_SPI1_Init();
 8002e22:	f000 fa1f 	bl	8003264 <MX_SPI1_Init>
	MX_TIM1_Init();
 8002e26:	f000 fa53 	bl	80032d0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	//BMP180 init
	BMP180_Init(&hi2c1);
 8002e2a:	4879      	ldr	r0, [pc, #484]	; (8003010 <main+0x208>)
 8002e2c:	f7fe fac2 	bl	80013b4 <BMP180_Init>
	BMP180_SetOversampling(BMP180_LOW);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7fe facd 	bl	80013d0 <BMP180_SetOversampling>
	BMP180_UpdateCalibrationData();
 8002e36:	f7fe fadb 	bl	80013f0 <BMP180_UpdateCalibrationData>

	// MAx44009 init
	MAX44009_Begin(&hi2c1);
 8002e3a:	4875      	ldr	r0, [pc, #468]	; (8003010 <main+0x208>)
 8002e3c:	f7ff fb10 	bl	8002460 <MAX44009_Begin>

	// HMC5883L init
	QMC5883L_Init(&hi2c1);
 8002e40:	4873      	ldr	r0, [pc, #460]	; (8003010 <main+0x208>)
 8002e42:	f7ff fc07 	bl	8002654 <QMC5883L_Init>
	QMC5883L_Set_Sampling_Rate(50);
 8002e46:	2032      	movs	r0, #50	; 0x32
 8002e48:	f7ff fbda 	bl	8002600 <QMC5883L_Set_Sampling_Rate>

	// AHT10 init
	AHT10_Init(&hi2c1);
 8002e4c:	4870      	ldr	r0, [pc, #448]	; (8003010 <main+0x208>)
 8002e4e:	f7fe f9fb 	bl	8001248 <AHT10_Init>

	// HCSR05 delay init
	HCSR05_Init();
 8002e52:	f7fe fd81 	bl	8001958 <HCSR05_Init>

	// Initialize LoRa
	SX1278_hw.dio0.port = LoRa_DIO_GPIO_Port;
 8002e56:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <main+0x20c>)
 8002e58:	4a6f      	ldr	r2, [pc, #444]	; (8003018 <main+0x210>)
 8002e5a:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = LoRa_DIO_Pin;
 8002e5c:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <main+0x20c>)
 8002e5e:	2220      	movs	r2, #32
 8002e60:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = LoRa_NSS_GPIO_Port;
 8002e62:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <main+0x20c>)
 8002e64:	4a6d      	ldr	r2, [pc, #436]	; (800301c <main+0x214>)
 8002e66:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = LoRa_NSS_Pin;
 8002e68:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <main+0x20c>)
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = LoRa_RST_GPIO_Port;
 8002e6e:	4b69      	ldr	r3, [pc, #420]	; (8003014 <main+0x20c>)
 8002e70:	4a69      	ldr	r2, [pc, #420]	; (8003018 <main+0x210>)
 8002e72:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = LoRa_RST_Pin;
 8002e74:	4b67      	ldr	r3, [pc, #412]	; (8003014 <main+0x20c>)
 8002e76:	2210      	movs	r2, #16
 8002e78:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8002e7a:	4b66      	ldr	r3, [pc, #408]	; (8003014 <main+0x20c>)
 8002e7c:	4a68      	ldr	r2, [pc, #416]	; (8003020 <main+0x218>)
 8002e7e:	619a      	str	r2, [r3, #24]
	SX1278.hw = &SX1278_hw;
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <main+0x21c>)
 8002e82:	4a64      	ldr	r2, [pc, #400]	; (8003014 <main+0x20c>)
 8002e84:	601a      	str	r2, [r3, #0]
	SX1278_begin(&SX1278, SX1278_433MHZ, SX1278_POWER_20DBM, SX1278_LORA_SF_10,
 8002e86:	2320      	movs	r3, #32
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	2304      	movs	r3, #4
 8002e90:	2200      	movs	r2, #0
 8002e92:	2100      	movs	r1, #0
 8002e94:	4863      	ldr	r0, [pc, #396]	; (8003024 <main+0x21c>)
 8002e96:	f7ff ff2c 	bl	8002cf2 <SX1278_begin>
			SX1278_LORA_BW_250KHZ, 32);

	SX1278_LoRaEntryTx(&SX1278, 32, 2000);
 8002e9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002e9e:	2120      	movs	r1, #32
 8002ea0:	4860      	ldr	r0, [pc, #384]	; (8003024 <main+0x21c>)
 8002ea2:	f7ff fe8f 	bl	8002bc4 <SX1278_LoRaEntryTx>

	// Setting TXData constant values
	TXData[0] = DEVICE_ID; // Sender device id
 8002ea6:	4b60      	ldr	r3, [pc, #384]	; (8003028 <main+0x220>)
 8002ea8:	4a60      	ldr	r2, [pc, #384]	; (800302c <main+0x224>)
 8002eaa:	601a      	str	r2, [r3, #0]
	TXData[1] = 65535; // Receiver device id
 8002eac:	4b5e      	ldr	r3, [pc, #376]	; (8003028 <main+0x220>)
 8002eae:	4a60      	ldr	r2, [pc, #384]	; (8003030 <main+0x228>)
 8002eb0:	605a      	str	r2, [r3, #4]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Reads temperature.
		BMP180_Temperature = BMP180_GetTemperature();
 8002eb2:	f7fe fbf3 	bl	800169c <BMP180_GetTemperature>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b5e      	ldr	r3, [pc, #376]	; (8003034 <main+0x22c>)
 8002eba:	601a      	str	r2, [r3, #0]
		// Setting TXData
		TXData[2] = BMP180_Temperature; // Temperature
 8002ebc:	4b5d      	ldr	r3, [pc, #372]	; (8003034 <main+0x22c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a59      	ldr	r2, [pc, #356]	; (8003028 <main+0x220>)
 8002ec2:	6093      	str	r3, [r2, #8]

		// Reads pressure.
		BMP180_Pressure = BMP180_GetPressure();
 8002ec4:	f7fe fc06 	bl	80016d4 <BMP180_GetPressure>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <main+0x230>)
 8002ecc:	601a      	str	r2, [r3, #0]
		// Setting TXData
		TXData[3] = BMP180_Pressure; // Pressure
 8002ece:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <main+0x230>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd ff46 	bl	8000d64 <__aeabi_i2f>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b53      	ldr	r3, [pc, #332]	; (8003028 <main+0x220>)
 8002edc:	60da      	str	r2, [r3, #12]

		// Reads light intensity.
		lux = MAX44009_Get_Lux();
 8002ede:	f7ff fadb 	bl	8002498 <MAX44009_Get_Lux>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b55      	ldr	r3, [pc, #340]	; (800303c <main+0x234>)
 8002ee6:	601a      	str	r2, [r3, #0]
		// Setting TXData
		TXData[4] = lux; // Light intensity
 8002ee8:	4b54      	ldr	r3, [pc, #336]	; (800303c <main+0x234>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a4e      	ldr	r2, [pc, #312]	; (8003028 <main+0x220>)
 8002eee:	6113      	str	r3, [r2, #16]

		// Reads temperature and hum.
		AHT10_GetTemperature_hum(TempHum);
 8002ef0:	4853      	ldr	r0, [pc, #332]	; (8003040 <main+0x238>)
 8002ef2:	f7fe f9cb 	bl	800128c <AHT10_GetTemperature_hum>
		// Setting TXData
		TXData[5] = TempHum[1]; // Humidity
 8002ef6:	4b52      	ldr	r3, [pc, #328]	; (8003040 <main+0x238>)
 8002ef8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd ff31 	bl	8000d64 <__aeabi_i2f>
 8002f02:	4602      	mov	r2, r0
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <main+0x220>)
 8002f06:	615a      	str	r2, [r3, #20]

		// Reads compass.
		QMC5883L_ReadRaw(&compass_x, &compass_y, &compass_z);
 8002f08:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <main+0x23c>)
 8002f0a:	494f      	ldr	r1, [pc, #316]	; (8003048 <main+0x240>)
 8002f0c:	484f      	ldr	r0, [pc, #316]	; (800304c <main+0x244>)
 8002f0e:	f7ff fbeb 	bl	80026e8 <QMC5883L_ReadRaw>

		// Get X axis wind speed
		HCSR05_Ready(X_axis_echo_GPIO_Port, X_axis_echo_Pin, &htim1,
 8002f12:	2300      	movs	r3, #0
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	2306      	movs	r3, #6
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <main+0x248>)
 8002f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f22:	484c      	ldr	r0, [pc, #304]	; (8003054 <main+0x24c>)
 8002f24:	f7ff f94a 	bl	80021bc <HCSR05_Ready>
				TIM_CHANNEL_1, HCSR05_DISTANCE, HCSR05_ANGLE_DIFFERENCE);
		X_axis_wind_speed = HCSR05_Get_WindSpeed((int8_t) BMP180_Temperature,
 8002f28:	4b42      	ldr	r3, [pc, #264]	; (8003034 <main+0x22c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd ffe3 	bl	8000ef8 <__aeabi_f2iz>
 8002f32:	4603      	mov	r3, r0
 8002f34:	b258      	sxtb	r0, r3
 8002f36:	4b40      	ldr	r3, [pc, #256]	; (8003038 <main+0x230>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
				(uint32_t) BMP180_Pressure, (int8_t) TempHum[1]);
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <main+0x238>)
 8002f3e:	f993 3001 	ldrsb.w	r3, [r3, #1]
		X_axis_wind_speed = HCSR05_Get_WindSpeed((int8_t) BMP180_Temperature,
 8002f42:	461a      	mov	r2, r3
 8002f44:	f7ff f988 	bl	8002258 <HCSR05_Get_WindSpeed>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b43      	ldr	r3, [pc, #268]	; (8003058 <main+0x250>)
 8002f4c:	601a      	str	r2, [r3, #0]

		// Get Y axis wind speed
		HCSR05_Ready(Y_axis_echo_GPIO_Port, Y_axis_echo_Pin, &htim1,
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	2306      	movs	r3, #6
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2304      	movs	r3, #4
 8002f58:	4a3d      	ldr	r2, [pc, #244]	; (8003050 <main+0x248>)
 8002f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f5e:	483d      	ldr	r0, [pc, #244]	; (8003054 <main+0x24c>)
 8002f60:	f7ff f92c 	bl	80021bc <HCSR05_Ready>
				TIM_CHANNEL_2, HCSR05_DISTANCE, HCSR05_ANGLE_DIFFERENCE);
		Y_axis_wind_speed = HCSR05_Get_WindSpeed((int8_t) BMP180_Temperature,
 8002f64:	4b33      	ldr	r3, [pc, #204]	; (8003034 <main+0x22c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd ffc5 	bl	8000ef8 <__aeabi_f2iz>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	b258      	sxtb	r0, r3
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <main+0x230>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4619      	mov	r1, r3
				(uint32_t) BMP180_Pressure, (int8_t) TempHum[1]);
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <main+0x238>)
 8002f7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
		Y_axis_wind_speed = HCSR05_Get_WindSpeed((int8_t) BMP180_Temperature,
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f7ff f96a 	bl	8002258 <HCSR05_Get_WindSpeed>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b35      	ldr	r3, [pc, #212]	; (800305c <main+0x254>)
 8002f88:	601a      	str	r2, [r3, #0]

		// Calculate wind speed and direction
		HCSR05_Calculate_WindSpeedNdAngle(X_axis_wind_speed, Y_axis_wind_speed,
 8002f8a:	4b33      	ldr	r3, [pc, #204]	; (8003058 <main+0x250>)
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	4b33      	ldr	r3, [pc, #204]	; (800305c <main+0x254>)
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	4b2e      	ldr	r3, [pc, #184]	; (800304c <main+0x244>)
 8002f94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f98:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <main+0x240>)
 8002f9a:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002f9e:	4b30      	ldr	r3, [pc, #192]	; (8003060 <main+0x258>)
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	f7ff f9ea 	bl	800237c <HCSR05_Calculate_WindSpeedNdAngle>
				compass_x, compass_y, wind);
		// Setting TXData
		TXData[6] = wind[0]; // Wind speed
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <main+0x258>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <main+0x220>)
 8002fae:	6193      	str	r3, [r2, #24]
		TXData[7] = wind[1]; // Wind direction
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <main+0x258>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <main+0x220>)
 8002fb6:	61d3      	str	r3, [r2, #28]

		// Transmit TXData
		memcpy(Buffer, TXData, sizeof(TXData));
 8002fb8:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <main+0x25c>)
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <main+0x220>)
 8002fbc:	4614      	mov	r4, r2
 8002fbe:	461d      	mov	r5, r3
 8002fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc2:	6020      	str	r0, [r4, #0]
 8002fc4:	6061      	str	r1, [r4, #4]
 8002fc6:	60a2      	str	r2, [r4, #8]
 8002fc8:	60e3      	str	r3, [r4, #12]
 8002fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fcc:	6120      	str	r0, [r4, #16]
 8002fce:	6161      	str	r1, [r4, #20]
 8002fd0:	61a2      	str	r2, [r4, #24]
 8002fd2:	61e3      	str	r3, [r4, #28]
		SX1278_transmit(&SX1278, Buffer, sizeof(Buffer), 3000);
 8002fd4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002fd8:	2220      	movs	r2, #32
 8002fda:	4922      	ldr	r1, [pc, #136]	; (8003064 <main+0x25c>)
 8002fdc:	4811      	ldr	r0, [pc, #68]	; (8003024 <main+0x21c>)
 8002fde:	f7ff feb0 	bl	8002d42 <SX1278_transmit>

		// Check workingMode pin status
		// GPIO_PIN_SET: Normal working mode
		// GPIO_PIN_RESET: Continuous mode
		if (HAL_GPIO_ReadPin(workingMode_GPIO_Port, workingMode_Pin)
 8002fe2:	2140      	movs	r1, #64	; 0x40
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <main+0x210>)
 8002fe6:	f000 ff9b 	bl	8003f20 <HAL_GPIO_ReadPin>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f47f af60 	bne.w	8002eb2 <main+0xaa>
			// It is on normal working mode

			/* Taking a rest after a hard work */

			// Put LoRa to sleep
			SX1278_sleep(&SX1278);
 8002ff2:	480c      	ldr	r0, [pc, #48]	; (8003024 <main+0x21c>)
 8002ff4:	f7ff fdbc 	bl	8002b70 <SX1278_sleep>

			// Put compass to sleep
			QMC5883L_Sleep();
 8002ff8:	f7ff fb54 	bl	80026a4 <QMC5883L_Sleep>

			// Other sensors are in sleep mode by default

			// Stop tick to reduce MCU power usage
			HAL_SuspendTick();
 8002ffc:	f000 fd0c 	bl	8003a18 <HAL_SuspendTick>
			// Enter stop mode and wait until interrupt occurred
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003000:	2101      	movs	r1, #1
 8003002:	2001      	movs	r0, #1
 8003004:	f002 fbb6 	bl	8005774 <HAL_PWR_EnterSTOPMode>

			// After alarm interrupt
			// Reset RTC
			MX_RTC_Init();
 8003008:	f000 f8c8 	bl	800319c <MX_RTC_Init>
		BMP180_Temperature = BMP180_GetTemperature();
 800300c:	e751      	b.n	8002eb2 <main+0xaa>
 800300e:	bf00      	nop
 8003010:	20000118 	.word	0x20000118
 8003014:	20000380 	.word	0x20000380
 8003018:	40011000 	.word	0x40011000
 800301c:	40010800 	.word	0x40010800
 8003020:	20000214 	.word	0x20000214
 8003024:	2000026c 	.word	0x2000026c
 8003028:	20000194 	.word	0x20000194
 800302c:	4640e400 	.word	0x4640e400
 8003030:	477fff00 	.word	0x477fff00
 8003034:	20000378 	.word	0x20000378
 8003038:	20000170 	.word	0x20000170
 800303c:	20000174 	.word	0x20000174
 8003040:	2000016c 	.word	0x2000016c
 8003044:	20000114 	.word	0x20000114
 8003048:	20000116 	.word	0x20000116
 800304c:	2000037c 	.word	0x2000037c
 8003050:	200001b4 	.word	0x200001b4
 8003054:	40011800 	.word	0x40011800
 8003058:	20000094 	.word	0x20000094
 800305c:	20000098 	.word	0x20000098
 8003060:	20000178 	.word	0x20000178
 8003064:	200001f4 	.word	0x200001f4

08003068 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003068:	b580      	push	{r7, lr}
 800306a:	b09c      	sub	sp, #112	; 0x70
 800306c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800306e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003072:	2238      	movs	r2, #56	; 0x38
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f005 fc0c 	bl	8008894 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800307c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	2220      	movs	r2, #32
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f005 fbfe 	bl	8008894 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8003098:	2309      	movs	r3, #9
 800309a:	63bb      	str	r3, [r7, #56]	; 0x38
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800309c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a0:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80030a2:	2304      	movs	r3, #4
 80030a4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030a6:	2301      	movs	r3, #1
 80030a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80030aa:	2301      	movs	r3, #1
 80030ac:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80030ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030b4:	2302      	movs	r3, #2
 80030b6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030bc:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80030c2:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80030c4:	2302      	movs	r3, #2
 80030c6:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80030c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030cc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80030ce:	2340      	movs	r3, #64	; 0x40
 80030d0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80030d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030d6:	4618      	mov	r0, r3
 80030d8:	f002 fb7e 	bl	80057d8 <HAL_RCC_OscConfig>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <SystemClock_Config+0x7e>
		Error_Handler();
 80030e2:	f000 fa18 	bl	8003516 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80030e6:	230f      	movs	r3, #15
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ea:	2302      	movs	r3, #2
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030f8:	2300      	movs	r3, #0
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80030fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003100:	2102      	movs	r1, #2
 8003102:	4618      	mov	r0, r3
 8003104:	f002 fe7e 	bl	8005e04 <HAL_RCC_ClockConfig>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <SystemClock_Config+0xaa>
		Error_Handler();
 800310e:	f000 fa02 	bl	8003516 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003112:	2301      	movs	r3, #1
 8003114:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800311a:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	4618      	mov	r0, r3
 8003120:	f003 f866 	bl	80061f0 <HAL_RCCEx_PeriphCLKConfig>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <SystemClock_Config+0xc6>
		Error_Handler();
 800312a:	f000 f9f4 	bl	8003516 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800312e:	4b03      	ldr	r3, [pc, #12]	; (800313c <SystemClock_Config+0xd4>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	bf00      	nop
 8003136:	3770      	adds	r7, #112	; 0x70
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	42420070 	.word	0x42420070

08003140 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <MX_I2C1_Init+0x50>)
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <MX_I2C1_Init+0x54>)
 8003148:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <MX_I2C1_Init+0x50>)
 800314c:	4a12      	ldr	r2, [pc, #72]	; (8003198 <MX_I2C1_Init+0x58>)
 800314e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <MX_I2C1_Init+0x50>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <MX_I2C1_Init+0x50>)
 8003158:	2200      	movs	r2, #0
 800315a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <MX_I2C1_Init+0x50>)
 800315e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003162:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <MX_I2C1_Init+0x50>)
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <MX_I2C1_Init+0x50>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <MX_I2C1_Init+0x50>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <MX_I2C1_Init+0x50>)
 8003178:	2200      	movs	r2, #0
 800317a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800317c:	4804      	ldr	r0, [pc, #16]	; (8003190 <MX_I2C1_Init+0x50>)
 800317e:	f000 feff 	bl	8003f80 <HAL_I2C_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8003188:	f000 f9c5 	bl	8003516 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000118 	.word	0x20000118
 8003194:	40005400 	.word	0x40005400
 8003198:	000186a0 	.word	0x000186a0

0800319c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	2100      	movs	r1, #0
 80031a8:	460a      	mov	r2, r1
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	460a      	mov	r2, r1
 80031ae:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = { 0 };
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
	RTC_AlarmTypeDef sAlarm = { 0 };
 80031b4:	463b      	mov	r3, r7
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <MX_RTC_Init+0xc0>)
 80031be:	4a28      	ldr	r2, [pc, #160]	; (8003260 <MX_RTC_Init+0xc4>)
 80031c0:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <MX_RTC_Init+0xc0>)
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c8:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <MX_RTC_Init+0xc0>)
 80031cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031d0:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80031d2:	4822      	ldr	r0, [pc, #136]	; (800325c <MX_RTC_Init+0xc0>)
 80031d4:	f003 faa2 	bl	800671c <HAL_RTC_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_RTC_Init+0x46>
		Error_Handler();
 80031de:	f000 f99a 	bl	8003516 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73bb      	strb	r3, [r7, #14]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	2200      	movs	r2, #0
 80031f4:	4619      	mov	r1, r3
 80031f6:	4819      	ldr	r0, [pc, #100]	; (800325c <MX_RTC_Init+0xc0>)
 80031f8:	f003 fb26 	bl	8006848 <HAL_RTC_SetTime>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_RTC_Init+0x6a>
		Error_Handler();
 8003202:	f000 f988 	bl	8003516 <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003206:	2301      	movs	r3, #1
 8003208:	723b      	strb	r3, [r7, #8]
	DateToUpdate.Month = RTC_MONTH_JANUARY;
 800320a:	2301      	movs	r3, #1
 800320c:	727b      	strb	r3, [r7, #9]
	DateToUpdate.Date = 1;
 800320e:	2301      	movs	r3, #1
 8003210:	72bb      	strb	r3, [r7, #10]
	DateToUpdate.Year = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	72fb      	strb	r3, [r7, #11]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK) {
 8003216:	f107 0308 	add.w	r3, r7, #8
 800321a:	2200      	movs	r2, #0
 800321c:	4619      	mov	r1, r3
 800321e:	480f      	ldr	r0, [pc, #60]	; (800325c <MX_RTC_Init+0xc0>)
 8003220:	f003 fc82 	bl	8006b28 <HAL_RTC_SetDate>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_RTC_Init+0x92>
		Error_Handler();
 800322a:	f000 f974 	bl	8003516 <Error_Handler>
	}
	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 3;
 800322e:	2303      	movs	r3, #3
 8003230:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	70bb      	strb	r3, [r7, #2]
	sAlarm.Alarm = RTC_ALARM_A;
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 800323e:	463b      	mov	r3, r7
 8003240:	2200      	movs	r2, #0
 8003242:	4619      	mov	r1, r3
 8003244:	4805      	ldr	r0, [pc, #20]	; (800325c <MX_RTC_Init+0xc0>)
 8003246:	f003 fd25 	bl	8006c94 <HAL_RTC_SetAlarm_IT>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_RTC_Init+0xb8>
		Error_Handler();
 8003250:	f000 f961 	bl	8003516 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000180 	.word	0x20000180
 8003260:	40002800 	.word	0x40002800

08003264 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003268:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <MX_SPI1_Init+0x64>)
 800326a:	4a18      	ldr	r2, [pc, #96]	; (80032cc <MX_SPI1_Init+0x68>)
 800326c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <MX_SPI1_Init+0x64>)
 8003270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003274:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003276:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <MX_SPI1_Init+0x64>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <MX_SPI1_Init+0x64>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <MX_SPI1_Init+0x64>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003288:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <MX_SPI1_Init+0x64>)
 800328a:	2200      	movs	r2, #0
 800328c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <MX_SPI1_Init+0x64>)
 8003290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003294:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <MX_SPI1_Init+0x64>)
 8003298:	2230      	movs	r2, #48	; 0x30
 800329a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <MX_SPI1_Init+0x64>)
 800329e:	2200      	movs	r2, #0
 80032a0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <MX_SPI1_Init+0x64>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <MX_SPI1_Init+0x64>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80032ae:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <MX_SPI1_Init+0x64>)
 80032b0:	220a      	movs	r2, #10
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80032b4:	4804      	ldr	r0, [pc, #16]	; (80032c8 <MX_SPI1_Init+0x64>)
 80032b6:	f004 f86b 	bl	8007390 <HAL_SPI_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80032c0:	f000 f929 	bl	8003516 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000214 	.word	0x20000214
 80032cc:	40013000 	.word	0x40013000

080032d0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	; 0x28
 80032d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80032d6:	f107 0318 	add.w	r3, r7, #24
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80032e4:	f107 0310 	add.w	r3, r7, #16
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80032ee:	463b      	mov	r3, r7
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80032fa:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <MX_TIM1_Init+0xf4>)
 80032fc:	4a32      	ldr	r2, [pc, #200]	; (80033c8 <MX_TIM1_Init+0xf8>)
 80032fe:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <MX_TIM1_Init+0xf4>)
 8003302:	2247      	movs	r2, #71	; 0x47
 8003304:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003306:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <MX_TIM1_Init+0xf4>)
 8003308:	2200      	movs	r2, #0
 800330a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535 - 1;
 800330c:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <MX_TIM1_Init+0xf4>)
 800330e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003312:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003314:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <MX_TIM1_Init+0xf4>)
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800331a:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <MX_TIM1_Init+0xf4>)
 800331c:	2200      	movs	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003320:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <MX_TIM1_Init+0xf4>)
 8003322:	2200      	movs	r2, #0
 8003324:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8003326:	4827      	ldr	r0, [pc, #156]	; (80033c4 <MX_TIM1_Init+0xf4>)
 8003328:	f004 fbfe 	bl	8007b28 <HAL_TIM_Base_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM1_Init+0x66>
		Error_Handler();
 8003332:	f000 f8f0 	bl	8003516 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800333c:	f107 0318 	add.w	r3, r7, #24
 8003340:	4619      	mov	r1, r3
 8003342:	4820      	ldr	r0, [pc, #128]	; (80033c4 <MX_TIM1_Init+0xf4>)
 8003344:	f004 fecc 	bl	80080e0 <HAL_TIM_ConfigClockSource>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM1_Init+0x82>
		Error_Handler();
 800334e:	f000 f8e2 	bl	8003516 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8003352:	481c      	ldr	r0, [pc, #112]	; (80033c4 <MX_TIM1_Init+0xf4>)
 8003354:	f004 fc13 	bl	8007b7e <HAL_TIM_IC_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM1_Init+0x92>
		Error_Handler();
 800335e:	f000 f8da 	bl	8003516 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800336a:	f107 0310 	add.w	r3, r7, #16
 800336e:	4619      	mov	r1, r3
 8003370:	4814      	ldr	r0, [pc, #80]	; (80033c4 <MX_TIM1_Init+0xf4>)
 8003372:	f005 fa0e 	bl	8008792 <HAL_TIMEx_MasterConfigSynchronization>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_TIM1_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800337c:	f000 f8cb 	bl	8003516 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003380:	2300      	movs	r3, #0
 8003382:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003384:	2301      	movs	r3, #1
 8003386:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003390:	463b      	mov	r3, r7
 8003392:	2200      	movs	r2, #0
 8003394:	4619      	mov	r1, r3
 8003396:	480b      	ldr	r0, [pc, #44]	; (80033c4 <MX_TIM1_Init+0xf4>)
 8003398:	f004 fe06 	bl	8007fa8 <HAL_TIM_IC_ConfigChannel>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM1_Init+0xd6>
		Error_Handler();
 80033a2:	f000 f8b8 	bl	8003516 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80033a6:	463b      	mov	r3, r7
 80033a8:	2204      	movs	r2, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	4805      	ldr	r0, [pc, #20]	; (80033c4 <MX_TIM1_Init+0xf4>)
 80033ae:	f004 fdfb 	bl	8007fa8 <HAL_TIM_IC_ConfigChannel>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM1_Init+0xec>
		Error_Handler();
 80033b8:	f000 f8ad 	bl	8003516 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80033bc:	bf00      	nop
 80033be:	3728      	adds	r7, #40	; 0x28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	200001b4 	.word	0x200001b4
 80033c8:	40012c00 	.word	0x40012c00

080033cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80033d2:	f107 0310 	add.w	r3, r7, #16
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80033e0:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <MX_GPIO_Init+0x10c>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	4a3c      	ldr	r2, [pc, #240]	; (80034d8 <MX_GPIO_Init+0x10c>)
 80033e6:	f043 0310 	orr.w	r3, r3, #16
 80033ea:	6193      	str	r3, [r2, #24]
 80033ec:	4b3a      	ldr	r3, [pc, #232]	; (80034d8 <MX_GPIO_Init+0x10c>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80033f8:	4b37      	ldr	r3, [pc, #220]	; (80034d8 <MX_GPIO_Init+0x10c>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	4a36      	ldr	r2, [pc, #216]	; (80034d8 <MX_GPIO_Init+0x10c>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	6193      	str	r3, [r2, #24]
 8003404:	4b34      	ldr	r3, [pc, #208]	; (80034d8 <MX_GPIO_Init+0x10c>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003410:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <MX_GPIO_Init+0x10c>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4a30      	ldr	r2, [pc, #192]	; (80034d8 <MX_GPIO_Init+0x10c>)
 8003416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341a:	6193      	str	r3, [r2, #24]
 800341c:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <MX_GPIO_Init+0x10c>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <MX_GPIO_Init+0x10c>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	4a2a      	ldr	r2, [pc, #168]	; (80034d8 <MX_GPIO_Init+0x10c>)
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	6193      	str	r3, [r2, #24]
 8003434:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <MX_GPIO_Init+0x10c>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LoRa_NSS_GPIO_Port, LoRa_NSS_Pin, GPIO_PIN_RESET);
 8003440:	2200      	movs	r2, #0
 8003442:	2110      	movs	r1, #16
 8003444:	4825      	ldr	r0, [pc, #148]	; (80034dc <MX_GPIO_Init+0x110>)
 8003446:	f000 fd82 	bl	8003f4e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LoRa_RST_GPIO_Port, LoRa_RST_Pin, GPIO_PIN_RESET);
 800344a:	2200      	movs	r2, #0
 800344c:	2110      	movs	r1, #16
 800344e:	4824      	ldr	r0, [pc, #144]	; (80034e0 <MX_GPIO_Init+0x114>)
 8003450:	f000 fd7d 	bl	8003f4e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, X_axis_trigger_Pin | Y_axis_trigger_Pin,
 8003454:	2200      	movs	r2, #0
 8003456:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800345a:	4822      	ldr	r0, [pc, #136]	; (80034e4 <MX_GPIO_Init+0x118>)
 800345c:	f000 fd77 	bl	8003f4e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LoRa_NSS_Pin */
	GPIO_InitStruct.Pin = LoRa_NSS_Pin;
 8003460:	2310      	movs	r3, #16
 8003462:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003464:	2301      	movs	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346c:	2302      	movs	r3, #2
 800346e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LoRa_NSS_GPIO_Port, &GPIO_InitStruct);
 8003470:	f107 0310 	add.w	r3, r7, #16
 8003474:	4619      	mov	r1, r3
 8003476:	4819      	ldr	r0, [pc, #100]	; (80034dc <MX_GPIO_Init+0x110>)
 8003478:	f000 fbf8 	bl	8003c6c <HAL_GPIO_Init>

	/*Configure GPIO pin : LoRa_RST_Pin */
	GPIO_InitStruct.Pin = LoRa_RST_Pin;
 800347c:	2310      	movs	r3, #16
 800347e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003480:	2301      	movs	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2302      	movs	r3, #2
 800348a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LoRa_RST_GPIO_Port, &GPIO_InitStruct);
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	4619      	mov	r1, r3
 8003492:	4813      	ldr	r0, [pc, #76]	; (80034e0 <MX_GPIO_Init+0x114>)
 8003494:	f000 fbea 	bl	8003c6c <HAL_GPIO_Init>

	/*Configure GPIO pins : LoRa_DIO_Pin workingMode_Pin */
	GPIO_InitStruct.Pin = LoRa_DIO_Pin | workingMode_Pin;
 8003498:	2360      	movs	r3, #96	; 0x60
 800349a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a4:	f107 0310 	add.w	r3, r7, #16
 80034a8:	4619      	mov	r1, r3
 80034aa:	480d      	ldr	r0, [pc, #52]	; (80034e0 <MX_GPIO_Init+0x114>)
 80034ac:	f000 fbde 	bl	8003c6c <HAL_GPIO_Init>

	/*Configure GPIO pins : X_axis_trigger_Pin Y_axis_trigger_Pin */
	GPIO_InitStruct.Pin = X_axis_trigger_Pin | Y_axis_trigger_Pin;
 80034b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b6:	2301      	movs	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2302      	movs	r3, #2
 80034c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034c2:	f107 0310 	add.w	r3, r7, #16
 80034c6:	4619      	mov	r1, r3
 80034c8:	4806      	ldr	r0, [pc, #24]	; (80034e4 <MX_GPIO_Init+0x118>)
 80034ca:	f000 fbcf 	bl	8003c6c <HAL_GPIO_Init>

}
 80034ce:	bf00      	nop
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40010800 	.word	0x40010800
 80034e0:	40011000 	.word	0x40011000
 80034e4:	40011800 	.word	0x40011800

080034e8 <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief Timer Capture Callback
 * @param htim
 * @retval None
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	HCSR05_TIM_Callback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fe fd4b 	bl	8001f8c <HCSR05_TIM_Callback>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_RTC_AlarmAEventCallback>:
/**
 * @brief Alarm Event Callback Function
 * @param hrtc
 * @retval None
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8003506:	f7ff fdaf 	bl	8003068 <SystemClock_Config>
	HAL_ResumeTick();
 800350a:	f000 fa93 	bl	8003a34 <HAL_ResumeTick>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
	...

08003524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_MspInit+0x5c>)
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	4a14      	ldr	r2, [pc, #80]	; (8003580 <HAL_MspInit+0x5c>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6193      	str	r3, [r2, #24]
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_MspInit+0x5c>)
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <HAL_MspInit+0x5c>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <HAL_MspInit+0x5c>)
 8003548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354c:	61d3      	str	r3, [r2, #28]
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_MspInit+0x5c>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_MspInit+0x60>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_MspInit+0x60>)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40021000 	.word	0x40021000
 8003584:	40010000 	.word	0x40010000

08003588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <HAL_I2C_MspInit+0x90>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d132      	bne.n	800360e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a8:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_I2C_MspInit+0x94>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_I2C_MspInit+0x94>)
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	6193      	str	r3, [r2, #24]
 80035b4:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_I2C_MspInit+0x94>)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035c6:	2312      	movs	r3, #18
 80035c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	4619      	mov	r1, r3
 80035d4:	4812      	ldr	r0, [pc, #72]	; (8003620 <HAL_I2C_MspInit+0x98>)
 80035d6:	f000 fb49 	bl	8003c6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_I2C_MspInit+0x9c>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
 80035f0:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <HAL_I2C_MspInit+0x9c>)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_I2C_MspInit+0x94>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <HAL_I2C_MspInit+0x94>)
 80035fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003600:	61d3      	str	r3, [r2, #28]
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_I2C_MspInit+0x94>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800360e:	bf00      	nop
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40005400 	.word	0x40005400
 800361c:	40021000 	.word	0x40021000
 8003620:	40010c00 	.word	0x40010c00
 8003624:	40010000 	.word	0x40010000

08003628 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <HAL_RTC_MspInit+0x4c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d118      	bne.n	800366c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800363a:	f002 f88f 	bl	800575c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <HAL_RTC_MspInit+0x50>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <HAL_RTC_MspInit+0x50>)
 8003644:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003648:	61d3      	str	r3, [r2, #28]
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RTC_MspInit+0x50>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RTC_MspInit+0x54>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	2100      	movs	r1, #0
 8003660:	2029      	movs	r0, #41	; 0x29
 8003662:	f000 facc 	bl	8003bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8003666:	2029      	movs	r0, #41	; 0x29
 8003668:	f000 fae5 	bl	8003c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40002800 	.word	0x40002800
 8003678:	40021000 	.word	0x40021000
 800367c:	4242043c 	.word	0x4242043c

08003680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 0310 	add.w	r3, r7, #16
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_SPI_MspInit+0x88>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d12f      	bne.n	8003700 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <HAL_SPI_MspInit+0x8c>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_SPI_MspInit+0x8c>)
 80036a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036aa:	6193      	str	r3, [r2, #24]
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <HAL_SPI_MspInit+0x8c>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_SPI_MspInit+0x8c>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	4a13      	ldr	r2, [pc, #76]	; (800370c <HAL_SPI_MspInit+0x8c>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	6193      	str	r3, [r2, #24]
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <HAL_SPI_MspInit+0x8c>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80036d0:	23a0      	movs	r3, #160	; 0xa0
 80036d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036d8:	2303      	movs	r3, #3
 80036da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036dc:	f107 0310 	add.w	r3, r7, #16
 80036e0:	4619      	mov	r1, r3
 80036e2:	480b      	ldr	r0, [pc, #44]	; (8003710 <HAL_SPI_MspInit+0x90>)
 80036e4:	f000 fac2 	bl	8003c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036e8:	2340      	movs	r3, #64	; 0x40
 80036ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	4619      	mov	r1, r3
 80036fa:	4805      	ldr	r0, [pc, #20]	; (8003710 <HAL_SPI_MspInit+0x90>)
 80036fc:	f000 fab6 	bl	8003c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003700:	bf00      	nop
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40013000 	.word	0x40013000
 800370c:	40021000 	.word	0x40021000
 8003710:	40010800 	.word	0x40010800

08003714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a23      	ldr	r2, [pc, #140]	; (80037bc <HAL_TIM_Base_MspInit+0xa8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d13e      	bne.n	80037b2 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_TIM_Base_MspInit+0xac>)
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	4a21      	ldr	r2, [pc, #132]	; (80037c0 <HAL_TIM_Base_MspInit+0xac>)
 800373a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800373e:	6193      	str	r3, [r2, #24]
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_TIM_Base_MspInit+0xac>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_TIM_Base_MspInit+0xac>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_TIM_Base_MspInit+0xac>)
 8003752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003756:	6193      	str	r3, [r2, #24]
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_TIM_Base_MspInit+0xac>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = X_axis_echo_Pin|Y_axis_echo_Pin;
 8003764:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	4619      	mov	r1, r3
 8003778:	4812      	ldr	r0, [pc, #72]	; (80037c4 <HAL_TIM_Base_MspInit+0xb0>)
 800377a:	f000 fa77 	bl	8003c6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_TIM_Base_MspInit+0xb4>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
 800379c:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <HAL_TIM_Base_MspInit+0xb4>)
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	6053      	str	r3, [r2, #4]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80037a2:	2200      	movs	r2, #0
 80037a4:	2100      	movs	r1, #0
 80037a6:	201b      	movs	r0, #27
 80037a8:	f000 fa29 	bl	8003bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80037ac:	201b      	movs	r0, #27
 80037ae:	f000 fa42 	bl	8003c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80037b2:	bf00      	nop
 80037b4:	3728      	adds	r7, #40	; 0x28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40011800 	.word	0x40011800
 80037c8:	40010000 	.word	0x40010000

080037cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr

080037d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <HardFault_Handler+0x4>

080037de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <MemManage_Handler+0x4>

080037e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <BusFault_Handler+0x4>

080037ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037ee:	e7fe      	b.n	80037ee <UsageFault_Handler+0x4>

080037f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003818:	f000 f8c0 	bl	800399c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}

08003820 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003824:	4802      	ldr	r0, [pc, #8]	; (8003830 <TIM1_CC_IRQHandler+0x10>)
 8003826:	f004 fab7 	bl	8007d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200001b4 	.word	0x200001b4

08003834 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003838:	4802      	ldr	r0, [pc, #8]	; (8003844 <RTC_Alarm_IRQHandler+0x10>)
 800383a:	f003 fadf 	bl	8006dfc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000180 	.word	0x20000180

08003848 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <SystemInit+0x70>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <SystemInit+0x70>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8003858:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <SystemInit+0x70>)
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	4916      	ldr	r1, [pc, #88]	; (80038b8 <SystemInit+0x70>)
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <SystemInit+0x74>)
 8003860:	4013      	ands	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003864:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <SystemInit+0x70>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <SystemInit+0x70>)
 800386a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800386e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003874:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <SystemInit+0x70>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <SystemInit+0x70>)
 800387a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <SystemInit+0x70>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <SystemInit+0x70>)
 8003886:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800388a:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <SystemInit+0x70>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <SystemInit+0x70>)
 8003892:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003896:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8003898:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <SystemInit+0x70>)
 800389a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800389e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SystemInit+0x70>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <SystemInit+0x78>)
 80038a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038ac:	609a      	str	r2, [r3, #8]
#endif 
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40021000 	.word	0x40021000
 80038bc:	f0ff0000 	.word	0xf0ff0000
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80038c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80038c6:	e003      	b.n	80038d0 <LoopCopyDataInit>

080038c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80038ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80038cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80038ce:	3104      	adds	r1, #4

080038d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80038d0:	480a      	ldr	r0, [pc, #40]	; (80038fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80038d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80038d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80038d8:	d3f6      	bcc.n	80038c8 <CopyDataInit>
  ldr r2, =_sbss
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80038dc:	e002      	b.n	80038e4 <LoopFillZerobss>

080038de <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80038de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80038e0:	f842 3b04 	str.w	r3, [r2], #4

080038e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80038e4:	4b08      	ldr	r3, [pc, #32]	; (8003908 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80038e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80038e8:	d3f9      	bcc.n	80038de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80038ea:	f7ff ffad 	bl	8003848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038ee:	f004 ffad 	bl	800884c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038f2:	f7ff fa89 	bl	8002e08 <main>
  bx lr
 80038f6:	4770      	bx	lr
  ldr r3, =_sidata
 80038f8:	0800a5d0 	.word	0x0800a5d0
  ldr r0, =_sdata
 80038fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003900:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8003904:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003908:	200003a0 	.word	0x200003a0

0800390c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800390c:	e7fe      	b.n	800390c <ADC1_2_IRQHandler>
	...

08003910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <HAL_Init+0x28>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a07      	ldr	r2, [pc, #28]	; (8003938 <HAL_Init+0x28>)
 800391a:	f043 0310 	orr.w	r3, r3, #16
 800391e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003920:	2003      	movs	r0, #3
 8003922:	f000 f961 	bl	8003be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003926:	2000      	movs	r0, #0
 8003928:	f000 f808 	bl	800393c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800392c:	f7ff fdfa 	bl	8003524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40022000 	.word	0x40022000

0800393c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_InitTick+0x54>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_InitTick+0x58>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003952:	fbb3 f3f1 	udiv	r3, r3, r1
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	4618      	mov	r0, r3
 800395c:	f000 f979 	bl	8003c52 <HAL_SYSTICK_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e00e      	b.n	8003988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b0f      	cmp	r3, #15
 800396e:	d80a      	bhi.n	8003986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003970:	2200      	movs	r2, #0
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003978:	f000 f941 	bl	8003bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800397c:	4a06      	ldr	r2, [pc, #24]	; (8003998 <HAL_InitTick+0x5c>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000004 	.word	0x20000004
 8003994:	2000000c 	.word	0x2000000c
 8003998:	20000008 	.word	0x20000008

0800399c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_IncTick+0x1c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_IncTick+0x20>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4413      	add	r3, r2
 80039ac:	4a03      	ldr	r2, [pc, #12]	; (80039bc <HAL_IncTick+0x20>)
 80039ae:	6013      	str	r3, [r2, #0]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	2000000c 	.word	0x2000000c
 80039bc:	2000039c 	.word	0x2000039c

080039c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return uwTick;
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <HAL_GetTick+0x10>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	2000039c 	.word	0x2000039c

080039d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff fff0 	bl	80039c0 <HAL_GetTick>
 80039e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ec:	d005      	beq.n	80039fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_Delay+0x40>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fa:	bf00      	nop
 80039fc:	f7ff ffe0 	bl	80039c0 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d8f7      	bhi.n	80039fc <HAL_Delay+0x28>
  {
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	2000000c 	.word	0x2000000c

08003a18 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <HAL_SuspendTick+0x18>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <HAL_SuspendTick+0x18>)
 8003a22:	f023 0302 	bic.w	r3, r3, #2
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	e000e010 	.word	0xe000e010

08003a34 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_ResumeTick+0x18>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a03      	ldr	r2, [pc, #12]	; (8003a4c <HAL_ResumeTick+0x18>)
 8003a3e:	f043 0302 	orr.w	r3, r3, #2
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e010 	.word	0xe000e010

08003a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0307 	and.w	r3, r3, #7
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db0b      	blt.n	8003ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4906      	ldr	r1, [pc, #24]	; (8003ae8 <__NVIC_EnableIRQ+0x34>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e100 	.word	0xe000e100

08003aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	db0a      	blt.n	8003b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	490c      	ldr	r1, [pc, #48]	; (8003b38 <__NVIC_SetPriority+0x4c>)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	0112      	lsls	r2, r2, #4
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b14:	e00a      	b.n	8003b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4908      	ldr	r1, [pc, #32]	; (8003b3c <__NVIC_SetPriority+0x50>)
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	3b04      	subs	r3, #4
 8003b24:	0112      	lsls	r2, r2, #4
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	440b      	add	r3, r1
 8003b2a:	761a      	strb	r2, [r3, #24]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000e100 	.word	0xe000e100
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	; 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f1c3 0307 	rsb	r3, r3, #7
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	bf28      	it	cs
 8003b5e:	2304      	movcs	r3, #4
 8003b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d902      	bls.n	8003b70 <NVIC_EncodePriority+0x30>
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3b03      	subs	r3, #3
 8003b6e:	e000      	b.n	8003b72 <NVIC_EncodePriority+0x32>
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	401a      	ands	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	43d9      	mvns	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b98:	4313      	orrs	r3, r2
         );
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3724      	adds	r7, #36	; 0x24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bb4:	d301      	bcc.n	8003bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e00f      	b.n	8003bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <SysTick_Config+0x40>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bc2:	210f      	movs	r1, #15
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bc8:	f7ff ff90 	bl	8003aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bcc:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <SysTick_Config+0x40>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bd2:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <SysTick_Config+0x40>)
 8003bd4:	2207      	movs	r2, #7
 8003bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	e000e010 	.word	0xe000e010

08003be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ff2d 	bl	8003a50 <__NVIC_SetPriorityGrouping>
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b086      	sub	sp, #24
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	4603      	mov	r3, r0
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c10:	f7ff ff42 	bl	8003a98 <__NVIC_GetPriorityGrouping>
 8003c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	6978      	ldr	r0, [r7, #20]
 8003c1c:	f7ff ff90 	bl	8003b40 <NVIC_EncodePriority>
 8003c20:	4602      	mov	r2, r0
 8003c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff5f 	bl	8003aec <__NVIC_SetPriority>
}
 8003c2e:	bf00      	nop
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff35 	bl	8003ab4 <__NVIC_EnableIRQ>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ffa2 	bl	8003ba4 <SysTick_Config>
 8003c60:	4603      	mov	r3, r0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b08b      	sub	sp, #44	; 0x2c
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c7e:	e127      	b.n	8003ed0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c80:	2201      	movs	r2, #1
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 8116 	bne.w	8003eca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b12      	cmp	r3, #18
 8003ca4:	d034      	beq.n	8003d10 <HAL_GPIO_Init+0xa4>
 8003ca6:	2b12      	cmp	r3, #18
 8003ca8:	d80d      	bhi.n	8003cc6 <HAL_GPIO_Init+0x5a>
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d02b      	beq.n	8003d06 <HAL_GPIO_Init+0x9a>
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d804      	bhi.n	8003cbc <HAL_GPIO_Init+0x50>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d031      	beq.n	8003d1a <HAL_GPIO_Init+0xae>
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d01c      	beq.n	8003cf4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cba:	e048      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d043      	beq.n	8003d48 <HAL_GPIO_Init+0xdc>
 8003cc0:	2b11      	cmp	r3, #17
 8003cc2:	d01b      	beq.n	8003cfc <HAL_GPIO_Init+0x90>
          break;
 8003cc4:	e043      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003cc6:	4a89      	ldr	r2, [pc, #548]	; (8003eec <HAL_GPIO_Init+0x280>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d026      	beq.n	8003d1a <HAL_GPIO_Init+0xae>
 8003ccc:	4a87      	ldr	r2, [pc, #540]	; (8003eec <HAL_GPIO_Init+0x280>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d806      	bhi.n	8003ce0 <HAL_GPIO_Init+0x74>
 8003cd2:	4a87      	ldr	r2, [pc, #540]	; (8003ef0 <HAL_GPIO_Init+0x284>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d020      	beq.n	8003d1a <HAL_GPIO_Init+0xae>
 8003cd8:	4a86      	ldr	r2, [pc, #536]	; (8003ef4 <HAL_GPIO_Init+0x288>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_GPIO_Init+0xae>
          break;
 8003cde:	e036      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ce0:	4a85      	ldr	r2, [pc, #532]	; (8003ef8 <HAL_GPIO_Init+0x28c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d019      	beq.n	8003d1a <HAL_GPIO_Init+0xae>
 8003ce6:	4a85      	ldr	r2, [pc, #532]	; (8003efc <HAL_GPIO_Init+0x290>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d016      	beq.n	8003d1a <HAL_GPIO_Init+0xae>
 8003cec:	4a84      	ldr	r2, [pc, #528]	; (8003f00 <HAL_GPIO_Init+0x294>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_GPIO_Init+0xae>
          break;
 8003cf2:	e02c      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	623b      	str	r3, [r7, #32]
          break;
 8003cfa:	e028      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	3304      	adds	r3, #4
 8003d02:	623b      	str	r3, [r7, #32]
          break;
 8003d04:	e023      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	623b      	str	r3, [r7, #32]
          break;
 8003d0e:	e01e      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	330c      	adds	r3, #12
 8003d16:	623b      	str	r3, [r7, #32]
          break;
 8003d18:	e019      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d22:	2304      	movs	r3, #4
 8003d24:	623b      	str	r3, [r7, #32]
          break;
 8003d26:	e012      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d105      	bne.n	8003d3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d30:	2308      	movs	r3, #8
 8003d32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	611a      	str	r2, [r3, #16]
          break;
 8003d3a:	e008      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	615a      	str	r2, [r3, #20]
          break;
 8003d46:	e002      	b.n	8003d4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	623b      	str	r3, [r7, #32]
          break;
 8003d4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2bff      	cmp	r3, #255	; 0xff
 8003d52:	d801      	bhi.n	8003d58 <HAL_GPIO_Init+0xec>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	e001      	b.n	8003d5c <HAL_GPIO_Init+0xf0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2bff      	cmp	r3, #255	; 0xff
 8003d62:	d802      	bhi.n	8003d6a <HAL_GPIO_Init+0xfe>
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_Init+0x104>
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	3b08      	subs	r3, #8
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	210f      	movs	r1, #15
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	401a      	ands	r2, r3
 8003d82:	6a39      	ldr	r1, [r7, #32]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8096 	beq.w	8003eca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d9e:	4b59      	ldr	r3, [pc, #356]	; (8003f04 <HAL_GPIO_Init+0x298>)
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	4a58      	ldr	r2, [pc, #352]	; (8003f04 <HAL_GPIO_Init+0x298>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6193      	str	r3, [r2, #24]
 8003daa:	4b56      	ldr	r3, [pc, #344]	; (8003f04 <HAL_GPIO_Init+0x298>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003db6:	4a54      	ldr	r2, [pc, #336]	; (8003f08 <HAL_GPIO_Init+0x29c>)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	220f      	movs	r2, #15
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4b      	ldr	r2, [pc, #300]	; (8003f0c <HAL_GPIO_Init+0x2a0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <HAL_GPIO_Init+0x19e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4a      	ldr	r2, [pc, #296]	; (8003f10 <HAL_GPIO_Init+0x2a4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00d      	beq.n	8003e06 <HAL_GPIO_Init+0x19a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a49      	ldr	r2, [pc, #292]	; (8003f14 <HAL_GPIO_Init+0x2a8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <HAL_GPIO_Init+0x196>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a48      	ldr	r2, [pc, #288]	; (8003f18 <HAL_GPIO_Init+0x2ac>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_GPIO_Init+0x192>
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x1a0>
 8003dfe:	2304      	movs	r3, #4
 8003e00:	e004      	b.n	8003e0c <HAL_GPIO_Init+0x1a0>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e002      	b.n	8003e0c <HAL_GPIO_Init+0x1a0>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_GPIO_Init+0x1a0>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0e:	f002 0203 	and.w	r2, r2, #3
 8003e12:	0092      	lsls	r2, r2, #2
 8003e14:	4093      	lsls	r3, r2
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e1c:	493a      	ldr	r1, [pc, #232]	; (8003f08 <HAL_GPIO_Init+0x29c>)
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4938      	ldr	r1, [pc, #224]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
 8003e42:	e006      	b.n	8003e52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e44:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	4933      	ldr	r1, [pc, #204]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d006      	beq.n	8003e6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e5e:	4b2f      	ldr	r3, [pc, #188]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	492e      	ldr	r1, [pc, #184]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	604b      	str	r3, [r1, #4]
 8003e6a:	e006      	b.n	8003e7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	4929      	ldr	r1, [pc, #164]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d006      	beq.n	8003e94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e86:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	4924      	ldr	r1, [pc, #144]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
 8003e92:	e006      	b.n	8003ea2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e94:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	491f      	ldr	r1, [pc, #124]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003eae:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	491a      	ldr	r1, [pc, #104]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60cb      	str	r3, [r1, #12]
 8003eba:	e006      	b.n	8003eca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ebc:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4915      	ldr	r1, [pc, #84]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	3301      	adds	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f47f aed0 	bne.w	8003c80 <HAL_GPIO_Init+0x14>
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	372c      	adds	r7, #44	; 0x2c
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	10210000 	.word	0x10210000
 8003ef0:	10110000 	.word	0x10110000
 8003ef4:	10120000 	.word	0x10120000
 8003ef8:	10310000 	.word	0x10310000
 8003efc:	10320000 	.word	0x10320000
 8003f00:	10220000 	.word	0x10220000
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40010800 	.word	0x40010800
 8003f10:	40010c00 	.word	0x40010c00
 8003f14:	40011000 	.word	0x40011000
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	40010400 	.word	0x40010400

08003f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	e001      	b.n	8003f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	807b      	strh	r3, [r7, #2]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f5e:	787b      	ldrb	r3, [r7, #1]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f64:	887a      	ldrh	r2, [r7, #2]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f6a:	e003      	b.n	8003f74 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f6c:	887b      	ldrh	r3, [r7, #2]
 8003f6e:	041a      	lsls	r2, r3, #16
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	611a      	str	r2, [r3, #16]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e10f      	b.n	80041b2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff faee 	bl	8003588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2224      	movs	r2, #36	; 0x24
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f002 f8ce 	bl	8006164 <HAL_RCC_GetPCLK1Freq>
 8003fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4a7b      	ldr	r2, [pc, #492]	; (80041bc <HAL_I2C_Init+0x23c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d807      	bhi.n	8003fe4 <HAL_I2C_Init+0x64>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a7a      	ldr	r2, [pc, #488]	; (80041c0 <HAL_I2C_Init+0x240>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bf94      	ite	ls
 8003fdc:	2301      	movls	r3, #1
 8003fde:	2300      	movhi	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e006      	b.n	8003ff2 <HAL_I2C_Init+0x72>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a77      	ldr	r2, [pc, #476]	; (80041c4 <HAL_I2C_Init+0x244>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bf94      	ite	ls
 8003fec:	2301      	movls	r3, #1
 8003fee:	2300      	movhi	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e0db      	b.n	80041b2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4a72      	ldr	r2, [pc, #456]	; (80041c8 <HAL_I2C_Init+0x248>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	0c9b      	lsrs	r3, r3, #18
 8004004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4a64      	ldr	r2, [pc, #400]	; (80041bc <HAL_I2C_Init+0x23c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d802      	bhi.n	8004034 <HAL_I2C_Init+0xb4>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3301      	adds	r3, #1
 8004032:	e009      	b.n	8004048 <HAL_I2C_Init+0xc8>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	4a63      	ldr	r2, [pc, #396]	; (80041cc <HAL_I2C_Init+0x24c>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	3301      	adds	r3, #1
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	430b      	orrs	r3, r1
 800404e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800405a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4956      	ldr	r1, [pc, #344]	; (80041bc <HAL_I2C_Init+0x23c>)
 8004064:	428b      	cmp	r3, r1
 8004066:	d80d      	bhi.n	8004084 <HAL_I2C_Init+0x104>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1e59      	subs	r1, r3, #1
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	fbb1 f3f3 	udiv	r3, r1, r3
 8004076:	3301      	adds	r3, #1
 8004078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407c:	2b04      	cmp	r3, #4
 800407e:	bf38      	it	cc
 8004080:	2304      	movcc	r3, #4
 8004082:	e04f      	b.n	8004124 <HAL_I2C_Init+0x1a4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d111      	bne.n	80040b0 <HAL_I2C_Init+0x130>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1e58      	subs	r0, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	440b      	add	r3, r1
 800409a:	fbb0 f3f3 	udiv	r3, r0, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e012      	b.n	80040d6 <HAL_I2C_Init+0x156>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	1e58      	subs	r0, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6859      	ldr	r1, [r3, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	0099      	lsls	r1, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c6:	3301      	adds	r3, #1
 80040c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Init+0x15e>
 80040da:	2301      	movs	r3, #1
 80040dc:	e022      	b.n	8004124 <HAL_I2C_Init+0x1a4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10e      	bne.n	8004104 <HAL_I2C_Init+0x184>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1e58      	subs	r0, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6859      	ldr	r1, [r3, #4]
 80040ee:	460b      	mov	r3, r1
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	440b      	add	r3, r1
 80040f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004102:	e00f      	b.n	8004124 <HAL_I2C_Init+0x1a4>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1e58      	subs	r0, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	0099      	lsls	r1, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	fbb0 f3f3 	udiv	r3, r0, r3
 800411a:	3301      	adds	r3, #1
 800411c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	6809      	ldr	r1, [r1, #0]
 8004128:	4313      	orrs	r3, r2
 800412a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69da      	ldr	r2, [r3, #28]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6911      	ldr	r1, [r2, #16]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68d2      	ldr	r2, [r2, #12]
 800415e:	4311      	orrs	r1, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	430b      	orrs	r3, r1
 8004166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	000186a0 	.word	0x000186a0
 80041c0:	001e847f 	.word	0x001e847f
 80041c4:	003d08ff 	.word	0x003d08ff
 80041c8:	431bde83 	.word	0x431bde83
 80041cc:	10624dd3 	.word	0x10624dd3

080041d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	607a      	str	r2, [r7, #4]
 80041da:	461a      	mov	r2, r3
 80041dc:	460b      	mov	r3, r1
 80041de:	817b      	strh	r3, [r7, #10]
 80041e0:	4613      	mov	r3, r2
 80041e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041e4:	f7ff fbec 	bl	80039c0 <HAL_GetTick>
 80041e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b20      	cmp	r3, #32
 80041f4:	f040 80e0 	bne.w	80043b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	2319      	movs	r3, #25
 80041fe:	2201      	movs	r2, #1
 8004200:	4970      	ldr	r1, [pc, #448]	; (80043c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f001 f8c6 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
 8004210:	e0d3      	b.n	80043ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_I2C_Master_Transmit+0x50>
 800421c:	2302      	movs	r3, #2
 800421e:	e0cc      	b.n	80043ba <HAL_I2C_Master_Transmit+0x1ea>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d007      	beq.n	8004246 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004254:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2221      	movs	r2, #33	; 0x21
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2210      	movs	r2, #16
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	893a      	ldrh	r2, [r7, #8]
 8004276:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4a50      	ldr	r2, [pc, #320]	; (80043c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004286:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004288:	8979      	ldrh	r1, [r7, #10]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	6a3a      	ldr	r2, [r7, #32]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fdfa 	bl	8004e88 <I2C_MasterRequestWrite>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e08d      	b.n	80043ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042b4:	e066      	b.n	8004384 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	6a39      	ldr	r1, [r7, #32]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f001 f940 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d107      	bne.n	80042de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e06b      	b.n	80043ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b04      	cmp	r3, #4
 800431e:	d11b      	bne.n	8004358 <HAL_I2C_Master_Transmit+0x188>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004324:	2b00      	cmp	r3, #0
 8004326:	d017      	beq.n	8004358 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	6a39      	ldr	r1, [r7, #32]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f001 f930 	bl	80055c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00d      	beq.n	8004384 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	2b04      	cmp	r3, #4
 800436e:	d107      	bne.n	8004380 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e01a      	b.n	80043ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d194      	bne.n	80042b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e000      	b.n	80043ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
  }
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	00100002 	.word	0x00100002
 80043c8:	ffff0000 	.word	0xffff0000

080043cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08c      	sub	sp, #48	; 0x30
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	460b      	mov	r3, r1
 80043da:	817b      	strh	r3, [r7, #10]
 80043dc:	4613      	mov	r3, r2
 80043de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043e0:	f7ff faee 	bl	80039c0 <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	f040 8213 	bne.w	800481a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2319      	movs	r3, #25
 80043fa:	2201      	movs	r2, #1
 80043fc:	497e      	ldr	r1, [pc, #504]	; (80045f8 <HAL_I2C_Master_Receive+0x22c>)
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 ffc8 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
 800440c:	e206      	b.n	800481c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_I2C_Master_Receive+0x50>
 8004418:	2302      	movs	r3, #2
 800441a:	e1ff      	b.n	800481c <HAL_I2C_Master_Receive+0x450>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d007      	beq.n	8004442 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004450:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2222      	movs	r2, #34	; 0x22
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2210      	movs	r2, #16
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	893a      	ldrh	r2, [r7, #8]
 8004472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a5e      	ldr	r2, [pc, #376]	; (80045fc <HAL_I2C_Master_Receive+0x230>)
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004484:	8979      	ldrh	r1, [r7, #10]
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 fd72 	bl	8004f74 <I2C_MasterRequestRead>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e1c0      	b.n	800481c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d113      	bne.n	80044ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a2:	2300      	movs	r3, #0
 80044a4:	623b      	str	r3, [r7, #32]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	623b      	str	r3, [r7, #32]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e194      	b.n	80047f4 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d11d      	bne.n	800450e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044e2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004508:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800450a:	b662      	cpsie	i
 800450c:	e172      	b.n	80047f4 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004512:	2b02      	cmp	r3, #2
 8004514:	d11d      	bne.n	8004552 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004524:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004526:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800454e:	b662      	cpsie	i
 8004550:	e150      	b.n	80047f4 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004578:	e13c      	b.n	80047f4 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	2b03      	cmp	r3, #3
 8004580:	f200 80f5 	bhi.w	800476e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	2b01      	cmp	r3, #1
 800458a:	d123      	bne.n	80045d4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f001 f857 	bl	8005644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e13d      	b.n	800481c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045d2:	e10f      	b.n	80047f4 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d150      	bne.n	800467e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	2200      	movs	r2, #0
 80045e4:	4906      	ldr	r1, [pc, #24]	; (8004600 <HAL_I2C_Master_Receive+0x234>)
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fed4 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e112      	b.n	800481c <HAL_I2C_Master_Receive+0x450>
 80045f6:	bf00      	nop
 80045f8:	00100002 	.word	0x00100002
 80045fc:	ffff0000 	.word	0xffff0000
 8004600:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004604:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004614:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004648:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800467c:	e0ba      	b.n	80047f4 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	2200      	movs	r2, #0
 8004686:	4967      	ldr	r1, [pc, #412]	; (8004824 <HAL_I2C_Master_Receive+0x458>)
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fe83 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0c1      	b.n	800481c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046a8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	2200      	movs	r2, #0
 80046e4:	494f      	ldr	r1, [pc, #316]	; (8004824 <HAL_I2C_Master_Receive+0x458>)
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fe54 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e092      	b.n	800481c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004704:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004738:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800476c:	e042      	b.n	80047f4 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800476e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 ff66 	bl	8005644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e04c      	b.n	800481c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d118      	bne.n	80047f4 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f47f aebe 	bne.w	800457a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	e000      	b.n	800481c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800481a:	2302      	movs	r3, #2
  }
}
 800481c:	4618      	mov	r0, r3
 800481e:	3728      	adds	r7, #40	; 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	00010004 	.word	0x00010004

08004828 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	4608      	mov	r0, r1
 8004832:	4611      	mov	r1, r2
 8004834:	461a      	mov	r2, r3
 8004836:	4603      	mov	r3, r0
 8004838:	817b      	strh	r3, [r7, #10]
 800483a:	460b      	mov	r3, r1
 800483c:	813b      	strh	r3, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004842:	f7ff f8bd 	bl	80039c0 <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b20      	cmp	r3, #32
 8004852:	f040 80d9 	bne.w	8004a08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	2319      	movs	r3, #25
 800485c:	2201      	movs	r2, #1
 800485e:	496d      	ldr	r1, [pc, #436]	; (8004a14 <HAL_I2C_Mem_Write+0x1ec>)
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fd97 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
 800486e:	e0cc      	b.n	8004a0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_I2C_Mem_Write+0x56>
 800487a:	2302      	movs	r3, #2
 800487c:	e0c5      	b.n	8004a0a <HAL_I2C_Mem_Write+0x1e2>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b01      	cmp	r3, #1
 8004892:	d007      	beq.n	80048a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2221      	movs	r2, #33	; 0x21
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2240      	movs	r2, #64	; 0x40
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a3a      	ldr	r2, [r7, #32]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a4d      	ldr	r2, [pc, #308]	; (8004a18 <HAL_I2C_Mem_Write+0x1f0>)
 80048e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048e6:	88f8      	ldrh	r0, [r7, #6]
 80048e8:	893a      	ldrh	r2, [r7, #8]
 80048ea:	8979      	ldrh	r1, [r7, #10]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	4603      	mov	r3, r0
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fbf2 	bl	80050e0 <I2C_RequestMemoryWrite>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d052      	beq.n	80049a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e081      	b.n	8004a0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fe18 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b04      	cmp	r3, #4
 800491c:	d107      	bne.n	800492e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e06b      	b.n	8004a0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	781a      	ldrb	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b04      	cmp	r3, #4
 800496e:	d11b      	bne.n	80049a8 <HAL_I2C_Mem_Write+0x180>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004974:	2b00      	cmp	r3, #0
 8004976:	d017      	beq.n	80049a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1aa      	bne.n	8004906 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fe04 	bl	80055c2 <I2C_WaitOnBTFFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d107      	bne.n	80049d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e016      	b.n	8004a0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e000      	b.n	8004a0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	00100002 	.word	0x00100002
 8004a18:	ffff0000 	.word	0xffff0000

08004a1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b08c      	sub	sp, #48	; 0x30
 8004a20:	af02      	add	r7, sp, #8
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	817b      	strh	r3, [r7, #10]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	813b      	strh	r3, [r7, #8]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a36:	f7fe ffc3 	bl	80039c0 <HAL_GetTick>
 8004a3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	f040 8218 	bne.w	8004e7a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2319      	movs	r3, #25
 8004a50:	2201      	movs	r2, #1
 8004a52:	4981      	ldr	r1, [pc, #516]	; (8004c58 <HAL_I2C_Mem_Read+0x23c>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fc9d 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
 8004a62:	e20b      	b.n	8004e7c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_I2C_Mem_Read+0x56>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e204      	b.n	8004e7c <HAL_I2C_Mem_Read+0x460>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d007      	beq.n	8004a98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2222      	movs	r2, #34	; 0x22
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2240      	movs	r2, #64	; 0x40
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a61      	ldr	r2, [pc, #388]	; (8004c5c <HAL_I2C_Mem_Read+0x240>)
 8004ad8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ada:	88f8      	ldrh	r0, [r7, #6]
 8004adc:	893a      	ldrh	r2, [r7, #8]
 8004ade:	8979      	ldrh	r1, [r7, #10]
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4603      	mov	r3, r0
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fb82 	bl	80051f4 <I2C_RequestMemoryRead>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e1c0      	b.n	8004e7c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d113      	bne.n	8004b2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b02:	2300      	movs	r3, #0
 8004b04:	623b      	str	r3, [r7, #32]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	623b      	str	r3, [r7, #32]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e194      	b.n	8004e54 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d11d      	bne.n	8004b6e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b42:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b6a:	b662      	cpsie	i
 8004b6c:	e172      	b.n	8004e54 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d11d      	bne.n	8004bb2 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b86:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bae:	b662      	cpsie	i
 8004bb0:	e150      	b.n	8004e54 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bc0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bd8:	e13c      	b.n	8004e54 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	f200 80f5 	bhi.w	8004dce <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d123      	bne.n	8004c34 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fd27 	bl	8005644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e13d      	b.n	8004e7c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c32:	e10f      	b.n	8004e54 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d150      	bne.n	8004cde <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	2200      	movs	r2, #0
 8004c44:	4906      	ldr	r1, [pc, #24]	; (8004c60 <HAL_I2C_Mem_Read+0x244>)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fba4 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e112      	b.n	8004e7c <HAL_I2C_Mem_Read+0x460>
 8004c56:	bf00      	nop
 8004c58:	00100002 	.word	0x00100002
 8004c5c:	ffff0000 	.word	0xffff0000
 8004c60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004c64:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c74:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ca8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cdc:	e0ba      	b.n	8004e54 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4967      	ldr	r1, [pc, #412]	; (8004e84 <HAL_I2C_Mem_Read+0x468>)
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fb53 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0c1      	b.n	8004e7c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d08:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d42:	2200      	movs	r2, #0
 8004d44:	494f      	ldr	r1, [pc, #316]	; (8004e84 <HAL_I2C_Mem_Read+0x468>)
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 fb24 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e092      	b.n	8004e7c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d64:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d98:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dcc:	e042      	b.n	8004e54 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fc36 	bl	8005644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e04c      	b.n	8004e7c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d118      	bne.n	8004e54 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f47f aebe 	bne.w	8004bda <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3728      	adds	r7, #40	; 0x28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	00010004 	.word	0x00010004

08004e88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	460b      	mov	r3, r1
 8004e96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d006      	beq.n	8004eb2 <I2C_MasterRequestWrite+0x2a>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d003      	beq.n	8004eb2 <I2C_MasterRequestWrite+0x2a>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eb0:	d108      	bne.n	8004ec4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e00b      	b.n	8004edc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	2b12      	cmp	r3, #18
 8004eca:	d107      	bne.n	8004edc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fa53 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e035      	b.n	8004f64 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f00:	d108      	bne.n	8004f14 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f02:	897b      	ldrh	r3, [r7, #10]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f10:	611a      	str	r2, [r3, #16]
 8004f12:	e01b      	b.n	8004f4c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f14:	897b      	ldrh	r3, [r7, #10]
 8004f16:	11db      	asrs	r3, r3, #7
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0306 	and.w	r3, r3, #6
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f063 030f 	orn	r3, r3, #15
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	490e      	ldr	r1, [pc, #56]	; (8004f6c <I2C_MasterRequestWrite+0xe4>)
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fa85 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e010      	b.n	8004f64 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f42:	897b      	ldrh	r3, [r7, #10]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4907      	ldr	r1, [pc, #28]	; (8004f70 <I2C_MasterRequestWrite+0xe8>)
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 fa75 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	00010008 	.word	0x00010008
 8004f70:	00010002 	.word	0x00010002

08004f74 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	460b      	mov	r3, r1
 8004f82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d006      	beq.n	8004fae <I2C_MasterRequestRead+0x3a>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d003      	beq.n	8004fae <I2C_MasterRequestRead+0x3a>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fac:	d108      	bne.n	8004fc0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e00b      	b.n	8004fd8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	2b11      	cmp	r3, #17
 8004fc6:	d107      	bne.n	8004fd8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f9d5 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e06d      	b.n	80050d0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ffc:	d108      	bne.n	8005010 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	611a      	str	r2, [r3, #16]
 800500e:	e053      	b.n	80050b8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005010:	897b      	ldrh	r3, [r7, #10]
 8005012:	11db      	asrs	r3, r3, #7
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f003 0306 	and.w	r3, r3, #6
 800501a:	b2db      	uxtb	r3, r3
 800501c:	f063 030f 	orn	r3, r3, #15
 8005020:	b2da      	uxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	492a      	ldr	r1, [pc, #168]	; (80050d8 <I2C_MasterRequestRead+0x164>)
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fa07 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e048      	b.n	80050d0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800503e:	897b      	ldrh	r3, [r7, #10]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4923      	ldr	r1, [pc, #140]	; (80050dc <I2C_MasterRequestRead+0x168>)
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f9f7 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e038      	b.n	80050d0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005082:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f97f 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e017      	b.n	80050d0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050a0:	897b      	ldrh	r3, [r7, #10]
 80050a2:	11db      	asrs	r3, r3, #7
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0306 	and.w	r3, r3, #6
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	f063 030e 	orn	r3, r3, #14
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4907      	ldr	r1, [pc, #28]	; (80050dc <I2C_MasterRequestRead+0x168>)
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f9bf 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	00010008 	.word	0x00010008
 80050dc:	00010002 	.word	0x00010002

080050e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	461a      	mov	r2, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	817b      	strh	r3, [r7, #10]
 80050f2:	460b      	mov	r3, r1
 80050f4:	813b      	strh	r3, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005108:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	2200      	movs	r2, #0
 8005112:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f93c 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e05f      	b.n	80051e6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005126:	897b      	ldrh	r3, [r7, #10]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005134:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	6a3a      	ldr	r2, [r7, #32]
 800513a:	492d      	ldr	r1, [pc, #180]	; (80051f0 <I2C_RequestMemoryWrite+0x110>)
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 f980 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e04c      	b.n	80051e6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005164:	6a39      	ldr	r1, [r7, #32]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f9ea 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2b04      	cmp	r3, #4
 8005178:	d107      	bne.n	800518a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005188:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e02b      	b.n	80051e6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d105      	bne.n	80051a0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005194:	893b      	ldrh	r3, [r7, #8]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	611a      	str	r2, [r3, #16]
 800519e:	e021      	b.n	80051e4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051a0:	893b      	ldrh	r3, [r7, #8]
 80051a2:	0a1b      	lsrs	r3, r3, #8
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	6a39      	ldr	r1, [r7, #32]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f9c4 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00d      	beq.n	80051da <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d107      	bne.n	80051d6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e005      	b.n	80051e6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051da:	893b      	ldrh	r3, [r7, #8]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	00010002 	.word	0x00010002

080051f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	4608      	mov	r0, r1
 80051fe:	4611      	mov	r1, r2
 8005200:	461a      	mov	r2, r3
 8005202:	4603      	mov	r3, r0
 8005204:	817b      	strh	r3, [r7, #10]
 8005206:	460b      	mov	r3, r1
 8005208:	813b      	strh	r3, [r7, #8]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800521c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800522c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	2200      	movs	r2, #0
 8005236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f8aa 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e09e      	b.n	8005388 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800524a:	897b      	ldrh	r3, [r7, #10]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005258:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	6a3a      	ldr	r2, [r7, #32]
 800525e:	494c      	ldr	r1, [pc, #304]	; (8005390 <I2C_RequestMemoryRead+0x19c>)
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f8ee 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e08b      	b.n	8005388 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005288:	6a39      	ldr	r1, [r7, #32]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f958 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00d      	beq.n	80052b2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	2b04      	cmp	r3, #4
 800529c:	d107      	bne.n	80052ae <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e06a      	b.n	8005388 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d105      	bne.n	80052c4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052b8:	893b      	ldrh	r3, [r7, #8]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	611a      	str	r2, [r3, #16]
 80052c2:	e021      	b.n	8005308 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052c4:	893b      	ldrh	r3, [r7, #8]
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	6a39      	ldr	r1, [r7, #32]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f932 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00d      	beq.n	80052fe <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d107      	bne.n	80052fa <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e044      	b.n	8005388 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052fe:	893b      	ldrh	r3, [r7, #8]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530a:	6a39      	ldr	r1, [r7, #32]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f917 	bl	8005540 <I2C_WaitOnTXEFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	2b04      	cmp	r3, #4
 800531e:	d107      	bne.n	8005330 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e029      	b.n	8005388 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005342:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	2200      	movs	r2, #0
 800534c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f81f 	bl	8005394 <I2C_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e013      	b.n	8005388 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005360:	897b      	ldrh	r3, [r7, #10]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	b2da      	uxtb	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	6a3a      	ldr	r2, [r7, #32]
 8005374:	4906      	ldr	r1, [pc, #24]	; (8005390 <I2C_RequestMemoryRead+0x19c>)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f863 	bl	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	00010002 	.word	0x00010002

08005394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a4:	e025      	b.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ac:	d021      	beq.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fe fb07 	bl	80039c0 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d116      	bne.n	80053f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e023      	b.n	800543a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10d      	bne.n	8005418 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf0c      	ite	eq
 800540e:	2301      	moveq	r3, #1
 8005410:	2300      	movne	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	e00c      	b.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	43da      	mvns	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4013      	ands	r3, r2
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf0c      	ite	eq
 800542a:	2301      	moveq	r3, #1
 800542c:	2300      	movne	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	429a      	cmp	r2, r3
 8005436:	d0b6      	beq.n	80053a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005450:	e051      	b.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005460:	d123      	bne.n	80054aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005470:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800547a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	f043 0204 	orr.w	r2, r3, #4
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e046      	b.n	8005538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b0:	d021      	beq.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b2:	f7fe fa85 	bl	80039c0 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d116      	bne.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f043 0220 	orr.w	r2, r3, #32
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e020      	b.n	8005538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	0c1b      	lsrs	r3, r3, #16
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10c      	bne.n	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	43da      	mvns	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4013      	ands	r3, r2
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf14      	ite	ne
 8005512:	2301      	movne	r3, #1
 8005514:	2300      	moveq	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	e00b      	b.n	8005532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	43da      	mvns	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf14      	ite	ne
 800552c:	2301      	movne	r3, #1
 800552e:	2300      	moveq	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d18d      	bne.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800554c:	e02d      	b.n	80055aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f8ce 	bl	80056f0 <I2C_IsAcknowledgeFailed>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e02d      	b.n	80055ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005564:	d021      	beq.n	80055aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005566:	f7fe fa2b 	bl	80039c0 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	d302      	bcc.n	800557c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d116      	bne.n	80055aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e007      	b.n	80055ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d1ca      	bne.n	800554e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055ce:	e02d      	b.n	800562c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f88d 	bl	80056f0 <I2C_IsAcknowledgeFailed>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e02d      	b.n	800563c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e6:	d021      	beq.n	800562c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e8:	f7fe f9ea 	bl	80039c0 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d302      	bcc.n	80055fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d116      	bne.n	800562c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f043 0220 	orr.w	r2, r3, #32
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e007      	b.n	800563c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b04      	cmp	r3, #4
 8005638:	d1ca      	bne.n	80055d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005650:	e042      	b.n	80056d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	2b10      	cmp	r3, #16
 800565e:	d119      	bne.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0210 	mvn.w	r2, #16
 8005668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e029      	b.n	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005694:	f7fe f994 	bl	80039c0 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d302      	bcc.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d116      	bne.n	80056d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	f043 0220 	orr.w	r2, r3, #32
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e007      	b.n	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d1b5      	bne.n	8005652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005706:	d11b      	bne.n	8005740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	f043 0204 	orr.w	r2, r3, #4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8005750:	bf20      	wfe
  __asm volatile( "nop" );
 8005752:	bf00      	nop
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005760:	4b03      	ldr	r3, [pc, #12]	; (8005770 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	420e0020 	.word	0x420e0020

08005774 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 8005780:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a12      	ldr	r2, [pc, #72]	; (80057d0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8005786:	f023 0302 	bic.w	r3, r3, #2
 800578a:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <HAL_PWR_EnterSTOPMode+0x5c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f023 0201 	bic.w	r2, r3, #1
 8005794:	490e      	ldr	r1, [pc, #56]	; (80057d0 <HAL_PWR_EnterSTOPMode+0x5c>)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4313      	orrs	r3, r2
 800579a:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <HAL_PWR_EnterSTOPMode+0x60>)
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <HAL_PWR_EnterSTOPMode+0x60>)
 80057a2:	f043 0304 	orr.w	r3, r3, #4
 80057a6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80057ae:	bf30      	wfi
 80057b0:	e004      	b.n	80057bc <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80057b2:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80057b4:	f7ff ffca 	bl	800574c <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80057b8:	f7ff ffc8 	bl	800574c <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <HAL_PWR_EnterSTOPMode+0x60>)
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <HAL_PWR_EnterSTOPMode+0x60>)
 80057c2:	f023 0304 	bic.w	r3, r3, #4
 80057c6:	6113      	str	r3, [r2, #16]
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	40007000 	.word	0x40007000
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e304      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8087 	beq.w	8005906 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057f8:	4b92      	ldr	r3, [pc, #584]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 030c 	and.w	r3, r3, #12
 8005800:	2b04      	cmp	r3, #4
 8005802:	d00c      	beq.n	800581e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005804:	4b8f      	ldr	r3, [pc, #572]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f003 030c 	and.w	r3, r3, #12
 800580c:	2b08      	cmp	r3, #8
 800580e:	d112      	bne.n	8005836 <HAL_RCC_OscConfig+0x5e>
 8005810:	4b8c      	ldr	r3, [pc, #560]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581c:	d10b      	bne.n	8005836 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800581e:	4b89      	ldr	r3, [pc, #548]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d06c      	beq.n	8005904 <HAL_RCC_OscConfig+0x12c>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d168      	bne.n	8005904 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e2de      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583e:	d106      	bne.n	800584e <HAL_RCC_OscConfig+0x76>
 8005840:	4b80      	ldr	r3, [pc, #512]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a7f      	ldr	r2, [pc, #508]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	e02e      	b.n	80058ac <HAL_RCC_OscConfig+0xd4>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10c      	bne.n	8005870 <HAL_RCC_OscConfig+0x98>
 8005856:	4b7b      	ldr	r3, [pc, #492]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a7a      	ldr	r2, [pc, #488]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 800585c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	4b78      	ldr	r3, [pc, #480]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a77      	ldr	r2, [pc, #476]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	e01d      	b.n	80058ac <HAL_RCC_OscConfig+0xd4>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005878:	d10c      	bne.n	8005894 <HAL_RCC_OscConfig+0xbc>
 800587a:	4b72      	ldr	r3, [pc, #456]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a71      	ldr	r2, [pc, #452]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	4b6f      	ldr	r3, [pc, #444]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a6e      	ldr	r2, [pc, #440]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 800588c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	e00b      	b.n	80058ac <HAL_RCC_OscConfig+0xd4>
 8005894:	4b6b      	ldr	r3, [pc, #428]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a6a      	ldr	r2, [pc, #424]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 800589a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	4b68      	ldr	r3, [pc, #416]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a67      	ldr	r2, [pc, #412]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 80058a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d013      	beq.n	80058dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b4:	f7fe f884 	bl	80039c0 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058bc:	f7fe f880 	bl	80039c0 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b64      	cmp	r3, #100	; 0x64
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e292      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ce:	4b5d      	ldr	r3, [pc, #372]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCC_OscConfig+0xe4>
 80058da:	e014      	b.n	8005906 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058dc:	f7fe f870 	bl	80039c0 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058e4:	f7fe f86c 	bl	80039c0 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	; 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e27e      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058f6:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0x10c>
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d063      	beq.n	80059da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005912:	4b4c      	ldr	r3, [pc, #304]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f003 030c 	and.w	r3, r3, #12
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00b      	beq.n	8005936 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800591e:	4b49      	ldr	r3, [pc, #292]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f003 030c 	and.w	r3, r3, #12
 8005926:	2b08      	cmp	r3, #8
 8005928:	d11c      	bne.n	8005964 <HAL_RCC_OscConfig+0x18c>
 800592a:	4b46      	ldr	r3, [pc, #280]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d116      	bne.n	8005964 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005936:	4b43      	ldr	r3, [pc, #268]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_RCC_OscConfig+0x176>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d001      	beq.n	800594e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e252      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800594e:	4b3d      	ldr	r3, [pc, #244]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4939      	ldr	r1, [pc, #228]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 800595e:	4313      	orrs	r3, r2
 8005960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005962:	e03a      	b.n	80059da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d020      	beq.n	80059ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800596c:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <HAL_RCC_OscConfig+0x270>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005972:	f7fe f825 	bl	80039c0 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800597a:	f7fe f821 	bl	80039c0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e233      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598c:	4b2d      	ldr	r3, [pc, #180]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005998:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4927      	ldr	r1, [pc, #156]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]
 80059ac:	e015      	b.n	80059da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ae:	4b26      	ldr	r3, [pc, #152]	; (8005a48 <HAL_RCC_OscConfig+0x270>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b4:	f7fe f804 	bl	80039c0 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059bc:	f7fe f800 	bl	80039c0 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e212      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ce:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f0      	bne.n	80059bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d03a      	beq.n	8005a5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d019      	beq.n	8005a22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ee:	4b17      	ldr	r3, [pc, #92]	; (8005a4c <HAL_RCC_OscConfig+0x274>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f4:	f7fd ffe4 	bl	80039c0 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059fc:	f7fd ffe0 	bl	80039c0 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e1f2      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <HAL_RCC_OscConfig+0x26c>)
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	f000 fbca 	bl	80061b4 <RCC_Delay>
 8005a20:	e01c      	b.n	8005a5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_RCC_OscConfig+0x274>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a28:	f7fd ffca 	bl	80039c0 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a2e:	e00f      	b.n	8005a50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a30:	f7fd ffc6 	bl	80039c0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d908      	bls.n	8005a50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e1d8      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
 8005a42:	bf00      	nop
 8005a44:	40021000 	.word	0x40021000
 8005a48:	42420000 	.word	0x42420000
 8005a4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a50:	4b9b      	ldr	r3, [pc, #620]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e9      	bne.n	8005a30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80a6 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a6e:	4b94      	ldr	r3, [pc, #592]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10d      	bne.n	8005a96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a7a:	4b91      	ldr	r3, [pc, #580]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	4a90      	ldr	r2, [pc, #576]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a84:	61d3      	str	r3, [r2, #28]
 8005a86:	4b8e      	ldr	r3, [pc, #568]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a96:	4b8b      	ldr	r3, [pc, #556]	; (8005cc4 <HAL_RCC_OscConfig+0x4ec>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d118      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aa2:	4b88      	ldr	r3, [pc, #544]	; (8005cc4 <HAL_RCC_OscConfig+0x4ec>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a87      	ldr	r2, [pc, #540]	; (8005cc4 <HAL_RCC_OscConfig+0x4ec>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aae:	f7fd ff87 	bl	80039c0 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab6:	f7fd ff83 	bl	80039c0 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b64      	cmp	r3, #100	; 0x64
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e195      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	4b7e      	ldr	r3, [pc, #504]	; (8005cc4 <HAL_RCC_OscConfig+0x4ec>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d106      	bne.n	8005aea <HAL_RCC_OscConfig+0x312>
 8005adc:	4b78      	ldr	r3, [pc, #480]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	4a77      	ldr	r2, [pc, #476]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	6213      	str	r3, [r2, #32]
 8005ae8:	e02d      	b.n	8005b46 <HAL_RCC_OscConfig+0x36e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x334>
 8005af2:	4b73      	ldr	r3, [pc, #460]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	4a72      	ldr	r2, [pc, #456]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	6213      	str	r3, [r2, #32]
 8005afe:	4b70      	ldr	r3, [pc, #448]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	4a6f      	ldr	r2, [pc, #444]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b04:	f023 0304 	bic.w	r3, r3, #4
 8005b08:	6213      	str	r3, [r2, #32]
 8005b0a:	e01c      	b.n	8005b46 <HAL_RCC_OscConfig+0x36e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b05      	cmp	r3, #5
 8005b12:	d10c      	bne.n	8005b2e <HAL_RCC_OscConfig+0x356>
 8005b14:	4b6a      	ldr	r3, [pc, #424]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	4a69      	ldr	r2, [pc, #420]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b1a:	f043 0304 	orr.w	r3, r3, #4
 8005b1e:	6213      	str	r3, [r2, #32]
 8005b20:	4b67      	ldr	r3, [pc, #412]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	4a66      	ldr	r2, [pc, #408]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6213      	str	r3, [r2, #32]
 8005b2c:	e00b      	b.n	8005b46 <HAL_RCC_OscConfig+0x36e>
 8005b2e:	4b64      	ldr	r3, [pc, #400]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	4a63      	ldr	r2, [pc, #396]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	6213      	str	r3, [r2, #32]
 8005b3a:	4b61      	ldr	r3, [pc, #388]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	4a60      	ldr	r2, [pc, #384]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b40:	f023 0304 	bic.w	r3, r3, #4
 8005b44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d015      	beq.n	8005b7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b4e:	f7fd ff37 	bl	80039c0 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b54:	e00a      	b.n	8005b6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b56:	f7fd ff33 	bl	80039c0 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e143      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	4b54      	ldr	r3, [pc, #336]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0ee      	beq.n	8005b56 <HAL_RCC_OscConfig+0x37e>
 8005b78:	e014      	b.n	8005ba4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7a:	f7fd ff21 	bl	80039c0 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b80:	e00a      	b.n	8005b98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f7fd ff1d 	bl	80039c0 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e12d      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b98:	4b49      	ldr	r3, [pc, #292]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1ee      	bne.n	8005b82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d105      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005baa:	4b45      	ldr	r3, [pc, #276]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	4a44      	ldr	r2, [pc, #272]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 808c 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005bc0:	4b3f      	ldr	r3, [pc, #252]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bcc:	d10e      	bne.n	8005bec <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005bce:	4b3c      	ldr	r3, [pc, #240]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d108      	bne.n	8005bec <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005bda:	4b39      	ldr	r3, [pc, #228]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be6:	d101      	bne.n	8005bec <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e103      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d14e      	bne.n	8005c92 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005bf4:	4b32      	ldr	r3, [pc, #200]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d009      	beq.n	8005c14 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005c00:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d001      	beq.n	8005c14 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0ef      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005c14:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <HAL_RCC_OscConfig+0x4f0>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1a:	f7fd fed1 	bl	80039c0 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c22:	f7fd fecd 	bl	80039c0 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b64      	cmp	r3, #100	; 0x64
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e0df      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005c34:	4b22      	ldr	r3, [pc, #136]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1f0      	bne.n	8005c22 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005c40:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4c:	491c      	ldr	r1, [pc, #112]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005c52:	4b1b      	ldr	r3, [pc, #108]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	4918      	ldr	r1, [pc, #96]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005c64:	4b18      	ldr	r3, [pc, #96]	; (8005cc8 <HAL_RCC_OscConfig+0x4f0>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6a:	f7fd fea9 	bl	80039c0 <HAL_GetTick>
 8005c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c72:	f7fd fea5 	bl	80039c0 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b64      	cmp	r3, #100	; 0x64
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e0b7      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005c84:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0f0      	beq.n	8005c72 <HAL_RCC_OscConfig+0x49a>
 8005c90:	e022      	b.n	8005cd8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <HAL_RCC_OscConfig+0x4e8>)
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <HAL_RCC_OscConfig+0x4f0>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca4:	f7fd fe8c 	bl	80039c0 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005caa:	e00f      	b.n	8005ccc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cac:	f7fd fe88 	bl	80039c0 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	; 0x64
 8005cb8:	d908      	bls.n	8005ccc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e09a      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
 8005cbe:	bf00      	nop
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40007000 	.word	0x40007000
 8005cc8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005ccc:	4b4b      	ldr	r3, [pc, #300]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e9      	bne.n	8005cac <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8088 	beq.w	8005df2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ce2:	4b46      	ldr	r3, [pc, #280]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d068      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d14d      	bne.n	8005d92 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf6:	4b42      	ldr	r3, [pc, #264]	; (8005e00 <HAL_RCC_OscConfig+0x628>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfc:	f7fd fe60 	bl	80039c0 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fd fe5c 	bl	80039c0 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e06e      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d16:	4b39      	ldr	r3, [pc, #228]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2a:	d10f      	bne.n	8005d4c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005d2c:	4b33      	ldr	r3, [pc, #204]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4931      	ldr	r1, [pc, #196]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d3a:	4b30      	ldr	r3, [pc, #192]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	f023 020f 	bic.w	r2, r3, #15
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	492d      	ldr	r1, [pc, #180]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	4927      	ldr	r1, [pc, #156]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d64:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <HAL_RCC_OscConfig+0x628>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6a:	f7fd fe29 	bl	80039c0 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d72:	f7fd fe25 	bl	80039c0 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e037      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d84:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCC_OscConfig+0x59a>
 8005d90:	e02f      	b.n	8005df2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d92:	4b1b      	ldr	r3, [pc, #108]	; (8005e00 <HAL_RCC_OscConfig+0x628>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d98:	f7fd fe12 	bl	80039c0 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fd fe0e 	bl	80039c0 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e020      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x5c8>
 8005dbe:	e018      	b.n	8005df2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e013      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_RCC_OscConfig+0x624>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d106      	bne.n	8005dee <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d001      	beq.n	8005df2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	42420060 	.word	0x42420060

08005e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0d0      	b.n	8005fba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e18:	4b6a      	ldr	r3, [pc, #424]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d910      	bls.n	8005e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e26:	4b67      	ldr	r3, [pc, #412]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f023 0207 	bic.w	r2, r3, #7
 8005e2e:	4965      	ldr	r1, [pc, #404]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e36:	4b63      	ldr	r3, [pc, #396]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d001      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0b8      	b.n	8005fba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d020      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e60:	4b59      	ldr	r3, [pc, #356]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4a58      	ldr	r2, [pc, #352]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e78:	4b53      	ldr	r3, [pc, #332]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	4a52      	ldr	r2, [pc, #328]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e84:	4b50      	ldr	r3, [pc, #320]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	494d      	ldr	r1, [pc, #308]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d040      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d107      	bne.n	8005eba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eaa:	4b47      	ldr	r3, [pc, #284]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d115      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e07f      	b.n	8005fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d107      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec2:	4b41      	ldr	r3, [pc, #260]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e073      	b.n	8005fba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed2:	4b3d      	ldr	r3, [pc, #244]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e06b      	b.n	8005fba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f023 0203 	bic.w	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4936      	ldr	r1, [pc, #216]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef4:	f7fd fd64 	bl	80039c0 <HAL_GetTick>
 8005ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efc:	f7fd fd60 	bl	80039c0 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e053      	b.n	8005fba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f12:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f003 020c 	and.w	r2, r3, #12
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d1eb      	bne.n	8005efc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f24:	4b27      	ldr	r3, [pc, #156]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d210      	bcs.n	8005f54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b24      	ldr	r3, [pc, #144]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f023 0207 	bic.w	r2, r3, #7
 8005f3a:	4922      	ldr	r1, [pc, #136]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f42:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d001      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e032      	b.n	8005fba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f60:	4b19      	ldr	r3, [pc, #100]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	4916      	ldr	r1, [pc, #88]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f7e:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	490e      	ldr	r1, [pc, #56]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f92:	f000 f821 	bl	8005fd8 <HAL_RCC_GetSysClockFreq>
 8005f96:	4601      	mov	r1, r0
 8005f98:	4b0b      	ldr	r3, [pc, #44]	; (8005fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <HAL_RCC_ClockConfig+0x1c8>)
 8005fa4:	5cd3      	ldrb	r3, [r2, r3]
 8005fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8005faa:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <HAL_RCC_ClockConfig+0x1cc>)
 8005fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <HAL_RCC_ClockConfig+0x1d0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fd fcc2 	bl	800393c <HAL_InitTick>

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40022000 	.word	0x40022000
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	0800a4e4 	.word	0x0800a4e4
 8005fd0:	20000004 	.word	0x20000004
 8005fd4:	20000008 	.word	0x20000008

08005fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fda:	b091      	sub	sp, #68	; 0x44
 8005fdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8005fde:	4b56      	ldr	r3, [pc, #344]	; (8006138 <HAL_RCC_GetSysClockFreq+0x160>)
 8005fe0:	f107 0414 	add.w	r4, r7, #20
 8005fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fe6:	c407      	stmia	r4!, {r0, r1, r2}
 8005fe8:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8005fea:	4b54      	ldr	r3, [pc, #336]	; (800613c <HAL_RCC_GetSysClockFreq+0x164>)
 8005fec:	1d3c      	adds	r4, r7, #4
 8005fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006000:	2300      	movs	r3, #0
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
 800600c:	2300      	movs	r3, #0
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006010:	4b4b      	ldr	r3, [pc, #300]	; (8006140 <HAL_RCC_GetSysClockFreq+0x168>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006018:	f003 030c 	and.w	r3, r3, #12
 800601c:	2b04      	cmp	r3, #4
 800601e:	d002      	beq.n	8006026 <HAL_RCC_GetSysClockFreq+0x4e>
 8006020:	2b08      	cmp	r3, #8
 8006022:	d003      	beq.n	800602c <HAL_RCC_GetSysClockFreq+0x54>
 8006024:	e07f      	b.n	8006126 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006026:	4b47      	ldr	r3, [pc, #284]	; (8006144 <HAL_RCC_GetSysClockFreq+0x16c>)
 8006028:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800602a:	e07f      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	0c9b      	lsrs	r3, r3, #18
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006038:	4413      	add	r3, r2
 800603a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d065      	beq.n	8006116 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800604a:	4b3d      	ldr	r3, [pc, #244]	; (8006140 <HAL_RCC_GetSysClockFreq+0x168>)
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006056:	4413      	add	r3, r2
 8006058:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800605c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800605e:	4b38      	ldr	r3, [pc, #224]	; (8006140 <HAL_RCC_GetSysClockFreq+0x168>)
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d043      	beq.n	80060f2 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800606a:	4b35      	ldr	r3, [pc, #212]	; (8006140 <HAL_RCC_GetSysClockFreq+0x168>)
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	091b      	lsrs	r3, r3, #4
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	3301      	adds	r3, #1
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006078:	4b31      	ldr	r3, [pc, #196]	; (8006140 <HAL_RCC_GetSysClockFreq+0x168>)
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	0a1b      	lsrs	r3, r3, #8
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	3302      	adds	r3, #2
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	4619      	mov	r1, r3
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	f04f 0400 	mov.w	r4, #0
 8006094:	fb03 f502 	mul.w	r5, r3, r2
 8006098:	fb01 f004 	mul.w	r0, r1, r4
 800609c:	4428      	add	r0, r5
 800609e:	fba1 3403 	umull	r3, r4, r1, r3
 80060a2:	1902      	adds	r2, r0, r4
 80060a4:	4614      	mov	r4, r2
 80060a6:	4a27      	ldr	r2, [pc, #156]	; (8006144 <HAL_RCC_GetSysClockFreq+0x16c>)
 80060a8:	fb02 f104 	mul.w	r1, r2, r4
 80060ac:	2200      	movs	r2, #0
 80060ae:	fb02 f203 	mul.w	r2, r2, r3
 80060b2:	440a      	add	r2, r1
 80060b4:	4923      	ldr	r1, [pc, #140]	; (8006144 <HAL_RCC_GetSysClockFreq+0x16c>)
 80060b6:	fba3 5601 	umull	r5, r6, r3, r1
 80060ba:	1993      	adds	r3, r2, r6
 80060bc:	461e      	mov	r6, r3
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	4619      	mov	r1, r3
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	f04f 0400 	mov.w	r4, #0
 80060cc:	fb03 fc02 	mul.w	ip, r3, r2
 80060d0:	fb01 f004 	mul.w	r0, r1, r4
 80060d4:	4460      	add	r0, ip
 80060d6:	fba1 3403 	umull	r3, r4, r1, r3
 80060da:	1902      	adds	r2, r0, r4
 80060dc:	4614      	mov	r4, r2
 80060de:	461a      	mov	r2, r3
 80060e0:	4623      	mov	r3, r4
 80060e2:	4628      	mov	r0, r5
 80060e4:	4631      	mov	r1, r6
 80060e6:	f7fa ff2d 	bl	8000f44 <__aeabi_uldivmod>
 80060ea:	4603      	mov	r3, r0
 80060ec:	460c      	mov	r4, r1
 80060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f0:	e007      	b.n	8006102 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	4a13      	ldr	r2, [pc, #76]	; (8006144 <HAL_RCC_GetSysClockFreq+0x16c>)
 80060f6:	fb02 f203 	mul.w	r2, r2, r3
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8006102:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006106:	461a      	mov	r2, r3
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800610e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006114:	e004      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	4a0b      	ldr	r2, [pc, #44]	; (8006148 <HAL_RCC_GetSysClockFreq+0x170>)
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8006120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006122:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006124:	e002      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <HAL_RCC_GetSysClockFreq+0x174>)
 8006128:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800612a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800612e:	4618      	mov	r0, r3
 8006130:	3744      	adds	r7, #68	; 0x44
 8006132:	46bd      	mov	sp, r7
 8006134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006136:	bf00      	nop
 8006138:	0800a480 	.word	0x0800a480
 800613c:	0800a490 	.word	0x0800a490
 8006140:	40021000 	.word	0x40021000
 8006144:	017d7840 	.word	0x017d7840
 8006148:	003d0900 	.word	0x003d0900
 800614c:	007a1200 	.word	0x007a1200

08006150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006154:	4b02      	ldr	r3, [pc, #8]	; (8006160 <HAL_RCC_GetHCLKFreq+0x10>)
 8006156:	681b      	ldr	r3, [r3, #0]
}
 8006158:	4618      	mov	r0, r3
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr
 8006160:	20000004 	.word	0x20000004

08006164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006168:	f7ff fff2 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 800616c:	4601      	mov	r1, r0
 800616e:	4b05      	ldr	r3, [pc, #20]	; (8006184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	0a1b      	lsrs	r3, r3, #8
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	4a03      	ldr	r2, [pc, #12]	; (8006188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800617a:	5cd3      	ldrb	r3, [r2, r3]
 800617c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006180:	4618      	mov	r0, r3
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40021000 	.word	0x40021000
 8006188:	0800a4f4 	.word	0x0800a4f4

0800618c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006190:	f7ff ffde 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 8006194:	4601      	mov	r1, r0
 8006196:	4b05      	ldr	r3, [pc, #20]	; (80061ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	0adb      	lsrs	r3, r3, #11
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	4a03      	ldr	r2, [pc, #12]	; (80061b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061a2:	5cd3      	ldrb	r3, [r2, r3]
 80061a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40021000 	.word	0x40021000
 80061b0:	0800a4f4 	.word	0x0800a4f4

080061b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061bc:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <RCC_Delay+0x34>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <RCC_Delay+0x38>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	0a5b      	lsrs	r3, r3, #9
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061d0:	bf00      	nop
  }
  while (Delay --);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1e5a      	subs	r2, r3, #1
 80061d6:	60fa      	str	r2, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f9      	bne.n	80061d0 <RCC_Delay+0x1c>
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20000004 	.word	0x20000004
 80061ec:	10624dd3 	.word	0x10624dd3

080061f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	2300      	movs	r3, #0
 80061fe:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d07d      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006210:	2300      	movs	r3, #0
 8006212:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006214:	4b8b      	ldr	r3, [pc, #556]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10d      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006220:	4b88      	ldr	r3, [pc, #544]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	4a87      	ldr	r2, [pc, #540]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622a:	61d3      	str	r3, [r2, #28]
 800622c:	4b85      	ldr	r3, [pc, #532]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006238:	2301      	movs	r3, #1
 800623a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623c:	4b82      	ldr	r3, [pc, #520]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006244:	2b00      	cmp	r3, #0
 8006246:	d118      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006248:	4b7f      	ldr	r3, [pc, #508]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a7e      	ldr	r2, [pc, #504]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800624e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006254:	f7fd fbb4 	bl	80039c0 <HAL_GetTick>
 8006258:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625a:	e008      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625c:	f7fd fbb0 	bl	80039c0 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	; 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e0e5      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626e:	4b76      	ldr	r3, [pc, #472]	; (8006448 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f0      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800627a:	4b72      	ldr	r3, [pc, #456]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006282:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02e      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	429a      	cmp	r2, r3
 8006296:	d027      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006298:	4b6a      	ldr	r3, [pc, #424]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062a2:	4b6a      	ldr	r3, [pc, #424]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062a8:	4b68      	ldr	r3, [pc, #416]	; (800644c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062ae:	4a65      	ldr	r2, [pc, #404]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d014      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062be:	f7fd fb7f 	bl	80039c0 <HAL_GetTick>
 80062c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c4:	e00a      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c6:	f7fd fb7b 	bl	80039c0 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e0ae      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062dc:	4b59      	ldr	r3, [pc, #356]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0ee      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062e8:	4b56      	ldr	r3, [pc, #344]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4953      	ldr	r1, [pc, #332]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062fa:	7efb      	ldrb	r3, [r7, #27]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d105      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006300:	4b50      	ldr	r3, [pc, #320]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	4a4f      	ldr	r2, [pc, #316]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800630a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006318:	4b4a      	ldr	r3, [pc, #296]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4947      	ldr	r1, [pc, #284]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006326:	4313      	orrs	r3, r2
 8006328:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	d008      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006336:	4b43      	ldr	r3, [pc, #268]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	4940      	ldr	r1, [pc, #256]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006344:	4313      	orrs	r3, r2
 8006346:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8006354:	4b3b      	ldr	r3, [pc, #236]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	4938      	ldr	r1, [pc, #224]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006362:	4313      	orrs	r3, r2
 8006364:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8006366:	4b37      	ldr	r3, [pc, #220]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d105      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8006372:	4b34      	ldr	r3, [pc, #208]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800637e:	2301      	movs	r3, #1
 8006380:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d148      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8006388:	4b2e      	ldr	r3, [pc, #184]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d138      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8006394:	4b2b      	ldr	r3, [pc, #172]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d009      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80063a0:	4b28      	ldr	r3, [pc, #160]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d001      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e042      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80063b4:	4b23      	ldr	r3, [pc, #140]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	4920      	ldr	r1, [pc, #128]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80063c6:	4b1f      	ldr	r3, [pc, #124]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	491c      	ldr	r1, [pc, #112]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063de:	f7fd faef 	bl	80039c0 <HAL_GetTick>
 80063e2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063e6:	f7fd faeb 	bl	80039c0 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b64      	cmp	r3, #100	; 0x64
 80063f2:	d901      	bls.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e020      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063f8:	4b12      	ldr	r3, [pc, #72]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8006404:	e009      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8006406:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	429a      	cmp	r2, r3
 8006414:	d001      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e00f      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006426:	4b07      	ldr	r3, [pc, #28]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4904      	ldr	r1, [pc, #16]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006434:	4313      	orrs	r3, r2
 8006436:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3720      	adds	r7, #32
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40021000 	.word	0x40021000
 8006448:	40007000 	.word	0x40007000
 800644c:	42420440 	.word	0x42420440
 8006450:	42420070 	.word	0x42420070

08006454 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	b093      	sub	sp, #76	; 0x4c
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800645c:	4ba8      	ldr	r3, [pc, #672]	; (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800645e:	f107 0418 	add.w	r4, r7, #24
 8006462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006464:	c407      	stmia	r4!, {r0, r1, r2}
 8006466:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8006468:	4ba6      	ldr	r3, [pc, #664]	; (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 800646a:	f107 0408 	add.w	r4, r7, #8
 800646e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006478:	2300      	movs	r3, #0
 800647a:	647b      	str	r3, [r7, #68]	; 0x44
 800647c:	2300      	movs	r3, #0
 800647e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
 8006484:	2300      	movs	r3, #0
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
 8006488:	2300      	movs	r3, #0
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006490:	2300      	movs	r3, #0
 8006492:	643b      	str	r3, [r7, #64]	; 0x40

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3b01      	subs	r3, #1
 8006498:	2b0f      	cmp	r3, #15
 800649a:	f200 8123 	bhi.w	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	08006665 	.word	0x08006665
 80064a8:	080066c9 	.word	0x080066c9
 80064ac:	080066e5 	.word	0x080066e5
 80064b0:	080065c3 	.word	0x080065c3
 80064b4:	080066e5 	.word	0x080066e5
 80064b8:	080066e5 	.word	0x080066e5
 80064bc:	080066e5 	.word	0x080066e5
 80064c0:	08006615 	.word	0x08006615
 80064c4:	080066e5 	.word	0x080066e5
 80064c8:	080066e5 	.word	0x080066e5
 80064cc:	080066e5 	.word	0x080066e5
 80064d0:	080066e5 	.word	0x080066e5
 80064d4:	080066e5 	.word	0x080066e5
 80064d8:	080066e5 	.word	0x080066e5
 80064dc:	080066e5 	.word	0x080066e5
 80064e0:	080064e5 	.word	0x080064e5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80064e4:	4b88      	ldr	r3, [pc, #544]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80064ea:	4b87      	ldr	r3, [pc, #540]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 80f8 	beq.w	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	0c9b      	lsrs	r3, r3, #18
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006504:	4413      	add	r3, r2
 8006506:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800650a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d03e      	beq.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8006516:	4b7c      	ldr	r3, [pc, #496]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006522:	4413      	add	r3, r2
 8006524:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8006528:	63fb      	str	r3, [r7, #60]	; 0x3c
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800652a:	4b77      	ldr	r3, [pc, #476]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01c      	beq.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006536:	4b74      	ldr	r3, [pc, #464]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653a:	091b      	lsrs	r3, r3, #4
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	3301      	adds	r3, #1
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006544:	4b70      	ldr	r3, [pc, #448]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	0a1b      	lsrs	r3, r3, #8
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	3302      	adds	r3, #2
 8006550:	637b      	str	r3, [r7, #52]	; 0x34
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8006552:	4a6e      	ldr	r2, [pc, #440]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	fbb2 f3f3 	udiv	r3, r2, r3
 800655a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800655c:	fb02 f203 	mul.w	r2, r2, r3
 8006560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006562:	fbb2 f2f3 	udiv	r2, r2, r3
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	647b      	str	r3, [r7, #68]	; 0x44
 800656e:	e007      	b.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006570:	4a66      	ldr	r2, [pc, #408]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006574:	fbb2 f2f3 	udiv	r2, r2, r3
 8006578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657a:	fb02 f303 	mul.w	r3, r2, r3
 800657e:	647b      	str	r3, [r7, #68]	; 0x44
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8006580:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006584:	461a      	mov	r2, r3
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	4293      	cmp	r3, r2
 800658a:	d108      	bne.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
          {
            pllclk = pllclk / 2;
 800658c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	647b      	str	r3, [r7, #68]	; 0x44
 8006592:	e004      	b.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	4a5e      	ldr	r2, [pc, #376]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006598:	fb02 f303 	mul.w	r3, r2, r3
 800659c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 800659e:	4b5a      	ldr	r3, [pc, #360]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065aa:	d102      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 80065ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ae:	643b      	str	r3, [r7, #64]	; 0x40
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80065b0:	e09a      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          frequency = (2 * pllclk) / 3;
 80065b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	4a57      	ldr	r2, [pc, #348]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80065b8:	fba2 2303 	umull	r2, r3, r2, r3
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80065c0:	e092      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 80065c2:	4b51      	ldr	r3, [pc, #324]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 80065ce:	f7ff fd03 	bl	8005fd8 <HAL_RCC_GetSysClockFreq>
 80065d2:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80065d4:	e08a      	b.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80065d6:	4b4c      	ldr	r3, [pc, #304]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 8084 	beq.w	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80065e4:	4b48      	ldr	r3, [pc, #288]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	3301      	adds	r3, #1
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80065f2:	4b45      	ldr	r3, [pc, #276]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	0b1b      	lsrs	r3, r3, #12
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	3302      	adds	r3, #2
 80065fe:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8006600:	4a42      	ldr	r2, [pc, #264]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8006612:	e06b      	b.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8006614:	4b3c      	ldr	r3, [pc, #240]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 8006620:	f7ff fcda 	bl	8005fd8 <HAL_RCC_GetSysClockFreq>
 8006624:	6438      	str	r0, [r7, #64]	; 0x40
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006626:	e063      	b.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8006628:	4b37      	ldr	r3, [pc, #220]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d05d      	beq.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006634:	4b34      	ldr	r3, [pc, #208]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	3301      	adds	r3, #1
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8006642:	4b31      	ldr	r3, [pc, #196]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	0b1b      	lsrs	r3, r3, #12
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	3302      	adds	r3, #2
 800664e:	633b      	str	r3, [r7, #48]	; 0x30
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8006650:	4a2e      	ldr	r2, [pc, #184]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665a:	fb02 f303 	mul.w	r3, r2, r3
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8006662:	e045      	b.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006664:	4b28      	ldr	r3, [pc, #160]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	d108      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
      {
        frequency = LSE_VALUE;
 8006680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006684:	643b      	str	r3, [r7, #64]	; 0x40
 8006686:	e01e      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006692:	d109      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8006694:	4b1c      	ldr	r3, [pc, #112]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
      {
        frequency = LSI_VALUE;
 80066a0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80066a4:	643b      	str	r3, [r7, #64]	; 0x40
 80066a6:	e00e      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b2:	d11f      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80066b4:	4b14      	ldr	r3, [pc, #80]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d019      	beq.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        frequency = HSE_VALUE / 128U;
 80066c0:	4b15      	ldr	r3, [pc, #84]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80066c2:	643b      	str	r3, [r7, #64]	; 0x40
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80066c4:	e016      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80066c6:	e015      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80066c8:	f7ff fd60 	bl	800618c <HAL_RCC_GetPCLK2Freq>
 80066cc:	4602      	mov	r2, r0
 80066ce:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	0b9b      	lsrs	r3, r3, #14
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	3301      	adds	r3, #1
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80066e2:	e008      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
    }
    default:
    {
      break;
 80066e4:	bf00      	nop
 80066e6:	e006      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 80066e8:	bf00      	nop
 80066ea:	e004      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 80066ec:	bf00      	nop
 80066ee:	e002      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
      break;
 80066f4:	bf00      	nop
    }
  }
  return (frequency);
 80066f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	374c      	adds	r7, #76	; 0x4c
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd90      	pop	{r4, r7, pc}
 8006700:	0800a4a0 	.word	0x0800a4a0
 8006704:	0800a4b0 	.word	0x0800a4b0
 8006708:	40021000 	.word	0x40021000
 800670c:	017d7840 	.word	0x017d7840
 8006710:	003d0900 	.word	0x003d0900
 8006714:	aaaaaaab 	.word	0xaaaaaaab
 8006718:	0002faf0 	.word	0x0002faf0

0800671c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e084      	b.n	800683c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	7c5b      	ldrb	r3, [r3, #17]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fc ff70 	bl	8003628 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fb7c 	bl	8006e4c <HAL_RTC_WaitForSynchro>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2204      	movs	r2, #4
 800675e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e06b      	b.n	800683c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fc35 	bl	8006fd4 <RTC_EnterInitMode>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2204      	movs	r2, #4
 8006774:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e060      	b.n	800683c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0207 	bic.w	r2, r2, #7
 8006788:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d005      	beq.n	800679e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006792:	4b2c      	ldr	r3, [pc, #176]	; (8006844 <HAL_RTC_Init+0x128>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	4a2b      	ldr	r2, [pc, #172]	; (8006844 <HAL_RTC_Init+0x128>)
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800679e:	4b29      	ldr	r3, [pc, #164]	; (8006844 <HAL_RTC_Init+0x128>)
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	4926      	ldr	r1, [pc, #152]	; (8006844 <HAL_RTC_Init+0x128>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b8:	d003      	beq.n	80067c2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	e00e      	b.n	80067e0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80067c2:	2001      	movs	r0, #1
 80067c4:	f7ff fe46 	bl	8006454 <HAL_RCCEx_GetPeriphCLKFreq>
 80067c8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2204      	movs	r2, #4
 80067d4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e030      	b.n	800683c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3b01      	subs	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f023 010f 	bic.w	r1, r3, #15
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	0c1a      	lsrs	r2, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	041b      	lsls	r3, r3, #16
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	b291      	uxth	r1, r2
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6812      	ldr	r2, [r2, #0]
 8006808:	430b      	orrs	r3, r1
 800680a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fc09 	bl	8007024 <RTC_ExitInitMode>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2204      	movs	r2, #4
 800681c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e00c      	b.n	800683c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800683a:	2300      	movs	r3, #0
  }
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40006c00 	.word	0x40006c00

08006848 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006848:	b590      	push	{r4, r7, lr}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_RTC_SetTime+0x20>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e080      	b.n	800696e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	7c1b      	ldrb	r3, [r3, #16]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_RTC_SetTime+0x30>
 8006874:	2302      	movs	r3, #2
 8006876:	e07a      	b.n	800696e <HAL_RTC_SetTime+0x126>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2202      	movs	r2, #2
 8006882:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d113      	bne.n	80068b2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006894:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	4619      	mov	r1, r3
 800689e:	460b      	mov	r3, r1
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	1a5b      	subs	r3, r3, r1
 80068a4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80068a6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80068ac:	4413      	add	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e01e      	b.n	80068f0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fbf9 	bl	80070ae <RTC_Bcd2ToByte>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80068c4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fbee 	bl	80070ae <RTC_Bcd2ToByte>
 80068d2:	4603      	mov	r3, r0
 80068d4:	461a      	mov	r2, r3
 80068d6:	4613      	mov	r3, r2
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80068de:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	789b      	ldrb	r3, [r3, #2]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fbe2 	bl	80070ae <RTC_Bcd2ToByte>
 80068ea:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80068ec:	4423      	add	r3, r4
 80068ee:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80068f0:	6979      	ldr	r1, [r7, #20]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fb07 	bl	8006f06 <RTC_WriteTimeCounter>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d007      	beq.n	800690e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2204      	movs	r2, #4
 8006902:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e02f      	b.n	800696e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0205 	bic.w	r2, r2, #5
 800691c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 fb18 	bl	8006f54 <RTC_ReadAlarmCounter>
 8006924:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800692c:	d018      	beq.n	8006960 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	429a      	cmp	r2, r3
 8006934:	d214      	bcs.n	8006960 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800693c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006940:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006942:	6939      	ldr	r1, [r7, #16]
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 fb1e 	bl	8006f86 <RTC_WriteAlarmCounter>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2204      	movs	r2, #4
 8006954:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e006      	b.n	800696e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800696c:	2300      	movs	r3, #0
  }
}
 800696e:	4618      	mov	r0, r3
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd90      	pop	{r4, r7, pc}
	...

08006978 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	2300      	movs	r3, #0
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	2300      	movs	r3, #0
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	2300      	movs	r3, #0
 8006992:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_RTC_GetTime+0x28>
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0b5      	b.n	8006b10 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e0ac      	b.n	8006b10 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 fa75 	bl	8006ea6 <RTC_ReadTimeCounter>
 80069bc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	4a55      	ldr	r2, [pc, #340]	; (8006b18 <HAL_RTC_GetTime+0x1a0>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	0adb      	lsrs	r3, r3, #11
 80069c8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	4b52      	ldr	r3, [pc, #328]	; (8006b18 <HAL_RTC_GetTime+0x1a0>)
 80069ce:	fba3 1302 	umull	r1, r3, r3, r2
 80069d2:	0adb      	lsrs	r3, r3, #11
 80069d4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	4a4f      	ldr	r2, [pc, #316]	; (8006b1c <HAL_RTC_GetTime+0x1a4>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	095b      	lsrs	r3, r3, #5
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	4a4a      	ldr	r2, [pc, #296]	; (8006b18 <HAL_RTC_GetTime+0x1a0>)
 80069f0:	fba2 1203 	umull	r1, r2, r2, r3
 80069f4:	0ad2      	lsrs	r2, r2, #11
 80069f6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80069fa:	fb01 f202 	mul.w	r2, r1, r2
 80069fe:	1a9a      	subs	r2, r3, r2
 8006a00:	4b46      	ldr	r3, [pc, #280]	; (8006b1c <HAL_RTC_GetTime+0x1a4>)
 8006a02:	fba3 1302 	umull	r1, r3, r3, r2
 8006a06:	0959      	lsrs	r1, r3, #5
 8006a08:	460b      	mov	r3, r1
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	1a5b      	subs	r3, r3, r1
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	1ad1      	subs	r1, r2, r3
 8006a12:	b2ca      	uxtb	r2, r1
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b17      	cmp	r3, #23
 8006a1c:	d955      	bls.n	8006aca <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	4a3f      	ldr	r2, [pc, #252]	; (8006b20 <HAL_RTC_GetTime+0x1a8>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	091b      	lsrs	r3, r3, #4
 8006a28:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006a2a:	6939      	ldr	r1, [r7, #16]
 8006a2c:	4b3c      	ldr	r3, [pc, #240]	; (8006b20 <HAL_RTC_GetTime+0x1a8>)
 8006a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a32:	091a      	lsrs	r2, r3, #4
 8006a34:	4613      	mov	r3, r2
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	4413      	add	r3, r2
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	1aca      	subs	r2, r1, r3
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fa85 	bl	8006f54 <RTC_ReadAlarmCounter>
 8006a4a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a52:	d008      	beq.n	8006a66 <HAL_RTC_GetTime+0xee>
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d904      	bls.n	8006a66 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e002      	b.n	8006a6c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a6a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	4a2d      	ldr	r2, [pc, #180]	; (8006b24 <HAL_RTC_GetTime+0x1ac>)
 8006a70:	fb02 f303 	mul.w	r3, r2, r3
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006a7a:	69b9      	ldr	r1, [r7, #24]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fa42 	bl	8006f06 <RTC_WriteTimeCounter>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e041      	b.n	8006b10 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a92:	d00c      	beq.n	8006aae <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	4413      	add	r3, r2
 8006a9a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006a9c:	69f9      	ldr	r1, [r7, #28]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fa71 	bl	8006f86 <RTC_WriteAlarmCounter>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e030      	b.n	8006b10 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006aae:	69f9      	ldr	r1, [r7, #28]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fa68 	bl	8006f86 <RTC_WriteAlarmCounter>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e027      	b.n	8006b10 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006ac0:	6979      	ldr	r1, [r7, #20]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fb10 	bl	80070e8 <RTC_DateUpdate>
 8006ac8:	e003      	b.n	8006ad2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01a      	beq.n	8006b0e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fac9 	bl	8007074 <RTC_ByteToBcd2>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 fac0 	bl	8007074 <RTC_ByteToBcd2>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	789b      	ldrb	r3, [r3, #2]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fab7 	bl	8007074 <RTC_ByteToBcd2>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	91a2b3c5 	.word	0x91a2b3c5
 8006b1c:	88888889 	.word	0x88888889
 8006b20:	aaaaaaab 	.word	0xaaaaaaab
 8006b24:	00015180 	.word	0x00015180

08006b28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_RTC_SetDate+0x24>
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e097      	b.n	8006c80 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	7c1b      	ldrb	r3, [r3, #16]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_RTC_SetDate+0x34>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e091      	b.n	8006c80 <HAL_RTC_SetDate+0x158>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2202      	movs	r2, #2
 8006b66:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10c      	bne.n	8006b88 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	78da      	ldrb	r2, [r3, #3]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	785a      	ldrb	r2, [r3, #1]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	789a      	ldrb	r2, [r3, #2]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	739a      	strb	r2, [r3, #14]
 8006b86:	e01a      	b.n	8006bbe <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	78db      	ldrb	r3, [r3, #3]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fa8e 	bl	80070ae <RTC_Bcd2ToByte>
 8006b92:	4603      	mov	r3, r0
 8006b94:	461a      	mov	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	785b      	ldrb	r3, [r3, #1]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fa85 	bl	80070ae <RTC_Bcd2ToByte>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	789b      	ldrb	r3, [r3, #2]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fa7c 	bl	80070ae <RTC_Bcd2ToByte>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	7bdb      	ldrb	r3, [r3, #15]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	7b59      	ldrb	r1, [r3, #13]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	7b9b      	ldrb	r3, [r3, #14]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f000 fb67 	bl	80072a0 <RTC_WeekDayNum>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	7b1a      	ldrb	r2, [r3, #12]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f95f 	bl	8006ea6 <RTC_ReadTimeCounter>
 8006be8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <HAL_RTC_SetDate+0x160>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	0adb      	lsrs	r3, r3, #11
 8006bf4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b18      	cmp	r3, #24
 8006bfa:	d93a      	bls.n	8006c72 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	4a23      	ldr	r2, [pc, #140]	; (8006c8c <HAL_RTC_SetDate+0x164>)
 8006c00:	fba2 2303 	umull	r2, r3, r2, r3
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	4a22      	ldr	r2, [pc, #136]	; (8006c90 <HAL_RTC_SetDate+0x168>)
 8006c08:	fb02 f303 	mul.w	r3, r2, r3
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006c12:	69f9      	ldr	r1, [r7, #28]
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f976 	bl	8006f06 <RTC_WriteTimeCounter>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2204      	movs	r2, #4
 8006c24:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e027      	b.n	8006c80 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 f98f 	bl	8006f54 <RTC_ReadAlarmCounter>
 8006c36:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c3e:	d018      	beq.n	8006c72 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d214      	bcs.n	8006c72 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006c4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006c52:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006c54:	69b9      	ldr	r1, [r7, #24]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 f995 	bl	8006f86 <RTC_WriteAlarmCounter>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d007      	beq.n	8006c72 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2204      	movs	r2, #4
 8006c66:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e006      	b.n	8006c80 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3720      	adds	r7, #32
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	91a2b3c5 	.word	0x91a2b3c5
 8006c8c:	aaaaaaab 	.word	0xaaaaaaab
 8006c90:	00015180 	.word	0x00015180

08006c94 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b089      	sub	sp, #36	; 0x24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8006ca4:	f107 0314 	add.w	r3, r7, #20
 8006ca8:	2100      	movs	r1, #0
 8006caa:	460a      	mov	r2, r1
 8006cac:	801a      	strh	r2, [r3, #0]
 8006cae:	460a      	mov	r2, r1
 8006cb0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_RTC_SetAlarm_IT+0x2a>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e096      	b.n	8006df0 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	7c1b      	ldrb	r3, [r3, #16]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_RTC_SetAlarm_IT+0x3a>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e090      	b.n	8006df0 <HAL_RTC_SetAlarm_IT+0x15c>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006cda:	f107 0314 	add.w	r3, r7, #20
 8006cde:	2200      	movs	r2, #0
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f7ff fe48 	bl	8006978 <HAL_RTC_GetTime>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e07e      	b.n	8006df0 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006cf2:	7d3b      	ldrb	r3, [r7, #20]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006cfa:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8006cfe:	7d7b      	ldrb	r3, [r7, #21]
 8006d00:	4619      	mov	r1, r3
 8006d02:	460b      	mov	r3, r1
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	1a5b      	subs	r3, r3, r1
 8006d08:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006d0a:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8006d0c:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8006d0e:	4413      	add	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d113      	bne.n	8006d40 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006d22:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	011b      	lsls	r3, r3, #4
 8006d30:	1a5b      	subs	r3, r3, r1
 8006d32:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006d34:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8006d3a:	4413      	add	r3, r2
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e01e      	b.n	8006d7e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 f9b2 	bl	80070ae <RTC_Bcd2ToByte>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006d52:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f9a7 	bl	80070ae <RTC_Bcd2ToByte>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	4613      	mov	r3, r2
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	1a9b      	subs	r3, r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006d6c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	789b      	ldrb	r3, [r3, #2]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f99b 	bl	80070ae <RTC_Bcd2ToByte>
 8006d78:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8006d7a:	4423      	add	r3, r4
 8006d7c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d205      	bcs.n	8006d92 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006d8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006d90:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006d92:	69f9      	ldr	r1, [r7, #28]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f8f6 	bl	8006f86 <RTC_WriteAlarmCounter>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2204      	movs	r2, #4
 8006da4:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e01f      	b.n	8006df0 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0202 	mvn.w	r2, #2
 8006db8:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0202 	orr.w	r2, r2, #2
 8006dc8:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006dca:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <HAL_RTC_SetAlarm_IT+0x164>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a0a      	ldr	r2, [pc, #40]	; (8006df8 <HAL_RTC_SetAlarm_IT+0x164>)
 8006dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dd4:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006dd6:	4b08      	ldr	r3, [pc, #32]	; (8006df8 <HAL_RTC_SetAlarm_IT+0x164>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	4a07      	ldr	r2, [pc, #28]	; (8006df8 <HAL_RTC_SetAlarm_IT+0x164>)
 8006ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de0:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
  }
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3724      	adds	r7, #36	; 0x24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd90      	pop	{r4, r7, pc}
 8006df8:	40010400 	.word	0x40010400

08006dfc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <HAL_RTC_AlarmIRQHandler+0x34>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <HAL_RTC_AlarmIRQHandler+0x34>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7fc fb6c 	bl	80034fe <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f06f 0202 	mvn.w	r2, #2
 8006e2e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006e30:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <HAL_RTC_AlarmIRQHandler+0x4c>)
 8006e32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006e36:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	745a      	strb	r2, [r3, #17]
}
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	40010400 	.word	0x40010400

08006e4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e01d      	b.n	8006e9e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0208 	bic.w	r2, r2, #8
 8006e70:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006e72:	f7fc fda5 	bl	80039c0 <HAL_GetTick>
 8006e76:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006e78:	e009      	b.n	8006e8e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006e7a:	f7fc fda1 	bl	80039c0 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e88:	d901      	bls.n	8006e8e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e007      	b.n	8006e9e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0ee      	beq.n	8006e7a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b087      	sub	sp, #28
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	827b      	strh	r3, [r7, #18]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	823b      	strh	r3, [r7, #16]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006ed6:	8a7a      	ldrh	r2, [r7, #18]
 8006ed8:	8a3b      	ldrh	r3, [r7, #16]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d008      	beq.n	8006ef0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006ede:	8a3b      	ldrh	r3, [r7, #16]
 8006ee0:	041a      	lsls	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]
 8006eee:	e004      	b.n	8006efa <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006ef0:	8a7b      	ldrh	r3, [r7, #18]
 8006ef2:	041a      	lsls	r2, r3, #16
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006efa:	697b      	ldr	r3, [r7, #20]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	371c      	adds	r7, #28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bc80      	pop	{r7}
 8006f04:	4770      	bx	lr

08006f06 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f85d 	bl	8006fd4 <RTC_EnterInitMode>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
 8006f24:	e011      	b.n	8006f4a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	0c12      	lsrs	r2, r2, #16
 8006f2e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	b292      	uxth	r2, r2
 8006f38:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f872 	bl	8007024 <RTC_ExitInitMode>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	81fb      	strh	r3, [r7, #14]
 8006f60:	2300      	movs	r3, #0
 8006f62:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006f74:	89fb      	ldrh	r3, [r7, #14]
 8006f76:	041a      	lsls	r2, r3, #16
 8006f78:	89bb      	ldrh	r3, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f81d 	bl	8006fd4 <RTC_EnterInitMode>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
 8006fa4:	e011      	b.n	8006fca <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	0c12      	lsrs	r2, r2, #16
 8006fae:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	b292      	uxth	r2, r2
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f832 	bl	8007024 <RTC_ExitInitMode>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006fe0:	f7fc fcee 	bl	80039c0 <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006fe6:	e009      	b.n	8006ffc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006fe8:	f7fc fcea 	bl	80039c0 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ff6:	d901      	bls.n	8006ffc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e00f      	b.n	800701c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0ee      	beq.n	8006fe8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f042 0210 	orr.w	r2, r2, #16
 8007018:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0210 	bic.w	r2, r2, #16
 800703e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007040:	f7fc fcbe 	bl	80039c0 <HAL_GetTick>
 8007044:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007046:	e009      	b.n	800705c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007048:	f7fc fcba 	bl	80039c0 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007056:	d901      	bls.n	800705c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e007      	b.n	800706c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0ee      	beq.n	8007048 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007082:	e005      	b.n	8007090 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3301      	adds	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	3b0a      	subs	r3, #10
 800708e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	2b09      	cmp	r3, #9
 8007094:	d8f6      	bhi.n	8007084 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	b2db      	uxtb	r3, r3
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	b2da      	uxtb	r2, r3
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	b2db      	uxtb	r3, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr

080070ae <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	4603      	mov	r3, r0
 80070b6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	091b      	lsrs	r3, r3, #4
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	f003 030f 	and.w	r3, r3, #15
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	4413      	add	r3, r2
 80070dc:	b2db      	uxtb	r3, r3
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bc80      	pop	{r7}
 80070e6:	4770      	bx	lr

080070e8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	7bdb      	ldrb	r3, [r3, #15]
 8007106:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	7b5b      	ldrb	r3, [r3, #13]
 800710c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7b9b      	ldrb	r3, [r3, #14]
 8007112:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007114:	2300      	movs	r3, #0
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	e06f      	b.n	80071fa <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d011      	beq.n	8007144 <RTC_DateUpdate+0x5c>
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b03      	cmp	r3, #3
 8007124:	d00e      	beq.n	8007144 <RTC_DateUpdate+0x5c>
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b05      	cmp	r3, #5
 800712a:	d00b      	beq.n	8007144 <RTC_DateUpdate+0x5c>
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	2b07      	cmp	r3, #7
 8007130:	d008      	beq.n	8007144 <RTC_DateUpdate+0x5c>
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d005      	beq.n	8007144 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b0a      	cmp	r3, #10
 800713c:	d002      	beq.n	8007144 <RTC_DateUpdate+0x5c>
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2b0c      	cmp	r3, #12
 8007142:	d117      	bne.n	8007174 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b1e      	cmp	r3, #30
 8007148:	d803      	bhi.n	8007152 <RTC_DateUpdate+0x6a>
      {
        day++;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3301      	adds	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007150:	e050      	b.n	80071f4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b0c      	cmp	r3, #12
 8007156:	d005      	beq.n	8007164 <RTC_DateUpdate+0x7c>
        {
          month++;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	3301      	adds	r3, #1
 800715c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800715e:	2301      	movs	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007162:	e047      	b.n	80071f4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8007164:	2301      	movs	r3, #1
 8007166:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007168:	2301      	movs	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
          year++;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	3301      	adds	r3, #1
 8007170:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8007172:	e03f      	b.n	80071f4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b04      	cmp	r3, #4
 8007178:	d008      	beq.n	800718c <RTC_DateUpdate+0xa4>
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b06      	cmp	r3, #6
 800717e:	d005      	beq.n	800718c <RTC_DateUpdate+0xa4>
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b09      	cmp	r3, #9
 8007184:	d002      	beq.n	800718c <RTC_DateUpdate+0xa4>
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b0b      	cmp	r3, #11
 800718a:	d10c      	bne.n	80071a6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b1d      	cmp	r3, #29
 8007190:	d803      	bhi.n	800719a <RTC_DateUpdate+0xb2>
      {
        day++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007198:	e02c      	b.n	80071f4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3301      	adds	r3, #1
 800719e:	613b      	str	r3, [r7, #16]
        day = 1U;
 80071a0:	2301      	movs	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80071a4:	e026      	b.n	80071f4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d123      	bne.n	80071f4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b1b      	cmp	r3, #27
 80071b0:	d803      	bhi.n	80071ba <RTC_DateUpdate+0xd2>
      {
        day++;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e01c      	b.n	80071f4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b1c      	cmp	r3, #28
 80071be:	d111      	bne.n	80071e4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f839 	bl	800723c <RTC_IsLeapYear>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e00d      	b.n	80071f4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	3301      	adds	r3, #1
 80071dc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80071de:	2301      	movs	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e007      	b.n	80071f4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b1d      	cmp	r3, #29
 80071e8:	d104      	bne.n	80071f4 <RTC_DateUpdate+0x10c>
      {
        month++;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	3301      	adds	r3, #1
 80071ee:	613b      	str	r3, [r7, #16]
        day = 1U;
 80071f0:	2301      	movs	r3, #1
 80071f2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3301      	adds	r3, #1
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d38b      	bcc.n	800711a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	b2db      	uxtb	r3, r3
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	4619      	mov	r1, r3
 8007224:	6978      	ldr	r0, [r7, #20]
 8007226:	f000 f83b 	bl	80072a0 <RTC_WeekDayNum>
 800722a:	4603      	mov	r3, r0
 800722c:	461a      	mov	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	731a      	strb	r2, [r3, #12]
}
 8007232:	bf00      	nop
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	e01d      	b.n	8007292 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	4a10      	ldr	r2, [pc, #64]	; (800729c <RTC_IsLeapYear+0x60>)
 800725a:	fba2 1203 	umull	r1, r2, r2, r3
 800725e:	0952      	lsrs	r2, r2, #5
 8007260:	2164      	movs	r1, #100	; 0x64
 8007262:	fb01 f202 	mul.w	r2, r1, r2
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800726e:	2301      	movs	r3, #1
 8007270:	e00f      	b.n	8007292 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	4a09      	ldr	r2, [pc, #36]	; (800729c <RTC_IsLeapYear+0x60>)
 8007276:	fba2 1203 	umull	r1, r2, r2, r3
 800727a:	09d2      	lsrs	r2, r2, #7
 800727c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007280:	fb01 f202 	mul.w	r2, r1, r2
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8007290:	2300      	movs	r3, #0
  }
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	51eb851f 	.word	0x51eb851f

080072a0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
 80072ac:	4613      	mov	r3, r2
 80072ae:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60bb      	str	r3, [r7, #8]
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80072be:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d82d      	bhi.n	8007322 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80072c6:	78fa      	ldrb	r2, [r7, #3]
 80072c8:	4613      	mov	r3, r2
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	4413      	add	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	1a9b      	subs	r3, r3, r2
 80072d2:	4a2c      	ldr	r2, [pc, #176]	; (8007384 <RTC_WeekDayNum+0xe4>)
 80072d4:	fba2 2303 	umull	r2, r3, r2, r3
 80072d8:	085a      	lsrs	r2, r3, #1
 80072da:	78bb      	ldrb	r3, [r7, #2]
 80072dc:	441a      	add	r2, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	441a      	add	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	089b      	lsrs	r3, r3, #2
 80072e8:	441a      	add	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	4926      	ldr	r1, [pc, #152]	; (8007388 <RTC_WeekDayNum+0xe8>)
 80072f0:	fba1 1303 	umull	r1, r3, r1, r3
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	1ad2      	subs	r2, r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	4922      	ldr	r1, [pc, #136]	; (8007388 <RTC_WeekDayNum+0xe8>)
 80072fe:	fba1 1303 	umull	r1, r3, r1, r3
 8007302:	09db      	lsrs	r3, r3, #7
 8007304:	4413      	add	r3, r2
 8007306:	1d1a      	adds	r2, r3, #4
 8007308:	4b20      	ldr	r3, [pc, #128]	; (800738c <RTC_WeekDayNum+0xec>)
 800730a:	fba3 1302 	umull	r1, r3, r3, r2
 800730e:	1ad1      	subs	r1, r2, r3
 8007310:	0849      	lsrs	r1, r1, #1
 8007312:	440b      	add	r3, r1
 8007314:	0899      	lsrs	r1, r3, #2
 8007316:	460b      	mov	r3, r1
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	1a5b      	subs	r3, r3, r1
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	e029      	b.n	8007376 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	4613      	mov	r3, r2
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	4413      	add	r3, r2
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	1a9b      	subs	r3, r3, r2
 800732e:	4a15      	ldr	r2, [pc, #84]	; (8007384 <RTC_WeekDayNum+0xe4>)
 8007330:	fba2 2303 	umull	r2, r3, r2, r3
 8007334:	085a      	lsrs	r2, r3, #1
 8007336:	78bb      	ldrb	r3, [r7, #2]
 8007338:	441a      	add	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	441a      	add	r2, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	089b      	lsrs	r3, r3, #2
 8007342:	441a      	add	r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	4910      	ldr	r1, [pc, #64]	; (8007388 <RTC_WeekDayNum+0xe8>)
 8007348:	fba1 1303 	umull	r1, r3, r1, r3
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	1ad2      	subs	r2, r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	490d      	ldr	r1, [pc, #52]	; (8007388 <RTC_WeekDayNum+0xe8>)
 8007354:	fba1 1303 	umull	r1, r3, r1, r3
 8007358:	09db      	lsrs	r3, r3, #7
 800735a:	4413      	add	r3, r2
 800735c:	1c9a      	adds	r2, r3, #2
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <RTC_WeekDayNum+0xec>)
 8007360:	fba3 1302 	umull	r1, r3, r3, r2
 8007364:	1ad1      	subs	r1, r2, r3
 8007366:	0849      	lsrs	r1, r1, #1
 8007368:	440b      	add	r3, r1
 800736a:	0899      	lsrs	r1, r3, #2
 800736c:	460b      	mov	r3, r1
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	1a5b      	subs	r3, r3, r1
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	b2db      	uxtb	r3, r3
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	bc80      	pop	{r7}
 8007382:	4770      	bx	lr
 8007384:	38e38e39 	.word	0x38e38e39
 8007388:	51eb851f 	.word	0x51eb851f
 800738c:	24924925 	.word	0x24924925

08007390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e053      	b.n	800744a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d106      	bne.n	80073c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7fc f95f 	bl	8003680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2202      	movs	r2, #2
 80073c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	ea42 0103 	orr.w	r1, r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	0c1a      	lsrs	r2, r3, #16
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f002 0204 	and.w	r2, r2, #4
 8007428:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007438:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b088      	sub	sp, #32
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	4613      	mov	r3, r2
 8007460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_SPI_Transmit+0x22>
 8007470:	2302      	movs	r3, #2
 8007472:	e11e      	b.n	80076b2 <HAL_SPI_Transmit+0x260>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800747c:	f7fc faa0 	bl	80039c0 <HAL_GetTick>
 8007480:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b01      	cmp	r3, #1
 8007490:	d002      	beq.n	8007498 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007492:	2302      	movs	r3, #2
 8007494:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007496:	e103      	b.n	80076a0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_SPI_Transmit+0x52>
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074a8:	e0fa      	b.n	80076a0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2203      	movs	r2, #3
 80074ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	88fa      	ldrh	r2, [r7, #6]
 80074c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	88fa      	ldrh	r2, [r7, #6]
 80074c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f0:	d107      	bne.n	8007502 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007500:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d007      	beq.n	8007520 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800751e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007528:	d14b      	bne.n	80075c2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <HAL_SPI_Transmit+0xe6>
 8007532:	8afb      	ldrh	r3, [r7, #22]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d13e      	bne.n	80075b6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753c:	881a      	ldrh	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	1c9a      	adds	r2, r3, #2
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800755c:	e02b      	b.n	80075b6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b02      	cmp	r3, #2
 800756a:	d112      	bne.n	8007592 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	881a      	ldrh	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	1c9a      	adds	r2, r3, #2
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007590:	e011      	b.n	80075b6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007592:	f7fc fa15 	bl	80039c0 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d803      	bhi.n	80075aa <HAL_SPI_Transmit+0x158>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a8:	d102      	bne.n	80075b0 <HAL_SPI_Transmit+0x15e>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075b4:	e074      	b.n	80076a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1ce      	bne.n	800755e <HAL_SPI_Transmit+0x10c>
 80075c0:	e04c      	b.n	800765c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_SPI_Transmit+0x17e>
 80075ca:	8afb      	ldrh	r3, [r7, #22]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d140      	bne.n	8007652 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075f6:	e02c      	b.n	8007652 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b02      	cmp	r3, #2
 8007604:	d113      	bne.n	800762e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	330c      	adds	r3, #12
 8007610:	7812      	ldrb	r2, [r2, #0]
 8007612:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	86da      	strh	r2, [r3, #54]	; 0x36
 800762c:	e011      	b.n	8007652 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800762e:	f7fc f9c7 	bl	80039c0 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d803      	bhi.n	8007646 <HAL_SPI_Transmit+0x1f4>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007644:	d102      	bne.n	800764c <HAL_SPI_Transmit+0x1fa>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007650:	e026      	b.n	80076a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1cd      	bne.n	80075f8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fa43 	bl	8007aec <SPI_EndRxTxTransaction>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2220      	movs	r2, #32
 8007670:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10a      	bne.n	8007690 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800767a:	2300      	movs	r3, #0
 800767c:	613b      	str	r3, [r7, #16]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	613b      	str	r3, [r7, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	77fb      	strb	r3, [r7, #31]
 800769c:	e000      	b.n	80076a0 <HAL_SPI_Transmit+0x24e>
  }

error:
 800769e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b08c      	sub	sp, #48	; 0x30
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076c8:	2301      	movs	r3, #1
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_SPI_TransmitReceive+0x26>
 80076dc:	2302      	movs	r3, #2
 80076de:	e18a      	b.n	80079f6 <HAL_SPI_TransmitReceive+0x33c>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076e8:	f7fc f96a 	bl	80039c0 <HAL_GetTick>
 80076ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076fe:	887b      	ldrh	r3, [r7, #2]
 8007700:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007706:	2b01      	cmp	r3, #1
 8007708:	d00f      	beq.n	800772a <HAL_SPI_TransmitReceive+0x70>
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007710:	d107      	bne.n	8007722 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d103      	bne.n	8007722 <HAL_SPI_TransmitReceive+0x68>
 800771a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800771e:	2b04      	cmp	r3, #4
 8007720:	d003      	beq.n	800772a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007722:	2302      	movs	r3, #2
 8007724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007728:	e15b      	b.n	80079e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <HAL_SPI_TransmitReceive+0x82>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <HAL_SPI_TransmitReceive+0x82>
 8007736:	887b      	ldrh	r3, [r7, #2]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d103      	bne.n	8007744 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007742:	e14e      	b.n	80079e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b04      	cmp	r3, #4
 800774e:	d003      	beq.n	8007758 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2205      	movs	r2, #5
 8007754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	887a      	ldrh	r2, [r7, #2]
 8007768:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	887a      	ldrh	r2, [r7, #2]
 800776e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	887a      	ldrh	r2, [r7, #2]
 800777a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	887a      	ldrh	r2, [r7, #2]
 8007780:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007798:	2b40      	cmp	r3, #64	; 0x40
 800779a:	d007      	beq.n	80077ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b4:	d178      	bne.n	80078a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_SPI_TransmitReceive+0x10a>
 80077be:	8b7b      	ldrh	r3, [r7, #26]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d166      	bne.n	8007892 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	881a      	ldrh	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	1c9a      	adds	r2, r3, #2
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077e8:	e053      	b.n	8007892 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d11b      	bne.n	8007830 <HAL_SPI_TransmitReceive+0x176>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d016      	beq.n	8007830 <HAL_SPI_TransmitReceive+0x176>
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d113      	bne.n	8007830 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	881a      	ldrh	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	1c9a      	adds	r2, r3, #2
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	d119      	bne.n	8007872 <HAL_SPI_TransmitReceive+0x1b8>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007842:	b29b      	uxth	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d014      	beq.n	8007872 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	b292      	uxth	r2, r2
 8007854:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	1c9a      	adds	r2, r3, #2
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007864:	b29b      	uxth	r3, r3
 8007866:	3b01      	subs	r3, #1
 8007868:	b29a      	uxth	r2, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800786e:	2301      	movs	r3, #1
 8007870:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007872:	f7fc f8a5 	bl	80039c0 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800787e:	429a      	cmp	r2, r3
 8007880:	d807      	bhi.n	8007892 <HAL_SPI_TransmitReceive+0x1d8>
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007888:	d003      	beq.n	8007892 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007890:	e0a7      	b.n	80079e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1a6      	bne.n	80077ea <HAL_SPI_TransmitReceive+0x130>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1a1      	bne.n	80077ea <HAL_SPI_TransmitReceive+0x130>
 80078a6:	e07c      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_SPI_TransmitReceive+0x1fc>
 80078b0:	8b7b      	ldrh	r3, [r7, #26]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d16b      	bne.n	800798e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	330c      	adds	r3, #12
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078dc:	e057      	b.n	800798e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d11c      	bne.n	8007926 <HAL_SPI_TransmitReceive+0x26c>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d017      	beq.n	8007926 <HAL_SPI_TransmitReceive+0x26c>
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d114      	bne.n	8007926 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	330c      	adds	r3, #12
 8007906:	7812      	ldrb	r2, [r2, #0]
 8007908:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	1c5a      	adds	r2, r3, #1
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b01      	cmp	r3, #1
 8007932:	d119      	bne.n	8007968 <HAL_SPI_TransmitReceive+0x2ae>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d014      	beq.n	8007968 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	b2d2      	uxtb	r2, r2
 800794a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007964:	2301      	movs	r3, #1
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007968:	f7fc f82a 	bl	80039c0 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007974:	429a      	cmp	r2, r3
 8007976:	d803      	bhi.n	8007980 <HAL_SPI_TransmitReceive+0x2c6>
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800797e:	d102      	bne.n	8007986 <HAL_SPI_TransmitReceive+0x2cc>
 8007980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800798c:	e029      	b.n	80079e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1a2      	bne.n	80078de <HAL_SPI_TransmitReceive+0x224>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d19d      	bne.n	80078de <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f8a0 	bl	8007aec <SPI_EndRxTxTransaction>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d006      	beq.n	80079c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2220      	movs	r2, #32
 80079bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079be:	e010      	b.n	80079e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10b      	bne.n	80079e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079c8:	2300      	movs	r3, #0
 80079ca:	617b      	str	r3, [r7, #20]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	e000      	b.n	80079e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3730      	adds	r7, #48	; 0x30
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a0c:	b2db      	uxtb	r3, r3
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	4613      	mov	r3, r2
 8007a26:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a28:	e04c      	b.n	8007ac4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a30:	d048      	beq.n	8007ac4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007a32:	f7fb ffc5 	bl	80039c0 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d902      	bls.n	8007a48 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d13d      	bne.n	8007ac4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a60:	d111      	bne.n	8007a86 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a6a:	d004      	beq.n	8007a76 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a74:	d107      	bne.n	8007a86 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8e:	d10f      	bne.n	8007ab0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e00f      	b.n	8007ae4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4013      	ands	r3, r2
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	bf0c      	ite	eq
 8007ad4:	2301      	moveq	r3, #1
 8007ad6:	2300      	movne	r3, #0
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	461a      	mov	r2, r3
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d1a3      	bne.n	8007a2a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	2180      	movs	r1, #128	; 0x80
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7ff ff88 	bl	8007a18 <SPI_WaitFlagStateUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b12:	f043 0220 	orr.w	r2, r3, #32
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e000      	b.n	8007b20 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e01d      	b.n	8007b76 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fb fde0 	bl	8003714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f000 fbda 	bl	8008320 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e01d      	b.n	8007bcc <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d106      	bne.n	8007baa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f815 	bl	8007bd4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2202      	movs	r2, #2
 8007bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f000 fbaf 	bl	8008320 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bc80      	pop	{r7}
 8007be4:	4770      	bx	lr
	...

08007be8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b0c      	cmp	r3, #12
 8007bf6:	d841      	bhi.n	8007c7c <HAL_TIM_IC_Start_IT+0x94>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <HAL_TIM_IC_Start_IT+0x18>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c35 	.word	0x08007c35
 8007c04:	08007c7d 	.word	0x08007c7d
 8007c08:	08007c7d 	.word	0x08007c7d
 8007c0c:	08007c7d 	.word	0x08007c7d
 8007c10:	08007c47 	.word	0x08007c47
 8007c14:	08007c7d 	.word	0x08007c7d
 8007c18:	08007c7d 	.word	0x08007c7d
 8007c1c:	08007c7d 	.word	0x08007c7d
 8007c20:	08007c59 	.word	0x08007c59
 8007c24:	08007c7d 	.word	0x08007c7d
 8007c28:	08007c7d 	.word	0x08007c7d
 8007c2c:	08007c7d 	.word	0x08007c7d
 8007c30:	08007c6b 	.word	0x08007c6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0202 	orr.w	r2, r2, #2
 8007c42:	60da      	str	r2, [r3, #12]
      break;
 8007c44:	e01b      	b.n	8007c7e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0204 	orr.w	r2, r2, #4
 8007c54:	60da      	str	r2, [r3, #12]
      break;
 8007c56:	e012      	b.n	8007c7e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0208 	orr.w	r2, r2, #8
 8007c66:	60da      	str	r2, [r3, #12]
      break;
 8007c68:	e009      	b.n	8007c7e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0210 	orr.w	r2, r2, #16
 8007c78:	60da      	str	r2, [r3, #12]
      break;
 8007c7a:	e000      	b.n	8007c7e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007c7c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2201      	movs	r2, #1
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fd5f 	bl	800874a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b06      	cmp	r3, #6
 8007c9c:	d007      	beq.n	8007cae <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0201 	orr.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b0c      	cmp	r3, #12
 8007cc6:	d841      	bhi.n	8007d4c <HAL_TIM_IC_Stop_IT+0x94>
 8007cc8:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <HAL_TIM_IC_Stop_IT+0x18>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007d05 	.word	0x08007d05
 8007cd4:	08007d4d 	.word	0x08007d4d
 8007cd8:	08007d4d 	.word	0x08007d4d
 8007cdc:	08007d4d 	.word	0x08007d4d
 8007ce0:	08007d17 	.word	0x08007d17
 8007ce4:	08007d4d 	.word	0x08007d4d
 8007ce8:	08007d4d 	.word	0x08007d4d
 8007cec:	08007d4d 	.word	0x08007d4d
 8007cf0:	08007d29 	.word	0x08007d29
 8007cf4:	08007d4d 	.word	0x08007d4d
 8007cf8:	08007d4d 	.word	0x08007d4d
 8007cfc:	08007d4d 	.word	0x08007d4d
 8007d00:	08007d3b 	.word	0x08007d3b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0202 	bic.w	r2, r2, #2
 8007d12:	60da      	str	r2, [r3, #12]
      break;
 8007d14:	e01b      	b.n	8007d4e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0204 	bic.w	r2, r2, #4
 8007d24:	60da      	str	r2, [r3, #12]
      break;
 8007d26:	e012      	b.n	8007d4e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0208 	bic.w	r2, r2, #8
 8007d36:	60da      	str	r2, [r3, #12]
      break;
 8007d38:	e009      	b.n	8007d4e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0210 	bic.w	r2, r2, #16
 8007d48:	60da      	str	r2, [r3, #12]
      break;
 8007d4a:	e000      	b.n	8007d4e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8007d4c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 fcf7 	bl	800874a <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6a1a      	ldr	r2, [r3, #32]
 8007d62:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10f      	bne.n	8007d8c <HAL_TIM_IC_Stop_IT+0xd4>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6a1a      	ldr	r2, [r3, #32]
 8007d72:	f240 4344 	movw	r3, #1092	; 0x444
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d107      	bne.n	8007d8c <HAL_TIM_IC_Stop_IT+0xd4>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 0201 	bic.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop

08007d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d122      	bne.n	8007df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d11b      	bne.n	8007df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f06f 0202 	mvn.w	r2, #2
 8007dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	f003 0303 	and.w	r3, r3, #3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7fb fb84 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 8007de0:	e005      	b.n	8007dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa81 	bl	80082ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fa87 	bl	80082fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0304 	and.w	r3, r3, #4
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d122      	bne.n	8007e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d11b      	bne.n	8007e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f06f 0204 	mvn.w	r2, #4
 8007e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fb fb5a 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 8007e34:	e005      	b.n	8007e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa57 	bl	80082ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fa5d 	bl	80082fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	2b08      	cmp	r3, #8
 8007e54:	d122      	bne.n	8007e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f003 0308 	and.w	r3, r3, #8
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d11b      	bne.n	8007e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0208 	mvn.w	r2, #8
 8007e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2204      	movs	r2, #4
 8007e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7fb fb30 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 8007e88:	e005      	b.n	8007e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa2d 	bl	80082ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fa33 	bl	80082fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f003 0310 	and.w	r3, r3, #16
 8007ea6:	2b10      	cmp	r3, #16
 8007ea8:	d122      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f003 0310 	and.w	r3, r3, #16
 8007eb4:	2b10      	cmp	r3, #16
 8007eb6:	d11b      	bne.n	8007ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f06f 0210 	mvn.w	r2, #16
 8007ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2208      	movs	r2, #8
 8007ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fb fb06 	bl	80034e8 <HAL_TIM_IC_CaptureCallback>
 8007edc:	e005      	b.n	8007eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa03 	bl	80082ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fa09 	bl	80082fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d10e      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d107      	bne.n	8007f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f06f 0201 	mvn.w	r2, #1
 8007f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f9de 	bl	80082d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f26:	2b80      	cmp	r3, #128	; 0x80
 8007f28:	d10e      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f34:	2b80      	cmp	r3, #128	; 0x80
 8007f36:	d107      	bne.n	8007f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fc72 	bl	800882c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f52:	2b40      	cmp	r3, #64	; 0x40
 8007f54:	d10e      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f60:	2b40      	cmp	r3, #64	; 0x40
 8007f62:	d107      	bne.n	8007f74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9cd 	bl	800830e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	d10e      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d107      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f06f 0220 	mvn.w	r2, #32
 8007f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fc3d 	bl	800881a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d101      	bne.n	8007fc2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e08a      	b.n	80080d8 <HAL_TIM_IC_ConfigChannel+0x130>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2202      	movs	r2, #2
 8007fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d11b      	bne.n	8008010 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f000 fa06 	bl	80083f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	699a      	ldr	r2, [r3, #24]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 020c 	bic.w	r2, r2, #12
 8007ffa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6999      	ldr	r1, [r3, #24]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	619a      	str	r2, [r3, #24]
 800800e:	e05a      	b.n	80080c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b04      	cmp	r3, #4
 8008014:	d11c      	bne.n	8008050 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6818      	ldr	r0, [r3, #0]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	6819      	ldr	r1, [r3, #0]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f000 fa75 	bl	8008514 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	699a      	ldr	r2, [r3, #24]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008038:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6999      	ldr	r1, [r3, #24]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	021a      	lsls	r2, r3, #8
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	619a      	str	r2, [r3, #24]
 800804e:	e03a      	b.n	80080c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b08      	cmp	r3, #8
 8008054:	d11b      	bne.n	800808e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	6819      	ldr	r1, [r3, #0]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	f000 fac0 	bl	80085ea <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	69da      	ldr	r2, [r3, #28]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 020c 	bic.w	r2, r2, #12
 8008078:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69d9      	ldr	r1, [r3, #28]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	61da      	str	r2, [r3, #28]
 800808c:	e01b      	b.n	80080c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6818      	ldr	r0, [r3, #0]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6819      	ldr	r1, [r3, #0]
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f000 fadf 	bl	8008660 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80080b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69d9      	ldr	r1, [r3, #28]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	021a      	lsls	r2, r3, #8
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d101      	bne.n	80080f8 <HAL_TIM_ConfigClockSource+0x18>
 80080f4:	2302      	movs	r3, #2
 80080f6:	e0a6      	b.n	8008246 <HAL_TIM_ConfigClockSource+0x166>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008116:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800811e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b40      	cmp	r3, #64	; 0x40
 800812e:	d067      	beq.n	8008200 <HAL_TIM_ConfigClockSource+0x120>
 8008130:	2b40      	cmp	r3, #64	; 0x40
 8008132:	d80b      	bhi.n	800814c <HAL_TIM_ConfigClockSource+0x6c>
 8008134:	2b10      	cmp	r3, #16
 8008136:	d073      	beq.n	8008220 <HAL_TIM_ConfigClockSource+0x140>
 8008138:	2b10      	cmp	r3, #16
 800813a:	d802      	bhi.n	8008142 <HAL_TIM_ConfigClockSource+0x62>
 800813c:	2b00      	cmp	r3, #0
 800813e:	d06f      	beq.n	8008220 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008140:	e078      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008142:	2b20      	cmp	r3, #32
 8008144:	d06c      	beq.n	8008220 <HAL_TIM_ConfigClockSource+0x140>
 8008146:	2b30      	cmp	r3, #48	; 0x30
 8008148:	d06a      	beq.n	8008220 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800814a:	e073      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800814c:	2b70      	cmp	r3, #112	; 0x70
 800814e:	d00d      	beq.n	800816c <HAL_TIM_ConfigClockSource+0x8c>
 8008150:	2b70      	cmp	r3, #112	; 0x70
 8008152:	d804      	bhi.n	800815e <HAL_TIM_ConfigClockSource+0x7e>
 8008154:	2b50      	cmp	r3, #80	; 0x50
 8008156:	d033      	beq.n	80081c0 <HAL_TIM_ConfigClockSource+0xe0>
 8008158:	2b60      	cmp	r3, #96	; 0x60
 800815a:	d041      	beq.n	80081e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800815c:	e06a      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800815e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008162:	d066      	beq.n	8008232 <HAL_TIM_ConfigClockSource+0x152>
 8008164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008168:	d017      	beq.n	800819a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800816a:	e063      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	6899      	ldr	r1, [r3, #8]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f000 fac6 	bl	800870c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800818e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	609a      	str	r2, [r3, #8]
      break;
 8008198:	e04c      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6818      	ldr	r0, [r3, #0]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6899      	ldr	r1, [r3, #8]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f000 faaf 	bl	800870c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081bc:	609a      	str	r2, [r3, #8]
      break;
 80081be:	e039      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	6859      	ldr	r1, [r3, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	461a      	mov	r2, r3
 80081ce:	f000 f973 	bl	80084b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2150      	movs	r1, #80	; 0x50
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 fa7d 	bl	80086d8 <TIM_ITRx_SetConfig>
      break;
 80081de:	e029      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	6859      	ldr	r1, [r3, #4]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	461a      	mov	r2, r3
 80081ee:	f000 f9cd 	bl	800858c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2160      	movs	r1, #96	; 0x60
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fa6d 	bl	80086d8 <TIM_ITRx_SetConfig>
      break;
 80081fe:	e019      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6859      	ldr	r1, [r3, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	461a      	mov	r2, r3
 800820e:	f000 f953 	bl	80084b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2140      	movs	r1, #64	; 0x40
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fa5d 	bl	80086d8 <TIM_ITRx_SetConfig>
      break;
 800821e:	e009      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4619      	mov	r1, r3
 800822a:	4610      	mov	r0, r2
 800822c:	f000 fa54 	bl	80086d8 <TIM_ITRx_SetConfig>
      break;
 8008230:	e000      	b.n	8008234 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b0c      	cmp	r3, #12
 8008262:	d831      	bhi.n	80082c8 <HAL_TIM_ReadCapturedValue+0x78>
 8008264:	a201      	add	r2, pc, #4	; (adr r2, 800826c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	080082a1 	.word	0x080082a1
 8008270:	080082c9 	.word	0x080082c9
 8008274:	080082c9 	.word	0x080082c9
 8008278:	080082c9 	.word	0x080082c9
 800827c:	080082ab 	.word	0x080082ab
 8008280:	080082c9 	.word	0x080082c9
 8008284:	080082c9 	.word	0x080082c9
 8008288:	080082c9 	.word	0x080082c9
 800828c:	080082b5 	.word	0x080082b5
 8008290:	080082c9 	.word	0x080082c9
 8008294:	080082c9 	.word	0x080082c9
 8008298:	080082c9 	.word	0x080082c9
 800829c:	080082bf 	.word	0x080082bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a6:	60fb      	str	r3, [r7, #12]

      break;
 80082a8:	e00f      	b.n	80082ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b0:	60fb      	str	r3, [r7, #12]

      break;
 80082b2:	e00a      	b.n	80082ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ba:	60fb      	str	r3, [r7, #12]

      break;
 80082bc:	e005      	b.n	80082ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	60fb      	str	r3, [r7, #12]

      break;
 80082c6:	e000      	b.n	80082ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80082c8:	bf00      	nop
  }

  return tmpreg;
 80082ca:	68fb      	ldr	r3, [r7, #12]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop

080082d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr

080082ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr

080082fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr

0800830e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr

08008320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a2d      	ldr	r2, [pc, #180]	; (80083e8 <TIM_Base_SetConfig+0xc8>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00f      	beq.n	8008358 <TIM_Base_SetConfig+0x38>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833e:	d00b      	beq.n	8008358 <TIM_Base_SetConfig+0x38>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a2a      	ldr	r2, [pc, #168]	; (80083ec <TIM_Base_SetConfig+0xcc>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d007      	beq.n	8008358 <TIM_Base_SetConfig+0x38>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a29      	ldr	r2, [pc, #164]	; (80083f0 <TIM_Base_SetConfig+0xd0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_Base_SetConfig+0x38>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a28      	ldr	r2, [pc, #160]	; (80083f4 <TIM_Base_SetConfig+0xd4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d108      	bne.n	800836a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a1e      	ldr	r2, [pc, #120]	; (80083e8 <TIM_Base_SetConfig+0xc8>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00f      	beq.n	8008392 <TIM_Base_SetConfig+0x72>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008378:	d00b      	beq.n	8008392 <TIM_Base_SetConfig+0x72>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a1b      	ldr	r2, [pc, #108]	; (80083ec <TIM_Base_SetConfig+0xcc>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d007      	beq.n	8008392 <TIM_Base_SetConfig+0x72>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a1a      	ldr	r2, [pc, #104]	; (80083f0 <TIM_Base_SetConfig+0xd0>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d003      	beq.n	8008392 <TIM_Base_SetConfig+0x72>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a19      	ldr	r2, [pc, #100]	; (80083f4 <TIM_Base_SetConfig+0xd4>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d108      	bne.n	80083a4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a07      	ldr	r2, [pc, #28]	; (80083e8 <TIM_Base_SetConfig+0xc8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d103      	bne.n	80083d8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	615a      	str	r2, [r3, #20]
}
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr
 80083e8:	40012c00 	.word	0x40012c00
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00

080083f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f023 0201 	bic.w	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4a21      	ldr	r2, [pc, #132]	; (80084a8 <TIM_TI1_SetConfig+0xb0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d00f      	beq.n	8008446 <TIM_TI1_SetConfig+0x4e>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842c:	d00b      	beq.n	8008446 <TIM_TI1_SetConfig+0x4e>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a1e      	ldr	r2, [pc, #120]	; (80084ac <TIM_TI1_SetConfig+0xb4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d007      	beq.n	8008446 <TIM_TI1_SetConfig+0x4e>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4a1d      	ldr	r2, [pc, #116]	; (80084b0 <TIM_TI1_SetConfig+0xb8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d003      	beq.n	8008446 <TIM_TI1_SetConfig+0x4e>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4a1c      	ldr	r2, [pc, #112]	; (80084b4 <TIM_TI1_SetConfig+0xbc>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d101      	bne.n	800844a <TIM_TI1_SetConfig+0x52>
 8008446:	2301      	movs	r3, #1
 8008448:	e000      	b.n	800844c <TIM_TI1_SetConfig+0x54>
 800844a:	2300      	movs	r3, #0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d008      	beq.n	8008462 <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4313      	orrs	r3, r2
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	e003      	b.n	800846a <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f043 0301 	orr.w	r3, r3, #1
 8008468:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	011b      	lsls	r3, r3, #4
 8008476:	b2db      	uxtb	r3, r3
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	4313      	orrs	r3, r2
 800847c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f023 030a 	bic.w	r3, r3, #10
 8008484:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	f003 030a 	and.w	r3, r3, #10
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	4313      	orrs	r3, r2
 8008490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	621a      	str	r2, [r3, #32]
}
 800849e:	bf00      	nop
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr
 80084a8:	40012c00 	.word	0x40012c00
 80084ac:	40000400 	.word	0x40000400
 80084b0:	40000800 	.word	0x40000800
 80084b4:	40000c00 	.word	0x40000c00

080084b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	f023 0201 	bic.w	r2, r3, #1
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f023 030a 	bic.w	r3, r3, #10
 80084f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr

08008514 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f023 0210 	bic.w	r2, r3, #16
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008552:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	031b      	lsls	r3, r3, #12
 8008558:	b29b      	uxth	r3, r3
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008566:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	621a      	str	r2, [r3, #32]
}
 8008582:	bf00      	nop
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	f023 0210 	bic.w	r2, r3, #16
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	031b      	lsls	r3, r3, #12
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr

080085ea <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
 80085f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f023 0303 	bic.w	r3, r3, #3
 8008616:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008626:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	b2db      	uxtb	r3, r3
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800863a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4313      	orrs	r3, r2
 8008648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr

08008660 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800868c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800869e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	031b      	lsls	r3, r3, #12
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	031b      	lsls	r3, r3, #12
 80086b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4313      	orrs	r3, r2
 80086c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	621a      	str	r2, [r3, #32]
}
 80086ce:	bf00      	nop
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bc80      	pop	{r7}
 80086d6:	4770      	bx	lr

080086d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	f043 0307 	orr.w	r3, r3, #7
 80086fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	609a      	str	r2, [r3, #8]
}
 8008702:	bf00      	nop
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	021a      	lsls	r2, r3, #8
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	431a      	orrs	r2, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4313      	orrs	r3, r2
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	609a      	str	r2, [r3, #8]
}
 8008740:	bf00      	nop
 8008742:	371c      	adds	r7, #28
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr

0800874a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800874a:	b480      	push	{r7}
 800874c:	b087      	sub	sp, #28
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f003 031f 	and.w	r3, r3, #31
 800875c:	2201      	movs	r2, #1
 800875e:	fa02 f303 	lsl.w	r3, r2, r3
 8008762:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6a1a      	ldr	r2, [r3, #32]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	43db      	mvns	r3, r3
 800876c:	401a      	ands	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1a      	ldr	r2, [r3, #32]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f003 031f 	and.w	r3, r3, #31
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	fa01 f303 	lsl.w	r3, r1, r3
 8008782:	431a      	orrs	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	621a      	str	r2, [r3, #32]
}
 8008788:	bf00      	nop
 800878a:	371c      	adds	r7, #28
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr

08008792 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d101      	bne.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087a6:	2302      	movs	r3, #2
 80087a8:	e032      	b.n	8008810 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2202      	movs	r2, #2
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087e2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	bc80      	pop	{r7}
 8008818:	4770      	bx	lr

0800881a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	bc80      	pop	{r7}
 800882a:	4770      	bx	lr

0800882c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	bc80      	pop	{r7}
 800883c:	4770      	bx	lr
	...

08008840 <__errno>:
 8008840:	4b01      	ldr	r3, [pc, #4]	; (8008848 <__errno+0x8>)
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	20000010 	.word	0x20000010

0800884c <__libc_init_array>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	2500      	movs	r5, #0
 8008850:	4e0c      	ldr	r6, [pc, #48]	; (8008884 <__libc_init_array+0x38>)
 8008852:	4c0d      	ldr	r4, [pc, #52]	; (8008888 <__libc_init_array+0x3c>)
 8008854:	1ba4      	subs	r4, r4, r6
 8008856:	10a4      	asrs	r4, r4, #2
 8008858:	42a5      	cmp	r5, r4
 800885a:	d109      	bne.n	8008870 <__libc_init_array+0x24>
 800885c:	f001 fe04 	bl	800a468 <_init>
 8008860:	2500      	movs	r5, #0
 8008862:	4e0a      	ldr	r6, [pc, #40]	; (800888c <__libc_init_array+0x40>)
 8008864:	4c0a      	ldr	r4, [pc, #40]	; (8008890 <__libc_init_array+0x44>)
 8008866:	1ba4      	subs	r4, r4, r6
 8008868:	10a4      	asrs	r4, r4, #2
 800886a:	42a5      	cmp	r5, r4
 800886c:	d105      	bne.n	800887a <__libc_init_array+0x2e>
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008874:	4798      	blx	r3
 8008876:	3501      	adds	r5, #1
 8008878:	e7ee      	b.n	8008858 <__libc_init_array+0xc>
 800887a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800887e:	4798      	blx	r3
 8008880:	3501      	adds	r5, #1
 8008882:	e7f2      	b.n	800886a <__libc_init_array+0x1e>
 8008884:	0800a5c8 	.word	0x0800a5c8
 8008888:	0800a5c8 	.word	0x0800a5c8
 800888c:	0800a5c8 	.word	0x0800a5c8
 8008890:	0800a5cc 	.word	0x0800a5cc

08008894 <memset>:
 8008894:	4603      	mov	r3, r0
 8008896:	4402      	add	r2, r0
 8008898:	4293      	cmp	r3, r2
 800889a:	d100      	bne.n	800889e <memset+0xa>
 800889c:	4770      	bx	lr
 800889e:	f803 1b01 	strb.w	r1, [r3], #1
 80088a2:	e7f9      	b.n	8008898 <memset+0x4>

080088a4 <atan2>:
 80088a4:	f000 ba2c 	b.w	8008d00 <__ieee754_atan2>

080088a8 <exp>:
 80088a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088ac:	b08b      	sub	sp, #44	; 0x2c
 80088ae:	4604      	mov	r4, r0
 80088b0:	460d      	mov	r5, r1
 80088b2:	f000 fb05 	bl	8008ec0 <__ieee754_exp>
 80088b6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8008994 <exp+0xec>
 80088ba:	4606      	mov	r6, r0
 80088bc:	f998 3000 	ldrsb.w	r3, [r8]
 80088c0:	460f      	mov	r7, r1
 80088c2:	3301      	adds	r3, #1
 80088c4:	d02c      	beq.n	8008920 <exp+0x78>
 80088c6:	4620      	mov	r0, r4
 80088c8:	4629      	mov	r1, r5
 80088ca:	f001 fcbb 	bl	800a244 <finite>
 80088ce:	b338      	cbz	r0, 8008920 <exp+0x78>
 80088d0:	a329      	add	r3, pc, #164	; (adr r3, 8008978 <exp+0xd0>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	4620      	mov	r0, r4
 80088d8:	4629      	mov	r1, r5
 80088da:	f7f8 f8f1 	bl	8000ac0 <__aeabi_dcmpgt>
 80088de:	4681      	mov	r9, r0
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d02d      	beq.n	8008940 <exp+0x98>
 80088e4:	2303      	movs	r3, #3
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	4b27      	ldr	r3, [pc, #156]	; (8008988 <exp+0xe0>)
 80088ea:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80088ee:	9301      	str	r3, [sp, #4]
 80088f0:	2300      	movs	r3, #0
 80088f2:	9308      	str	r3, [sp, #32]
 80088f4:	f998 3000 	ldrsb.w	r3, [r8]
 80088f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80088fc:	b9ab      	cbnz	r3, 800892a <exp+0x82>
 80088fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008902:	4b22      	ldr	r3, [pc, #136]	; (800898c <exp+0xe4>)
 8008904:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008908:	4668      	mov	r0, sp
 800890a:	f001 fca1 	bl	800a250 <matherr>
 800890e:	b190      	cbz	r0, 8008936 <exp+0x8e>
 8008910:	9b08      	ldr	r3, [sp, #32]
 8008912:	b11b      	cbz	r3, 800891c <exp+0x74>
 8008914:	f7ff ff94 	bl	8008840 <__errno>
 8008918:	9b08      	ldr	r3, [sp, #32]
 800891a:	6003      	str	r3, [r0, #0]
 800891c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	b00b      	add	sp, #44	; 0x2c
 8008926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800892a:	2000      	movs	r0, #0
 800892c:	4918      	ldr	r1, [pc, #96]	; (8008990 <exp+0xe8>)
 800892e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d1e8      	bne.n	8008908 <exp+0x60>
 8008936:	f7ff ff83 	bl	8008840 <__errno>
 800893a:	2322      	movs	r3, #34	; 0x22
 800893c:	6003      	str	r3, [r0, #0]
 800893e:	e7e7      	b.n	8008910 <exp+0x68>
 8008940:	a30f      	add	r3, pc, #60	; (adr r3, 8008980 <exp+0xd8>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f8 f89b 	bl	8000a84 <__aeabi_dcmplt>
 800894e:	2800      	cmp	r0, #0
 8008950:	d0e6      	beq.n	8008920 <exp+0x78>
 8008952:	2304      	movs	r3, #4
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <exp+0xe0>)
 8008958:	2200      	movs	r2, #0
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	2300      	movs	r3, #0
 800895e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008962:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008966:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800896a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800896e:	f998 3000 	ldrsb.w	r3, [r8]
 8008972:	e7de      	b.n	8008932 <exp+0x8a>
 8008974:	f3af 8000 	nop.w
 8008978:	fefa39ef 	.word	0xfefa39ef
 800897c:	40862e42 	.word	0x40862e42
 8008980:	d52d3051 	.word	0xd52d3051
 8008984:	c0874910 	.word	0xc0874910
 8008988:	0800a4fc 	.word	0x0800a4fc
 800898c:	47efffff 	.word	0x47efffff
 8008990:	7ff00000 	.word	0x7ff00000
 8008994:	20000074 	.word	0x20000074

08008998 <hypot>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	b08b      	sub	sp, #44	; 0x2c
 800899e:	461f      	mov	r7, r3
 80089a0:	4680      	mov	r8, r0
 80089a2:	4689      	mov	r9, r1
 80089a4:	4616      	mov	r6, r2
 80089a6:	f000 fbf1 	bl	800918c <__ieee754_hypot>
 80089aa:	f8df a094 	ldr.w	sl, [pc, #148]	; 8008a40 <hypot+0xa8>
 80089ae:	4604      	mov	r4, r0
 80089b0:	f99a 3000 	ldrsb.w	r3, [sl]
 80089b4:	460d      	mov	r5, r1
 80089b6:	3301      	adds	r3, #1
 80089b8:	d02b      	beq.n	8008a12 <hypot+0x7a>
 80089ba:	f001 fc43 	bl	800a244 <finite>
 80089be:	4683      	mov	fp, r0
 80089c0:	bb38      	cbnz	r0, 8008a12 <hypot+0x7a>
 80089c2:	4640      	mov	r0, r8
 80089c4:	4649      	mov	r1, r9
 80089c6:	f001 fc3d 	bl	800a244 <finite>
 80089ca:	b310      	cbz	r0, 8008a12 <hypot+0x7a>
 80089cc:	4630      	mov	r0, r6
 80089ce:	4639      	mov	r1, r7
 80089d0:	f001 fc38 	bl	800a244 <finite>
 80089d4:	b1e8      	cbz	r0, 8008a12 <hypot+0x7a>
 80089d6:	2303      	movs	r3, #3
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	4b16      	ldr	r3, [pc, #88]	; (8008a34 <hypot+0x9c>)
 80089dc:	f8cd b020 	str.w	fp, [sp, #32]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	f99a 3000 	ldrsb.w	r3, [sl]
 80089e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80089ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80089ee:	b9ab      	cbnz	r3, 8008a1c <hypot+0x84>
 80089f0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80089f4:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <hypot+0xa0>)
 80089f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80089fa:	4668      	mov	r0, sp
 80089fc:	f001 fc28 	bl	800a250 <matherr>
 8008a00:	b190      	cbz	r0, 8008a28 <hypot+0x90>
 8008a02:	9b08      	ldr	r3, [sp, #32]
 8008a04:	b11b      	cbz	r3, 8008a0e <hypot+0x76>
 8008a06:	f7ff ff1b 	bl	8008840 <__errno>
 8008a0a:	9b08      	ldr	r3, [sp, #32]
 8008a0c:	6003      	str	r3, [r0, #0]
 8008a0e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008a12:	4620      	mov	r0, r4
 8008a14:	4629      	mov	r1, r5
 8008a16:	b00b      	add	sp, #44	; 0x2c
 8008a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	4907      	ldr	r1, [pc, #28]	; (8008a3c <hypot+0xa4>)
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a26:	d1e8      	bne.n	80089fa <hypot+0x62>
 8008a28:	f7ff ff0a 	bl	8008840 <__errno>
 8008a2c:	2322      	movs	r3, #34	; 0x22
 8008a2e:	6003      	str	r3, [r0, #0]
 8008a30:	e7e7      	b.n	8008a02 <hypot+0x6a>
 8008a32:	bf00      	nop
 8008a34:	0800a500 	.word	0x0800a500
 8008a38:	47efffff 	.word	0x47efffff
 8008a3c:	7ff00000 	.word	0x7ff00000
 8008a40:	20000074 	.word	0x20000074

08008a44 <pow>:
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	b08f      	sub	sp, #60	; 0x3c
 8008a4a:	461d      	mov	r5, r3
 8008a4c:	4680      	mov	r8, r0
 8008a4e:	4689      	mov	r9, r1
 8008a50:	4614      	mov	r4, r2
 8008a52:	f000 fcb1 	bl	80093b8 <__ieee754_pow>
 8008a56:	4fa1      	ldr	r7, [pc, #644]	; (8008cdc <pow+0x298>)
 8008a58:	e9cd 0100 	strd	r0, r1, [sp]
 8008a5c:	f997 3000 	ldrsb.w	r3, [r7]
 8008a60:	463e      	mov	r6, r7
 8008a62:	9302      	str	r3, [sp, #8]
 8008a64:	3301      	adds	r3, #1
 8008a66:	d05f      	beq.n	8008b28 <pow+0xe4>
 8008a68:	4622      	mov	r2, r4
 8008a6a:	462b      	mov	r3, r5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	4629      	mov	r1, r5
 8008a70:	f7f8 f830 	bl	8000ad4 <__aeabi_dcmpun>
 8008a74:	4682      	mov	sl, r0
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d156      	bne.n	8008b28 <pow+0xe4>
 8008a7a:	4642      	mov	r2, r8
 8008a7c:	464b      	mov	r3, r9
 8008a7e:	4640      	mov	r0, r8
 8008a80:	4649      	mov	r1, r9
 8008a82:	f7f8 f827 	bl	8000ad4 <__aeabi_dcmpun>
 8008a86:	9003      	str	r0, [sp, #12]
 8008a88:	b1e8      	cbz	r0, 8008ac6 <pow+0x82>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	f7f7 ffed 	bl	8000a70 <__aeabi_dcmpeq>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d046      	beq.n	8008b28 <pow+0xe4>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	9304      	str	r3, [sp, #16]
 8008aa0:	4b8f      	ldr	r3, [pc, #572]	; (8008ce0 <pow+0x29c>)
 8008aa2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008aa6:	9305      	str	r3, [sp, #20]
 8008aa8:	4b8e      	ldr	r3, [pc, #568]	; (8008ce4 <pow+0x2a0>)
 8008aaa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008aae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ab2:	9b02      	ldr	r3, [sp, #8]
 8008ab4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d031      	beq.n	8008b20 <pow+0xdc>
 8008abc:	a804      	add	r0, sp, #16
 8008abe:	f001 fbc7 	bl	800a250 <matherr>
 8008ac2:	bb38      	cbnz	r0, 8008b14 <pow+0xd0>
 8008ac4:	e058      	b.n	8008b78 <pow+0x134>
 8008ac6:	f04f 0a00 	mov.w	sl, #0
 8008aca:	f04f 0b00 	mov.w	fp, #0
 8008ace:	4652      	mov	r2, sl
 8008ad0:	465b      	mov	r3, fp
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	f7f7 ffcb 	bl	8000a70 <__aeabi_dcmpeq>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d051      	beq.n	8008b82 <pow+0x13e>
 8008ade:	4652      	mov	r2, sl
 8008ae0:	465b      	mov	r3, fp
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	f7f7 ffc3 	bl	8000a70 <__aeabi_dcmpeq>
 8008aea:	4606      	mov	r6, r0
 8008aec:	b308      	cbz	r0, 8008b32 <pow+0xee>
 8008aee:	2301      	movs	r3, #1
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	4b7b      	ldr	r3, [pc, #492]	; (8008ce0 <pow+0x29c>)
 8008af4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008af8:	9305      	str	r3, [sp, #20]
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008b00:	930c      	str	r3, [sp, #48]	; 0x30
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d0d7      	beq.n	8008abc <pow+0x78>
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4b75      	ldr	r3, [pc, #468]	; (8008ce4 <pow+0x2a0>)
 8008b10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b16:	b11b      	cbz	r3, 8008b20 <pow+0xdc>
 8008b18:	f7ff fe92 	bl	8008840 <__errno>
 8008b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b1e:	6003      	str	r3, [r0, #0]
 8008b20:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8008b24:	e9cd 3400 	strd	r3, r4, [sp]
 8008b28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b2c:	b00f      	add	sp, #60	; 0x3c
 8008b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b32:	4620      	mov	r0, r4
 8008b34:	4629      	mov	r1, r5
 8008b36:	f001 fb85 	bl	800a244 <finite>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d0f4      	beq.n	8008b28 <pow+0xe4>
 8008b3e:	4652      	mov	r2, sl
 8008b40:	465b      	mov	r3, fp
 8008b42:	4620      	mov	r0, r4
 8008b44:	4629      	mov	r1, r5
 8008b46:	f7f7 ff9d 	bl	8000a84 <__aeabi_dcmplt>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d0ec      	beq.n	8008b28 <pow+0xe4>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	4b63      	ldr	r3, [pc, #396]	; (8008ce0 <pow+0x29c>)
 8008b54:	960c      	str	r6, [sp, #48]	; 0x30
 8008b56:	9305      	str	r3, [sp, #20]
 8008b58:	f997 3000 	ldrsb.w	r3, [r7]
 8008b5c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008b60:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008b64:	b913      	cbnz	r3, 8008b6c <pow+0x128>
 8008b66:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008b6a:	e7a7      	b.n	8008abc <pow+0x78>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	495e      	ldr	r1, [pc, #376]	; (8008ce8 <pow+0x2a4>)
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008b76:	d1a1      	bne.n	8008abc <pow+0x78>
 8008b78:	f7ff fe62 	bl	8008840 <__errno>
 8008b7c:	2321      	movs	r3, #33	; 0x21
 8008b7e:	6003      	str	r3, [r0, #0]
 8008b80:	e7c8      	b.n	8008b14 <pow+0xd0>
 8008b82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b86:	f001 fb5d 	bl	800a244 <finite>
 8008b8a:	9002      	str	r0, [sp, #8]
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d177      	bne.n	8008c80 <pow+0x23c>
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f001 fb56 	bl	800a244 <finite>
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d071      	beq.n	8008c80 <pow+0x23c>
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	f001 fb50 	bl	800a244 <finite>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d06b      	beq.n	8008c80 <pow+0x23c>
 8008ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bac:	4619      	mov	r1, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f7f7 ff90 	bl	8000ad4 <__aeabi_dcmpun>
 8008bb4:	f997 7000 	ldrsb.w	r7, [r7]
 8008bb8:	4b49      	ldr	r3, [pc, #292]	; (8008ce0 <pow+0x29c>)
 8008bba:	b1a0      	cbz	r0, 8008be6 <pow+0x1a2>
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bc2:	9b02      	ldr	r3, [sp, #8]
 8008bc4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8008bca:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008bce:	2f00      	cmp	r7, #0
 8008bd0:	d0c9      	beq.n	8008b66 <pow+0x122>
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	465b      	mov	r3, fp
 8008bd6:	4650      	mov	r0, sl
 8008bd8:	4659      	mov	r1, fp
 8008bda:	f7f7 fe0b 	bl	80007f4 <__aeabi_ddiv>
 8008bde:	2f02      	cmp	r7, #2
 8008be0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008be4:	e7c7      	b.n	8008b76 <pow+0x132>
 8008be6:	2203      	movs	r2, #3
 8008be8:	900c      	str	r0, [sp, #48]	; 0x30
 8008bea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4b3d      	ldr	r3, [pc, #244]	; (8008cec <pow+0x2a8>)
 8008bf6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008bfa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008bfe:	f7f7 fccf 	bl	80005a0 <__aeabi_dmul>
 8008c02:	4604      	mov	r4, r0
 8008c04:	460d      	mov	r5, r1
 8008c06:	bb17      	cbnz	r7, 8008c4e <pow+0x20a>
 8008c08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008c0c:	4b38      	ldr	r3, [pc, #224]	; (8008cf0 <pow+0x2ac>)
 8008c0e:	4640      	mov	r0, r8
 8008c10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c14:	4649      	mov	r1, r9
 8008c16:	4652      	mov	r2, sl
 8008c18:	465b      	mov	r3, fp
 8008c1a:	f7f7 ff33 	bl	8000a84 <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d054      	beq.n	8008ccc <pow+0x288>
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f001 fb1b 	bl	800a260 <rint>
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	f7f7 ff1f 	bl	8000a70 <__aeabi_dcmpeq>
 8008c32:	b920      	cbnz	r0, 8008c3e <pow+0x1fa>
 8008c34:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008c38:	4b2e      	ldr	r3, [pc, #184]	; (8008cf4 <pow+0x2b0>)
 8008c3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c3e:	f996 3000 	ldrsb.w	r3, [r6]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d142      	bne.n	8008ccc <pow+0x288>
 8008c46:	f7ff fdfb 	bl	8008840 <__errno>
 8008c4a:	2322      	movs	r3, #34	; 0x22
 8008c4c:	e797      	b.n	8008b7e <pow+0x13a>
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4b29      	ldr	r3, [pc, #164]	; (8008cf8 <pow+0x2b4>)
 8008c52:	4640      	mov	r0, r8
 8008c54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c58:	4649      	mov	r1, r9
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	465b      	mov	r3, fp
 8008c5e:	f7f7 ff11 	bl	8000a84 <__aeabi_dcmplt>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d0eb      	beq.n	8008c3e <pow+0x1fa>
 8008c66:	4620      	mov	r0, r4
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f001 faf9 	bl	800a260 <rint>
 8008c6e:	4622      	mov	r2, r4
 8008c70:	462b      	mov	r3, r5
 8008c72:	f7f7 fefd 	bl	8000a70 <__aeabi_dcmpeq>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d1e1      	bne.n	8008c3e <pow+0x1fa>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	4b1a      	ldr	r3, [pc, #104]	; (8008ce8 <pow+0x2a4>)
 8008c7e:	e7dc      	b.n	8008c3a <pow+0x1f6>
 8008c80:	2200      	movs	r2, #0
 8008c82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c86:	2300      	movs	r3, #0
 8008c88:	f7f7 fef2 	bl	8000a70 <__aeabi_dcmpeq>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f43f af4b 	beq.w	8008b28 <pow+0xe4>
 8008c92:	4640      	mov	r0, r8
 8008c94:	4649      	mov	r1, r9
 8008c96:	f001 fad5 	bl	800a244 <finite>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	f43f af44 	beq.w	8008b28 <pow+0xe4>
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	f001 face 	bl	800a244 <finite>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	f43f af3d 	beq.w	8008b28 <pow+0xe4>
 8008cae:	2304      	movs	r3, #4
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <pow+0x29c>)
 8008cb4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	2400      	movs	r4, #0
 8008cbe:	930c      	str	r3, [sp, #48]	; 0x30
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008cc6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8008cca:	e7b8      	b.n	8008c3e <pow+0x1fa>
 8008ccc:	a804      	add	r0, sp, #16
 8008cce:	f001 fabf 	bl	800a250 <matherr>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f47f af1e 	bne.w	8008b14 <pow+0xd0>
 8008cd8:	e7b5      	b.n	8008c46 <pow+0x202>
 8008cda:	bf00      	nop
 8008cdc:	20000074 	.word	0x20000074
 8008ce0:	0800a506 	.word	0x0800a506
 8008ce4:	3ff00000 	.word	0x3ff00000
 8008ce8:	fff00000 	.word	0xfff00000
 8008cec:	3fe00000 	.word	0x3fe00000
 8008cf0:	47efffff 	.word	0x47efffff
 8008cf4:	c7efffff 	.word	0xc7efffff
 8008cf8:	7ff00000 	.word	0x7ff00000
 8008cfc:	00000000 	.word	0x00000000

08008d00 <__ieee754_atan2>:
 8008d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d04:	4256      	negs	r6, r2
 8008d06:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8008d0a:	4316      	orrs	r6, r2
 8008d0c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8008eb8 <__ieee754_atan2+0x1b8>
 8008d10:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8008d14:	454e      	cmp	r6, r9
 8008d16:	4604      	mov	r4, r0
 8008d18:	460d      	mov	r5, r1
 8008d1a:	469e      	mov	lr, r3
 8008d1c:	d808      	bhi.n	8008d30 <__ieee754_atan2+0x30>
 8008d1e:	4246      	negs	r6, r0
 8008d20:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8008d24:	4306      	orrs	r6, r0
 8008d26:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8008d2a:	454e      	cmp	r6, r9
 8008d2c:	4688      	mov	r8, r1
 8008d2e:	d906      	bls.n	8008d3e <__ieee754_atan2+0x3e>
 8008d30:	4620      	mov	r0, r4
 8008d32:	4629      	mov	r1, r5
 8008d34:	f7f7 fa7e 	bl	8000234 <__adddf3>
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	e030      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008d3e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8008d42:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008d46:	4316      	orrs	r6, r2
 8008d48:	d103      	bne.n	8008d52 <__ieee754_atan2+0x52>
 8008d4a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4e:	f001 b8eb 	b.w	8009f28 <atan>
 8008d52:	179e      	asrs	r6, r3, #30
 8008d54:	f006 0602 	and.w	r6, r6, #2
 8008d58:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8008d5c:	ea57 0100 	orrs.w	r1, r7, r0
 8008d60:	d107      	bne.n	8008d72 <__ieee754_atan2+0x72>
 8008d62:	2e02      	cmp	r6, #2
 8008d64:	d079      	beq.n	8008e5a <__ieee754_atan2+0x15a>
 8008d66:	2e03      	cmp	r6, #3
 8008d68:	d11a      	bne.n	8008da0 <__ieee754_atan2+0xa0>
 8008d6a:	a541      	add	r5, pc, #260	; (adr r5, 8008e70 <__ieee754_atan2+0x170>)
 8008d6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d70:	e016      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008d72:	ea5c 0102 	orrs.w	r1, ip, r2
 8008d76:	d106      	bne.n	8008d86 <__ieee754_atan2+0x86>
 8008d78:	f1b8 0f00 	cmp.w	r8, #0
 8008d7c:	da71      	bge.n	8008e62 <__ieee754_atan2+0x162>
 8008d7e:	a53e      	add	r5, pc, #248	; (adr r5, 8008e78 <__ieee754_atan2+0x178>)
 8008d80:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d84:	e00c      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008d86:	45cc      	cmp	ip, r9
 8008d88:	d123      	bne.n	8008dd2 <__ieee754_atan2+0xd2>
 8008d8a:	4567      	cmp	r7, ip
 8008d8c:	d114      	bne.n	8008db8 <__ieee754_atan2+0xb8>
 8008d8e:	2e02      	cmp	r6, #2
 8008d90:	d00a      	beq.n	8008da8 <__ieee754_atan2+0xa8>
 8008d92:	2e03      	cmp	r6, #3
 8008d94:	d00c      	beq.n	8008db0 <__ieee754_atan2+0xb0>
 8008d96:	2e01      	cmp	r6, #1
 8008d98:	d15b      	bne.n	8008e52 <__ieee754_atan2+0x152>
 8008d9a:	a539      	add	r5, pc, #228	; (adr r5, 8008e80 <__ieee754_atan2+0x180>)
 8008d9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008da0:	4620      	mov	r0, r4
 8008da2:	4629      	mov	r1, r5
 8008da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da8:	a537      	add	r5, pc, #220	; (adr r5, 8008e88 <__ieee754_atan2+0x188>)
 8008daa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008dae:	e7f7      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008db0:	a537      	add	r5, pc, #220	; (adr r5, 8008e90 <__ieee754_atan2+0x190>)
 8008db2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008db6:	e7f3      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008db8:	2e02      	cmp	r6, #2
 8008dba:	d04e      	beq.n	8008e5a <__ieee754_atan2+0x15a>
 8008dbc:	2e03      	cmp	r6, #3
 8008dbe:	d0d4      	beq.n	8008d6a <__ieee754_atan2+0x6a>
 8008dc0:	2e01      	cmp	r6, #1
 8008dc2:	f04f 0400 	mov.w	r4, #0
 8008dc6:	d102      	bne.n	8008dce <__ieee754_atan2+0xce>
 8008dc8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8008dcc:	e7e8      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	e7e6      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008dd2:	454f      	cmp	r7, r9
 8008dd4:	d0d0      	beq.n	8008d78 <__ieee754_atan2+0x78>
 8008dd6:	eba7 070c 	sub.w	r7, r7, ip
 8008dda:	153f      	asrs	r7, r7, #20
 8008ddc:	2f3c      	cmp	r7, #60	; 0x3c
 8008dde:	dc1e      	bgt.n	8008e1e <__ieee754_atan2+0x11e>
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	da01      	bge.n	8008de8 <__ieee754_atan2+0xe8>
 8008de4:	373c      	adds	r7, #60	; 0x3c
 8008de6:	db1e      	blt.n	8008e26 <__ieee754_atan2+0x126>
 8008de8:	4620      	mov	r0, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	f7f7 fd02 	bl	80007f4 <__aeabi_ddiv>
 8008df0:	f001 fa24 	bl	800a23c <fabs>
 8008df4:	f001 f898 	bl	8009f28 <atan>
 8008df8:	4604      	mov	r4, r0
 8008dfa:	460d      	mov	r5, r1
 8008dfc:	2e01      	cmp	r6, #1
 8008dfe:	d015      	beq.n	8008e2c <__ieee754_atan2+0x12c>
 8008e00:	2e02      	cmp	r6, #2
 8008e02:	d017      	beq.n	8008e34 <__ieee754_atan2+0x134>
 8008e04:	2e00      	cmp	r6, #0
 8008e06:	d0cb      	beq.n	8008da0 <__ieee754_atan2+0xa0>
 8008e08:	a323      	add	r3, pc, #140	; (adr r3, 8008e98 <__ieee754_atan2+0x198>)
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7f7 fa0d 	bl	8000230 <__aeabi_dsub>
 8008e16:	a322      	add	r3, pc, #136	; (adr r3, 8008ea0 <__ieee754_atan2+0x1a0>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	e016      	b.n	8008e4c <__ieee754_atan2+0x14c>
 8008e1e:	a522      	add	r5, pc, #136	; (adr r5, 8008ea8 <__ieee754_atan2+0x1a8>)
 8008e20:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e24:	e7ea      	b.n	8008dfc <__ieee754_atan2+0xfc>
 8008e26:	2400      	movs	r4, #0
 8008e28:	2500      	movs	r5, #0
 8008e2a:	e7e7      	b.n	8008dfc <__ieee754_atan2+0xfc>
 8008e2c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008e30:	461d      	mov	r5, r3
 8008e32:	e7b5      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008e34:	a318      	add	r3, pc, #96	; (adr r3, 8008e98 <__ieee754_atan2+0x198>)
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	f7f7 f9f7 	bl	8000230 <__aeabi_dsub>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	a116      	add	r1, pc, #88	; (adr r1, 8008ea0 <__ieee754_atan2+0x1a0>)
 8008e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e4c:	f7f7 f9f0 	bl	8000230 <__aeabi_dsub>
 8008e50:	e772      	b.n	8008d38 <__ieee754_atan2+0x38>
 8008e52:	a517      	add	r5, pc, #92	; (adr r5, 8008eb0 <__ieee754_atan2+0x1b0>)
 8008e54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e58:	e7a2      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008e5a:	a511      	add	r5, pc, #68	; (adr r5, 8008ea0 <__ieee754_atan2+0x1a0>)
 8008e5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e60:	e79e      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008e62:	a511      	add	r5, pc, #68	; (adr r5, 8008ea8 <__ieee754_atan2+0x1a8>)
 8008e64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008e68:	e79a      	b.n	8008da0 <__ieee754_atan2+0xa0>
 8008e6a:	bf00      	nop
 8008e6c:	f3af 8000 	nop.w
 8008e70:	54442d18 	.word	0x54442d18
 8008e74:	c00921fb 	.word	0xc00921fb
 8008e78:	54442d18 	.word	0x54442d18
 8008e7c:	bff921fb 	.word	0xbff921fb
 8008e80:	54442d18 	.word	0x54442d18
 8008e84:	bfe921fb 	.word	0xbfe921fb
 8008e88:	7f3321d2 	.word	0x7f3321d2
 8008e8c:	4002d97c 	.word	0x4002d97c
 8008e90:	7f3321d2 	.word	0x7f3321d2
 8008e94:	c002d97c 	.word	0xc002d97c
 8008e98:	33145c07 	.word	0x33145c07
 8008e9c:	3ca1a626 	.word	0x3ca1a626
 8008ea0:	54442d18 	.word	0x54442d18
 8008ea4:	400921fb 	.word	0x400921fb
 8008ea8:	54442d18 	.word	0x54442d18
 8008eac:	3ff921fb 	.word	0x3ff921fb
 8008eb0:	54442d18 	.word	0x54442d18
 8008eb4:	3fe921fb 	.word	0x3fe921fb
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	00000000 	.word	0x00000000

08008ec0 <__ieee754_exp>:
 8008ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec4:	4aa8      	ldr	r2, [pc, #672]	; (8009168 <__ieee754_exp+0x2a8>)
 8008ec6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008eca:	4296      	cmp	r6, r2
 8008ecc:	4605      	mov	r5, r0
 8008ece:	460c      	mov	r4, r1
 8008ed0:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8008ed4:	d92c      	bls.n	8008f30 <__ieee754_exp+0x70>
 8008ed6:	4aa5      	ldr	r2, [pc, #660]	; (800916c <__ieee754_exp+0x2ac>)
 8008ed8:	4296      	cmp	r6, r2
 8008eda:	d910      	bls.n	8008efe <__ieee754_exp+0x3e>
 8008edc:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8008ee0:	4303      	orrs	r3, r0
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	d005      	beq.n	8008ef2 <__ieee754_exp+0x32>
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	f7f7 f9a4 	bl	8000234 <__adddf3>
 8008eec:	4605      	mov	r5, r0
 8008eee:	460c      	mov	r4, r1
 8008ef0:	e000      	b.n	8008ef4 <__ieee754_exp+0x34>
 8008ef2:	b9d7      	cbnz	r7, 8008f2a <__ieee754_exp+0x6a>
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	b004      	add	sp, #16
 8008efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008efe:	a384      	add	r3, pc, #528	; (adr r3, 8009110 <__ieee754_exp+0x250>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f7f7 fddc 	bl	8000ac0 <__aeabi_dcmpgt>
 8008f08:	b138      	cbz	r0, 8008f1a <__ieee754_exp+0x5a>
 8008f0a:	a383      	add	r3, pc, #524	; (adr r3, 8009118 <__ieee754_exp+0x258>)
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	4610      	mov	r0, r2
 8008f12:	4619      	mov	r1, r3
 8008f14:	f7f7 fb44 	bl	80005a0 <__aeabi_dmul>
 8008f18:	e7e8      	b.n	8008eec <__ieee754_exp+0x2c>
 8008f1a:	a381      	add	r3, pc, #516	; (adr r3, 8009120 <__ieee754_exp+0x260>)
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	4628      	mov	r0, r5
 8008f22:	4621      	mov	r1, r4
 8008f24:	f7f7 fdae 	bl	8000a84 <__aeabi_dcmplt>
 8008f28:	b130      	cbz	r0, 8008f38 <__ieee754_exp+0x78>
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	462c      	mov	r4, r5
 8008f2e:	e7e1      	b.n	8008ef4 <__ieee754_exp+0x34>
 8008f30:	4b8f      	ldr	r3, [pc, #572]	; (8009170 <__ieee754_exp+0x2b0>)
 8008f32:	429e      	cmp	r6, r3
 8008f34:	f240 80a6 	bls.w	8009084 <__ieee754_exp+0x1c4>
 8008f38:	4b8e      	ldr	r3, [pc, #568]	; (8009174 <__ieee754_exp+0x2b4>)
 8008f3a:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8008f3e:	429e      	cmp	r6, r3
 8008f40:	d875      	bhi.n	800902e <__ieee754_exp+0x16e>
 8008f42:	4b8d      	ldr	r3, [pc, #564]	; (8009178 <__ieee754_exp+0x2b8>)
 8008f44:	4628      	mov	r0, r5
 8008f46:	4443      	add	r3, r8
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f7f7 f96f 	bl	8000230 <__aeabi_dsub>
 8008f52:	4e8a      	ldr	r6, [pc, #552]	; (800917c <__ieee754_exp+0x2bc>)
 8008f54:	e9cd 0100 	strd	r0, r1, [sp]
 8008f58:	f1c7 0a01 	rsb	sl, r7, #1
 8008f5c:	4446      	add	r6, r8
 8008f5e:	ebaa 0a07 	sub.w	sl, sl, r7
 8008f62:	e9d6 8900 	ldrd	r8, r9, [r6]
 8008f66:	4642      	mov	r2, r8
 8008f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	f7f7 f95f 	bl	8000230 <__aeabi_dsub>
 8008f72:	4605      	mov	r5, r0
 8008f74:	460c      	mov	r4, r1
 8008f76:	462a      	mov	r2, r5
 8008f78:	4623      	mov	r3, r4
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f7f7 fb0f 	bl	80005a0 <__aeabi_dmul>
 8008f82:	a369      	add	r3, pc, #420	; (adr r3, 8009128 <__ieee754_exp+0x268>)
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	f7f7 fb08 	bl	80005a0 <__aeabi_dmul>
 8008f90:	a367      	add	r3, pc, #412	; (adr r3, 8009130 <__ieee754_exp+0x270>)
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	f7f7 f94b 	bl	8000230 <__aeabi_dsub>
 8008f9a:	4632      	mov	r2, r6
 8008f9c:	463b      	mov	r3, r7
 8008f9e:	f7f7 faff 	bl	80005a0 <__aeabi_dmul>
 8008fa2:	a365      	add	r3, pc, #404	; (adr r3, 8009138 <__ieee754_exp+0x278>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f7f7 f944 	bl	8000234 <__adddf3>
 8008fac:	4632      	mov	r2, r6
 8008fae:	463b      	mov	r3, r7
 8008fb0:	f7f7 faf6 	bl	80005a0 <__aeabi_dmul>
 8008fb4:	a362      	add	r3, pc, #392	; (adr r3, 8009140 <__ieee754_exp+0x280>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f7f7 f939 	bl	8000230 <__aeabi_dsub>
 8008fbe:	4632      	mov	r2, r6
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	f7f7 faed 	bl	80005a0 <__aeabi_dmul>
 8008fc6:	a360      	add	r3, pc, #384	; (adr r3, 8009148 <__ieee754_exp+0x288>)
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f7f7 f932 	bl	8000234 <__adddf3>
 8008fd0:	4632      	mov	r2, r6
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	f7f7 fae4 	bl	80005a0 <__aeabi_dmul>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	4621      	mov	r1, r4
 8008fe0:	f7f7 f926 	bl	8000230 <__aeabi_dsub>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4606      	mov	r6, r0
 8008fea:	460f      	mov	r7, r1
 8008fec:	4628      	mov	r0, r5
 8008fee:	4621      	mov	r1, r4
 8008ff0:	f7f7 fad6 	bl	80005a0 <__aeabi_dmul>
 8008ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ff8:	f1ba 0f00 	cmp.w	sl, #0
 8008ffc:	d159      	bne.n	80090b2 <__ieee754_exp+0x1f2>
 8008ffe:	2200      	movs	r2, #0
 8009000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009004:	4630      	mov	r0, r6
 8009006:	4639      	mov	r1, r7
 8009008:	f7f7 f912 	bl	8000230 <__aeabi_dsub>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009014:	f7f7 fbee 	bl	80007f4 <__aeabi_ddiv>
 8009018:	462a      	mov	r2, r5
 800901a:	4623      	mov	r3, r4
 800901c:	f7f7 f908 	bl	8000230 <__aeabi_dsub>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	2000      	movs	r0, #0
 8009026:	4956      	ldr	r1, [pc, #344]	; (8009180 <__ieee754_exp+0x2c0>)
 8009028:	f7f7 f902 	bl	8000230 <__aeabi_dsub>
 800902c:	e75e      	b.n	8008eec <__ieee754_exp+0x2c>
 800902e:	4e55      	ldr	r6, [pc, #340]	; (8009184 <__ieee754_exp+0x2c4>)
 8009030:	a347      	add	r3, pc, #284	; (adr r3, 8009150 <__ieee754_exp+0x290>)
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	4446      	add	r6, r8
 8009038:	4628      	mov	r0, r5
 800903a:	4621      	mov	r1, r4
 800903c:	f7f7 fab0 	bl	80005a0 <__aeabi_dmul>
 8009040:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009044:	f7f7 f8f6 	bl	8000234 <__adddf3>
 8009048:	f7f7 fd5a 	bl	8000b00 <__aeabi_d2iz>
 800904c:	4682      	mov	sl, r0
 800904e:	f7f7 fa3d 	bl	80004cc <__aeabi_i2d>
 8009052:	a341      	add	r3, pc, #260	; (adr r3, 8009158 <__ieee754_exp+0x298>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	4606      	mov	r6, r0
 800905a:	460f      	mov	r7, r1
 800905c:	f7f7 faa0 	bl	80005a0 <__aeabi_dmul>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4628      	mov	r0, r5
 8009066:	4621      	mov	r1, r4
 8009068:	f7f7 f8e2 	bl	8000230 <__aeabi_dsub>
 800906c:	a33c      	add	r3, pc, #240	; (adr r3, 8009160 <__ieee754_exp+0x2a0>)
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	e9cd 0100 	strd	r0, r1, [sp]
 8009076:	4630      	mov	r0, r6
 8009078:	4639      	mov	r1, r7
 800907a:	f7f7 fa91 	bl	80005a0 <__aeabi_dmul>
 800907e:	4680      	mov	r8, r0
 8009080:	4689      	mov	r9, r1
 8009082:	e770      	b.n	8008f66 <__ieee754_exp+0xa6>
 8009084:	4b40      	ldr	r3, [pc, #256]	; (8009188 <__ieee754_exp+0x2c8>)
 8009086:	429e      	cmp	r6, r3
 8009088:	d80e      	bhi.n	80090a8 <__ieee754_exp+0x1e8>
 800908a:	a323      	add	r3, pc, #140	; (adr r3, 8009118 <__ieee754_exp+0x258>)
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f7f7 f8d0 	bl	8000234 <__adddf3>
 8009094:	2200      	movs	r2, #0
 8009096:	4b3a      	ldr	r3, [pc, #232]	; (8009180 <__ieee754_exp+0x2c0>)
 8009098:	f7f7 fd12 	bl	8000ac0 <__aeabi_dcmpgt>
 800909c:	b138      	cbz	r0, 80090ae <__ieee754_exp+0x1ee>
 800909e:	2200      	movs	r2, #0
 80090a0:	4b37      	ldr	r3, [pc, #220]	; (8009180 <__ieee754_exp+0x2c0>)
 80090a2:	4628      	mov	r0, r5
 80090a4:	4621      	mov	r1, r4
 80090a6:	e71f      	b.n	8008ee8 <__ieee754_exp+0x28>
 80090a8:	f04f 0a00 	mov.w	sl, #0
 80090ac:	e763      	b.n	8008f76 <__ieee754_exp+0xb6>
 80090ae:	4682      	mov	sl, r0
 80090b0:	e761      	b.n	8008f76 <__ieee754_exp+0xb6>
 80090b2:	4632      	mov	r2, r6
 80090b4:	463b      	mov	r3, r7
 80090b6:	2000      	movs	r0, #0
 80090b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80090bc:	f7f7 f8b8 	bl	8000230 <__aeabi_dsub>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c8:	f7f7 fb94 	bl	80007f4 <__aeabi_ddiv>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 f8ac 	bl	8000230 <__aeabi_dsub>
 80090d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090dc:	f7f7 f8a8 	bl	8000230 <__aeabi_dsub>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	2000      	movs	r0, #0
 80090e6:	4926      	ldr	r1, [pc, #152]	; (8009180 <__ieee754_exp+0x2c0>)
 80090e8:	f7f7 f8a2 	bl	8000230 <__aeabi_dsub>
 80090ec:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80090f0:	4592      	cmp	sl, r2
 80090f2:	db02      	blt.n	80090fa <__ieee754_exp+0x23a>
 80090f4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80090f8:	e6f8      	b.n	8008eec <__ieee754_exp+0x2c>
 80090fa:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80090fe:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8009102:	2200      	movs	r2, #0
 8009104:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8009108:	e704      	b.n	8008f14 <__ieee754_exp+0x54>
 800910a:	bf00      	nop
 800910c:	f3af 8000 	nop.w
 8009110:	fefa39ef 	.word	0xfefa39ef
 8009114:	40862e42 	.word	0x40862e42
 8009118:	8800759c 	.word	0x8800759c
 800911c:	7e37e43c 	.word	0x7e37e43c
 8009120:	d52d3051 	.word	0xd52d3051
 8009124:	c0874910 	.word	0xc0874910
 8009128:	72bea4d0 	.word	0x72bea4d0
 800912c:	3e663769 	.word	0x3e663769
 8009130:	c5d26bf1 	.word	0xc5d26bf1
 8009134:	3ebbbd41 	.word	0x3ebbbd41
 8009138:	af25de2c 	.word	0xaf25de2c
 800913c:	3f11566a 	.word	0x3f11566a
 8009140:	16bebd93 	.word	0x16bebd93
 8009144:	3f66c16c 	.word	0x3f66c16c
 8009148:	5555553e 	.word	0x5555553e
 800914c:	3fc55555 	.word	0x3fc55555
 8009150:	652b82fe 	.word	0x652b82fe
 8009154:	3ff71547 	.word	0x3ff71547
 8009158:	fee00000 	.word	0xfee00000
 800915c:	3fe62e42 	.word	0x3fe62e42
 8009160:	35793c76 	.word	0x35793c76
 8009164:	3dea39ef 	.word	0x3dea39ef
 8009168:	40862e41 	.word	0x40862e41
 800916c:	7fefffff 	.word	0x7fefffff
 8009170:	3fd62e42 	.word	0x3fd62e42
 8009174:	3ff0a2b1 	.word	0x3ff0a2b1
 8009178:	0800a520 	.word	0x0800a520
 800917c:	0800a530 	.word	0x0800a530
 8009180:	3ff00000 	.word	0x3ff00000
 8009184:	0800a510 	.word	0x0800a510
 8009188:	3e2fffff 	.word	0x3e2fffff

0800918c <__ieee754_hypot>:
 800918c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009190:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009194:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8009198:	42b7      	cmp	r7, r6
 800919a:	b089      	sub	sp, #36	; 0x24
 800919c:	da05      	bge.n	80091aa <__ieee754_hypot+0x1e>
 800919e:	463c      	mov	r4, r7
 80091a0:	4637      	mov	r7, r6
 80091a2:	4626      	mov	r6, r4
 80091a4:	4604      	mov	r4, r0
 80091a6:	4610      	mov	r0, r2
 80091a8:	4622      	mov	r2, r4
 80091aa:	1bbb      	subs	r3, r7, r6
 80091ac:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 80091b0:	4639      	mov	r1, r7
 80091b2:	4682      	mov	sl, r0
 80091b4:	46bb      	mov	fp, r7
 80091b6:	4690      	mov	r8, r2
 80091b8:	46b1      	mov	r9, r6
 80091ba:	dd06      	ble.n	80091ca <__ieee754_hypot+0x3e>
 80091bc:	4633      	mov	r3, r6
 80091be:	4639      	mov	r1, r7
 80091c0:	f7f7 f838 	bl	8000234 <__adddf3>
 80091c4:	4682      	mov	sl, r0
 80091c6:	468b      	mov	fp, r1
 80091c8:	e019      	b.n	80091fe <__ieee754_hypot+0x72>
 80091ca:	4b77      	ldr	r3, [pc, #476]	; (80093a8 <__ieee754_hypot+0x21c>)
 80091cc:	429f      	cmp	r7, r3
 80091ce:	f340 809a 	ble.w	8009306 <__ieee754_hypot+0x17a>
 80091d2:	4b76      	ldr	r3, [pc, #472]	; (80093ac <__ieee754_hypot+0x220>)
 80091d4:	429f      	cmp	r7, r3
 80091d6:	dd17      	ble.n	8009208 <__ieee754_hypot+0x7c>
 80091d8:	4603      	mov	r3, r0
 80091da:	f3c7 0713 	ubfx	r7, r7, #0, #20
 80091de:	433b      	orrs	r3, r7
 80091e0:	d004      	beq.n	80091ec <__ieee754_hypot+0x60>
 80091e2:	4633      	mov	r3, r6
 80091e4:	f7f7 f826 	bl	8000234 <__adddf3>
 80091e8:	4682      	mov	sl, r0
 80091ea:	468b      	mov	fp, r1
 80091ec:	4643      	mov	r3, r8
 80091ee:	f086 46ff 	eor.w	r6, r6, #2139095040	; 0x7f800000
 80091f2:	f486 06e0 	eor.w	r6, r6, #7340032	; 0x700000
 80091f6:	4333      	orrs	r3, r6
 80091f8:	d101      	bne.n	80091fe <__ieee754_hypot+0x72>
 80091fa:	46c2      	mov	sl, r8
 80091fc:	46cb      	mov	fp, r9
 80091fe:	4650      	mov	r0, sl
 8009200:	4659      	mov	r1, fp
 8009202:	b009      	add	sp, #36	; 0x24
 8009204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009208:	f1a7 5716 	sub.w	r7, r7, #629145600	; 0x25800000
 800920c:	f1a6 5616 	sub.w	r6, r6, #629145600	; 0x25800000
 8009210:	46bb      	mov	fp, r7
 8009212:	46b1      	mov	r9, r6
 8009214:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009218:	9301      	str	r3, [sp, #4]
 800921a:	4b65      	ldr	r3, [pc, #404]	; (80093b0 <__ieee754_hypot+0x224>)
 800921c:	429e      	cmp	r6, r3
 800921e:	dc1b      	bgt.n	8009258 <__ieee754_hypot+0xcc>
 8009220:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 8009224:	da71      	bge.n	800930a <__ieee754_hypot+0x17e>
 8009226:	4643      	mov	r3, r8
 8009228:	4333      	orrs	r3, r6
 800922a:	d0e8      	beq.n	80091fe <__ieee754_hypot+0x72>
 800922c:	2400      	movs	r4, #0
 800922e:	4d61      	ldr	r5, [pc, #388]	; (80093b4 <__ieee754_hypot+0x228>)
 8009230:	4622      	mov	r2, r4
 8009232:	462b      	mov	r3, r5
 8009234:	4640      	mov	r0, r8
 8009236:	4649      	mov	r1, r9
 8009238:	f7f7 f9b2 	bl	80005a0 <__aeabi_dmul>
 800923c:	462b      	mov	r3, r5
 800923e:	4680      	mov	r8, r0
 8009240:	4689      	mov	r9, r1
 8009242:	4650      	mov	r0, sl
 8009244:	4659      	mov	r1, fp
 8009246:	4622      	mov	r2, r4
 8009248:	f7f7 f9aa 	bl	80005a0 <__aeabi_dmul>
 800924c:	4682      	mov	sl, r0
 800924e:	468b      	mov	fp, r1
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	4642      	mov	r2, r8
 800925a:	464b      	mov	r3, r9
 800925c:	4650      	mov	r0, sl
 800925e:	4659      	mov	r1, fp
 8009260:	f7f6 ffe6 	bl	8000230 <__aeabi_dsub>
 8009264:	4605      	mov	r5, r0
 8009266:	460c      	mov	r4, r1
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4640      	mov	r0, r8
 800926e:	4649      	mov	r1, r9
 8009270:	f7f7 fc08 	bl	8000a84 <__aeabi_dcmplt>
 8009274:	2800      	cmp	r0, #0
 8009276:	d053      	beq.n	8009320 <__ieee754_hypot+0x194>
 8009278:	2400      	movs	r4, #0
 800927a:	463b      	mov	r3, r7
 800927c:	4622      	mov	r2, r4
 800927e:	4639      	mov	r1, r7
 8009280:	4620      	mov	r0, r4
 8009282:	f7f7 f98d 	bl	80005a0 <__aeabi_dmul>
 8009286:	4642      	mov	r2, r8
 8009288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800928c:	464b      	mov	r3, r9
 800928e:	4640      	mov	r0, r8
 8009290:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 8009294:	f7f7 f984 	bl	80005a0 <__aeabi_dmul>
 8009298:	463d      	mov	r5, r7
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	4622      	mov	r2, r4
 80092a0:	462b      	mov	r3, r5
 80092a2:	4650      	mov	r0, sl
 80092a4:	4659      	mov	r1, fp
 80092a6:	f7f6 ffc5 	bl	8000234 <__adddf3>
 80092aa:	4622      	mov	r2, r4
 80092ac:	4680      	mov	r8, r0
 80092ae:	4689      	mov	r9, r1
 80092b0:	462b      	mov	r3, r5
 80092b2:	4650      	mov	r0, sl
 80092b4:	4659      	mov	r1, fp
 80092b6:	f7f6 ffbb 	bl	8000230 <__aeabi_dsub>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4640      	mov	r0, r8
 80092c0:	4649      	mov	r1, r9
 80092c2:	f7f7 f96d 	bl	80005a0 <__aeabi_dmul>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	4630      	mov	r0, r6
 80092cc:	4639      	mov	r1, r7
 80092ce:	f7f6 ffaf 	bl	8000230 <__aeabi_dsub>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092da:	f7f6 ffa9 	bl	8000230 <__aeabi_dsub>
 80092de:	f000 fd75 	bl	8009dcc <__ieee754_sqrt>
 80092e2:	9b01      	ldr	r3, [sp, #4]
 80092e4:	4682      	mov	sl, r0
 80092e6:	468b      	mov	fp, r1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d088      	beq.n	80091fe <__ieee754_hypot+0x72>
 80092ec:	2000      	movs	r0, #0
 80092ee:	051b      	lsls	r3, r3, #20
 80092f0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80092f4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4650      	mov	r0, sl
 80092fe:	4659      	mov	r1, fp
 8009300:	f7f7 f94e 	bl	80005a0 <__aeabi_dmul>
 8009304:	e75e      	b.n	80091c4 <__ieee754_hypot+0x38>
 8009306:	2300      	movs	r3, #0
 8009308:	e786      	b.n	8009218 <__ieee754_hypot+0x8c>
 800930a:	9b01      	ldr	r3, [sp, #4]
 800930c:	f107 5716 	add.w	r7, r7, #629145600	; 0x25800000
 8009310:	f106 5616 	add.w	r6, r6, #629145600	; 0x25800000
 8009314:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	46bb      	mov	fp, r7
 800931c:	46b1      	mov	r9, r6
 800931e:	e79b      	b.n	8009258 <__ieee754_hypot+0xcc>
 8009320:	4633      	mov	r3, r6
 8009322:	2200      	movs	r2, #0
 8009324:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	f507 1380 	add.w	r3, r7, #1048576	; 0x100000
 8009332:	4616      	mov	r6, r2
 8009334:	461f      	mov	r7, r3
 8009336:	f7f7 f933 	bl	80005a0 <__aeabi_dmul>
 800933a:	462a      	mov	r2, r5
 800933c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009340:	4623      	mov	r3, r4
 8009342:	4628      	mov	r0, r5
 8009344:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8009348:	f7f7 f92a 	bl	80005a0 <__aeabi_dmul>
 800934c:	4652      	mov	r2, sl
 800934e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009352:	465b      	mov	r3, fp
 8009354:	4650      	mov	r0, sl
 8009356:	4659      	mov	r1, fp
 8009358:	f7f6 ff6c 	bl	8000234 <__adddf3>
 800935c:	4632      	mov	r2, r6
 800935e:	463b      	mov	r3, r7
 8009360:	f7f6 ff66 	bl	8000230 <__aeabi_dsub>
 8009364:	4642      	mov	r2, r8
 8009366:	464b      	mov	r3, r9
 8009368:	f7f7 f91a 	bl	80005a0 <__aeabi_dmul>
 800936c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009370:	4604      	mov	r4, r0
 8009372:	460d      	mov	r5, r1
 8009374:	4640      	mov	r0, r8
 8009376:	4649      	mov	r1, r9
 8009378:	f7f6 ff5a 	bl	8000230 <__aeabi_dsub>
 800937c:	4632      	mov	r2, r6
 800937e:	463b      	mov	r3, r7
 8009380:	f7f7 f90e 	bl	80005a0 <__aeabi_dmul>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4620      	mov	r0, r4
 800938a:	4629      	mov	r1, r5
 800938c:	f7f6 ff52 	bl	8000234 <__adddf3>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009398:	f7f6 ff4a 	bl	8000230 <__aeabi_dsub>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a4:	e799      	b.n	80092da <__ieee754_hypot+0x14e>
 80093a6:	bf00      	nop
 80093a8:	5f300000 	.word	0x5f300000
 80093ac:	7fefffff 	.word	0x7fefffff
 80093b0:	20afffff 	.word	0x20afffff
 80093b4:	7fd00000 	.word	0x7fd00000

080093b8 <__ieee754_pow>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	b091      	sub	sp, #68	; 0x44
 80093be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093c2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80093c6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80093ca:	ea55 0302 	orrs.w	r3, r5, r2
 80093ce:	4607      	mov	r7, r0
 80093d0:	4688      	mov	r8, r1
 80093d2:	f000 84b7 	beq.w	8009d44 <__ieee754_pow+0x98c>
 80093d6:	4b80      	ldr	r3, [pc, #512]	; (80095d8 <__ieee754_pow+0x220>)
 80093d8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80093dc:	429c      	cmp	r4, r3
 80093de:	4689      	mov	r9, r1
 80093e0:	4682      	mov	sl, r0
 80093e2:	dc09      	bgt.n	80093f8 <__ieee754_pow+0x40>
 80093e4:	d103      	bne.n	80093ee <__ieee754_pow+0x36>
 80093e6:	b938      	cbnz	r0, 80093f8 <__ieee754_pow+0x40>
 80093e8:	42a5      	cmp	r5, r4
 80093ea:	dc0d      	bgt.n	8009408 <__ieee754_pow+0x50>
 80093ec:	e001      	b.n	80093f2 <__ieee754_pow+0x3a>
 80093ee:	429d      	cmp	r5, r3
 80093f0:	dc02      	bgt.n	80093f8 <__ieee754_pow+0x40>
 80093f2:	429d      	cmp	r5, r3
 80093f4:	d10e      	bne.n	8009414 <__ieee754_pow+0x5c>
 80093f6:	b16a      	cbz	r2, 8009414 <__ieee754_pow+0x5c>
 80093f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80093fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009400:	ea54 030a 	orrs.w	r3, r4, sl
 8009404:	f000 849e 	beq.w	8009d44 <__ieee754_pow+0x98c>
 8009408:	4874      	ldr	r0, [pc, #464]	; (80095dc <__ieee754_pow+0x224>)
 800940a:	b011      	add	sp, #68	; 0x44
 800940c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	f000 bf20 	b.w	800a254 <nan>
 8009414:	f1b9 0f00 	cmp.w	r9, #0
 8009418:	da53      	bge.n	80094c2 <__ieee754_pow+0x10a>
 800941a:	4b71      	ldr	r3, [pc, #452]	; (80095e0 <__ieee754_pow+0x228>)
 800941c:	429d      	cmp	r5, r3
 800941e:	dc4e      	bgt.n	80094be <__ieee754_pow+0x106>
 8009420:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009424:	429d      	cmp	r5, r3
 8009426:	dd4c      	ble.n	80094c2 <__ieee754_pow+0x10a>
 8009428:	152b      	asrs	r3, r5, #20
 800942a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800942e:	2b14      	cmp	r3, #20
 8009430:	dd28      	ble.n	8009484 <__ieee754_pow+0xcc>
 8009432:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009436:	fa22 f103 	lsr.w	r1, r2, r3
 800943a:	fa01 f303 	lsl.w	r3, r1, r3
 800943e:	4293      	cmp	r3, r2
 8009440:	d13f      	bne.n	80094c2 <__ieee754_pow+0x10a>
 8009442:	f001 0101 	and.w	r1, r1, #1
 8009446:	f1c1 0302 	rsb	r3, r1, #2
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	2a00      	cmp	r2, #0
 800944e:	d15c      	bne.n	800950a <__ieee754_pow+0x152>
 8009450:	4b61      	ldr	r3, [pc, #388]	; (80095d8 <__ieee754_pow+0x220>)
 8009452:	429d      	cmp	r5, r3
 8009454:	d126      	bne.n	80094a4 <__ieee754_pow+0xec>
 8009456:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800945a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800945e:	ea53 030a 	orrs.w	r3, r3, sl
 8009462:	f000 846f 	beq.w	8009d44 <__ieee754_pow+0x98c>
 8009466:	4b5f      	ldr	r3, [pc, #380]	; (80095e4 <__ieee754_pow+0x22c>)
 8009468:	429c      	cmp	r4, r3
 800946a:	dd2c      	ble.n	80094c6 <__ieee754_pow+0x10e>
 800946c:	2e00      	cmp	r6, #0
 800946e:	f280 846f 	bge.w	8009d50 <__ieee754_pow+0x998>
 8009472:	f04f 0b00 	mov.w	fp, #0
 8009476:	f04f 0c00 	mov.w	ip, #0
 800947a:	4658      	mov	r0, fp
 800947c:	4661      	mov	r1, ip
 800947e:	b011      	add	sp, #68	; 0x44
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	2a00      	cmp	r2, #0
 8009486:	d13e      	bne.n	8009506 <__ieee754_pow+0x14e>
 8009488:	f1c3 0314 	rsb	r3, r3, #20
 800948c:	fa45 f103 	asr.w	r1, r5, r3
 8009490:	fa01 f303 	lsl.w	r3, r1, r3
 8009494:	42ab      	cmp	r3, r5
 8009496:	f040 8463 	bne.w	8009d60 <__ieee754_pow+0x9a8>
 800949a:	f001 0101 	and.w	r1, r1, #1
 800949e:	f1c1 0302 	rsb	r3, r1, #2
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	4b50      	ldr	r3, [pc, #320]	; (80095e8 <__ieee754_pow+0x230>)
 80094a6:	429d      	cmp	r5, r3
 80094a8:	d114      	bne.n	80094d4 <__ieee754_pow+0x11c>
 80094aa:	2e00      	cmp	r6, #0
 80094ac:	f280 8454 	bge.w	8009d58 <__ieee754_pow+0x9a0>
 80094b0:	463a      	mov	r2, r7
 80094b2:	4643      	mov	r3, r8
 80094b4:	2000      	movs	r0, #0
 80094b6:	494c      	ldr	r1, [pc, #304]	; (80095e8 <__ieee754_pow+0x230>)
 80094b8:	f7f7 f99c 	bl	80007f4 <__aeabi_ddiv>
 80094bc:	e013      	b.n	80094e6 <__ieee754_pow+0x12e>
 80094be:	2302      	movs	r3, #2
 80094c0:	e7c3      	b.n	800944a <__ieee754_pow+0x92>
 80094c2:	2300      	movs	r3, #0
 80094c4:	e7c1      	b.n	800944a <__ieee754_pow+0x92>
 80094c6:	2e00      	cmp	r6, #0
 80094c8:	dad3      	bge.n	8009472 <__ieee754_pow+0xba>
 80094ca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80094ce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80094d2:	e7d2      	b.n	800947a <__ieee754_pow+0xc2>
 80094d4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80094d8:	d108      	bne.n	80094ec <__ieee754_pow+0x134>
 80094da:	463a      	mov	r2, r7
 80094dc:	4643      	mov	r3, r8
 80094de:	4638      	mov	r0, r7
 80094e0:	4641      	mov	r1, r8
 80094e2:	f7f7 f85d 	bl	80005a0 <__aeabi_dmul>
 80094e6:	4683      	mov	fp, r0
 80094e8:	468c      	mov	ip, r1
 80094ea:	e7c6      	b.n	800947a <__ieee754_pow+0xc2>
 80094ec:	4b3f      	ldr	r3, [pc, #252]	; (80095ec <__ieee754_pow+0x234>)
 80094ee:	429e      	cmp	r6, r3
 80094f0:	d10b      	bne.n	800950a <__ieee754_pow+0x152>
 80094f2:	f1b9 0f00 	cmp.w	r9, #0
 80094f6:	db08      	blt.n	800950a <__ieee754_pow+0x152>
 80094f8:	4638      	mov	r0, r7
 80094fa:	4641      	mov	r1, r8
 80094fc:	b011      	add	sp, #68	; 0x44
 80094fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009502:	f000 bc63 	b.w	8009dcc <__ieee754_sqrt>
 8009506:	2300      	movs	r3, #0
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	4638      	mov	r0, r7
 800950c:	4641      	mov	r1, r8
 800950e:	f000 fe95 	bl	800a23c <fabs>
 8009512:	4683      	mov	fp, r0
 8009514:	468c      	mov	ip, r1
 8009516:	f1ba 0f00 	cmp.w	sl, #0
 800951a:	d12b      	bne.n	8009574 <__ieee754_pow+0x1bc>
 800951c:	b124      	cbz	r4, 8009528 <__ieee754_pow+0x170>
 800951e:	4b32      	ldr	r3, [pc, #200]	; (80095e8 <__ieee754_pow+0x230>)
 8009520:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8009524:	429a      	cmp	r2, r3
 8009526:	d125      	bne.n	8009574 <__ieee754_pow+0x1bc>
 8009528:	2e00      	cmp	r6, #0
 800952a:	da07      	bge.n	800953c <__ieee754_pow+0x184>
 800952c:	465a      	mov	r2, fp
 800952e:	4663      	mov	r3, ip
 8009530:	2000      	movs	r0, #0
 8009532:	492d      	ldr	r1, [pc, #180]	; (80095e8 <__ieee754_pow+0x230>)
 8009534:	f7f7 f95e 	bl	80007f4 <__aeabi_ddiv>
 8009538:	4683      	mov	fp, r0
 800953a:	468c      	mov	ip, r1
 800953c:	f1b9 0f00 	cmp.w	r9, #0
 8009540:	da9b      	bge.n	800947a <__ieee754_pow+0xc2>
 8009542:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009546:	9b00      	ldr	r3, [sp, #0]
 8009548:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800954c:	4323      	orrs	r3, r4
 800954e:	d108      	bne.n	8009562 <__ieee754_pow+0x1aa>
 8009550:	465a      	mov	r2, fp
 8009552:	4663      	mov	r3, ip
 8009554:	4658      	mov	r0, fp
 8009556:	4661      	mov	r1, ip
 8009558:	f7f6 fe6a 	bl	8000230 <__aeabi_dsub>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	e7aa      	b.n	80094b8 <__ieee754_pow+0x100>
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d188      	bne.n	800947a <__ieee754_pow+0xc2>
 8009568:	4658      	mov	r0, fp
 800956a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800956e:	4683      	mov	fp, r0
 8009570:	469c      	mov	ip, r3
 8009572:	e782      	b.n	800947a <__ieee754_pow+0xc2>
 8009574:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8009578:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800957c:	930d      	str	r3, [sp, #52]	; 0x34
 800957e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009580:	9b00      	ldr	r3, [sp, #0]
 8009582:	4313      	orrs	r3, r2
 8009584:	d104      	bne.n	8009590 <__ieee754_pow+0x1d8>
 8009586:	463a      	mov	r2, r7
 8009588:	4643      	mov	r3, r8
 800958a:	4638      	mov	r0, r7
 800958c:	4641      	mov	r1, r8
 800958e:	e7e3      	b.n	8009558 <__ieee754_pow+0x1a0>
 8009590:	4b17      	ldr	r3, [pc, #92]	; (80095f0 <__ieee754_pow+0x238>)
 8009592:	429d      	cmp	r5, r3
 8009594:	f340 80fe 	ble.w	8009794 <__ieee754_pow+0x3dc>
 8009598:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800959c:	429d      	cmp	r5, r3
 800959e:	dd0b      	ble.n	80095b8 <__ieee754_pow+0x200>
 80095a0:	4b10      	ldr	r3, [pc, #64]	; (80095e4 <__ieee754_pow+0x22c>)
 80095a2:	429c      	cmp	r4, r3
 80095a4:	dc0e      	bgt.n	80095c4 <__ieee754_pow+0x20c>
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	f6bf af63 	bge.w	8009472 <__ieee754_pow+0xba>
 80095ac:	a308      	add	r3, pc, #32	; (adr r3, 80095d0 <__ieee754_pow+0x218>)
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	4610      	mov	r0, r2
 80095b4:	4619      	mov	r1, r3
 80095b6:	e794      	b.n	80094e2 <__ieee754_pow+0x12a>
 80095b8:	4b0e      	ldr	r3, [pc, #56]	; (80095f4 <__ieee754_pow+0x23c>)
 80095ba:	429c      	cmp	r4, r3
 80095bc:	ddf3      	ble.n	80095a6 <__ieee754_pow+0x1ee>
 80095be:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <__ieee754_pow+0x230>)
 80095c0:	429c      	cmp	r4, r3
 80095c2:	dd19      	ble.n	80095f8 <__ieee754_pow+0x240>
 80095c4:	2e00      	cmp	r6, #0
 80095c6:	dcf1      	bgt.n	80095ac <__ieee754_pow+0x1f4>
 80095c8:	e753      	b.n	8009472 <__ieee754_pow+0xba>
 80095ca:	bf00      	nop
 80095cc:	f3af 8000 	nop.w
 80095d0:	8800759c 	.word	0x8800759c
 80095d4:	7e37e43c 	.word	0x7e37e43c
 80095d8:	7ff00000 	.word	0x7ff00000
 80095dc:	0800a4ff 	.word	0x0800a4ff
 80095e0:	433fffff 	.word	0x433fffff
 80095e4:	3fefffff 	.word	0x3fefffff
 80095e8:	3ff00000 	.word	0x3ff00000
 80095ec:	3fe00000 	.word	0x3fe00000
 80095f0:	41e00000 	.word	0x41e00000
 80095f4:	3feffffe 	.word	0x3feffffe
 80095f8:	4661      	mov	r1, ip
 80095fa:	2200      	movs	r2, #0
 80095fc:	4b60      	ldr	r3, [pc, #384]	; (8009780 <__ieee754_pow+0x3c8>)
 80095fe:	4658      	mov	r0, fp
 8009600:	f7f6 fe16 	bl	8000230 <__aeabi_dsub>
 8009604:	a354      	add	r3, pc, #336	; (adr r3, 8009758 <__ieee754_pow+0x3a0>)
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	4604      	mov	r4, r0
 800960c:	460d      	mov	r5, r1
 800960e:	f7f6 ffc7 	bl	80005a0 <__aeabi_dmul>
 8009612:	a353      	add	r3, pc, #332	; (adr r3, 8009760 <__ieee754_pow+0x3a8>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	4606      	mov	r6, r0
 800961a:	460f      	mov	r7, r1
 800961c:	4620      	mov	r0, r4
 800961e:	4629      	mov	r1, r5
 8009620:	f7f6 ffbe 	bl	80005a0 <__aeabi_dmul>
 8009624:	2200      	movs	r2, #0
 8009626:	4682      	mov	sl, r0
 8009628:	468b      	mov	fp, r1
 800962a:	4b56      	ldr	r3, [pc, #344]	; (8009784 <__ieee754_pow+0x3cc>)
 800962c:	4620      	mov	r0, r4
 800962e:	4629      	mov	r1, r5
 8009630:	f7f6 ffb6 	bl	80005a0 <__aeabi_dmul>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	a14b      	add	r1, pc, #300	; (adr r1, 8009768 <__ieee754_pow+0x3b0>)
 800963a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800963e:	f7f6 fdf7 	bl	8000230 <__aeabi_dsub>
 8009642:	4622      	mov	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	f7f6 ffab 	bl	80005a0 <__aeabi_dmul>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	2000      	movs	r0, #0
 8009650:	494d      	ldr	r1, [pc, #308]	; (8009788 <__ieee754_pow+0x3d0>)
 8009652:	f7f6 fded 	bl	8000230 <__aeabi_dsub>
 8009656:	4622      	mov	r2, r4
 8009658:	462b      	mov	r3, r5
 800965a:	4680      	mov	r8, r0
 800965c:	4689      	mov	r9, r1
 800965e:	4620      	mov	r0, r4
 8009660:	4629      	mov	r1, r5
 8009662:	f7f6 ff9d 	bl	80005a0 <__aeabi_dmul>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4640      	mov	r0, r8
 800966c:	4649      	mov	r1, r9
 800966e:	f7f6 ff97 	bl	80005a0 <__aeabi_dmul>
 8009672:	a33f      	add	r3, pc, #252	; (adr r3, 8009770 <__ieee754_pow+0x3b8>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	f7f6 ff92 	bl	80005a0 <__aeabi_dmul>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4650      	mov	r0, sl
 8009682:	4659      	mov	r1, fp
 8009684:	f7f6 fdd4 	bl	8000230 <__aeabi_dsub>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	4604      	mov	r4, r0
 800968e:	460d      	mov	r5, r1
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f6 fdce 	bl	8000234 <__adddf3>
 8009698:	2000      	movs	r0, #0
 800969a:	468b      	mov	fp, r1
 800969c:	4682      	mov	sl, r0
 800969e:	4632      	mov	r2, r6
 80096a0:	463b      	mov	r3, r7
 80096a2:	f7f6 fdc5 	bl	8000230 <__aeabi_dsub>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4620      	mov	r0, r4
 80096ac:	4629      	mov	r1, r5
 80096ae:	f7f6 fdbf 	bl	8000230 <__aeabi_dsub>
 80096b2:	9b00      	ldr	r3, [sp, #0]
 80096b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096b6:	3b01      	subs	r3, #1
 80096b8:	4313      	orrs	r3, r2
 80096ba:	f04f 0300 	mov.w	r3, #0
 80096be:	bf0c      	ite	eq
 80096c0:	4c32      	ldreq	r4, [pc, #200]	; (800978c <__ieee754_pow+0x3d4>)
 80096c2:	4c2f      	ldrne	r4, [pc, #188]	; (8009780 <__ieee754_pow+0x3c8>)
 80096c4:	4606      	mov	r6, r0
 80096c6:	e9cd 3400 	strd	r3, r4, [sp]
 80096ca:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096ce:	2400      	movs	r4, #0
 80096d0:	460f      	mov	r7, r1
 80096d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096d6:	4622      	mov	r2, r4
 80096d8:	462b      	mov	r3, r5
 80096da:	f7f6 fda9 	bl	8000230 <__aeabi_dsub>
 80096de:	4652      	mov	r2, sl
 80096e0:	465b      	mov	r3, fp
 80096e2:	f7f6 ff5d 	bl	80005a0 <__aeabi_dmul>
 80096e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ea:	4680      	mov	r8, r0
 80096ec:	4689      	mov	r9, r1
 80096ee:	4630      	mov	r0, r6
 80096f0:	4639      	mov	r1, r7
 80096f2:	f7f6 ff55 	bl	80005a0 <__aeabi_dmul>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4640      	mov	r0, r8
 80096fc:	4649      	mov	r1, r9
 80096fe:	f7f6 fd99 	bl	8000234 <__adddf3>
 8009702:	4622      	mov	r2, r4
 8009704:	462b      	mov	r3, r5
 8009706:	4680      	mov	r8, r0
 8009708:	4689      	mov	r9, r1
 800970a:	4650      	mov	r0, sl
 800970c:	4659      	mov	r1, fp
 800970e:	f7f6 ff47 	bl	80005a0 <__aeabi_dmul>
 8009712:	4604      	mov	r4, r0
 8009714:	460d      	mov	r5, r1
 8009716:	460b      	mov	r3, r1
 8009718:	4602      	mov	r2, r0
 800971a:	4649      	mov	r1, r9
 800971c:	4640      	mov	r0, r8
 800971e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009722:	f7f6 fd87 	bl	8000234 <__adddf3>
 8009726:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <__ieee754_pow+0x3d8>)
 8009728:	4682      	mov	sl, r0
 800972a:	4299      	cmp	r1, r3
 800972c:	460f      	mov	r7, r1
 800972e:	460e      	mov	r6, r1
 8009730:	f340 82e1 	ble.w	8009cf6 <__ieee754_pow+0x93e>
 8009734:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009738:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800973c:	4303      	orrs	r3, r0
 800973e:	f000 81db 	beq.w	8009af8 <__ieee754_pow+0x740>
 8009742:	a30d      	add	r3, pc, #52	; (adr r3, 8009778 <__ieee754_pow+0x3c0>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800974c:	f7f6 ff28 	bl	80005a0 <__aeabi_dmul>
 8009750:	a309      	add	r3, pc, #36	; (adr r3, 8009778 <__ieee754_pow+0x3c0>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	e6c4      	b.n	80094e2 <__ieee754_pow+0x12a>
 8009758:	60000000 	.word	0x60000000
 800975c:	3ff71547 	.word	0x3ff71547
 8009760:	f85ddf44 	.word	0xf85ddf44
 8009764:	3e54ae0b 	.word	0x3e54ae0b
 8009768:	55555555 	.word	0x55555555
 800976c:	3fd55555 	.word	0x3fd55555
 8009770:	652b82fe 	.word	0x652b82fe
 8009774:	3ff71547 	.word	0x3ff71547
 8009778:	8800759c 	.word	0x8800759c
 800977c:	7e37e43c 	.word	0x7e37e43c
 8009780:	3ff00000 	.word	0x3ff00000
 8009784:	3fd00000 	.word	0x3fd00000
 8009788:	3fe00000 	.word	0x3fe00000
 800978c:	bff00000 	.word	0xbff00000
 8009790:	408fffff 	.word	0x408fffff
 8009794:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009798:	f04f 0200 	mov.w	r2, #0
 800979c:	da08      	bge.n	80097b0 <__ieee754_pow+0x3f8>
 800979e:	4658      	mov	r0, fp
 80097a0:	4bcd      	ldr	r3, [pc, #820]	; (8009ad8 <__ieee754_pow+0x720>)
 80097a2:	4661      	mov	r1, ip
 80097a4:	f7f6 fefc 	bl	80005a0 <__aeabi_dmul>
 80097a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80097ac:	4683      	mov	fp, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	1523      	asrs	r3, r4, #20
 80097b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80097b6:	4413      	add	r3, r2
 80097b8:	930c      	str	r3, [sp, #48]	; 0x30
 80097ba:	4bc8      	ldr	r3, [pc, #800]	; (8009adc <__ieee754_pow+0x724>)
 80097bc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80097c0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80097c4:	429c      	cmp	r4, r3
 80097c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80097ca:	dd08      	ble.n	80097de <__ieee754_pow+0x426>
 80097cc:	4bc4      	ldr	r3, [pc, #784]	; (8009ae0 <__ieee754_pow+0x728>)
 80097ce:	429c      	cmp	r4, r3
 80097d0:	f340 815b 	ble.w	8009a8a <__ieee754_pow+0x6d2>
 80097d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80097da:	3301      	adds	r3, #1
 80097dc:	930c      	str	r3, [sp, #48]	; 0x30
 80097de:	f04f 0800 	mov.w	r8, #0
 80097e2:	4658      	mov	r0, fp
 80097e4:	4629      	mov	r1, r5
 80097e6:	4bbf      	ldr	r3, [pc, #764]	; (8009ae4 <__ieee754_pow+0x72c>)
 80097e8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80097ec:	444b      	add	r3, r9
 80097ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097f2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80097f6:	461a      	mov	r2, r3
 80097f8:	4623      	mov	r3, r4
 80097fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80097fe:	f7f6 fd17 	bl	8000230 <__aeabi_dsub>
 8009802:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009806:	4606      	mov	r6, r0
 8009808:	460f      	mov	r7, r1
 800980a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800980e:	f7f6 fd11 	bl	8000234 <__adddf3>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	2000      	movs	r0, #0
 8009818:	49b3      	ldr	r1, [pc, #716]	; (8009ae8 <__ieee754_pow+0x730>)
 800981a:	f7f6 ffeb 	bl	80007f4 <__aeabi_ddiv>
 800981e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4630      	mov	r0, r6
 8009828:	4639      	mov	r1, r7
 800982a:	f7f6 feb9 	bl	80005a0 <__aeabi_dmul>
 800982e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009832:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009836:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800983a:	2300      	movs	r3, #0
 800983c:	2200      	movs	r2, #0
 800983e:	106d      	asrs	r5, r5, #1
 8009840:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009844:	9304      	str	r3, [sp, #16]
 8009846:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800984a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800984e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8009852:	4650      	mov	r0, sl
 8009854:	4659      	mov	r1, fp
 8009856:	4614      	mov	r4, r2
 8009858:	461d      	mov	r5, r3
 800985a:	f7f6 fea1 	bl	80005a0 <__aeabi_dmul>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4630      	mov	r0, r6
 8009864:	4639      	mov	r1, r7
 8009866:	f7f6 fce3 	bl	8000230 <__aeabi_dsub>
 800986a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800986e:	4606      	mov	r6, r0
 8009870:	460f      	mov	r7, r1
 8009872:	4620      	mov	r0, r4
 8009874:	4629      	mov	r1, r5
 8009876:	f7f6 fcdb 	bl	8000230 <__aeabi_dsub>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009882:	f7f6 fcd5 	bl	8000230 <__aeabi_dsub>
 8009886:	4652      	mov	r2, sl
 8009888:	465b      	mov	r3, fp
 800988a:	f7f6 fe89 	bl	80005a0 <__aeabi_dmul>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f6 fccb 	bl	8000230 <__aeabi_dsub>
 800989a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800989e:	f7f6 fe7f 	bl	80005a0 <__aeabi_dmul>
 80098a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80098aa:	4610      	mov	r0, r2
 80098ac:	4619      	mov	r1, r3
 80098ae:	f7f6 fe77 	bl	80005a0 <__aeabi_dmul>
 80098b2:	a377      	add	r3, pc, #476	; (adr r3, 8009a90 <__ieee754_pow+0x6d8>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	4604      	mov	r4, r0
 80098ba:	460d      	mov	r5, r1
 80098bc:	f7f6 fe70 	bl	80005a0 <__aeabi_dmul>
 80098c0:	a375      	add	r3, pc, #468	; (adr r3, 8009a98 <__ieee754_pow+0x6e0>)
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	f7f6 fcb5 	bl	8000234 <__adddf3>
 80098ca:	4622      	mov	r2, r4
 80098cc:	462b      	mov	r3, r5
 80098ce:	f7f6 fe67 	bl	80005a0 <__aeabi_dmul>
 80098d2:	a373      	add	r3, pc, #460	; (adr r3, 8009aa0 <__ieee754_pow+0x6e8>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f7f6 fcac 	bl	8000234 <__adddf3>
 80098dc:	4622      	mov	r2, r4
 80098de:	462b      	mov	r3, r5
 80098e0:	f7f6 fe5e 	bl	80005a0 <__aeabi_dmul>
 80098e4:	a370      	add	r3, pc, #448	; (adr r3, 8009aa8 <__ieee754_pow+0x6f0>)
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	f7f6 fca3 	bl	8000234 <__adddf3>
 80098ee:	4622      	mov	r2, r4
 80098f0:	462b      	mov	r3, r5
 80098f2:	f7f6 fe55 	bl	80005a0 <__aeabi_dmul>
 80098f6:	a36e      	add	r3, pc, #440	; (adr r3, 8009ab0 <__ieee754_pow+0x6f8>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f6 fc9a 	bl	8000234 <__adddf3>
 8009900:	4622      	mov	r2, r4
 8009902:	462b      	mov	r3, r5
 8009904:	f7f6 fe4c 	bl	80005a0 <__aeabi_dmul>
 8009908:	a36b      	add	r3, pc, #428	; (adr r3, 8009ab8 <__ieee754_pow+0x700>)
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	f7f6 fc91 	bl	8000234 <__adddf3>
 8009912:	4622      	mov	r2, r4
 8009914:	4606      	mov	r6, r0
 8009916:	460f      	mov	r7, r1
 8009918:	462b      	mov	r3, r5
 800991a:	4620      	mov	r0, r4
 800991c:	4629      	mov	r1, r5
 800991e:	f7f6 fe3f 	bl	80005a0 <__aeabi_dmul>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	f7f6 fe39 	bl	80005a0 <__aeabi_dmul>
 800992e:	4604      	mov	r4, r0
 8009930:	460d      	mov	r5, r1
 8009932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009936:	4652      	mov	r2, sl
 8009938:	465b      	mov	r3, fp
 800993a:	f7f6 fc7b 	bl	8000234 <__adddf3>
 800993e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009942:	f7f6 fe2d 	bl	80005a0 <__aeabi_dmul>
 8009946:	4622      	mov	r2, r4
 8009948:	462b      	mov	r3, r5
 800994a:	f7f6 fc73 	bl	8000234 <__adddf3>
 800994e:	4652      	mov	r2, sl
 8009950:	4606      	mov	r6, r0
 8009952:	460f      	mov	r7, r1
 8009954:	465b      	mov	r3, fp
 8009956:	4650      	mov	r0, sl
 8009958:	4659      	mov	r1, fp
 800995a:	f7f6 fe21 	bl	80005a0 <__aeabi_dmul>
 800995e:	2200      	movs	r2, #0
 8009960:	4b62      	ldr	r3, [pc, #392]	; (8009aec <__ieee754_pow+0x734>)
 8009962:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009966:	f7f6 fc65 	bl	8000234 <__adddf3>
 800996a:	4632      	mov	r2, r6
 800996c:	463b      	mov	r3, r7
 800996e:	f7f6 fc61 	bl	8000234 <__adddf3>
 8009972:	9804      	ldr	r0, [sp, #16]
 8009974:	460d      	mov	r5, r1
 8009976:	4604      	mov	r4, r0
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4650      	mov	r0, sl
 800997e:	4659      	mov	r1, fp
 8009980:	f7f6 fe0e 	bl	80005a0 <__aeabi_dmul>
 8009984:	2200      	movs	r2, #0
 8009986:	4682      	mov	sl, r0
 8009988:	468b      	mov	fp, r1
 800998a:	4b58      	ldr	r3, [pc, #352]	; (8009aec <__ieee754_pow+0x734>)
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	f7f6 fc4e 	bl	8000230 <__aeabi_dsub>
 8009994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009998:	f7f6 fc4a 	bl	8000230 <__aeabi_dsub>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4630      	mov	r0, r6
 80099a2:	4639      	mov	r1, r7
 80099a4:	f7f6 fc44 	bl	8000230 <__aeabi_dsub>
 80099a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099ac:	f7f6 fdf8 	bl	80005a0 <__aeabi_dmul>
 80099b0:	4622      	mov	r2, r4
 80099b2:	4606      	mov	r6, r0
 80099b4:	460f      	mov	r7, r1
 80099b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099ba:	462b      	mov	r3, r5
 80099bc:	f7f6 fdf0 	bl	80005a0 <__aeabi_dmul>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4630      	mov	r0, r6
 80099c6:	4639      	mov	r1, r7
 80099c8:	f7f6 fc34 	bl	8000234 <__adddf3>
 80099cc:	4606      	mov	r6, r0
 80099ce:	460f      	mov	r7, r1
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4650      	mov	r0, sl
 80099d6:	4659      	mov	r1, fp
 80099d8:	f7f6 fc2c 	bl	8000234 <__adddf3>
 80099dc:	a338      	add	r3, pc, #224	; (adr r3, 8009ac0 <__ieee754_pow+0x708>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	9804      	ldr	r0, [sp, #16]
 80099e4:	460d      	mov	r5, r1
 80099e6:	4604      	mov	r4, r0
 80099e8:	f7f6 fdda 	bl	80005a0 <__aeabi_dmul>
 80099ec:	4652      	mov	r2, sl
 80099ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099f2:	465b      	mov	r3, fp
 80099f4:	4620      	mov	r0, r4
 80099f6:	4629      	mov	r1, r5
 80099f8:	f7f6 fc1a 	bl	8000230 <__aeabi_dsub>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4630      	mov	r0, r6
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f6 fc14 	bl	8000230 <__aeabi_dsub>
 8009a08:	a32f      	add	r3, pc, #188	; (adr r3, 8009ac8 <__ieee754_pow+0x710>)
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	f7f6 fdc7 	bl	80005a0 <__aeabi_dmul>
 8009a12:	a32f      	add	r3, pc, #188	; (adr r3, 8009ad0 <__ieee754_pow+0x718>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	4606      	mov	r6, r0
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	4629      	mov	r1, r5
 8009a20:	f7f6 fdbe 	bl	80005a0 <__aeabi_dmul>
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4630      	mov	r0, r6
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	f7f6 fc02 	bl	8000234 <__adddf3>
 8009a30:	4b2f      	ldr	r3, [pc, #188]	; (8009af0 <__ieee754_pow+0x738>)
 8009a32:	444b      	add	r3, r9
 8009a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a38:	f7f6 fbfc 	bl	8000234 <__adddf3>
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a40:	460d      	mov	r5, r1
 8009a42:	f7f6 fd43 	bl	80004cc <__aeabi_i2d>
 8009a46:	4606      	mov	r6, r0
 8009a48:	460f      	mov	r7, r1
 8009a4a:	4b2a      	ldr	r3, [pc, #168]	; (8009af4 <__ieee754_pow+0x73c>)
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	444b      	add	r3, r9
 8009a50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a54:	462b      	mov	r3, r5
 8009a56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a5a:	f7f6 fbeb 	bl	8000234 <__adddf3>
 8009a5e:	4642      	mov	r2, r8
 8009a60:	464b      	mov	r3, r9
 8009a62:	f7f6 fbe7 	bl	8000234 <__adddf3>
 8009a66:	4632      	mov	r2, r6
 8009a68:	463b      	mov	r3, r7
 8009a6a:	f7f6 fbe3 	bl	8000234 <__adddf3>
 8009a6e:	9804      	ldr	r0, [sp, #16]
 8009a70:	4632      	mov	r2, r6
 8009a72:	463b      	mov	r3, r7
 8009a74:	4682      	mov	sl, r0
 8009a76:	468b      	mov	fp, r1
 8009a78:	f7f6 fbda 	bl	8000230 <__aeabi_dsub>
 8009a7c:	4642      	mov	r2, r8
 8009a7e:	464b      	mov	r3, r9
 8009a80:	f7f6 fbd6 	bl	8000230 <__aeabi_dsub>
 8009a84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a88:	e60b      	b.n	80096a2 <__ieee754_pow+0x2ea>
 8009a8a:	f04f 0801 	mov.w	r8, #1
 8009a8e:	e6a8      	b.n	80097e2 <__ieee754_pow+0x42a>
 8009a90:	4a454eef 	.word	0x4a454eef
 8009a94:	3fca7e28 	.word	0x3fca7e28
 8009a98:	93c9db65 	.word	0x93c9db65
 8009a9c:	3fcd864a 	.word	0x3fcd864a
 8009aa0:	a91d4101 	.word	0xa91d4101
 8009aa4:	3fd17460 	.word	0x3fd17460
 8009aa8:	518f264d 	.word	0x518f264d
 8009aac:	3fd55555 	.word	0x3fd55555
 8009ab0:	db6fabff 	.word	0xdb6fabff
 8009ab4:	3fdb6db6 	.word	0x3fdb6db6
 8009ab8:	33333303 	.word	0x33333303
 8009abc:	3fe33333 	.word	0x3fe33333
 8009ac0:	e0000000 	.word	0xe0000000
 8009ac4:	3feec709 	.word	0x3feec709
 8009ac8:	dc3a03fd 	.word	0xdc3a03fd
 8009acc:	3feec709 	.word	0x3feec709
 8009ad0:	145b01f5 	.word	0x145b01f5
 8009ad4:	be3e2fe0 	.word	0xbe3e2fe0
 8009ad8:	43400000 	.word	0x43400000
 8009adc:	0003988e 	.word	0x0003988e
 8009ae0:	000bb679 	.word	0x000bb679
 8009ae4:	0800a540 	.word	0x0800a540
 8009ae8:	3ff00000 	.word	0x3ff00000
 8009aec:	40080000 	.word	0x40080000
 8009af0:	0800a560 	.word	0x0800a560
 8009af4:	0800a550 	.word	0x0800a550
 8009af8:	a39b      	add	r3, pc, #620	; (adr r3, 8009d68 <__ieee754_pow+0x9b0>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	4640      	mov	r0, r8
 8009b00:	4649      	mov	r1, r9
 8009b02:	f7f6 fb97 	bl	8000234 <__adddf3>
 8009b06:	4622      	mov	r2, r4
 8009b08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	4650      	mov	r0, sl
 8009b10:	4639      	mov	r1, r7
 8009b12:	f7f6 fb8d 	bl	8000230 <__aeabi_dsub>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b1e:	f7f6 ffcf 	bl	8000ac0 <__aeabi_dcmpgt>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	f47f ae0d 	bne.w	8009742 <__ieee754_pow+0x38a>
 8009b28:	4aa3      	ldr	r2, [pc, #652]	; (8009db8 <__ieee754_pow+0xa00>)
 8009b2a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	f340 8103 	ble.w	8009d3a <__ieee754_pow+0x982>
 8009b34:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009b38:	2000      	movs	r0, #0
 8009b3a:	151b      	asrs	r3, r3, #20
 8009b3c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009b40:	fa4a f303 	asr.w	r3, sl, r3
 8009b44:	4433      	add	r3, r6
 8009b46:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009b4a:	4f9c      	ldr	r7, [pc, #624]	; (8009dbc <__ieee754_pow+0xa04>)
 8009b4c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009b50:	4117      	asrs	r7, r2
 8009b52:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009b56:	ea23 0107 	bic.w	r1, r3, r7
 8009b5a:	f1c2 0214 	rsb	r2, r2, #20
 8009b5e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009b62:	fa4a fa02 	asr.w	sl, sl, r2
 8009b66:	2e00      	cmp	r6, #0
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	bfb8      	it	lt
 8009b72:	f1ca 0a00 	rsblt	sl, sl, #0
 8009b76:	f7f6 fb5b 	bl	8000230 <__aeabi_dsub>
 8009b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b82:	4642      	mov	r2, r8
 8009b84:	464b      	mov	r3, r9
 8009b86:	f7f6 fb55 	bl	8000234 <__adddf3>
 8009b8a:	a379      	add	r3, pc, #484	; (adr r3, 8009d70 <__ieee754_pow+0x9b8>)
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	2000      	movs	r0, #0
 8009b92:	460d      	mov	r5, r1
 8009b94:	4604      	mov	r4, r0
 8009b96:	f7f6 fd03 	bl	80005a0 <__aeabi_dmul>
 8009b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	460f      	mov	r7, r1
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	f7f6 fb43 	bl	8000230 <__aeabi_dsub>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4640      	mov	r0, r8
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	f7f6 fb3d 	bl	8000230 <__aeabi_dsub>
 8009bb6:	a370      	add	r3, pc, #448	; (adr r3, 8009d78 <__ieee754_pow+0x9c0>)
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f7f6 fcf0 	bl	80005a0 <__aeabi_dmul>
 8009bc0:	a36f      	add	r3, pc, #444	; (adr r3, 8009d80 <__ieee754_pow+0x9c8>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	4680      	mov	r8, r0
 8009bc8:	4689      	mov	r9, r1
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 fce7 	bl	80005a0 <__aeabi_dmul>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	4649      	mov	r1, r9
 8009bda:	f7f6 fb2b 	bl	8000234 <__adddf3>
 8009bde:	4604      	mov	r4, r0
 8009be0:	460d      	mov	r5, r1
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	f7f6 fb23 	bl	8000234 <__adddf3>
 8009bee:	4632      	mov	r2, r6
 8009bf0:	463b      	mov	r3, r7
 8009bf2:	4680      	mov	r8, r0
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	f7f6 fb1b 	bl	8000230 <__aeabi_dsub>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7f6 fb15 	bl	8000230 <__aeabi_dsub>
 8009c06:	4642      	mov	r2, r8
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460f      	mov	r7, r1
 8009c0c:	464b      	mov	r3, r9
 8009c0e:	4640      	mov	r0, r8
 8009c10:	4649      	mov	r1, r9
 8009c12:	f7f6 fcc5 	bl	80005a0 <__aeabi_dmul>
 8009c16:	a35c      	add	r3, pc, #368	; (adr r3, 8009d88 <__ieee754_pow+0x9d0>)
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	460d      	mov	r5, r1
 8009c20:	f7f6 fcbe 	bl	80005a0 <__aeabi_dmul>
 8009c24:	a35a      	add	r3, pc, #360	; (adr r3, 8009d90 <__ieee754_pow+0x9d8>)
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	f7f6 fb01 	bl	8000230 <__aeabi_dsub>
 8009c2e:	4622      	mov	r2, r4
 8009c30:	462b      	mov	r3, r5
 8009c32:	f7f6 fcb5 	bl	80005a0 <__aeabi_dmul>
 8009c36:	a358      	add	r3, pc, #352	; (adr r3, 8009d98 <__ieee754_pow+0x9e0>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	f7f6 fafa 	bl	8000234 <__adddf3>
 8009c40:	4622      	mov	r2, r4
 8009c42:	462b      	mov	r3, r5
 8009c44:	f7f6 fcac 	bl	80005a0 <__aeabi_dmul>
 8009c48:	a355      	add	r3, pc, #340	; (adr r3, 8009da0 <__ieee754_pow+0x9e8>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 faef 	bl	8000230 <__aeabi_dsub>
 8009c52:	4622      	mov	r2, r4
 8009c54:	462b      	mov	r3, r5
 8009c56:	f7f6 fca3 	bl	80005a0 <__aeabi_dmul>
 8009c5a:	a353      	add	r3, pc, #332	; (adr r3, 8009da8 <__ieee754_pow+0x9f0>)
 8009c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c60:	f7f6 fae8 	bl	8000234 <__adddf3>
 8009c64:	4622      	mov	r2, r4
 8009c66:	462b      	mov	r3, r5
 8009c68:	f7f6 fc9a 	bl	80005a0 <__aeabi_dmul>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	460b      	mov	r3, r1
 8009c70:	4640      	mov	r0, r8
 8009c72:	4649      	mov	r1, r9
 8009c74:	f7f6 fadc 	bl	8000230 <__aeabi_dsub>
 8009c78:	4604      	mov	r4, r0
 8009c7a:	460d      	mov	r5, r1
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4640      	mov	r0, r8
 8009c82:	4649      	mov	r1, r9
 8009c84:	f7f6 fc8c 	bl	80005a0 <__aeabi_dmul>
 8009c88:	2200      	movs	r2, #0
 8009c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c92:	4620      	mov	r0, r4
 8009c94:	4629      	mov	r1, r5
 8009c96:	f7f6 facb 	bl	8000230 <__aeabi_dsub>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ca2:	f7f6 fda7 	bl	80007f4 <__aeabi_ddiv>
 8009ca6:	4632      	mov	r2, r6
 8009ca8:	4604      	mov	r4, r0
 8009caa:	460d      	mov	r5, r1
 8009cac:	463b      	mov	r3, r7
 8009cae:	4640      	mov	r0, r8
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	f7f6 fc75 	bl	80005a0 <__aeabi_dmul>
 8009cb6:	4632      	mov	r2, r6
 8009cb8:	463b      	mov	r3, r7
 8009cba:	f7f6 fabb 	bl	8000234 <__adddf3>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	f7f6 fab3 	bl	8000230 <__aeabi_dsub>
 8009cca:	4642      	mov	r2, r8
 8009ccc:	464b      	mov	r3, r9
 8009cce:	f7f6 faaf 	bl	8000230 <__aeabi_dsub>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	4939      	ldr	r1, [pc, #228]	; (8009dc0 <__ieee754_pow+0xa08>)
 8009cda:	f7f6 faa9 	bl	8000230 <__aeabi_dsub>
 8009cde:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009ce2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009ce6:	da2b      	bge.n	8009d40 <__ieee754_pow+0x988>
 8009ce8:	4652      	mov	r2, sl
 8009cea:	f000 fb45 	bl	800a378 <scalbn>
 8009cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cf2:	f7ff bbf6 	b.w	80094e2 <__ieee754_pow+0x12a>
 8009cf6:	4b33      	ldr	r3, [pc, #204]	; (8009dc4 <__ieee754_pow+0xa0c>)
 8009cf8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009cfc:	429f      	cmp	r7, r3
 8009cfe:	f77f af13 	ble.w	8009b28 <__ieee754_pow+0x770>
 8009d02:	4b31      	ldr	r3, [pc, #196]	; (8009dc8 <__ieee754_pow+0xa10>)
 8009d04:	440b      	add	r3, r1
 8009d06:	4303      	orrs	r3, r0
 8009d08:	d00b      	beq.n	8009d22 <__ieee754_pow+0x96a>
 8009d0a:	a329      	add	r3, pc, #164	; (adr r3, 8009db0 <__ieee754_pow+0x9f8>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d14:	f7f6 fc44 	bl	80005a0 <__aeabi_dmul>
 8009d18:	a325      	add	r3, pc, #148	; (adr r3, 8009db0 <__ieee754_pow+0x9f8>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f7ff bbe0 	b.w	80094e2 <__ieee754_pow+0x12a>
 8009d22:	4622      	mov	r2, r4
 8009d24:	462b      	mov	r3, r5
 8009d26:	f7f6 fa83 	bl	8000230 <__aeabi_dsub>
 8009d2a:	4642      	mov	r2, r8
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	f7f6 febd 	bl	8000aac <__aeabi_dcmpge>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f43f aef8 	beq.w	8009b28 <__ieee754_pow+0x770>
 8009d38:	e7e7      	b.n	8009d0a <__ieee754_pow+0x952>
 8009d3a:	f04f 0a00 	mov.w	sl, #0
 8009d3e:	e71e      	b.n	8009b7e <__ieee754_pow+0x7c6>
 8009d40:	4621      	mov	r1, r4
 8009d42:	e7d4      	b.n	8009cee <__ieee754_pow+0x936>
 8009d44:	f04f 0b00 	mov.w	fp, #0
 8009d48:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009dc0 <__ieee754_pow+0xa08>
 8009d4c:	f7ff bb95 	b.w	800947a <__ieee754_pow+0xc2>
 8009d50:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009d54:	f7ff bb91 	b.w	800947a <__ieee754_pow+0xc2>
 8009d58:	4638      	mov	r0, r7
 8009d5a:	4641      	mov	r1, r8
 8009d5c:	f7ff bbc3 	b.w	80094e6 <__ieee754_pow+0x12e>
 8009d60:	9200      	str	r2, [sp, #0]
 8009d62:	f7ff bb9f 	b.w	80094a4 <__ieee754_pow+0xec>
 8009d66:	bf00      	nop
 8009d68:	652b82fe 	.word	0x652b82fe
 8009d6c:	3c971547 	.word	0x3c971547
 8009d70:	00000000 	.word	0x00000000
 8009d74:	3fe62e43 	.word	0x3fe62e43
 8009d78:	fefa39ef 	.word	0xfefa39ef
 8009d7c:	3fe62e42 	.word	0x3fe62e42
 8009d80:	0ca86c39 	.word	0x0ca86c39
 8009d84:	be205c61 	.word	0xbe205c61
 8009d88:	72bea4d0 	.word	0x72bea4d0
 8009d8c:	3e663769 	.word	0x3e663769
 8009d90:	c5d26bf1 	.word	0xc5d26bf1
 8009d94:	3ebbbd41 	.word	0x3ebbbd41
 8009d98:	af25de2c 	.word	0xaf25de2c
 8009d9c:	3f11566a 	.word	0x3f11566a
 8009da0:	16bebd93 	.word	0x16bebd93
 8009da4:	3f66c16c 	.word	0x3f66c16c
 8009da8:	5555553e 	.word	0x5555553e
 8009dac:	3fc55555 	.word	0x3fc55555
 8009db0:	c2f8f359 	.word	0xc2f8f359
 8009db4:	01a56e1f 	.word	0x01a56e1f
 8009db8:	3fe00000 	.word	0x3fe00000
 8009dbc:	000fffff 	.word	0x000fffff
 8009dc0:	3ff00000 	.word	0x3ff00000
 8009dc4:	4090cbff 	.word	0x4090cbff
 8009dc8:	3f6f3400 	.word	0x3f6f3400

08009dcc <__ieee754_sqrt>:
 8009dcc:	4b54      	ldr	r3, [pc, #336]	; (8009f20 <__ieee754_sqrt+0x154>)
 8009dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd2:	438b      	bics	r3, r1
 8009dd4:	4606      	mov	r6, r0
 8009dd6:	460d      	mov	r5, r1
 8009dd8:	460a      	mov	r2, r1
 8009dda:	460c      	mov	r4, r1
 8009ddc:	d10f      	bne.n	8009dfe <__ieee754_sqrt+0x32>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	f7f6 fbdd 	bl	80005a0 <__aeabi_dmul>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4630      	mov	r0, r6
 8009dec:	4629      	mov	r1, r5
 8009dee:	f7f6 fa21 	bl	8000234 <__adddf3>
 8009df2:	4606      	mov	r6, r0
 8009df4:	460d      	mov	r5, r1
 8009df6:	4630      	mov	r0, r6
 8009df8:	4629      	mov	r1, r5
 8009dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dfe:	2900      	cmp	r1, #0
 8009e00:	4607      	mov	r7, r0
 8009e02:	4603      	mov	r3, r0
 8009e04:	dc0e      	bgt.n	8009e24 <__ieee754_sqrt+0x58>
 8009e06:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009e0a:	ea5c 0707 	orrs.w	r7, ip, r7
 8009e0e:	d0f2      	beq.n	8009df6 <__ieee754_sqrt+0x2a>
 8009e10:	b141      	cbz	r1, 8009e24 <__ieee754_sqrt+0x58>
 8009e12:	4602      	mov	r2, r0
 8009e14:	460b      	mov	r3, r1
 8009e16:	f7f6 fa0b 	bl	8000230 <__aeabi_dsub>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	f7f6 fce9 	bl	80007f4 <__aeabi_ddiv>
 8009e22:	e7e6      	b.n	8009df2 <__ieee754_sqrt+0x26>
 8009e24:	1512      	asrs	r2, r2, #20
 8009e26:	d074      	beq.n	8009f12 <__ieee754_sqrt+0x146>
 8009e28:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009e2c:	07d5      	lsls	r5, r2, #31
 8009e2e:	f04f 0500 	mov.w	r5, #0
 8009e32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009e36:	bf48      	it	mi
 8009e38:	0fd9      	lsrmi	r1, r3, #31
 8009e3a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009e3e:	bf44      	itt	mi
 8009e40:	005b      	lslmi	r3, r3, #1
 8009e42:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8009e46:	1051      	asrs	r1, r2, #1
 8009e48:	0fda      	lsrs	r2, r3, #31
 8009e4a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8009e4e:	4628      	mov	r0, r5
 8009e50:	2216      	movs	r2, #22
 8009e52:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	1987      	adds	r7, r0, r6
 8009e5a:	42a7      	cmp	r7, r4
 8009e5c:	bfde      	ittt	le
 8009e5e:	19b8      	addle	r0, r7, r6
 8009e60:	1be4      	suble	r4, r4, r7
 8009e62:	19ad      	addle	r5, r5, r6
 8009e64:	0fdf      	lsrs	r7, r3, #31
 8009e66:	3a01      	subs	r2, #1
 8009e68:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8009e6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e74:	d1f0      	bne.n	8009e58 <__ieee754_sqrt+0x8c>
 8009e76:	f04f 0c20 	mov.w	ip, #32
 8009e7a:	4696      	mov	lr, r2
 8009e7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e80:	4284      	cmp	r4, r0
 8009e82:	eb06 070e 	add.w	r7, r6, lr
 8009e86:	dc02      	bgt.n	8009e8e <__ieee754_sqrt+0xc2>
 8009e88:	d112      	bne.n	8009eb0 <__ieee754_sqrt+0xe4>
 8009e8a:	429f      	cmp	r7, r3
 8009e8c:	d810      	bhi.n	8009eb0 <__ieee754_sqrt+0xe4>
 8009e8e:	2f00      	cmp	r7, #0
 8009e90:	eb07 0e06 	add.w	lr, r7, r6
 8009e94:	da42      	bge.n	8009f1c <__ieee754_sqrt+0x150>
 8009e96:	f1be 0f00 	cmp.w	lr, #0
 8009e9a:	db3f      	blt.n	8009f1c <__ieee754_sqrt+0x150>
 8009e9c:	f100 0801 	add.w	r8, r0, #1
 8009ea0:	1a24      	subs	r4, r4, r0
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	429f      	cmp	r7, r3
 8009ea6:	bf88      	it	hi
 8009ea8:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8009eac:	1bdb      	subs	r3, r3, r7
 8009eae:	4432      	add	r2, r6
 8009eb0:	0064      	lsls	r4, r4, #1
 8009eb2:	f1bc 0c01 	subs.w	ip, ip, #1
 8009eb6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8009eba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009ebe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ec2:	d1dd      	bne.n	8009e80 <__ieee754_sqrt+0xb4>
 8009ec4:	4323      	orrs	r3, r4
 8009ec6:	d006      	beq.n	8009ed6 <__ieee754_sqrt+0x10a>
 8009ec8:	1c54      	adds	r4, r2, #1
 8009eca:	bf0b      	itete	eq
 8009ecc:	4662      	moveq	r2, ip
 8009ece:	3201      	addne	r2, #1
 8009ed0:	3501      	addeq	r5, #1
 8009ed2:	f022 0201 	bicne.w	r2, r2, #1
 8009ed6:	106b      	asrs	r3, r5, #1
 8009ed8:	0852      	lsrs	r2, r2, #1
 8009eda:	07e8      	lsls	r0, r5, #31
 8009edc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009ee0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009ee4:	bf48      	it	mi
 8009ee6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009eea:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8009eee:	4616      	mov	r6, r2
 8009ef0:	e781      	b.n	8009df6 <__ieee754_sqrt+0x2a>
 8009ef2:	0adc      	lsrs	r4, r3, #11
 8009ef4:	3915      	subs	r1, #21
 8009ef6:	055b      	lsls	r3, r3, #21
 8009ef8:	2c00      	cmp	r4, #0
 8009efa:	d0fa      	beq.n	8009ef2 <__ieee754_sqrt+0x126>
 8009efc:	02e6      	lsls	r6, r4, #11
 8009efe:	d50a      	bpl.n	8009f16 <__ieee754_sqrt+0x14a>
 8009f00:	f1c2 0020 	rsb	r0, r2, #32
 8009f04:	fa23 f000 	lsr.w	r0, r3, r0
 8009f08:	1e55      	subs	r5, r2, #1
 8009f0a:	4093      	lsls	r3, r2
 8009f0c:	4304      	orrs	r4, r0
 8009f0e:	1b4a      	subs	r2, r1, r5
 8009f10:	e78a      	b.n	8009e28 <__ieee754_sqrt+0x5c>
 8009f12:	4611      	mov	r1, r2
 8009f14:	e7f0      	b.n	8009ef8 <__ieee754_sqrt+0x12c>
 8009f16:	0064      	lsls	r4, r4, #1
 8009f18:	3201      	adds	r2, #1
 8009f1a:	e7ef      	b.n	8009efc <__ieee754_sqrt+0x130>
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	e7bf      	b.n	8009ea0 <__ieee754_sqrt+0xd4>
 8009f20:	7ff00000 	.word	0x7ff00000
 8009f24:	00000000 	.word	0x00000000

08009f28 <atan>:
 8009f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	4bb6      	ldr	r3, [pc, #728]	; (800a208 <atan+0x2e0>)
 8009f2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f32:	429e      	cmp	r6, r3
 8009f34:	4604      	mov	r4, r0
 8009f36:	460d      	mov	r5, r1
 8009f38:	468b      	mov	fp, r1
 8009f3a:	dd17      	ble.n	8009f6c <atan+0x44>
 8009f3c:	4bb3      	ldr	r3, [pc, #716]	; (800a20c <atan+0x2e4>)
 8009f3e:	429e      	cmp	r6, r3
 8009f40:	dc01      	bgt.n	8009f46 <atan+0x1e>
 8009f42:	d109      	bne.n	8009f58 <atan+0x30>
 8009f44:	b140      	cbz	r0, 8009f58 <atan+0x30>
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	f7f6 f971 	bl	8000234 <__adddf3>
 8009f52:	4604      	mov	r4, r0
 8009f54:	460d      	mov	r5, r1
 8009f56:	e005      	b.n	8009f64 <atan+0x3c>
 8009f58:	f1bb 0f00 	cmp.w	fp, #0
 8009f5c:	4cac      	ldr	r4, [pc, #688]	; (800a210 <atan+0x2e8>)
 8009f5e:	f340 8121 	ble.w	800a1a4 <atan+0x27c>
 8009f62:	4dac      	ldr	r5, [pc, #688]	; (800a214 <atan+0x2ec>)
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	4baa      	ldr	r3, [pc, #680]	; (800a218 <atan+0x2f0>)
 8009f6e:	429e      	cmp	r6, r3
 8009f70:	dc11      	bgt.n	8009f96 <atan+0x6e>
 8009f72:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009f76:	429e      	cmp	r6, r3
 8009f78:	dc0a      	bgt.n	8009f90 <atan+0x68>
 8009f7a:	a38b      	add	r3, pc, #556	; (adr r3, 800a1a8 <atan+0x280>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 f958 	bl	8000234 <__adddf3>
 8009f84:	2200      	movs	r2, #0
 8009f86:	4ba5      	ldr	r3, [pc, #660]	; (800a21c <atan+0x2f4>)
 8009f88:	f7f6 fd9a 	bl	8000ac0 <__aeabi_dcmpgt>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d1e9      	bne.n	8009f64 <atan+0x3c>
 8009f90:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009f94:	e027      	b.n	8009fe6 <atan+0xbe>
 8009f96:	f000 f951 	bl	800a23c <fabs>
 8009f9a:	4ba1      	ldr	r3, [pc, #644]	; (800a220 <atan+0x2f8>)
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	429e      	cmp	r6, r3
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	f300 80b8 	bgt.w	800a116 <atan+0x1ee>
 8009fa6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009faa:	429e      	cmp	r6, r3
 8009fac:	f300 809c 	bgt.w	800a0e8 <atan+0x1c0>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	f7f6 f93e 	bl	8000234 <__adddf3>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	4b98      	ldr	r3, [pc, #608]	; (800a21c <atan+0x2f4>)
 8009fbc:	f7f6 f938 	bl	8000230 <__aeabi_dsub>
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	460f      	mov	r7, r1
 8009fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	f7f6 f931 	bl	8000234 <__adddf3>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	4639      	mov	r1, r7
 8009fda:	f7f6 fc0b 	bl	80007f4 <__aeabi_ddiv>
 8009fde:	f04f 0a00 	mov.w	sl, #0
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	460d      	mov	r5, r1
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	462b      	mov	r3, r5
 8009fea:	4620      	mov	r0, r4
 8009fec:	4629      	mov	r1, r5
 8009fee:	f7f6 fad7 	bl	80005a0 <__aeabi_dmul>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	4680      	mov	r8, r0
 8009ff8:	4689      	mov	r9, r1
 8009ffa:	f7f6 fad1 	bl	80005a0 <__aeabi_dmul>
 8009ffe:	a36c      	add	r3, pc, #432	; (adr r3, 800a1b0 <atan+0x288>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	4606      	mov	r6, r0
 800a006:	460f      	mov	r7, r1
 800a008:	f7f6 faca 	bl	80005a0 <__aeabi_dmul>
 800a00c:	a36a      	add	r3, pc, #424	; (adr r3, 800a1b8 <atan+0x290>)
 800a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a012:	f7f6 f90f 	bl	8000234 <__adddf3>
 800a016:	4632      	mov	r2, r6
 800a018:	463b      	mov	r3, r7
 800a01a:	f7f6 fac1 	bl	80005a0 <__aeabi_dmul>
 800a01e:	a368      	add	r3, pc, #416	; (adr r3, 800a1c0 <atan+0x298>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f7f6 f906 	bl	8000234 <__adddf3>
 800a028:	4632      	mov	r2, r6
 800a02a:	463b      	mov	r3, r7
 800a02c:	f7f6 fab8 	bl	80005a0 <__aeabi_dmul>
 800a030:	a365      	add	r3, pc, #404	; (adr r3, 800a1c8 <atan+0x2a0>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 f8fd 	bl	8000234 <__adddf3>
 800a03a:	4632      	mov	r2, r6
 800a03c:	463b      	mov	r3, r7
 800a03e:	f7f6 faaf 	bl	80005a0 <__aeabi_dmul>
 800a042:	a363      	add	r3, pc, #396	; (adr r3, 800a1d0 <atan+0x2a8>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f7f6 f8f4 	bl	8000234 <__adddf3>
 800a04c:	4632      	mov	r2, r6
 800a04e:	463b      	mov	r3, r7
 800a050:	f7f6 faa6 	bl	80005a0 <__aeabi_dmul>
 800a054:	a360      	add	r3, pc, #384	; (adr r3, 800a1d8 <atan+0x2b0>)
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f7f6 f8eb 	bl	8000234 <__adddf3>
 800a05e:	4642      	mov	r2, r8
 800a060:	464b      	mov	r3, r9
 800a062:	f7f6 fa9d 	bl	80005a0 <__aeabi_dmul>
 800a066:	a35e      	add	r3, pc, #376	; (adr r3, 800a1e0 <atan+0x2b8>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	4680      	mov	r8, r0
 800a06e:	4689      	mov	r9, r1
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 fa94 	bl	80005a0 <__aeabi_dmul>
 800a078:	a35b      	add	r3, pc, #364	; (adr r3, 800a1e8 <atan+0x2c0>)
 800a07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07e:	f7f6 f8d7 	bl	8000230 <__aeabi_dsub>
 800a082:	4632      	mov	r2, r6
 800a084:	463b      	mov	r3, r7
 800a086:	f7f6 fa8b 	bl	80005a0 <__aeabi_dmul>
 800a08a:	a359      	add	r3, pc, #356	; (adr r3, 800a1f0 <atan+0x2c8>)
 800a08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a090:	f7f6 f8ce 	bl	8000230 <__aeabi_dsub>
 800a094:	4632      	mov	r2, r6
 800a096:	463b      	mov	r3, r7
 800a098:	f7f6 fa82 	bl	80005a0 <__aeabi_dmul>
 800a09c:	a356      	add	r3, pc, #344	; (adr r3, 800a1f8 <atan+0x2d0>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f7f6 f8c5 	bl	8000230 <__aeabi_dsub>
 800a0a6:	4632      	mov	r2, r6
 800a0a8:	463b      	mov	r3, r7
 800a0aa:	f7f6 fa79 	bl	80005a0 <__aeabi_dmul>
 800a0ae:	a354      	add	r3, pc, #336	; (adr r3, 800a200 <atan+0x2d8>)
 800a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b4:	f7f6 f8bc 	bl	8000230 <__aeabi_dsub>
 800a0b8:	4632      	mov	r2, r6
 800a0ba:	463b      	mov	r3, r7
 800a0bc:	f7f6 fa70 	bl	80005a0 <__aeabi_dmul>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4640      	mov	r0, r8
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	f7f6 f8b4 	bl	8000234 <__adddf3>
 800a0cc:	4622      	mov	r2, r4
 800a0ce:	462b      	mov	r3, r5
 800a0d0:	f7f6 fa66 	bl	80005a0 <__aeabi_dmul>
 800a0d4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	d144      	bne.n	800a168 <atan+0x240>
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f7f6 f8a5 	bl	8000230 <__aeabi_dsub>
 800a0e6:	e734      	b.n	8009f52 <atan+0x2a>
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4b4c      	ldr	r3, [pc, #304]	; (800a21c <atan+0x2f4>)
 800a0ec:	f7f6 f8a0 	bl	8000230 <__aeabi_dsub>
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	4b49      	ldr	r3, [pc, #292]	; (800a21c <atan+0x2f4>)
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	f7f6 f89a 	bl	8000234 <__adddf3>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f7f6 fb74 	bl	80007f4 <__aeabi_ddiv>
 800a10c:	f04f 0a01 	mov.w	sl, #1
 800a110:	4604      	mov	r4, r0
 800a112:	460d      	mov	r5, r1
 800a114:	e767      	b.n	8009fe6 <atan+0xbe>
 800a116:	4b43      	ldr	r3, [pc, #268]	; (800a224 <atan+0x2fc>)
 800a118:	429e      	cmp	r6, r3
 800a11a:	dc1a      	bgt.n	800a152 <atan+0x22a>
 800a11c:	2200      	movs	r2, #0
 800a11e:	4b42      	ldr	r3, [pc, #264]	; (800a228 <atan+0x300>)
 800a120:	f7f6 f886 	bl	8000230 <__aeabi_dsub>
 800a124:	2200      	movs	r2, #0
 800a126:	4606      	mov	r6, r0
 800a128:	460f      	mov	r7, r1
 800a12a:	4b3f      	ldr	r3, [pc, #252]	; (800a228 <atan+0x300>)
 800a12c:	4620      	mov	r0, r4
 800a12e:	4629      	mov	r1, r5
 800a130:	f7f6 fa36 	bl	80005a0 <__aeabi_dmul>
 800a134:	2200      	movs	r2, #0
 800a136:	4b39      	ldr	r3, [pc, #228]	; (800a21c <atan+0x2f4>)
 800a138:	f7f6 f87c 	bl	8000234 <__adddf3>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	f7f6 fb56 	bl	80007f4 <__aeabi_ddiv>
 800a148:	f04f 0a02 	mov.w	sl, #2
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	e749      	b.n	8009fe6 <atan+0xbe>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	2000      	movs	r0, #0
 800a158:	4934      	ldr	r1, [pc, #208]	; (800a22c <atan+0x304>)
 800a15a:	f7f6 fb4b 	bl	80007f4 <__aeabi_ddiv>
 800a15e:	f04f 0a03 	mov.w	sl, #3
 800a162:	4604      	mov	r4, r0
 800a164:	460d      	mov	r5, r1
 800a166:	e73e      	b.n	8009fe6 <atan+0xbe>
 800a168:	4b31      	ldr	r3, [pc, #196]	; (800a230 <atan+0x308>)
 800a16a:	4e32      	ldr	r6, [pc, #200]	; (800a234 <atan+0x30c>)
 800a16c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a170:	4456      	add	r6, sl
 800a172:	449a      	add	sl, r3
 800a174:	e9da 2300 	ldrd	r2, r3, [sl]
 800a178:	f7f6 f85a 	bl	8000230 <__aeabi_dsub>
 800a17c:	4622      	mov	r2, r4
 800a17e:	462b      	mov	r3, r5
 800a180:	f7f6 f856 	bl	8000230 <__aeabi_dsub>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a18c:	f7f6 f850 	bl	8000230 <__aeabi_dsub>
 800a190:	f1bb 0f00 	cmp.w	fp, #0
 800a194:	4604      	mov	r4, r0
 800a196:	460d      	mov	r5, r1
 800a198:	f6bf aee4 	bge.w	8009f64 <atan+0x3c>
 800a19c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1a0:	461d      	mov	r5, r3
 800a1a2:	e6df      	b.n	8009f64 <atan+0x3c>
 800a1a4:	4d24      	ldr	r5, [pc, #144]	; (800a238 <atan+0x310>)
 800a1a6:	e6dd      	b.n	8009f64 <atan+0x3c>
 800a1a8:	8800759c 	.word	0x8800759c
 800a1ac:	7e37e43c 	.word	0x7e37e43c
 800a1b0:	e322da11 	.word	0xe322da11
 800a1b4:	3f90ad3a 	.word	0x3f90ad3a
 800a1b8:	24760deb 	.word	0x24760deb
 800a1bc:	3fa97b4b 	.word	0x3fa97b4b
 800a1c0:	a0d03d51 	.word	0xa0d03d51
 800a1c4:	3fb10d66 	.word	0x3fb10d66
 800a1c8:	c54c206e 	.word	0xc54c206e
 800a1cc:	3fb745cd 	.word	0x3fb745cd
 800a1d0:	920083ff 	.word	0x920083ff
 800a1d4:	3fc24924 	.word	0x3fc24924
 800a1d8:	5555550d 	.word	0x5555550d
 800a1dc:	3fd55555 	.word	0x3fd55555
 800a1e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a1e4:	bfa2b444 	.word	0xbfa2b444
 800a1e8:	52defd9a 	.word	0x52defd9a
 800a1ec:	3fadde2d 	.word	0x3fadde2d
 800a1f0:	af749a6d 	.word	0xaf749a6d
 800a1f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a1f8:	fe231671 	.word	0xfe231671
 800a1fc:	3fbc71c6 	.word	0x3fbc71c6
 800a200:	9998ebc4 	.word	0x9998ebc4
 800a204:	3fc99999 	.word	0x3fc99999
 800a208:	440fffff 	.word	0x440fffff
 800a20c:	7ff00000 	.word	0x7ff00000
 800a210:	54442d18 	.word	0x54442d18
 800a214:	3ff921fb 	.word	0x3ff921fb
 800a218:	3fdbffff 	.word	0x3fdbffff
 800a21c:	3ff00000 	.word	0x3ff00000
 800a220:	3ff2ffff 	.word	0x3ff2ffff
 800a224:	40037fff 	.word	0x40037fff
 800a228:	3ff80000 	.word	0x3ff80000
 800a22c:	bff00000 	.word	0xbff00000
 800a230:	0800a590 	.word	0x0800a590
 800a234:	0800a570 	.word	0x0800a570
 800a238:	bff921fb 	.word	0xbff921fb

0800a23c <fabs>:
 800a23c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a240:	4619      	mov	r1, r3
 800a242:	4770      	bx	lr

0800a244 <finite>:
 800a244:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a248:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800a24c:	0fc0      	lsrs	r0, r0, #31
 800a24e:	4770      	bx	lr

0800a250 <matherr>:
 800a250:	2000      	movs	r0, #0
 800a252:	4770      	bx	lr

0800a254 <nan>:
 800a254:	2000      	movs	r0, #0
 800a256:	4901      	ldr	r1, [pc, #4]	; (800a25c <nan+0x8>)
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	7ff80000 	.word	0x7ff80000

0800a260 <rint>:
 800a260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a262:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a266:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800a26a:	f1bc 0f13 	cmp.w	ip, #19
 800a26e:	4604      	mov	r4, r0
 800a270:	460d      	mov	r5, r1
 800a272:	460b      	mov	r3, r1
 800a274:	4606      	mov	r6, r0
 800a276:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800a27a:	dc5a      	bgt.n	800a332 <rint+0xd2>
 800a27c:	f1bc 0f00 	cmp.w	ip, #0
 800a280:	da2b      	bge.n	800a2da <rint+0x7a>
 800a282:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a286:	4302      	orrs	r2, r0
 800a288:	d023      	beq.n	800a2d2 <rint+0x72>
 800a28a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a28e:	4302      	orrs	r2, r0
 800a290:	4256      	negs	r6, r2
 800a292:	4316      	orrs	r6, r2
 800a294:	0c4b      	lsrs	r3, r1, #17
 800a296:	0b36      	lsrs	r6, r6, #12
 800a298:	4934      	ldr	r1, [pc, #208]	; (800a36c <rint+0x10c>)
 800a29a:	045b      	lsls	r3, r3, #17
 800a29c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800a2a0:	ea46 0503 	orr.w	r5, r6, r3
 800a2a4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	462b      	mov	r3, r5
 800a2ac:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	f7f5 ffbe 	bl	8000234 <__adddf3>
 800a2b8:	e9cd 0100 	strd	r0, r1, [sp]
 800a2bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2c0:	462b      	mov	r3, r5
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	f7f5 ffb4 	bl	8000230 <__aeabi_dsub>
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2ce:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	b003      	add	sp, #12
 800a2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2da:	4a25      	ldr	r2, [pc, #148]	; (800a370 <rint+0x110>)
 800a2dc:	fa42 f20c 	asr.w	r2, r2, ip
 800a2e0:	4011      	ands	r1, r2
 800a2e2:	4301      	orrs	r1, r0
 800a2e4:	d0f5      	beq.n	800a2d2 <rint+0x72>
 800a2e6:	0852      	lsrs	r2, r2, #1
 800a2e8:	ea05 0102 	and.w	r1, r5, r2
 800a2ec:	ea50 0601 	orrs.w	r6, r0, r1
 800a2f0:	d00c      	beq.n	800a30c <rint+0xac>
 800a2f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a2f6:	f1bc 0f13 	cmp.w	ip, #19
 800a2fa:	bf0c      	ite	eq
 800a2fc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800a300:	2600      	movne	r6, #0
 800a302:	ea25 0202 	bic.w	r2, r5, r2
 800a306:	fa43 f30c 	asr.w	r3, r3, ip
 800a30a:	4313      	orrs	r3, r2
 800a30c:	4917      	ldr	r1, [pc, #92]	; (800a36c <rint+0x10c>)
 800a30e:	4632      	mov	r2, r6
 800a310:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800a314:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a318:	4620      	mov	r0, r4
 800a31a:	4629      	mov	r1, r5
 800a31c:	f7f5 ff8a 	bl	8000234 <__adddf3>
 800a320:	e9cd 0100 	strd	r0, r1, [sp]
 800a324:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a328:	4622      	mov	r2, r4
 800a32a:	462b      	mov	r3, r5
 800a32c:	f7f5 ff80 	bl	8000230 <__aeabi_dsub>
 800a330:	e008      	b.n	800a344 <rint+0xe4>
 800a332:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800a336:	dd08      	ble.n	800a34a <rint+0xea>
 800a338:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800a33c:	d1c9      	bne.n	800a2d2 <rint+0x72>
 800a33e:	4602      	mov	r2, r0
 800a340:	f7f5 ff78 	bl	8000234 <__adddf3>
 800a344:	4604      	mov	r4, r0
 800a346:	460d      	mov	r5, r1
 800a348:	e7c3      	b.n	800a2d2 <rint+0x72>
 800a34a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800a34e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a352:	40ca      	lsrs	r2, r1
 800a354:	4210      	tst	r0, r2
 800a356:	d0bc      	beq.n	800a2d2 <rint+0x72>
 800a358:	0852      	lsrs	r2, r2, #1
 800a35a:	4210      	tst	r0, r2
 800a35c:	bf1f      	itttt	ne
 800a35e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800a362:	ea20 0202 	bicne.w	r2, r0, r2
 800a366:	410e      	asrne	r6, r1
 800a368:	4316      	orrne	r6, r2
 800a36a:	e7cf      	b.n	800a30c <rint+0xac>
 800a36c:	0800a5b0 	.word	0x0800a5b0
 800a370:	000fffff 	.word	0x000fffff
 800a374:	00000000 	.word	0x00000000

0800a378 <scalbn>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	4616      	mov	r6, r2
 800a37c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a380:	4604      	mov	r4, r0
 800a382:	460d      	mov	r5, r1
 800a384:	460b      	mov	r3, r1
 800a386:	b982      	cbnz	r2, 800a3aa <scalbn+0x32>
 800a388:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a38c:	4303      	orrs	r3, r0
 800a38e:	d034      	beq.n	800a3fa <scalbn+0x82>
 800a390:	4b2d      	ldr	r3, [pc, #180]	; (800a448 <scalbn+0xd0>)
 800a392:	2200      	movs	r2, #0
 800a394:	f7f6 f904 	bl	80005a0 <__aeabi_dmul>
 800a398:	4b2c      	ldr	r3, [pc, #176]	; (800a44c <scalbn+0xd4>)
 800a39a:	4604      	mov	r4, r0
 800a39c:	429e      	cmp	r6, r3
 800a39e:	460d      	mov	r5, r1
 800a3a0:	da0d      	bge.n	800a3be <scalbn+0x46>
 800a3a2:	a325      	add	r3, pc, #148	; (adr r3, 800a438 <scalbn+0xc0>)
 800a3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a8:	e01c      	b.n	800a3e4 <scalbn+0x6c>
 800a3aa:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800a3ae:	42ba      	cmp	r2, r7
 800a3b0:	d109      	bne.n	800a3c6 <scalbn+0x4e>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	f7f5 ff3e 	bl	8000234 <__adddf3>
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	460d      	mov	r5, r1
 800a3bc:	e01d      	b.n	800a3fa <scalbn+0x82>
 800a3be:	460b      	mov	r3, r1
 800a3c0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a3c4:	3a36      	subs	r2, #54	; 0x36
 800a3c6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a3ca:	4432      	add	r2, r6
 800a3cc:	428a      	cmp	r2, r1
 800a3ce:	dd0c      	ble.n	800a3ea <scalbn+0x72>
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	462b      	mov	r3, r5
 800a3d4:	a11a      	add	r1, pc, #104	; (adr r1, 800a440 <scalbn+0xc8>)
 800a3d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3da:	f000 f83b 	bl	800a454 <copysign>
 800a3de:	a318      	add	r3, pc, #96	; (adr r3, 800a440 <scalbn+0xc8>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f6 f8dc 	bl	80005a0 <__aeabi_dmul>
 800a3e8:	e7e6      	b.n	800a3b8 <scalbn+0x40>
 800a3ea:	2a00      	cmp	r2, #0
 800a3ec:	dd08      	ble.n	800a400 <scalbn+0x88>
 800a3ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3f6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a400:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a404:	da0b      	bge.n	800a41e <scalbn+0xa6>
 800a406:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a40a:	429e      	cmp	r6, r3
 800a40c:	4622      	mov	r2, r4
 800a40e:	462b      	mov	r3, r5
 800a410:	dce0      	bgt.n	800a3d4 <scalbn+0x5c>
 800a412:	a109      	add	r1, pc, #36	; (adr r1, 800a438 <scalbn+0xc0>)
 800a414:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a418:	f000 f81c 	bl	800a454 <copysign>
 800a41c:	e7c1      	b.n	800a3a2 <scalbn+0x2a>
 800a41e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a422:	3236      	adds	r2, #54	; 0x36
 800a424:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a428:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	2200      	movs	r2, #0
 800a432:	4b07      	ldr	r3, [pc, #28]	; (800a450 <scalbn+0xd8>)
 800a434:	e7d6      	b.n	800a3e4 <scalbn+0x6c>
 800a436:	bf00      	nop
 800a438:	c2f8f359 	.word	0xc2f8f359
 800a43c:	01a56e1f 	.word	0x01a56e1f
 800a440:	8800759c 	.word	0x8800759c
 800a444:	7e37e43c 	.word	0x7e37e43c
 800a448:	43500000 	.word	0x43500000
 800a44c:	ffff3cb0 	.word	0xffff3cb0
 800a450:	3c900000 	.word	0x3c900000

0800a454 <copysign>:
 800a454:	b530      	push	{r4, r5, lr}
 800a456:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a45a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a45e:	ea42 0503 	orr.w	r5, r2, r3
 800a462:	4629      	mov	r1, r5
 800a464:	bd30      	pop	{r4, r5, pc}
	...

0800a468 <_init>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	bf00      	nop
 800a46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46e:	bc08      	pop	{r3}
 800a470:	469e      	mov	lr, r3
 800a472:	4770      	bx	lr

0800a474 <_fini>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	bf00      	nop
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr
