
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006734  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08006920  08006920  00016920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc8  08006bc8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006bc8  08006bc8  00016bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd0  08006bd0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  200001dc  08006db4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08006db4  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009667  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001899  00000000  00000000  0002986c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a8  00000000  00000000  0002b108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0002b8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c21d  00000000  00000000  0002bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000716b  00000000  00000000  000481bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009be0f  00000000  00000000  0004f328  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  000eb1b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08006904 	.word	0x08006904

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08006904 	.word	0x08006904

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	d1ed      	bne.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_fmul>:
 8000e1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e24:	bf1e      	ittt	ne
 8000e26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2a:	ea92 0f0c 	teqne	r2, ip
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d06f      	beq.n	8000f14 <__aeabi_fmul+0xf8>
 8000e34:	441a      	add	r2, r3
 8000e36:	ea80 0c01 	eor.w	ip, r0, r1
 8000e3a:	0240      	lsls	r0, r0, #9
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e42:	d01e      	beq.n	8000e82 <__aeabi_fmul+0x66>
 8000e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e50:	fba0 3101 	umull	r3, r1, r0, r1
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e5c:	bf3e      	ittt	cc
 8000e5e:	0049      	lslcc	r1, r1, #1
 8000e60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e64:	005b      	lslcc	r3, r3, #1
 8000e66:	ea40 0001 	orr.w	r0, r0, r1
 8000e6a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e6e:	2afd      	cmp	r2, #253	; 0xfd
 8000e70:	d81d      	bhi.n	8000eae <__aeabi_fmul+0x92>
 8000e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7a:	bf08      	it	eq
 8000e7c:	f020 0001 	biceq.w	r0, r0, #1
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e8a:	bf08      	it	eq
 8000e8c:	0249      	lsleq	r1, r1, #9
 8000e8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e96:	3a7f      	subs	r2, #127	; 0x7f
 8000e98:	bfc2      	ittt	gt
 8000e9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ea2:	4770      	bxgt	lr
 8000ea4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	3a01      	subs	r2, #1
 8000eae:	dc5d      	bgt.n	8000f6c <__aeabi_fmul+0x150>
 8000eb0:	f112 0f19 	cmn.w	r2, #25
 8000eb4:	bfdc      	itt	le
 8000eb6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eba:	4770      	bxle	lr
 8000ebc:	f1c2 0200 	rsb	r2, r2, #0
 8000ec0:	0041      	lsls	r1, r0, #1
 8000ec2:	fa21 f102 	lsr.w	r1, r1, r2
 8000ec6:	f1c2 0220 	rsb	r2, r2, #32
 8000eca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ece:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ed2:	f140 0000 	adc.w	r0, r0, #0
 8000ed6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000eda:	bf08      	it	eq
 8000edc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee0:	4770      	bx	lr
 8000ee2:	f092 0f00 	teq	r2, #0
 8000ee6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0040      	lsleq	r0, r0, #1
 8000eee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ef2:	3a01      	subeq	r2, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xce>
 8000ef6:	ea40 000c 	orr.w	r0, r0, ip
 8000efa:	f093 0f00 	teq	r3, #0
 8000efe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f02:	bf02      	ittt	eq
 8000f04:	0049      	lsleq	r1, r1, #1
 8000f06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f0a:	3b01      	subeq	r3, #1
 8000f0c:	d0f9      	beq.n	8000f02 <__aeabi_fmul+0xe6>
 8000f0e:	ea41 010c 	orr.w	r1, r1, ip
 8000f12:	e78f      	b.n	8000e34 <__aeabi_fmul+0x18>
 8000f14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f18:	ea92 0f0c 	teq	r2, ip
 8000f1c:	bf18      	it	ne
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d00a      	beq.n	8000f3a <__aeabi_fmul+0x11e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1d8      	bne.n	8000ee2 <__aeabi_fmul+0xc6>
 8000f30:	ea80 0001 	eor.w	r0, r0, r1
 8000f34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f38:	4770      	bx	lr
 8000f3a:	f090 0f00 	teq	r0, #0
 8000f3e:	bf17      	itett	ne
 8000f40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f44:	4608      	moveq	r0, r1
 8000f46:	f091 0f00 	teqne	r1, #0
 8000f4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f4e:	d014      	beq.n	8000f7a <__aeabi_fmul+0x15e>
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d101      	bne.n	8000f5a <__aeabi_fmul+0x13e>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	d10f      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f5a:	ea93 0f0c 	teq	r3, ip
 8000f5e:	d103      	bne.n	8000f68 <__aeabi_fmul+0x14c>
 8000f60:	024b      	lsls	r3, r1, #9
 8000f62:	bf18      	it	ne
 8000f64:	4608      	movne	r0, r1
 8000f66:	d108      	bne.n	8000f7a <__aeabi_fmul+0x15e>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_fdiv>:
 8000f84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f8c:	bf1e      	ittt	ne
 8000f8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f92:	ea92 0f0c 	teqne	r2, ip
 8000f96:	ea93 0f0c 	teqne	r3, ip
 8000f9a:	d069      	beq.n	8001070 <__aeabi_fdiv+0xec>
 8000f9c:	eba2 0203 	sub.w	r2, r2, r3
 8000fa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fa4:	0249      	lsls	r1, r1, #9
 8000fa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000faa:	d037      	beq.n	800101c <__aeabi_fdiv+0x98>
 8000fac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	bf38      	it	cc
 8000fc0:	005b      	lslcc	r3, r3, #1
 8000fc2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fc6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	bf24      	itt	cs
 8000fce:	1a5b      	subcs	r3, r3, r1
 8000fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fd4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd8:	bf24      	itt	cs
 8000fda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fde:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fe2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fe6:	bf24      	itt	cs
 8000fe8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ff0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ff4:	bf24      	itt	cs
 8000ff6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ffa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ffe:	011b      	lsls	r3, r3, #4
 8001000:	bf18      	it	ne
 8001002:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001006:	d1e0      	bne.n	8000fca <__aeabi_fdiv+0x46>
 8001008:	2afd      	cmp	r2, #253	; 0xfd
 800100a:	f63f af50 	bhi.w	8000eae <__aeabi_fmul+0x92>
 800100e:	428b      	cmp	r3, r1
 8001010:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001014:	bf08      	it	eq
 8001016:	f020 0001 	biceq.w	r0, r0, #1
 800101a:	4770      	bx	lr
 800101c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001020:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001024:	327f      	adds	r2, #127	; 0x7f
 8001026:	bfc2      	ittt	gt
 8001028:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800102c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001030:	4770      	bxgt	lr
 8001032:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	3a01      	subs	r2, #1
 800103c:	e737      	b.n	8000eae <__aeabi_fmul+0x92>
 800103e:	f092 0f00 	teq	r2, #0
 8001042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0040      	lsleq	r0, r0, #1
 800104a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800104e:	3a01      	subeq	r2, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xc2>
 8001052:	ea40 000c 	orr.w	r0, r0, ip
 8001056:	f093 0f00 	teq	r3, #0
 800105a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800105e:	bf02      	ittt	eq
 8001060:	0049      	lsleq	r1, r1, #1
 8001062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001066:	3b01      	subeq	r3, #1
 8001068:	d0f9      	beq.n	800105e <__aeabi_fdiv+0xda>
 800106a:	ea41 010c 	orr.w	r1, r1, ip
 800106e:	e795      	b.n	8000f9c <__aeabi_fdiv+0x18>
 8001070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001074:	ea92 0f0c 	teq	r2, ip
 8001078:	d108      	bne.n	800108c <__aeabi_fdiv+0x108>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	f47f af7d 	bne.w	8000f7a <__aeabi_fmul+0x15e>
 8001080:	ea93 0f0c 	teq	r3, ip
 8001084:	f47f af70 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 8001088:	4608      	mov	r0, r1
 800108a:	e776      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800108c:	ea93 0f0c 	teq	r3, ip
 8001090:	d104      	bne.n	800109c <__aeabi_fdiv+0x118>
 8001092:	024b      	lsls	r3, r1, #9
 8001094:	f43f af4c 	beq.w	8000f30 <__aeabi_fmul+0x114>
 8001098:	4608      	mov	r0, r1
 800109a:	e76e      	b.n	8000f7a <__aeabi_fmul+0x15e>
 800109c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010a0:	bf18      	it	ne
 80010a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010a6:	d1ca      	bne.n	800103e <__aeabi_fdiv+0xba>
 80010a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ac:	f47f af5c 	bne.w	8000f68 <__aeabi_fmul+0x14c>
 80010b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010b4:	f47f af3c 	bne.w	8000f30 <__aeabi_fmul+0x114>
 80010b8:	e75f      	b.n	8000f7a <__aeabi_fmul+0x15e>
 80010ba:	bf00      	nop

080010bc <__aeabi_uldivmod>:
 80010bc:	b953      	cbnz	r3, 80010d4 <__aeabi_uldivmod+0x18>
 80010be:	b94a      	cbnz	r2, 80010d4 <__aeabi_uldivmod+0x18>
 80010c0:	2900      	cmp	r1, #0
 80010c2:	bf08      	it	eq
 80010c4:	2800      	cmpeq	r0, #0
 80010c6:	bf1c      	itt	ne
 80010c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80010cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80010d0:	f000 b974 	b.w	80013bc <__aeabi_idiv0>
 80010d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010dc:	f000 f806 	bl	80010ec <__udivmoddi4>
 80010e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010e8:	b004      	add	sp, #16
 80010ea:	4770      	bx	lr

080010ec <__udivmoddi4>:
 80010ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f0:	468c      	mov	ip, r1
 80010f2:	4604      	mov	r4, r0
 80010f4:	9e08      	ldr	r6, [sp, #32]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d14b      	bne.n	8001192 <__udivmoddi4+0xa6>
 80010fa:	428a      	cmp	r2, r1
 80010fc:	4615      	mov	r5, r2
 80010fe:	d967      	bls.n	80011d0 <__udivmoddi4+0xe4>
 8001100:	fab2 f282 	clz	r2, r2
 8001104:	b14a      	cbz	r2, 800111a <__udivmoddi4+0x2e>
 8001106:	f1c2 0720 	rsb	r7, r2, #32
 800110a:	fa01 f302 	lsl.w	r3, r1, r2
 800110e:	fa20 f707 	lsr.w	r7, r0, r7
 8001112:	4095      	lsls	r5, r2
 8001114:	ea47 0c03 	orr.w	ip, r7, r3
 8001118:	4094      	lsls	r4, r2
 800111a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800111e:	fbbc f7fe 	udiv	r7, ip, lr
 8001122:	fa1f f885 	uxth.w	r8, r5
 8001126:	fb0e c317 	mls	r3, lr, r7, ip
 800112a:	fb07 f908 	mul.w	r9, r7, r8
 800112e:	0c21      	lsrs	r1, r4, #16
 8001130:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001134:	4599      	cmp	r9, r3
 8001136:	d909      	bls.n	800114c <__udivmoddi4+0x60>
 8001138:	18eb      	adds	r3, r5, r3
 800113a:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800113e:	f080 811c 	bcs.w	800137a <__udivmoddi4+0x28e>
 8001142:	4599      	cmp	r9, r3
 8001144:	f240 8119 	bls.w	800137a <__udivmoddi4+0x28e>
 8001148:	3f02      	subs	r7, #2
 800114a:	442b      	add	r3, r5
 800114c:	eba3 0309 	sub.w	r3, r3, r9
 8001150:	fbb3 f0fe 	udiv	r0, r3, lr
 8001154:	fb0e 3310 	mls	r3, lr, r0, r3
 8001158:	fb00 f108 	mul.w	r1, r0, r8
 800115c:	b2a4      	uxth	r4, r4
 800115e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001162:	42a1      	cmp	r1, r4
 8001164:	d909      	bls.n	800117a <__udivmoddi4+0x8e>
 8001166:	192c      	adds	r4, r5, r4
 8001168:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800116c:	f080 8107 	bcs.w	800137e <__udivmoddi4+0x292>
 8001170:	42a1      	cmp	r1, r4
 8001172:	f240 8104 	bls.w	800137e <__udivmoddi4+0x292>
 8001176:	3802      	subs	r0, #2
 8001178:	442c      	add	r4, r5
 800117a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800117e:	2700      	movs	r7, #0
 8001180:	1a64      	subs	r4, r4, r1
 8001182:	b11e      	cbz	r6, 800118c <__udivmoddi4+0xa0>
 8001184:	2300      	movs	r3, #0
 8001186:	40d4      	lsrs	r4, r2
 8001188:	e9c6 4300 	strd	r4, r3, [r6]
 800118c:	4639      	mov	r1, r7
 800118e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001192:	428b      	cmp	r3, r1
 8001194:	d909      	bls.n	80011aa <__udivmoddi4+0xbe>
 8001196:	2e00      	cmp	r6, #0
 8001198:	f000 80ec 	beq.w	8001374 <__udivmoddi4+0x288>
 800119c:	2700      	movs	r7, #0
 800119e:	e9c6 0100 	strd	r0, r1, [r6]
 80011a2:	4638      	mov	r0, r7
 80011a4:	4639      	mov	r1, r7
 80011a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011aa:	fab3 f783 	clz	r7, r3
 80011ae:	2f00      	cmp	r7, #0
 80011b0:	d148      	bne.n	8001244 <__udivmoddi4+0x158>
 80011b2:	428b      	cmp	r3, r1
 80011b4:	d302      	bcc.n	80011bc <__udivmoddi4+0xd0>
 80011b6:	4282      	cmp	r2, r0
 80011b8:	f200 80fb 	bhi.w	80013b2 <__udivmoddi4+0x2c6>
 80011bc:	1a84      	subs	r4, r0, r2
 80011be:	eb61 0303 	sbc.w	r3, r1, r3
 80011c2:	2001      	movs	r0, #1
 80011c4:	469c      	mov	ip, r3
 80011c6:	2e00      	cmp	r6, #0
 80011c8:	d0e0      	beq.n	800118c <__udivmoddi4+0xa0>
 80011ca:	e9c6 4c00 	strd	r4, ip, [r6]
 80011ce:	e7dd      	b.n	800118c <__udivmoddi4+0xa0>
 80011d0:	b902      	cbnz	r2, 80011d4 <__udivmoddi4+0xe8>
 80011d2:	deff      	udf	#255	; 0xff
 80011d4:	fab2 f282 	clz	r2, r2
 80011d8:	2a00      	cmp	r2, #0
 80011da:	f040 808f 	bne.w	80012fc <__udivmoddi4+0x210>
 80011de:	2701      	movs	r7, #1
 80011e0:	1b49      	subs	r1, r1, r5
 80011e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80011e6:	fa1f f985 	uxth.w	r9, r5
 80011ea:	fbb1 fef8 	udiv	lr, r1, r8
 80011ee:	fb08 111e 	mls	r1, r8, lr, r1
 80011f2:	fb09 f00e 	mul.w	r0, r9, lr
 80011f6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80011fa:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80011fe:	4298      	cmp	r0, r3
 8001200:	d907      	bls.n	8001212 <__udivmoddi4+0x126>
 8001202:	18eb      	adds	r3, r5, r3
 8001204:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8001208:	d202      	bcs.n	8001210 <__udivmoddi4+0x124>
 800120a:	4298      	cmp	r0, r3
 800120c:	f200 80cd 	bhi.w	80013aa <__udivmoddi4+0x2be>
 8001210:	468e      	mov	lr, r1
 8001212:	1a1b      	subs	r3, r3, r0
 8001214:	fbb3 f0f8 	udiv	r0, r3, r8
 8001218:	fb08 3310 	mls	r3, r8, r0, r3
 800121c:	fb09 f900 	mul.w	r9, r9, r0
 8001220:	b2a4      	uxth	r4, r4
 8001222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001226:	45a1      	cmp	r9, r4
 8001228:	d907      	bls.n	800123a <__udivmoddi4+0x14e>
 800122a:	192c      	adds	r4, r5, r4
 800122c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001230:	d202      	bcs.n	8001238 <__udivmoddi4+0x14c>
 8001232:	45a1      	cmp	r9, r4
 8001234:	f200 80b6 	bhi.w	80013a4 <__udivmoddi4+0x2b8>
 8001238:	4618      	mov	r0, r3
 800123a:	eba4 0409 	sub.w	r4, r4, r9
 800123e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001242:	e79e      	b.n	8001182 <__udivmoddi4+0x96>
 8001244:	f1c7 0520 	rsb	r5, r7, #32
 8001248:	40bb      	lsls	r3, r7
 800124a:	fa22 fc05 	lsr.w	ip, r2, r5
 800124e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001252:	fa21 f405 	lsr.w	r4, r1, r5
 8001256:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800125a:	fbb4 f9fe 	udiv	r9, r4, lr
 800125e:	fa1f f88c 	uxth.w	r8, ip
 8001262:	fb0e 4419 	mls	r4, lr, r9, r4
 8001266:	fa20 f305 	lsr.w	r3, r0, r5
 800126a:	40b9      	lsls	r1, r7
 800126c:	fb09 fa08 	mul.w	sl, r9, r8
 8001270:	4319      	orrs	r1, r3
 8001272:	0c0b      	lsrs	r3, r1, #16
 8001274:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001278:	45a2      	cmp	sl, r4
 800127a:	fa02 f207 	lsl.w	r2, r2, r7
 800127e:	fa00 f307 	lsl.w	r3, r0, r7
 8001282:	d90b      	bls.n	800129c <__udivmoddi4+0x1b0>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800128c:	f080 8088 	bcs.w	80013a0 <__udivmoddi4+0x2b4>
 8001290:	45a2      	cmp	sl, r4
 8001292:	f240 8085 	bls.w	80013a0 <__udivmoddi4+0x2b4>
 8001296:	f1a9 0902 	sub.w	r9, r9, #2
 800129a:	4464      	add	r4, ip
 800129c:	eba4 040a 	sub.w	r4, r4, sl
 80012a0:	fbb4 f0fe 	udiv	r0, r4, lr
 80012a4:	fb0e 4410 	mls	r4, lr, r0, r4
 80012a8:	fb00 fa08 	mul.w	sl, r0, r8
 80012ac:	b289      	uxth	r1, r1
 80012ae:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80012b2:	45a2      	cmp	sl, r4
 80012b4:	d908      	bls.n	80012c8 <__udivmoddi4+0x1dc>
 80012b6:	eb1c 0404 	adds.w	r4, ip, r4
 80012ba:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80012be:	d26b      	bcs.n	8001398 <__udivmoddi4+0x2ac>
 80012c0:	45a2      	cmp	sl, r4
 80012c2:	d969      	bls.n	8001398 <__udivmoddi4+0x2ac>
 80012c4:	3802      	subs	r0, #2
 80012c6:	4464      	add	r4, ip
 80012c8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012cc:	fba0 8902 	umull	r8, r9, r0, r2
 80012d0:	eba4 040a 	sub.w	r4, r4, sl
 80012d4:	454c      	cmp	r4, r9
 80012d6:	4641      	mov	r1, r8
 80012d8:	46ce      	mov	lr, r9
 80012da:	d354      	bcc.n	8001386 <__udivmoddi4+0x29a>
 80012dc:	d051      	beq.n	8001382 <__udivmoddi4+0x296>
 80012de:	2e00      	cmp	r6, #0
 80012e0:	d069      	beq.n	80013b6 <__udivmoddi4+0x2ca>
 80012e2:	1a5a      	subs	r2, r3, r1
 80012e4:	eb64 040e 	sbc.w	r4, r4, lr
 80012e8:	fa04 f505 	lsl.w	r5, r4, r5
 80012ec:	fa22 f307 	lsr.w	r3, r2, r7
 80012f0:	40fc      	lsrs	r4, r7
 80012f2:	431d      	orrs	r5, r3
 80012f4:	e9c6 5400 	strd	r5, r4, [r6]
 80012f8:	2700      	movs	r7, #0
 80012fa:	e747      	b.n	800118c <__udivmoddi4+0xa0>
 80012fc:	4095      	lsls	r5, r2
 80012fe:	f1c2 0320 	rsb	r3, r2, #32
 8001302:	fa21 f003 	lsr.w	r0, r1, r3
 8001306:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800130a:	fbb0 f7f8 	udiv	r7, r0, r8
 800130e:	fa1f f985 	uxth.w	r9, r5
 8001312:	fb08 0017 	mls	r0, r8, r7, r0
 8001316:	fa24 f303 	lsr.w	r3, r4, r3
 800131a:	4091      	lsls	r1, r2
 800131c:	fb07 fc09 	mul.w	ip, r7, r9
 8001320:	430b      	orrs	r3, r1
 8001322:	0c19      	lsrs	r1, r3, #16
 8001324:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001328:	458c      	cmp	ip, r1
 800132a:	fa04 f402 	lsl.w	r4, r4, r2
 800132e:	d907      	bls.n	8001340 <__udivmoddi4+0x254>
 8001330:	1869      	adds	r1, r5, r1
 8001332:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8001336:	d231      	bcs.n	800139c <__udivmoddi4+0x2b0>
 8001338:	458c      	cmp	ip, r1
 800133a:	d92f      	bls.n	800139c <__udivmoddi4+0x2b0>
 800133c:	3f02      	subs	r7, #2
 800133e:	4429      	add	r1, r5
 8001340:	eba1 010c 	sub.w	r1, r1, ip
 8001344:	fbb1 f0f8 	udiv	r0, r1, r8
 8001348:	fb08 1c10 	mls	ip, r8, r0, r1
 800134c:	fb00 fe09 	mul.w	lr, r0, r9
 8001350:	b299      	uxth	r1, r3
 8001352:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001356:	458e      	cmp	lr, r1
 8001358:	d907      	bls.n	800136a <__udivmoddi4+0x27e>
 800135a:	1869      	adds	r1, r5, r1
 800135c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001360:	d218      	bcs.n	8001394 <__udivmoddi4+0x2a8>
 8001362:	458e      	cmp	lr, r1
 8001364:	d916      	bls.n	8001394 <__udivmoddi4+0x2a8>
 8001366:	3802      	subs	r0, #2
 8001368:	4429      	add	r1, r5
 800136a:	eba1 010e 	sub.w	r1, r1, lr
 800136e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001372:	e73a      	b.n	80011ea <__udivmoddi4+0xfe>
 8001374:	4637      	mov	r7, r6
 8001376:	4630      	mov	r0, r6
 8001378:	e708      	b.n	800118c <__udivmoddi4+0xa0>
 800137a:	460f      	mov	r7, r1
 800137c:	e6e6      	b.n	800114c <__udivmoddi4+0x60>
 800137e:	4618      	mov	r0, r3
 8001380:	e6fb      	b.n	800117a <__udivmoddi4+0x8e>
 8001382:	4543      	cmp	r3, r8
 8001384:	d2ab      	bcs.n	80012de <__udivmoddi4+0x1f2>
 8001386:	ebb8 0102 	subs.w	r1, r8, r2
 800138a:	eb69 020c 	sbc.w	r2, r9, ip
 800138e:	3801      	subs	r0, #1
 8001390:	4696      	mov	lr, r2
 8001392:	e7a4      	b.n	80012de <__udivmoddi4+0x1f2>
 8001394:	4618      	mov	r0, r3
 8001396:	e7e8      	b.n	800136a <__udivmoddi4+0x27e>
 8001398:	4608      	mov	r0, r1
 800139a:	e795      	b.n	80012c8 <__udivmoddi4+0x1dc>
 800139c:	4607      	mov	r7, r0
 800139e:	e7cf      	b.n	8001340 <__udivmoddi4+0x254>
 80013a0:	4681      	mov	r9, r0
 80013a2:	e77b      	b.n	800129c <__udivmoddi4+0x1b0>
 80013a4:	3802      	subs	r0, #2
 80013a6:	442c      	add	r4, r5
 80013a8:	e747      	b.n	800123a <__udivmoddi4+0x14e>
 80013aa:	f1ae 0e02 	sub.w	lr, lr, #2
 80013ae:	442b      	add	r3, r5
 80013b0:	e72f      	b.n	8001212 <__udivmoddi4+0x126>
 80013b2:	4638      	mov	r0, r7
 80013b4:	e707      	b.n	80011c6 <__udivmoddi4+0xda>
 80013b6:	4637      	mov	r7, r6
 80013b8:	e6e8      	b.n	800118c <__udivmoddi4+0xa0>
 80013ba:	bf00      	nop

080013bc <__aeabi_idiv0>:
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <BMP180_Init+0x18>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	2000021c 	.word	0x2000021c

080013dc <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <BMP180_SetOversampling+0x1c>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	7013      	strb	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2000021a 	.word	0x2000021a

080013fc <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	uint8_t result[2];
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1], (uint8_t *)result);
 8001402:	22aa      	movs	r2, #170	; 0xaa
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f000 f8e9 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC1 =(result[0] << 8) | result[1];
 800140e:	793b      	ldrb	r3, [r7, #4]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	797b      	ldrb	r3, [r7, #5]
 8001416:	b21b      	sxth	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b4f      	ldr	r3, [pc, #316]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 800141e:	801a      	strh	r2, [r3, #0]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2], (uint8_t *)result);
 8001420:	22ac      	movs	r2, #172	; 0xac
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f000 f8da 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC2 =(result[0] << 8) | result[1];
 800142c:	793b      	ldrb	r3, [r7, #4]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	b21b      	sxth	r3, r3
 8001436:	4313      	orrs	r3, r2
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b48      	ldr	r3, [pc, #288]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 800143c:	805a      	strh	r2, [r3, #2]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3], (uint8_t *)result);
 800143e:	22ae      	movs	r2, #174	; 0xae
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4610      	mov	r0, r2
 8001446:	f000 f8cb 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC3 = (result[0] << 8) | result[1];
 800144a:	793b      	ldrb	r3, [r7, #4]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21a      	sxth	r2, r3
 8001458:	4b40      	ldr	r3, [pc, #256]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 800145a:	809a      	strh	r2, [r3, #4]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4], (uint8_t *)result);
 800145c:	22b0      	movs	r2, #176	; 0xb0
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f000 f8bc 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC4 = (result[0] << 8) | result[1];
 8001468:	793b      	ldrb	r3, [r7, #4]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21a      	sxth	r2, r3
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	b21b      	sxth	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b21b      	sxth	r3, r3
 8001476:	b29a      	uxth	r2, r3
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 800147a:	80da      	strh	r2, [r3, #6]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5], (uint8_t *)result);
 800147c:	22b2      	movs	r2, #178	; 0xb2
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f000 f8ac 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC5 = (result[0] << 8) | result[1];
 8001488:	793b      	ldrb	r3, [r7, #4]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	797b      	ldrb	r3, [r7, #5]
 8001490:	b21b      	sxth	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b21b      	sxth	r3, r3
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 800149a:	811a      	strh	r2, [r3, #8]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6], (uint8_t *)result);
 800149c:	22b4      	movs	r2, #180	; 0xb4
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4610      	mov	r0, r2
 80014a4:	f000 f89c 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC6 = (result[0] << 8) | result[1];
 80014a8:	793b      	ldrb	r3, [r7, #4]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	797b      	ldrb	r3, [r7, #5]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 80014ba:	815a      	strh	r2, [r3, #10]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1], (uint8_t *)result);
 80014bc:	22b6      	movs	r2, #182	; 0xb6
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f000 f88c 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_B1 = (result[0] << 8) | result[1];
 80014c8:	793b      	ldrb	r3, [r7, #4]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 80014d8:	819a      	strh	r2, [r3, #12]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2], (uint8_t *)result);
 80014da:	22b8      	movs	r2, #184	; 0xb8
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4610      	mov	r0, r2
 80014e2:	f000 f87d 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_B2 = (result[0] << 8) | result[1];
 80014e6:	793b      	ldrb	r3, [r7, #4]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 80014f6:	81da      	strh	r2, [r3, #14]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB], (uint8_t *)result);
 80014f8:	22ba      	movs	r2, #186	; 0xba
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f000 f86e 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MB = (result[0] << 8) | result[1];
 8001504:	793b      	ldrb	r3, [r7, #4]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	797b      	ldrb	r3, [r7, #5]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21a      	sxth	r2, r3
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 8001514:	821a      	strh	r2, [r3, #16]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC], (uint8_t *)result);
 8001516:	22bc      	movs	r2, #188	; 0xbc
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4610      	mov	r0, r2
 800151e:	f000 f85f 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MC = (result[0] << 8) | result[1];
 8001522:	793b      	ldrb	r3, [r7, #4]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21a      	sxth	r2, r3
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 8001532:	825a      	strh	r2, [r3, #18]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD], (uint8_t *)result);
 8001534:	22be      	movs	r2, #190	; 0xbe
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f000 f850 	bl	80015e0 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MD = (result[0] << 8) | result[1];
 8001540:	793b      	ldrb	r3, [r7, #4]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	797b      	ldrb	r3, [r7, #5]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21a      	sxth	r2, r3
 800154e:	4b03      	ldr	r3, [pc, #12]	; (800155c <BMP180_UpdateCalibrationData+0x160>)
 8001550:	829a      	strh	r2, [r3, #20]
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000204 	.word	0x20000204

08001560 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	733b      	strb	r3, [r7, #12]
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <BMP180_WriteReg+0x38>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	f107 020c 	add.w	r2, r7, #12
 8001580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2302      	movs	r3, #2
 8001588:	21ee      	movs	r1, #238	; 0xee
 800158a:	f001 fa47 	bl	8002a1c <HAL_I2C_Master_Transmit>
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000021c 	.word	0x2000021c

0800159c <BMP180_ReadReg8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg8(uint8_t reg) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <BMP180_ReadReg8+0x40>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	1dfa      	adds	r2, r7, #7
 80015ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2301      	movs	r3, #1
 80015b4:	21ee      	movs	r1, #238	; 0xee
 80015b6:	f001 fa31 	bl	8002a1c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <BMP180_ReadReg8+0x40>)
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	f107 020f 	add.w	r2, r7, #15
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2301      	movs	r3, #1
 80015ca:	21ee      	movs	r1, #238	; 0xee
 80015cc:	f001 fb24 	bl	8002c18 <HAL_I2C_Master_Receive>
	return result;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000021c 	.word	0x2000021c

080015e0 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
void BMP180_ReadReg(uint8_t reg, uint8_t *result) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <BMP180_ReadReg+0x3c>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	1dfa      	adds	r2, r7, #7
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2301      	movs	r3, #1
 80015fa:	21ee      	movs	r1, #238	; 0xee
 80015fc:	f001 fa0e 	bl	8002a1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, (uint8_t*)result, 2, BMP180_I2C_TIMEOUT);
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <BMP180_ReadReg+0x3c>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2302      	movs	r3, #2
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	21ee      	movs	r1, #238	; 0xee
 8001610:	f001 fb02 	bl	8002c18 <HAL_I2C_Master_Receive>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000021c 	.word	0x2000021c

08001620 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8001626:	232e      	movs	r3, #46	; 0x2e
 8001628:	4619      	mov	r1, r3
 800162a:	20f4      	movs	r0, #244	; 0xf4
 800162c:	f7ff ff98 	bl	8001560 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001630:	2305      	movs	r3, #5
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fe6a 	bl	800230c <HAL_Delay>
	uint8_t result[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result);
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	20f6      	movs	r0, #246	; 0xf6
 800163e:	f7ff ffcf 	bl	80015e0 <BMP180_ReadReg>
	int32_t ut = (result[0] << 8) | result[1];
 8001642:	793b      	ldrb	r3, [r7, #4]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	797a      	ldrb	r2, [r7, #5]
 8001648:	4313      	orrs	r3, r2
 800164a:	617b      	str	r3, [r7, #20]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <BMP180_GetRawTemperature+0x84>)
 800164e:	895b      	ldrh	r3, [r3, #10]
 8001650:	461a      	mov	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	4a13      	ldr	r2, [pc, #76]	; (80016a4 <BMP180_GetRawTemperature+0x84>)
 8001658:	8912      	ldrh	r2, [r2, #8]
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	da02      	bge.n	8001668 <BMP180_GetRawTemperature+0x48>
 8001662:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001666:	337f      	adds	r3, #127	; 0x7f
 8001668:	13db      	asrs	r3, r3, #15
 800166a:	613b      	str	r3, [r7, #16]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <BMP180_GetRawTemperature+0x84>)
 800166e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001672:	02da      	lsls	r2, r3, #11
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <BMP180_GetRawTemperature+0x84>)
 8001676:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800167a:	4619      	mov	r1, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	440b      	add	r3, r1
 8001680:	fb92 f3f3 	sdiv	r3, r2, r3
 8001684:	60fb      	str	r3, [r7, #12]
	int32_t b5 = x1 + x2;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
	return (b5 + 8) / (1 << 4);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	3308      	adds	r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	da00      	bge.n	8001698 <BMP180_GetRawTemperature+0x78>
 8001696:	330f      	adds	r3, #15
 8001698:	111b      	asrs	r3, r3, #4
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000204 	.word	0x20000204

080016a8 <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 80016ae:	f7ff ffb7 	bl	8001620 <BMP180_GetRawTemperature>
 80016b2:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7fe ff11 	bl	80004dc <__aeabi_i2d>
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <BMP180_GetTemperature+0x34>)
 80016c0:	f7ff f8a0 	bl	8000804 <__aeabi_ddiv>
 80016c4:	4603      	mov	r3, r0
 80016c6:	460c      	mov	r4, r1
 80016c8:	4618      	mov	r0, r3
 80016ca:	4621      	mov	r1, r4
 80016cc:	f7ff fa48 	bl	8000b60 <__aeabi_d2f>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	40240000 	.word	0x40240000

080016e0 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80016e6:	232e      	movs	r3, #46	; 0x2e
 80016e8:	4619      	mov	r1, r3
 80016ea:	20f4      	movs	r0, #244	; 0xf4
 80016ec:	f7ff ff38 	bl	8001560 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 80016f0:	2305      	movs	r3, #5
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fe0a 	bl	800230c <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 80016f8:	f000 f904 	bl	8001904 <BMP180_GetUT>
 80016fc:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 80016fe:	4b7c      	ldr	r3, [pc, #496]	; (80018f0 <BMP180_GetPressure+0x210>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	4b7b      	ldr	r3, [pc, #492]	; (80018f4 <BMP180_GetPressure+0x214>)
 8001706:	5c9b      	ldrb	r3, [r3, r2]
 8001708:	4619      	mov	r1, r3
 800170a:	20f4      	movs	r0, #244	; 0xf4
 800170c:	f7ff ff28 	bl	8001560 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001710:	4b77      	ldr	r3, [pc, #476]	; (80018f0 <BMP180_GetPressure+0x210>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <BMP180_GetPressure+0x218>)
 8001718:	5c9b      	ldrb	r3, [r3, r2]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fdf6 	bl	800230c <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001720:	f000 f900 	bl	8001924 <BMP180_GetUP>
 8001724:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8001726:	4b75      	ldr	r3, [pc, #468]	; (80018fc <BMP180_GetPressure+0x21c>)
 8001728:	895b      	ldrh	r3, [r3, #10]
 800172a:	461a      	mov	r2, r3
 800172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172e:	1a9b      	subs	r3, r3, r2
 8001730:	4a72      	ldr	r2, [pc, #456]	; (80018fc <BMP180_GetPressure+0x21c>)
 8001732:	8912      	ldrh	r2, [r2, #8]
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	da02      	bge.n	8001742 <BMP180_GetPressure+0x62>
 800173c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001740:	337f      	adds	r3, #127	; 0x7f
 8001742:	13db      	asrs	r3, r3, #15
 8001744:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8001746:	4b6d      	ldr	r3, [pc, #436]	; (80018fc <BMP180_GetPressure+0x21c>)
 8001748:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800174c:	02da      	lsls	r2, r3, #11
 800174e:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <BMP180_GetPressure+0x21c>)
 8001750:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001754:	4619      	mov	r1, r3
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	440b      	add	r3, r1
 800175a:	fb92 f3f3 	sdiv	r3, r2, r3
 800175e:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8001760:	6a3a      	ldr	r2, [r7, #32]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800176e:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001770:	4b62      	ldr	r3, [pc, #392]	; (80018fc <BMP180_GetPressure+0x21c>)
 8001772:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001776:	4619      	mov	r1, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	fb02 f303 	mul.w	r3, r2, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	da01      	bge.n	8001788 <BMP180_GetPressure+0xa8>
 8001784:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001788:	131b      	asrs	r3, r3, #12
 800178a:	fb03 f301 	mul.w	r3, r3, r1
 800178e:	2b00      	cmp	r3, #0
 8001790:	da01      	bge.n	8001796 <BMP180_GetPressure+0xb6>
 8001792:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001796:	12db      	asrs	r3, r3, #11
 8001798:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 800179a:	4b58      	ldr	r3, [pc, #352]	; (80018fc <BMP180_GetPressure+0x21c>)
 800179c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017a0:	461a      	mov	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	fb03 f302 	mul.w	r3, r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da01      	bge.n	80017b0 <BMP180_GetPressure+0xd0>
 80017ac:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80017b0:	12db      	asrs	r3, r3, #11
 80017b2:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80017b4:	6a3a      	ldr	r2, [r7, #32]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80017bc:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <BMP180_GetPressure+0x21c>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	009a      	lsls	r2, r3, #2
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a49      	ldr	r2, [pc, #292]	; (80018f0 <BMP180_GetPressure+0x210>)
 80017ca:	7812      	ldrb	r2, [r2, #0]
 80017cc:	4093      	lsls	r3, r2
 80017ce:	3302      	adds	r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da00      	bge.n	80017d6 <BMP180_GetPressure+0xf6>
 80017d4:	3303      	adds	r3, #3
 80017d6:	109b      	asrs	r3, r3, #2
 80017d8:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 80017da:	4b48      	ldr	r3, [pc, #288]	; (80018fc <BMP180_GetPressure+0x21c>)
 80017dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017e0:	461a      	mov	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	fb03 f302 	mul.w	r3, r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da02      	bge.n	80017f2 <BMP180_GetPressure+0x112>
 80017ec:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80017f0:	331f      	adds	r3, #31
 80017f2:	135b      	asrs	r3, r3, #13
 80017f4:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <BMP180_GetPressure+0x21c>)
 80017f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017fc:	4619      	mov	r1, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	da01      	bge.n	800180e <BMP180_GetPressure+0x12e>
 800180a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800180e:	131b      	asrs	r3, r3, #12
 8001810:	fb03 f301 	mul.w	r3, r3, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	da02      	bge.n	800181e <BMP180_GetPressure+0x13e>
 8001818:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800181c:	33ff      	adds	r3, #255	; 0xff
 800181e:	141b      	asrs	r3, r3, #16
 8001820:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001822:	6a3a      	ldr	r2, [r7, #32]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	4413      	add	r3, r2
 8001828:	3302      	adds	r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	da00      	bge.n	8001830 <BMP180_GetPressure+0x150>
 800182e:	3303      	adds	r3, #3
 8001830:	109b      	asrs	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001834:	4b31      	ldr	r3, [pc, #196]	; (80018fc <BMP180_GetPressure+0x21c>)
 8001836:	88db      	ldrh	r3, [r3, #6]
 8001838:	461a      	mov	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001840:	fb03 f302 	mul.w	r3, r3, r2
 8001844:	0bdb      	lsrs	r3, r3, #15
 8001846:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 8001848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <BMP180_GetPressure+0x210>)
 8001850:	7812      	ldrb	r2, [r2, #0]
 8001852:	4611      	mov	r1, r2
 8001854:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001858:	410a      	asrs	r2, r1
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db06      	blt.n	8001874 <BMP180_GetPressure+0x194>
		p = (b7 * 2) / b4;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	005a      	lsls	r2, r3, #1
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001872:	e005      	b.n	8001880 <BMP180_GetPressure+0x1a0>
	else
		p = (b7 / b4) * 2;
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	fbb2 f3f3 	udiv	r3, r2, r3
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8001880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001882:	2b00      	cmp	r3, #0
 8001884:	da00      	bge.n	8001888 <BMP180_GetPressure+0x1a8>
 8001886:	33ff      	adds	r3, #255	; 0xff
 8001888:	121b      	asrs	r3, r3, #8
 800188a:	461a      	mov	r2, r3
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	2b00      	cmp	r3, #0
 8001890:	da00      	bge.n	8001894 <BMP180_GetPressure+0x1b4>
 8001892:	33ff      	adds	r3, #255	; 0xff
 8001894:	121b      	asrs	r3, r3, #8
 8001896:	fb03 f302 	mul.w	r3, r3, r2
 800189a:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f640 32de 	movw	r2, #3038	; 0xbde
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da02      	bge.n	80018b0 <BMP180_GetPressure+0x1d0>
 80018aa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018ae:	33ff      	adds	r3, #255	; 0xff
 80018b0:	141b      	asrs	r3, r3, #16
 80018b2:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <BMP180_GetPressure+0x220>)
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	da02      	bge.n	80018c6 <BMP180_GetPressure+0x1e6>
 80018c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80018c4:	33ff      	adds	r3, #255	; 0xff
 80018c6:	141b      	asrs	r3, r3, #16
 80018c8:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80018ca:	6a3a      	ldr	r2, [r7, #32]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	4413      	add	r3, r2
 80018d0:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da00      	bge.n	80018da <BMP180_GetPressure+0x1fa>
 80018d8:	330f      	adds	r3, #15
 80018da:	111b      	asrs	r3, r3, #4
 80018dc:	461a      	mov	r2, r3
 80018de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e0:	4413      	add	r3, r2
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 80018e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3730      	adds	r7, #48	; 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000021a 	.word	0x2000021a
 80018f4:	08006940 	.word	0x08006940
 80018f8:	08006944 	.word	0x08006944
 80018fc:	20000204 	.word	0x20000204
 8001900:	ffffe343 	.word	0xffffe343

08001904 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
	uint8_t result[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result);
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	4619      	mov	r1, r3
 800190e:	20f6      	movs	r0, #246	; 0xf6
 8001910:	f7ff fe66 	bl	80015e0 <BMP180_ReadReg>
	return (result[0] << 8) | result[1];
 8001914:	793b      	ldrb	r3, [r7, #4]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	797a      	ldrb	r2, [r7, #5]
 800191a:	4313      	orrs	r3, r2
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
	uint8_t result1[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result1);
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	4619      	mov	r1, r3
 800192e:	20f6      	movs	r0, #246	; 0xf6
 8001930:	f7ff fe56 	bl	80015e0 <BMP180_ReadReg>
	return ((result1[0] << 16) | (result1[1] << 8) | BMP180_ReadReg8(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001934:	793b      	ldrb	r3, [r7, #4]
 8001936:	041a      	lsls	r2, r3, #16
 8001938:	797b      	ldrb	r3, [r7, #5]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	ea42 0403 	orr.w	r4, r2, r3
 8001940:	20f8      	movs	r0, #248	; 0xf8
 8001942:	f7ff fe2b 	bl	800159c <BMP180_ReadReg8>
 8001946:	4603      	mov	r3, r0
 8001948:	ea44 0203 	orr.w	r2, r4, r3
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <BMP180_GetUP+0x3c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	f1c3 0308 	rsb	r3, r3, #8
 8001954:	fa42 f303 	asr.w	r3, r2, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	2000021a 	.word	0x2000021a

08001964 <MAX44009_Begin>:
#include "MAX44009.h"

I2C_HandleTypeDef *MAX44009_hi2c;

HAL_StatusTypeDef MAX44009_Begin(I2C_HandleTypeDef *hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af04      	add	r7, sp, #16
 800196a:	6078      	str	r0, [r7, #4]
	MAX44009_hi2c = hi2c;
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <MAX44009_Begin+0x34>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
	return 	HAL_I2C_Mem_Write(MAX44009_hi2c, MAX44009_ADDR, 0x02, 1, 0x00, 1, 100);
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MAX44009_Begin+0x34>)
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	2301      	movs	r3, #1
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	2300      	movs	r3, #0
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	2202      	movs	r2, #2
 8001986:	2194      	movs	r1, #148	; 0x94
 8001988:	f001 fb74 	bl	8003074 <HAL_I2C_Mem_Write>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000220 	.word	0x20000220
 800199c:	00000000 	.word	0x00000000

080019a0 <MAX44009_Get_Lux>:


float MAX44009_Get_Lux(void)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af04      	add	r7, sp, #16
	uint8_t data[2];

	if(HAL_I2C_Mem_Read(MAX44009_hi2c, MAX44009_ADDR, 0x03, 1, data, 1, 100) == HAL_OK){
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <MAX44009_Get_Lux+0xa8>)
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	2364      	movs	r3, #100	; 0x64
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	2301      	movs	r3, #1
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	2301      	movs	r3, #1
 80019b8:	2203      	movs	r2, #3
 80019ba:	2194      	movs	r1, #148	; 0x94
 80019bc:	f001 fc54 	bl	8003268 <HAL_I2C_Mem_Read>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d134      	bne.n	8001a30 <MAX44009_Get_Lux+0x90>
		if(HAL_I2C_Mem_Read(MAX44009_hi2c, MAX44009_ADDR, 0x04, 1, data+1, 1, 100) == HAL_OK){
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <MAX44009_Get_Lux+0xa8>)
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	3301      	adds	r3, #1
 80019ce:	2264      	movs	r2, #100	; 0x64
 80019d0:	9202      	str	r2, [sp, #8]
 80019d2:	2201      	movs	r2, #1
 80019d4:	9201      	str	r2, [sp, #4]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2301      	movs	r3, #1
 80019da:	2204      	movs	r2, #4
 80019dc:	2194      	movs	r1, #148	; 0x94
 80019de:	f001 fc43 	bl	8003268 <HAL_I2C_Mem_Read>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d123      	bne.n	8001a30 <MAX44009_Get_Lux+0x90>
				// Convert the data to lux
				uint8_t exponent = data[0]>>4;
 80019e8:	793b      	ldrb	r3, [r7, #4]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	73fb      	strb	r3, [r7, #15]
				uint32_t mantisa = ((data[0] & 0x0F)<<4) + (data[1] & 0x0F);
 80019ee:	793b      	ldrb	r3, [r7, #4]
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	797b      	ldrb	r3, [r7, #5]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	4413      	add	r3, r2
 80019fc:	60bb      	str	r3, [r7, #8]
				mantisa <<= exponent;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	60bb      	str	r3, [r7, #8]
				return ((float)(mantisa) * 0.045);
 8001a08:	68b8      	ldr	r0, [r7, #8]
 8001a0a:	f7ff f9af 	bl	8000d6c <__aeabi_ui2f>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd75 	bl	8000500 <__aeabi_f2d>
 8001a16:	a30a      	add	r3, pc, #40	; (adr r3, 8001a40 <MAX44009_Get_Lux+0xa0>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fdc8 	bl	80005b0 <__aeabi_dmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	460c      	mov	r4, r1
 8001a24:	4618      	mov	r0, r3
 8001a26:	4621      	mov	r1, r4
 8001a28:	f7ff f89a 	bl	8000b60 <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	e001      	b.n	8001a34 <MAX44009_Get_Lux+0x94>
			}
	}
	return 0;
 8001a30:	f04f 0300 	mov.w	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	f3af 8000 	nop.w
 8001a40:	70a3d70a 	.word	0x70a3d70a
 8001a44:	3fa70a3d 	.word	0x3fa70a3d
 8001a48:	20000220 	.word	0x20000220

08001a4c <QMC5883L_Write_Register>:
#endif

I2C_HandleTypeDef *QMC5883L_i2c;

void QMC5883L_Write_Register(uint16_t reg, int value)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(QMC5883L_i2c, QMC5883L_ADDR, reg, 1, (uint8_t *)value, 1, 100);
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <QMC5883L_Write_Register+0x30>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	88f9      	ldrh	r1, [r7, #6]
 8001a60:	2264      	movs	r2, #100	; 0x64
 8001a62:	9202      	str	r2, [sp, #8]
 8001a64:	2201      	movs	r2, #1
 8001a66:	9201      	str	r2, [sp, #4]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	211a      	movs	r1, #26
 8001a70:	f001 fb00 	bl	8003074 <HAL_I2C_Mem_Write>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000230 	.word	0x20000230

08001a80 <QMC5883L_Read_Register>:

void QMC5883L_Read_Register(uint8_t *data, uint16_t reg, uint16_t count)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af04      	add	r7, sp, #16
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Read(QMC5883L_i2c, QMC5883L_ADDR, reg, 1, data, count, 100);
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <QMC5883L_Read_Register+0x34>)
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	887a      	ldrh	r2, [r7, #2]
 8001a96:	2364      	movs	r3, #100	; 0x64
 8001a98:	9302      	str	r3, [sp, #8]
 8001a9a:	883b      	ldrh	r3, [r7, #0]
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	211a      	movs	r1, #26
 8001aa6:	f001 fbdf 	bl	8003268 <HAL_I2C_Mem_Read>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000230 	.word	0x20000230

08001ab8 <QMC5883L_Reconfig>:

void QMC5883L_Reconfig()
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  QMC5883L_Write_Register(QMC5883L_CONFIG,oversampling|range|rate|mode);
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <QMC5883L_Reconfig+0x2c>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <QMC5883L_Reconfig+0x30>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <QMC5883L_Reconfig+0x34>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <QMC5883L_Reconfig+0x38>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	2009      	movs	r0, #9
 8001adc:	f7ff ffb6 	bl	8001a4c <QMC5883L_Write_Register>
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000022d 	.word	0x2000022d
 8001ae8:	20000234 	.word	0x20000234
 8001aec:	20000226 	.word	0x20000226
 8001af0:	2000022c 	.word	0x2000022c

08001af4 <QMC5883L_Reset>:

void QMC5883L_Reset()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  QMC5883L_Write_Register(QMC5883L_RESET, 0x01);
 8001af8:	2101      	movs	r1, #1
 8001afa:	200b      	movs	r0, #11
 8001afc:	f7ff ffa6 	bl	8001a4c <QMC5883L_Write_Register>
  QMC5883L_Reconfig();
 8001b00:	f7ff ffda 	bl	8001ab8 <QMC5883L_Reconfig>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <QMC5883L_Set_Sampling_Rate>:
  }
  QMC5883L_Reconfig();
}

void QMC5883L_Set_Sampling_Rate( int x )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  switch(x) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b32      	cmp	r3, #50	; 0x32
 8001b14:	d00d      	beq.n	8001b32 <QMC5883L_Set_Sampling_Rate+0x2a>
 8001b16:	2b32      	cmp	r3, #50	; 0x32
 8001b18:	dc02      	bgt.n	8001b20 <QMC5883L_Set_Sampling_Rate+0x18>
 8001b1a:	2b0a      	cmp	r3, #10
 8001b1c:	d005      	beq.n	8001b2a <QMC5883L_Set_Sampling_Rate+0x22>
 8001b1e:	e014      	b.n	8001b4a <QMC5883L_Set_Sampling_Rate+0x42>
 8001b20:	2b64      	cmp	r3, #100	; 0x64
 8001b22:	d00a      	beq.n	8001b3a <QMC5883L_Set_Sampling_Rate+0x32>
 8001b24:	2bc8      	cmp	r3, #200	; 0xc8
 8001b26:	d00c      	beq.n	8001b42 <QMC5883L_Set_Sampling_Rate+0x3a>
 8001b28:	e00f      	b.n	8001b4a <QMC5883L_Set_Sampling_Rate+0x42>
    case 10:
      rate = QMC5883L_CONFIG_10HZ;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <QMC5883L_Set_Sampling_Rate+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
      break;
 8001b30:	e00b      	b.n	8001b4a <QMC5883L_Set_Sampling_Rate+0x42>
    case 50:
      rate = QMC5883L_CONFIG_50HZ;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <QMC5883L_Set_Sampling_Rate+0x50>)
 8001b34:	2204      	movs	r2, #4
 8001b36:	701a      	strb	r2, [r3, #0]
      break;
 8001b38:	e007      	b.n	8001b4a <QMC5883L_Set_Sampling_Rate+0x42>
    case 100:
      rate = QMC5883L_CONFIG_100HZ;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <QMC5883L_Set_Sampling_Rate+0x50>)
 8001b3c:	2208      	movs	r2, #8
 8001b3e:	701a      	strb	r2, [r3, #0]
      break;
 8001b40:	e003      	b.n	8001b4a <QMC5883L_Set_Sampling_Rate+0x42>
    case 200:
      rate = QMC5883L_CONFIG_200HZ;
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <QMC5883L_Set_Sampling_Rate+0x50>)
 8001b44:	220c      	movs	r2, #12
 8001b46:	701a      	strb	r2, [r3, #0]
      break;
 8001b48:	bf00      	nop
  }
  QMC5883L_Reconfig();
 8001b4a:	f7ff ffb5 	bl	8001ab8 <QMC5883L_Reconfig>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000226 	.word	0x20000226

08001b5c <QMC5883L_Init>:

void QMC5883L_Init(I2C_HandleTypeDef *i2c) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	QMC5883L_i2c = i2c;
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <QMC5883L_Init+0x38>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  /* This assumes the wire library has been initialized. */
  addr = QMC5883L_ADDR;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <QMC5883L_Init+0x3c>)
 8001b6c:	221a      	movs	r2, #26
 8001b6e:	701a      	strb	r2, [r3, #0]
  oversampling = QMC5883L_CONFIG_OS512;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <QMC5883L_Init+0x40>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
  range = QMC5883L_CONFIG_2GAUSS;
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <QMC5883L_Init+0x44>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
  rate = QMC5883L_CONFIG_50HZ;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <QMC5883L_Init+0x48>)
 8001b7e:	2204      	movs	r2, #4
 8001b80:	701a      	strb	r2, [r3, #0]
  mode = QMC5883L_CONFIG_CONT;
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <QMC5883L_Init+0x4c>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
  QMC5883L_Reset();
 8001b88:	f7ff ffb4 	bl	8001af4 <QMC5883L_Reset>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000230 	.word	0x20000230
 8001b98:	2000022e 	.word	0x2000022e
 8001b9c:	2000022d 	.word	0x2000022d
 8001ba0:	20000234 	.word	0x20000234
 8001ba4:	20000226 	.word	0x20000226
 8001ba8:	2000022c 	.word	0x2000022c

08001bac <QMC5883L_Ready>:

int QMC5883L_Ready()
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
	uint8_t data;
	QMC5883L_Read_Register(&data,QMC5883L_STATUS,1);
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2106      	movs	r1, #6
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff61 	bl	8001a80 <QMC5883L_Read_Register>
  if(!data) return 0;
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <QMC5883L_Ready+0x1c>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	e002      	b.n	8001bce <QMC5883L_Ready+0x22>
  return data & QMC5883L_STATUS_DRDY;
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 0301 	and.w	r3, r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <QMC5883L_ReadRaw>:

int QMC5883L_ReadRaw( int16_t *x, int16_t *y, int16_t *z, int16_t *t )
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	603b      	str	r3, [r7, #0]
  while(!QMC5883L_Ready()) {}
 8001be4:	bf00      	nop
 8001be6:	f7ff ffe1 	bl	8001bac <QMC5883L_Ready>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0fa      	beq.n	8001be6 <QMC5883L_ReadRaw+0x10>

  uint8_t data[6];

  QMC5883L_Read_Register(&data,QMC5883L_X_LSB,6);
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	2206      	movs	r2, #6
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff41 	bl	8001a80 <QMC5883L_Read_Register>

  *x = data[0] | (data[1]<<8);
 8001bfe:	7c3b      	ldrb	r3, [r7, #16]
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	7c7b      	ldrb	r3, [r7, #17]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	801a      	strh	r2, [r3, #0]
  *y = data[2] | (data[3]<<8);
 8001c10:	7cbb      	ldrb	r3, [r7, #18]
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	7cfb      	ldrb	r3, [r7, #19]
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	801a      	strh	r2, [r3, #0]
  *z = data[4] | (data[5]<<8);
 8001c22:	7d3b      	ldrb	r3, [r7, #20]
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	7d7b      	ldrb	r3, [r7, #21]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	801a      	strh	r2, [r3, #0]

  return 1;
 8001c34:	2301      	movs	r3, #1
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <QMC5883L_Read_Heading>:
  xhigh = yhigh = 0;
  xlow = ylow = 0;
}

int QMC5883L_Read_Heading()
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
  int16_t x, y, z, t;

  if(!QMC5883L_ReadRaw(&x,&y,&z,&t)) return 0;
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	1dba      	adds	r2, r7, #6
 8001c4a:	f107 0108 	add.w	r1, r7, #8
 8001c4e:	f107 000a 	add.w	r0, r7, #10
 8001c52:	f7ff ffc0 	bl	8001bd6 <QMC5883L_ReadRaw>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <QMC5883L_Read_Heading+0x20>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e0c1      	b.n	8001de4 <QMC5883L_Read_Heading+0x1a4>

  /* Update the observed boundaries of the measurements */

  if(x<xlow) xlow = x;
 8001c60:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c64:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <QMC5883L_Read_Heading+0x1b8>)
 8001c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	da03      	bge.n	8001c76 <QMC5883L_Read_Heading+0x36>
 8001c6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c72:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <QMC5883L_Read_Heading+0x1b8>)
 8001c74:	801a      	strh	r2, [r3, #0]
  if(x>xhigh) xhigh = x;
 8001c76:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c7a:	4b60      	ldr	r3, [pc, #384]	; (8001dfc <QMC5883L_Read_Heading+0x1bc>)
 8001c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dd03      	ble.n	8001c8c <QMC5883L_Read_Heading+0x4c>
 8001c84:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c88:	4b5c      	ldr	r3, [pc, #368]	; (8001dfc <QMC5883L_Read_Heading+0x1bc>)
 8001c8a:	801a      	strh	r2, [r3, #0]
  if(y<ylow) ylow = y;
 8001c8c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c90:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <QMC5883L_Read_Heading+0x1c0>)
 8001c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	da03      	bge.n	8001ca2 <QMC5883L_Read_Heading+0x62>
 8001c9a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c9e:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <QMC5883L_Read_Heading+0x1c0>)
 8001ca0:	801a      	strh	r2, [r3, #0]
  if(y>yhigh) yhigh = y;
 8001ca2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001ca6:	4b57      	ldr	r3, [pc, #348]	; (8001e04 <QMC5883L_Read_Heading+0x1c4>)
 8001ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dd03      	ble.n	8001cb8 <QMC5883L_Read_Heading+0x78>
 8001cb0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <QMC5883L_Read_Heading+0x1c4>)
 8001cb6:	801a      	strh	r2, [r3, #0]

  /* Bail out if not enough data is available. */

  if( xlow==xhigh || ylow==yhigh ) return 0;
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <QMC5883L_Read_Heading+0x1b8>)
 8001cba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cbe:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <QMC5883L_Read_Heading+0x1bc>)
 8001cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d007      	beq.n	8001cd8 <QMC5883L_Read_Heading+0x98>
 8001cc8:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <QMC5883L_Read_Heading+0x1c0>)
 8001cca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cce:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <QMC5883L_Read_Heading+0x1c4>)
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d101      	bne.n	8001cdc <QMC5883L_Read_Heading+0x9c>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e083      	b.n	8001de4 <QMC5883L_Read_Heading+0x1a4>

  /* Recenter the measurement by subtracting the average */

  x -= (xhigh+xlow)/2;
 8001cdc:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <QMC5883L_Read_Heading+0x1bc>)
 8001cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <QMC5883L_Read_Heading+0x1b8>)
 8001ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cea:	4413      	add	r3, r2
 8001cec:	0fda      	lsrs	r2, r3, #31
 8001cee:	4413      	add	r3, r2
 8001cf0:	105b      	asrs	r3, r3, #1
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	817b      	strh	r3, [r7, #10]
  y -= (yhigh+ylow)/2;
 8001d04:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <QMC5883L_Read_Heading+0x1c4>)
 8001d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <QMC5883L_Read_Heading+0x1c0>)
 8001d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d12:	4413      	add	r3, r2
 8001d14:	0fda      	lsrs	r2, r3, #31
 8001d16:	4413      	add	r3, r2
 8001d18:	105b      	asrs	r3, r3, #1
 8001d1a:	425b      	negs	r3, r3
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	813b      	strh	r3, [r7, #8]

  /* Rescale the measurement to the range observed. */

  float fx = (float)x/(xhigh-xlow);
 8001d2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f81f 	bl	8000d74 <__aeabi_i2f>
 8001d36:	4604      	mov	r4, r0
 8001d38:	4b30      	ldr	r3, [pc, #192]	; (8001dfc <QMC5883L_Read_Heading+0x1bc>)
 8001d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <QMC5883L_Read_Heading+0x1b8>)
 8001d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f813 	bl	8000d74 <__aeabi_i2f>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4619      	mov	r1, r3
 8001d52:	4620      	mov	r0, r4
 8001d54:	f7ff f916 	bl	8000f84 <__aeabi_fdiv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	613b      	str	r3, [r7, #16]
  float fy = (float)y/(yhigh-ylow);
 8001d5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f807 	bl	8000d74 <__aeabi_i2f>
 8001d66:	4604      	mov	r4, r0
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <QMC5883L_Read_Heading+0x1c4>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b23      	ldr	r3, [pc, #140]	; (8001e00 <QMC5883L_Read_Heading+0x1c0>)
 8001d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fffb 	bl	8000d74 <__aeabi_i2f>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7ff f8fe 	bl	8000f84 <__aeabi_fdiv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60fb      	str	r3, [r7, #12]

  int heading = 180.0*atan2(fy,fx)/M_PI;
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7fe fbb7 	bl	8000500 <__aeabi_f2d>
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
 8001d96:	6938      	ldr	r0, [r7, #16]
 8001d98:	f7fe fbb2 	bl	8000500 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f004 fb3b 	bl	800641e <atan2>
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <QMC5883L_Read_Heading+0x1c8>)
 8001dae:	f7fe fbff 	bl	80005b0 <__aeabi_dmul>
 8001db2:	4603      	mov	r3, r0
 8001db4:	460c      	mov	r4, r1
 8001db6:	4618      	mov	r0, r3
 8001db8:	4621      	mov	r1, r4
 8001dba:	a30d      	add	r3, pc, #52	; (adr r3, 8001df0 <QMC5883L_Read_Heading+0x1b0>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fd20 	bl	8000804 <__aeabi_ddiv>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	4621      	mov	r1, r4
 8001dcc:	f7fe fea0 	bl	8000b10 <__aeabi_d2iz>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	617b      	str	r3, [r7, #20]
  if(heading<=0) heading += 360;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	dc03      	bgt.n	8001de2 <QMC5883L_Read_Heading+0x1a2>
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de0:	617b      	str	r3, [r7, #20]

  return heading;
 8001de2:	697b      	ldr	r3, [r7, #20]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bdb0      	pop	{r4, r5, r7, pc}
 8001dec:	f3af 8000 	nop.w
 8001df0:	54442d18 	.word	0x54442d18
 8001df4:	400921fb 	.word	0x400921fb
 8001df8:	20000236 	.word	0x20000236
 8001dfc:	2000022a 	.word	0x2000022a
 8001e00:	20000224 	.word	0x20000224
 8001e04:	20000228 	.word	0x20000228
 8001e08:	40668000 	.word	0x40668000

08001e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e10:	f000 fa1a 	bl	8002248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e14:	f000 f838 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e18:	f000 f8a6 	bl	8001f68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e1c:	f000 f876 	bl	8001f0c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	// BMP180 init
  	BMP180_Init(&hi2c1);
 8001e20:	4814      	ldr	r0, [pc, #80]	; (8001e74 <main+0x68>)
 8001e22:	f7ff facd 	bl	80013c0 <BMP180_Init>
	BMP180_SetOversampling(BMP180_LOW);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff fad8 	bl	80013dc <BMP180_SetOversampling>
	BMP180_UpdateCalibrationData();
 8001e2c:	f7ff fae6 	bl	80013fc <BMP180_UpdateCalibrationData>
	// MAx44009 init
	MAX44009_Begin(&hi2c1);
 8001e30:	4810      	ldr	r0, [pc, #64]	; (8001e74 <main+0x68>)
 8001e32:	f7ff fd97 	bl	8001964 <MAX44009_Begin>
	// HMC5883L init
	QMC5883L_Init(&hi2c1);
 8001e36:	480f      	ldr	r0, [pc, #60]	; (8001e74 <main+0x68>)
 8001e38:	f7ff fe90 	bl	8001b5c <QMC5883L_Init>
	QMC5883L_Set_Sampling_Rate(50);
 8001e3c:	2032      	movs	r0, #50	; 0x32
 8001e3e:	f7ff fe63 	bl	8001b08 <QMC5883L_Set_Sampling_Rate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Reads temperature.
	BMP180_Temperature = BMP180_GetTemperature();
 8001e42:	f7ff fc31 	bl	80016a8 <BMP180_GetTemperature>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <main+0x6c>)
 8001e4a:	601a      	str	r2, [r3, #0]
	// Reads pressure.
	BMP180_Pressure = BMP180_GetPressure();
 8001e4c:	f7ff fc48 	bl	80016e0 <BMP180_GetPressure>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <main+0x70>)
 8001e54:	601a      	str	r2, [r3, #0]
	// Reads light intensity.
	lux = MAX44009_Get_Lux();
 8001e56:	f7ff fda3 	bl	80019a0 <MAX44009_Get_Lux>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <main+0x74>)
 8001e5e:	601a      	str	r2, [r3, #0]
	// Reads magnetic axises.
	heading = QMC5883L_Read_Heading();
 8001e60:	f7ff feee 	bl	8001c40 <QMC5883L_Read_Heading>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <main+0x78>)
 8001e68:	601a      	str	r2, [r3, #0]
	// delay
	HAL_Delay(100);
 8001e6a:	2064      	movs	r0, #100	; 0x64
 8001e6c:	f000 fa4e 	bl	800230c <HAL_Delay>
	BMP180_Temperature = BMP180_GetTemperature();
 8001e70:	e7e7      	b.n	8001e42 <main+0x36>
 8001e72:	bf00      	nop
 8001e74:	20000238 	.word	0x20000238
 8001e78:	20000294 	.word	0x20000294
 8001e7c:	2000028c 	.word	0x2000028c
 8001e80:	20000290 	.word	0x20000290
 8001e84:	20000298 	.word	0x20000298

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b094      	sub	sp, #80	; 0x50
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	2238      	movs	r2, #56	; 0x38
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 fda0 	bl	80049dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebe:	f107 0318 	add.w	r3, r7, #24
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 f868 	bl	8003f98 <HAL_RCC_OscConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8001ece:	f000 f879 	bl	8001fc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 fb6a 	bl	80045c4 <HAL_RCC_ClockConfig>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001ef6:	f000 f865 	bl	8001fc4 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <SystemClock_Config+0x80>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	3750      	adds	r7, #80	; 0x50
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	42420070 	.word	0x42420070

08001f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f12:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <MX_I2C1_Init+0x54>)
 8001f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 250000;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <MX_I2C1_Init+0x58>)
 8001f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f4a:	f000 fc3f 	bl	80027cc <HAL_I2C_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f54:	f000 f836 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000238 	.word	0x20000238
 8001f60:	40005400 	.word	0x40005400
 8001f64:	0003d090 	.word	0x0003d090

08001f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <MX_GPIO_Init+0x58>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <MX_GPIO_Init+0x58>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	6193      	str	r3, [r2, #24]
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_GPIO_Init+0x58>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_GPIO_Init+0x58>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <MX_GPIO_Init+0x58>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6193      	str	r3, [r2, #24]
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <MX_GPIO_Init+0x58>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <MX_GPIO_Init+0x58>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <MX_GPIO_Init+0x58>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6193      	str	r3, [r2, #24]
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <MX_GPIO_Init+0x58>)
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]

}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_MspInit+0x5c>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_MspInit+0x5c>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6193      	str	r3, [r2, #24]
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_MspInit+0x5c>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_MspInit+0x5c>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <HAL_MspInit+0x5c>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	61d3      	str	r3, [r2, #28]
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_MspInit+0x5c>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_MspInit+0x60>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_MspInit+0x60>)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	40021000 	.word	0x40021000
 8002030:	40010000 	.word	0x40010000

08002034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_I2C_MspInit+0x90>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d132      	bne.n	80020ba <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_I2C_MspInit+0x94>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_I2C_MspInit+0x94>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_I2C_MspInit+0x94>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800206c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002072:	2312      	movs	r3, #18
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4812      	ldr	r0, [pc, #72]	; (80020cc <HAL_I2C_MspInit+0x98>)
 8002082:	f000 fa49 	bl	8002518 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_I2C_MspInit+0x9c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
 800209c:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_I2C_MspInit+0x9c>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_I2C_MspInit+0x94>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_I2C_MspInit+0x94>)
 80020a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_I2C_MspInit+0x94>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020ba:	bf00      	nop
 80020bc:	3728      	adds	r7, #40	; 0x28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40005400 	.word	0x40005400
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010c00 	.word	0x40010c00
 80020d0:	40010000 	.word	0x40010000

080020d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <HardFault_Handler+0x4>

080020e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ea:	e7fe      	b.n	80020ea <MemManage_Handler+0x4>

080020ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <BusFault_Handler+0x4>

080020f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f6:	e7fe      	b.n	80020f6 <UsageFault_Handler+0x4>

080020f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002120:	f000 f8d8 	bl	80022d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <_sbrk+0x50>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <_sbrk+0x16>
		heap_end = &end;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <_sbrk+0x50>)
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <_sbrk+0x54>)
 800213c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <_sbrk+0x50>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <_sbrk+0x50>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	466a      	mov	r2, sp
 800214e:	4293      	cmp	r3, r2
 8002150:	d907      	bls.n	8002162 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002152:	f002 fc19 	bl	8004988 <__errno>
 8002156:	4602      	mov	r2, r0
 8002158:	230c      	movs	r3, #12
 800215a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002160:	e006      	b.n	8002170 <_sbrk+0x48>
	}

	heap_end += incr;
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <_sbrk+0x50>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	4a03      	ldr	r2, [pc, #12]	; (8002178 <_sbrk+0x50>)
 800216c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200001f8 	.word	0x200001f8
 800217c:	200002a8 	.word	0x200002a8

08002180 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <SystemInit+0x70>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <SystemInit+0x70>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <SystemInit+0x70>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <SystemInit+0x70>)
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <SystemInit+0x74>)
 8002198:	4013      	ands	r3, r2
 800219a:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <SystemInit+0x70>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <SystemInit+0x70>)
 80021a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <SystemInit+0x70>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <SystemInit+0x70>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <SystemInit+0x70>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <SystemInit+0x70>)
 80021be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80021c2:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <SystemInit+0x70>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <SystemInit+0x70>)
 80021ca:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80021ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <SystemInit+0x70>)
 80021d2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80021d6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <SystemInit+0x70>)
 80021da:	2200      	movs	r2, #0
 80021dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <SystemInit+0x78>)
 80021e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021e4:	609a      	str	r2, [r3, #8]
#endif 
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	f0ff0000 	.word	0xf0ff0000
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021fe:	e003      	b.n	8002208 <LoopCopyDataInit>

08002200 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002202:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002204:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002206:	3104      	adds	r1, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002208:	480a      	ldr	r0, [pc, #40]	; (8002234 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800220c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800220e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002210:	d3f6      	bcc.n	8002200 <CopyDataInit>
  ldr r2, =_sbss
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002214:	e002      	b.n	800221c <LoopFillZerobss>

08002216 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002218:	f842 3b04 	str.w	r3, [r2], #4

0800221c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800221e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002220:	d3f9      	bcc.n	8002216 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002222:	f7ff ffad 	bl	8002180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002226:	f002 fbb5 	bl	8004994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800222a:	f7ff fdef 	bl	8001e0c <main>
  bx lr
 800222e:	4770      	bx	lr
  ldr r3, =_sidata
 8002230:	08006bd8 	.word	0x08006bd8
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002238:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800223c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002240:	200002a4 	.word	0x200002a4

08002244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <ADC1_2_IRQHandler>
	...

08002248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_Init+0x28>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <HAL_Init+0x28>)
 8002252:	f043 0310 	orr.w	r3, r3, #16
 8002256:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002258:	2003      	movs	r0, #3
 800225a:	f000 f929 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800225e:	2000      	movs	r0, #0
 8002260:	f000 f808 	bl	8002274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002264:	f7ff feb4 	bl	8001fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40022000 	.word	0x40022000

08002274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_InitTick+0x54>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x58>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228a:	fbb3 f3f1 	udiv	r3, r3, r1
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f933 	bl	80024fe <HAL_SYSTICK_Config>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e00e      	b.n	80022c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d80a      	bhi.n	80022be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b0:	f000 f909 	bl	80024c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <HAL_InitTick+0x5c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000008 	.word	0x20000008
 80022d0:	20000004 	.word	0x20000004

080022d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_IncTick+0x1c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_IncTick+0x20>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <HAL_IncTick+0x20>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	20000008 	.word	0x20000008
 80022f4:	2000029c 	.word	0x2000029c

080022f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b02      	ldr	r3, [pc, #8]	; (8002308 <HAL_GetTick+0x10>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	2000029c 	.word	0x2000029c

0800230c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff fff0 	bl	80022f8 <HAL_GetTick>
 8002318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002324:	d005      	beq.n	8002332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_Delay+0x40>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002332:	bf00      	nop
 8002334:	f7ff ffe0 	bl	80022f8 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	429a      	cmp	r2, r3
 8002342:	d8f7      	bhi.n	8002334 <HAL_Delay+0x28>
  {
  }
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000008 	.word	0x20000008

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	; (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002490:	f7ff ff90 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff49 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff5e 	bl	8002398 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff90 	bl	8002408 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5f 	bl	80023b4 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffb0 	bl	800246c <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b08b      	sub	sp, #44	; 0x2c
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252a:	e127      	b.n	800277c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800252c:	2201      	movs	r2, #1
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8116 	bne.w	8002776 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b12      	cmp	r3, #18
 8002550:	d034      	beq.n	80025bc <HAL_GPIO_Init+0xa4>
 8002552:	2b12      	cmp	r3, #18
 8002554:	d80d      	bhi.n	8002572 <HAL_GPIO_Init+0x5a>
 8002556:	2b02      	cmp	r3, #2
 8002558:	d02b      	beq.n	80025b2 <HAL_GPIO_Init+0x9a>
 800255a:	2b02      	cmp	r3, #2
 800255c:	d804      	bhi.n	8002568 <HAL_GPIO_Init+0x50>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d031      	beq.n	80025c6 <HAL_GPIO_Init+0xae>
 8002562:	2b01      	cmp	r3, #1
 8002564:	d01c      	beq.n	80025a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002566:	e048      	b.n	80025fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002568:	2b03      	cmp	r3, #3
 800256a:	d043      	beq.n	80025f4 <HAL_GPIO_Init+0xdc>
 800256c:	2b11      	cmp	r3, #17
 800256e:	d01b      	beq.n	80025a8 <HAL_GPIO_Init+0x90>
          break;
 8002570:	e043      	b.n	80025fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002572:	4a89      	ldr	r2, [pc, #548]	; (8002798 <HAL_GPIO_Init+0x280>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d026      	beq.n	80025c6 <HAL_GPIO_Init+0xae>
 8002578:	4a87      	ldr	r2, [pc, #540]	; (8002798 <HAL_GPIO_Init+0x280>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d806      	bhi.n	800258c <HAL_GPIO_Init+0x74>
 800257e:	4a87      	ldr	r2, [pc, #540]	; (800279c <HAL_GPIO_Init+0x284>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d020      	beq.n	80025c6 <HAL_GPIO_Init+0xae>
 8002584:	4a86      	ldr	r2, [pc, #536]	; (80027a0 <HAL_GPIO_Init+0x288>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01d      	beq.n	80025c6 <HAL_GPIO_Init+0xae>
          break;
 800258a:	e036      	b.n	80025fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800258c:	4a85      	ldr	r2, [pc, #532]	; (80027a4 <HAL_GPIO_Init+0x28c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0xae>
 8002592:	4a85      	ldr	r2, [pc, #532]	; (80027a8 <HAL_GPIO_Init+0x290>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d016      	beq.n	80025c6 <HAL_GPIO_Init+0xae>
 8002598:	4a84      	ldr	r2, [pc, #528]	; (80027ac <HAL_GPIO_Init+0x294>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0xae>
          break;
 800259e:	e02c      	b.n	80025fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	623b      	str	r3, [r7, #32]
          break;
 80025a6:	e028      	b.n	80025fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	3304      	adds	r3, #4
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e023      	b.n	80025fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	3308      	adds	r3, #8
 80025b8:	623b      	str	r3, [r7, #32]
          break;
 80025ba:	e01e      	b.n	80025fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	330c      	adds	r3, #12
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	e019      	b.n	80025fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d102      	bne.n	80025d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ce:	2304      	movs	r3, #4
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e012      	b.n	80025fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d105      	bne.n	80025e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025dc:	2308      	movs	r3, #8
 80025de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	611a      	str	r2, [r3, #16]
          break;
 80025e6:	e008      	b.n	80025fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e8:	2308      	movs	r3, #8
 80025ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	615a      	str	r2, [r3, #20]
          break;
 80025f2:	e002      	b.n	80025fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
          break;
 80025f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2bff      	cmp	r3, #255	; 0xff
 80025fe:	d801      	bhi.n	8002604 <HAL_GPIO_Init+0xec>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	e001      	b.n	8002608 <HAL_GPIO_Init+0xf0>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3304      	adds	r3, #4
 8002608:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2bff      	cmp	r3, #255	; 0xff
 800260e:	d802      	bhi.n	8002616 <HAL_GPIO_Init+0xfe>
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x104>
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	3b08      	subs	r3, #8
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	210f      	movs	r1, #15
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	401a      	ands	r2, r3
 800262e:	6a39      	ldr	r1, [r7, #32]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	431a      	orrs	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8096 	beq.w	8002776 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800264a:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_GPIO_Init+0x298>)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_GPIO_Init+0x298>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6193      	str	r3, [r2, #24]
 8002656:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_GPIO_Init+0x298>)
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002662:	4a54      	ldr	r2, [pc, #336]	; (80027b4 <HAL_GPIO_Init+0x29c>)
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4b      	ldr	r2, [pc, #300]	; (80027b8 <HAL_GPIO_Init+0x2a0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0x19e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4a      	ldr	r2, [pc, #296]	; (80027bc <HAL_GPIO_Init+0x2a4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00d      	beq.n	80026b2 <HAL_GPIO_Init+0x19a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a49      	ldr	r2, [pc, #292]	; (80027c0 <HAL_GPIO_Init+0x2a8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0x196>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a48      	ldr	r2, [pc, #288]	; (80027c4 <HAL_GPIO_Init+0x2ac>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_Init+0x192>
 80026a6:	2303      	movs	r3, #3
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x1a0>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x1a0>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x1a0>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x1a0>
 80026b6:	2300      	movs	r3, #0
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026c8:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_GPIO_Init+0x29c>)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4938      	ldr	r1, [pc, #224]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
 80026ee:	e006      	b.n	80026fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026f0:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4933      	ldr	r1, [pc, #204]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800270a:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	492e      	ldr	r1, [pc, #184]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
 8002716:	e006      	b.n	8002726 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	43db      	mvns	r3, r3
 8002720:	4929      	ldr	r1, [pc, #164]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 8002722:	4013      	ands	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	4924      	ldr	r1, [pc, #144]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
 800273e:	e006      	b.n	800274e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002740:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	43db      	mvns	r3, r3
 8002748:	491f      	ldr	r1, [pc, #124]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 800274a:	4013      	ands	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	491a      	ldr	r1, [pc, #104]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	60cb      	str	r3, [r1, #12]
 8002766:	e006      	b.n	8002776 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	43db      	mvns	r3, r3
 8002770:	4915      	ldr	r1, [pc, #84]	; (80027c8 <HAL_GPIO_Init+0x2b0>)
 8002772:	4013      	ands	r3, r2
 8002774:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	3301      	adds	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	f47f aed0 	bne.w	800252c <HAL_GPIO_Init+0x14>
  }
}
 800278c:	bf00      	nop
 800278e:	372c      	adds	r7, #44	; 0x2c
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	10210000 	.word	0x10210000
 800279c:	10110000 	.word	0x10110000
 80027a0:	10120000 	.word	0x10120000
 80027a4:	10310000 	.word	0x10310000
 80027a8:	10320000 	.word	0x10320000
 80027ac:	10220000 	.word	0x10220000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40010800 	.word	0x40010800
 80027bc:	40010c00 	.word	0x40010c00
 80027c0:	40011000 	.word	0x40011000
 80027c4:	40011400 	.word	0x40011400
 80027c8:	40010400 	.word	0x40010400

080027cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e10f      	b.n	80029fe <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff fc1e 	bl	8002034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	; 0x24
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002810:	f002 f888 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8002814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4a7b      	ldr	r2, [pc, #492]	; (8002a08 <HAL_I2C_Init+0x23c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d807      	bhi.n	8002830 <HAL_I2C_Init+0x64>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a7a      	ldr	r2, [pc, #488]	; (8002a0c <HAL_I2C_Init+0x240>)
 8002824:	4293      	cmp	r3, r2
 8002826:	bf94      	ite	ls
 8002828:	2301      	movls	r3, #1
 800282a:	2300      	movhi	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	e006      	b.n	800283e <HAL_I2C_Init+0x72>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a77      	ldr	r2, [pc, #476]	; (8002a10 <HAL_I2C_Init+0x244>)
 8002834:	4293      	cmp	r3, r2
 8002836:	bf94      	ite	ls
 8002838:	2301      	movls	r3, #1
 800283a:	2300      	movhi	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0db      	b.n	80029fe <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4a72      	ldr	r2, [pc, #456]	; (8002a14 <HAL_I2C_Init+0x248>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	0c9b      	lsrs	r3, r3, #18
 8002850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a64      	ldr	r2, [pc, #400]	; (8002a08 <HAL_I2C_Init+0x23c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d802      	bhi.n	8002880 <HAL_I2C_Init+0xb4>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3301      	adds	r3, #1
 800287e:	e009      	b.n	8002894 <HAL_I2C_Init+0xc8>
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002886:	fb02 f303 	mul.w	r3, r2, r3
 800288a:	4a63      	ldr	r2, [pc, #396]	; (8002a18 <HAL_I2C_Init+0x24c>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	099b      	lsrs	r3, r3, #6
 8002892:	3301      	adds	r3, #1
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	430b      	orrs	r3, r1
 800289a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4956      	ldr	r1, [pc, #344]	; (8002a08 <HAL_I2C_Init+0x23c>)
 80028b0:	428b      	cmp	r3, r1
 80028b2:	d80d      	bhi.n	80028d0 <HAL_I2C_Init+0x104>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e59      	subs	r1, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fbb1 f3f3 	udiv	r3, r1, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	bf38      	it	cc
 80028cc:	2304      	movcc	r3, #4
 80028ce:	e04f      	b.n	8002970 <HAL_I2C_Init+0x1a4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d111      	bne.n	80028fc <HAL_I2C_Init+0x130>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	440b      	add	r3, r1
 80028e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e012      	b.n	8002922 <HAL_I2C_Init+0x156>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e58      	subs	r0, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_I2C_Init+0x15e>
 8002926:	2301      	movs	r3, #1
 8002928:	e022      	b.n	8002970 <HAL_I2C_Init+0x1a4>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10e      	bne.n	8002950 <HAL_I2C_Init+0x184>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1e58      	subs	r0, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	460b      	mov	r3, r1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	440b      	add	r3, r1
 8002940:	fbb0 f3f3 	udiv	r3, r0, r3
 8002944:	3301      	adds	r3, #1
 8002946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294e:	e00f      	b.n	8002970 <HAL_I2C_Init+0x1a4>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e58      	subs	r0, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	0099      	lsls	r1, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	fbb0 f3f3 	udiv	r3, r0, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	6809      	ldr	r1, [r1, #0]
 8002974:	4313      	orrs	r3, r2
 8002976:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800299e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6911      	ldr	r1, [r2, #16]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	68d2      	ldr	r2, [r2, #12]
 80029aa:	4311      	orrs	r1, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	000186a0 	.word	0x000186a0
 8002a0c:	001e847f 	.word	0x001e847f
 8002a10:	003d08ff 	.word	0x003d08ff
 8002a14:	431bde83 	.word	0x431bde83
 8002a18:	10624dd3 	.word	0x10624dd3

08002a1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	461a      	mov	r2, r3
 8002a28:	460b      	mov	r3, r1
 8002a2a:	817b      	strh	r3, [r7, #10]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff fc62 	bl	80022f8 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	f040 80e0 	bne.w	8002c04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2319      	movs	r3, #25
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4970      	ldr	r1, [pc, #448]	; (8002c10 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f001 f8c6 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e0d3      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_I2C_Master_Transmit+0x50>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e0cc      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x1ea>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d007      	beq.n	8002a92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2221      	movs	r2, #33	; 0x21
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2210      	movs	r2, #16
 8002aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	893a      	ldrh	r2, [r7, #8]
 8002ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a50      	ldr	r2, [pc, #320]	; (8002c14 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ad4:	8979      	ldrh	r1, [r7, #10]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	6a3a      	ldr	r2, [r7, #32]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fdfa 	bl	80036d4 <I2C_MasterRequestWrite>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e08d      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b00:	e066      	b.n	8002bd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	6a39      	ldr	r1, [r7, #32]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f001 f940 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d107      	bne.n	8002b2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06b      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	781a      	ldrb	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d11b      	bne.n	8002ba4 <HAL_I2C_Master_Transmit+0x188>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d017      	beq.n	8002ba4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	6a39      	ldr	r1, [r7, #32]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f001 f930 	bl	8003e0e <I2C_WaitOnBTFFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d107      	bne.n	8002bcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e01a      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d194      	bne.n	8002b02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	00100002 	.word	0x00100002
 8002c14:	ffff0000 	.word	0xffff0000

08002c18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	; 0x30
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	461a      	mov	r2, r3
 8002c24:	460b      	mov	r3, r1
 8002c26:	817b      	strh	r3, [r7, #10]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7ff fb64 	bl	80022f8 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	f040 8213 	bne.w	8003066 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2319      	movs	r3, #25
 8002c46:	2201      	movs	r2, #1
 8002c48:	497e      	ldr	r1, [pc, #504]	; (8002e44 <HAL_I2C_Master_Receive+0x22c>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 ffc8 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
 8002c58:	e206      	b.n	8003068 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_I2C_Master_Receive+0x50>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e1ff      	b.n	8003068 <HAL_I2C_Master_Receive+0x450>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d007      	beq.n	8002c8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2222      	movs	r2, #34	; 0x22
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	893a      	ldrh	r2, [r7, #8]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a5e      	ldr	r2, [pc, #376]	; (8002e48 <HAL_I2C_Master_Receive+0x230>)
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cd0:	8979      	ldrh	r1, [r7, #10]
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fd72 	bl	80037c0 <I2C_MasterRequestRead>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e1c0      	b.n	8003068 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d113      	bne.n	8002d16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	623b      	str	r3, [r7, #32]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e194      	b.n	8003040 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d11d      	bne.n	8002d5a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d2e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d56:	b662      	cpsie	i
 8002d58:	e172      	b.n	8003040 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d11d      	bne.n	8002d9e <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d72:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d9a:	b662      	cpsie	i
 8002d9c:	e150      	b.n	8003040 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dc4:	e13c      	b.n	8003040 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	f200 80f5 	bhi.w	8002fba <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d123      	bne.n	8002e20 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f001 f857 	bl	8003e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e13d      	b.n	8003068 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e1e:	e10f      	b.n	8003040 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d150      	bne.n	8002eca <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4906      	ldr	r1, [pc, #24]	; (8002e4c <HAL_I2C_Master_Receive+0x234>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fed4 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e112      	b.n	8003068 <HAL_I2C_Master_Receive+0x450>
 8002e42:	bf00      	nop
 8002e44:	00100002 	.word	0x00100002
 8002e48:	ffff0000 	.word	0xffff0000
 8002e4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e50:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e60:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e94:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ec8:	e0ba      	b.n	8003040 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	4967      	ldr	r1, [pc, #412]	; (8003070 <HAL_I2C_Master_Receive+0x458>)
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fe83 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0c1      	b.n	8003068 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	2200      	movs	r2, #0
 8002f30:	494f      	ldr	r1, [pc, #316]	; (8003070 <HAL_I2C_Master_Receive+0x458>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fe54 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e092      	b.n	8003068 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f50:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f84:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb8:	e042      	b.n	8003040 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 ff66 	bl	8003e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e04c      	b.n	8003068 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d118      	bne.n	8003040 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	f47f aebe 	bne.w	8002dc6 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	e000      	b.n	8003068 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
  }
}
 8003068:	4618      	mov	r0, r3
 800306a:	3728      	adds	r7, #40	; 0x28
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	00010004 	.word	0x00010004

08003074 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	4608      	mov	r0, r1
 800307e:	4611      	mov	r1, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4603      	mov	r3, r0
 8003084:	817b      	strh	r3, [r7, #10]
 8003086:	460b      	mov	r3, r1
 8003088:	813b      	strh	r3, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800308e:	f7ff f933 	bl	80022f8 <HAL_GetTick>
 8003092:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b20      	cmp	r3, #32
 800309e:	f040 80d9 	bne.w	8003254 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	2319      	movs	r3, #25
 80030a8:	2201      	movs	r2, #1
 80030aa:	496d      	ldr	r1, [pc, #436]	; (8003260 <HAL_I2C_Mem_Write+0x1ec>)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fd97 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0cc      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_I2C_Mem_Write+0x56>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e0c5      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d007      	beq.n	80030f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2221      	movs	r2, #33	; 0x21
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003120:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a4d      	ldr	r2, [pc, #308]	; (8003264 <HAL_I2C_Mem_Write+0x1f0>)
 8003130:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003132:	88f8      	ldrh	r0, [r7, #6]
 8003134:	893a      	ldrh	r2, [r7, #8]
 8003136:	8979      	ldrh	r1, [r7, #10]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4603      	mov	r3, r0
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fbf2 	bl	800392c <I2C_RequestMemoryWrite>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d052      	beq.n	80031f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e081      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fe18 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b04      	cmp	r3, #4
 8003168:	d107      	bne.n	800317a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06b      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d11b      	bne.n	80031f4 <HAL_I2C_Mem_Write+0x180>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1aa      	bne.n	8003152 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fe04 	bl	8003e0e <I2C_WaitOnBTFFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00d      	beq.n	8003228 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2b04      	cmp	r3, #4
 8003212:	d107      	bne.n	8003224 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003222:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e016      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	00100002 	.word	0x00100002
 8003264:	ffff0000 	.word	0xffff0000

08003268 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	; 0x30
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	4608      	mov	r0, r1
 8003272:	4611      	mov	r1, r2
 8003274:	461a      	mov	r2, r3
 8003276:	4603      	mov	r3, r0
 8003278:	817b      	strh	r3, [r7, #10]
 800327a:	460b      	mov	r3, r1
 800327c:	813b      	strh	r3, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003282:	f7ff f839 	bl	80022f8 <HAL_GetTick>
 8003286:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b20      	cmp	r3, #32
 8003292:	f040 8218 	bne.w	80036c6 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2319      	movs	r3, #25
 800329c:	2201      	movs	r2, #1
 800329e:	4981      	ldr	r1, [pc, #516]	; (80034a4 <HAL_I2C_Mem_Read+0x23c>)
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fc9d 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
 80032ae:	e20b      	b.n	80036c8 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Mem_Read+0x56>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e204      	b.n	80036c8 <HAL_I2C_Mem_Read+0x460>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d007      	beq.n	80032e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2222      	movs	r2, #34	; 0x22
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2240      	movs	r2, #64	; 0x40
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a61      	ldr	r2, [pc, #388]	; (80034a8 <HAL_I2C_Mem_Read+0x240>)
 8003324:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003326:	88f8      	ldrh	r0, [r7, #6]
 8003328:	893a      	ldrh	r2, [r7, #8]
 800332a:	8979      	ldrh	r1, [r7, #10]
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	4603      	mov	r3, r0
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fb82 	bl	8003a40 <I2C_RequestMemoryRead>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e1c0      	b.n	80036c8 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d113      	bne.n	8003376 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	623b      	str	r3, [r7, #32]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e194      	b.n	80036a0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	2b01      	cmp	r3, #1
 800337c:	d11d      	bne.n	80033ba <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800338e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003390:	2300      	movs	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033b6:	b662      	cpsie	i
 80033b8:	e172      	b.n	80036a0 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d11d      	bne.n	80033fe <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033d2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033fa:	b662      	cpsie	i
 80033fc:	e150      	b.n	80036a0 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003424:	e13c      	b.n	80036a0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	2b03      	cmp	r3, #3
 800342c:	f200 80f5 	bhi.w	800361a <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	2b01      	cmp	r3, #1
 8003436:	d123      	bne.n	8003480 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fd27 	bl	8003e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e13d      	b.n	80036c8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800347e:	e10f      	b.n	80036a0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	2b02      	cmp	r3, #2
 8003486:	d150      	bne.n	800352a <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348e:	2200      	movs	r2, #0
 8003490:	4906      	ldr	r1, [pc, #24]	; (80034ac <HAL_I2C_Mem_Read+0x244>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fba4 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e112      	b.n	80036c8 <HAL_I2C_Mem_Read+0x460>
 80034a2:	bf00      	nop
 80034a4:	00100002 	.word	0x00100002
 80034a8:	ffff0000 	.word	0xffff0000
 80034ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034f4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003528:	e0ba      	b.n	80036a0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	2200      	movs	r2, #0
 8003532:	4967      	ldr	r1, [pc, #412]	; (80036d0 <HAL_I2C_Mem_Read+0x468>)
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fb53 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0c1      	b.n	80036c8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003552:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003554:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	2200      	movs	r2, #0
 8003590:	494f      	ldr	r1, [pc, #316]	; (80036d0 <HAL_I2C_Mem_Read+0x468>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fb24 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e092      	b.n	80036c8 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035e4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003618:	e042      	b.n	80036a0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fc36 	bl	8003e90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e04c      	b.n	80036c8 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d118      	bne.n	80036a0 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f47f aebe 	bne.w	8003426 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3728      	adds	r7, #40	; 0x28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	00010004 	.word	0x00010004

080036d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	460b      	mov	r3, r1
 80036e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d006      	beq.n	80036fe <I2C_MasterRequestWrite+0x2a>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d003      	beq.n	80036fe <I2C_MasterRequestWrite+0x2a>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036fc:	d108      	bne.n	8003710 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e00b      	b.n	8003728 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	2b12      	cmp	r3, #18
 8003716:	d107      	bne.n	8003728 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003726:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fa53 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e035      	b.n	80037b0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800374c:	d108      	bne.n	8003760 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800375c:	611a      	str	r2, [r3, #16]
 800375e:	e01b      	b.n	8003798 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003760:	897b      	ldrh	r3, [r7, #10]
 8003762:	11db      	asrs	r3, r3, #7
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0306 	and.w	r3, r3, #6
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f063 030f 	orn	r3, r3, #15
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <I2C_MasterRequestWrite+0xe4>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fa85 	bl	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e010      	b.n	80037b0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4907      	ldr	r1, [pc, #28]	; (80037bc <I2C_MasterRequestWrite+0xe8>)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fa75 	bl	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	00010008 	.word	0x00010008
 80037bc:	00010002 	.word	0x00010002

080037c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	460b      	mov	r3, r1
 80037ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d006      	beq.n	80037fa <I2C_MasterRequestRead+0x3a>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d003      	beq.n	80037fa <I2C_MasterRequestRead+0x3a>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f8:	d108      	bne.n	800380c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00b      	b.n	8003824 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	2b11      	cmp	r3, #17
 8003812:	d107      	bne.n	8003824 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003822:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f9d5 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e06d      	b.n	800391c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003848:	d108      	bne.n	800385c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	611a      	str	r2, [r3, #16]
 800385a:	e053      	b.n	8003904 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800385c:	897b      	ldrh	r3, [r7, #10]
 800385e:	11db      	asrs	r3, r3, #7
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 0306 	and.w	r3, r3, #6
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f063 030f 	orn	r3, r3, #15
 800386c:	b2da      	uxtb	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	492a      	ldr	r1, [pc, #168]	; (8003924 <I2C_MasterRequestRead+0x164>)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fa07 	bl	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e048      	b.n	800391c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800388a:	897b      	ldrh	r3, [r7, #10]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	4923      	ldr	r1, [pc, #140]	; (8003928 <I2C_MasterRequestRead+0x168>)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f9f7 	bl	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e038      	b.n	800391c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f97f 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e017      	b.n	800391c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038ec:	897b      	ldrh	r3, [r7, #10]
 80038ee:	11db      	asrs	r3, r3, #7
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 0306 	and.w	r3, r3, #6
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f063 030e 	orn	r3, r3, #14
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4907      	ldr	r1, [pc, #28]	; (8003928 <I2C_MasterRequestRead+0x168>)
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f9bf 	bl	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	00010008 	.word	0x00010008
 8003928:	00010002 	.word	0x00010002

0800392c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003954:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2200      	movs	r2, #0
 800395e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f93c 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e05f      	b.n	8003a32 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003980:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	492d      	ldr	r1, [pc, #180]	; (8003a3c <I2C_RequestMemoryWrite+0x110>)
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f980 	bl	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e04c      	b.n	8003a32 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b0:	6a39      	ldr	r1, [r7, #32]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f9ea 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d107      	bne.n	80039d6 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e02b      	b.n	8003a32 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039e0:	893b      	ldrh	r3, [r7, #8]
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	611a      	str	r2, [r3, #16]
 80039ea:	e021      	b.n	8003a30 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039ec:	893b      	ldrh	r3, [r7, #8]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	6a39      	ldr	r1, [r7, #32]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f9c4 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d107      	bne.n	8003a22 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e005      	b.n	8003a32 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a26:	893b      	ldrh	r3, [r7, #8]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	00010002 	.word	0x00010002

08003a40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	4608      	mov	r0, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	817b      	strh	r3, [r7, #10]
 8003a52:	460b      	mov	r3, r1
 8003a54:	813b      	strh	r3, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f8aa 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e09e      	b.n	8003bd4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	494c      	ldr	r1, [pc, #304]	; (8003bdc <I2C_RequestMemoryRead+0x19c>)
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f8ee 	bl	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e08b      	b.n	8003bd4 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	6a39      	ldr	r1, [r7, #32]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f958 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06a      	b.n	8003bd4 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b04:	893b      	ldrh	r3, [r7, #8]
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	611a      	str	r2, [r3, #16]
 8003b0e:	e021      	b.n	8003b54 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b10:	893b      	ldrh	r3, [r7, #8]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	6a39      	ldr	r1, [r7, #32]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f932 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d107      	bne.n	8003b46 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e044      	b.n	8003bd4 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b4a:	893b      	ldrh	r3, [r7, #8]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f917 	bl	8003d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d107      	bne.n	8003b7c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e029      	b.n	8003bd4 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f81f 	bl	8003be0 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e013      	b.n	8003bd4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bac:	897b      	ldrh	r3, [r7, #10]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	4906      	ldr	r1, [pc, #24]	; (8003bdc <I2C_RequestMemoryRead+0x19c>)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f863 	bl	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	00010002 	.word	0x00010002

08003be0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf0:	e025      	b.n	8003c3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf8:	d021      	beq.n	8003c3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfa:	f7fe fb7d 	bl	80022f8 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d302      	bcc.n	8003c10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d116      	bne.n	8003c3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f043 0220 	orr.w	r2, r3, #32
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e023      	b.n	8003c86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d10d      	bne.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	e00c      	b.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d0b6      	beq.n	8003bf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c9c:	e051      	b.n	8003d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cac:	d123      	bne.n	8003cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e046      	b.n	8003d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cfc:	d021      	beq.n	8003d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfe:	f7fe fafb 	bl	80022f8 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d302      	bcc.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d116      	bne.n	8003d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f043 0220 	orr.w	r2, r3, #32
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e020      	b.n	8003d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10c      	bne.n	8003d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4013      	ands	r3, r2
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bf14      	ite	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	2300      	moveq	r3, #0
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	e00b      	b.n	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d18d      	bne.n	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d98:	e02d      	b.n	8003df6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f8ce 	bl	8003f3c <I2C_IsAcknowledgeFailed>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e02d      	b.n	8003e06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db0:	d021      	beq.n	8003df6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fe faa1 	bl	80022f8 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d302      	bcc.n	8003dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d116      	bne.n	8003df6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f043 0220 	orr.w	r2, r3, #32
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e007      	b.n	8003e06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e00:	2b80      	cmp	r3, #128	; 0x80
 8003e02:	d1ca      	bne.n	8003d9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e1a:	e02d      	b.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f88d 	bl	8003f3c <I2C_IsAcknowledgeFailed>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e02d      	b.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e32:	d021      	beq.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e34:	f7fe fa60 	bl	80022f8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d116      	bne.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e007      	b.n	8003e88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d1ca      	bne.n	8003e1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e9c:	e042      	b.n	8003f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d119      	bne.n	8003ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0210 	mvn.w	r2, #16
 8003eb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e029      	b.n	8003f34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fe fa0a 	bl	80022f8 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d116      	bne.n	8003f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	f043 0220 	orr.w	r2, r3, #32
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e007      	b.n	8003f34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d1b5      	bne.n	8003e9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d11b      	bne.n	8003f8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	f043 0204 	orr.w	r2, r3, #4
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr

08003f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e304      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8087 	beq.w	80040c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb8:	4b92      	ldr	r3, [pc, #584]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d00c      	beq.n	8003fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fc4:	4b8f      	ldr	r3, [pc, #572]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d112      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x5e>
 8003fd0:	4b8c      	ldr	r3, [pc, #560]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fde:	4b89      	ldr	r3, [pc, #548]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d06c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x12c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d168      	bne.n	80040c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e2de      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffe:	d106      	bne.n	800400e <HAL_RCC_OscConfig+0x76>
 8004000:	4b80      	ldr	r3, [pc, #512]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a7f      	ldr	r2, [pc, #508]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	e02e      	b.n	800406c <HAL_RCC_OscConfig+0xd4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0x98>
 8004016:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7a      	ldr	r2, [pc, #488]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800401c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4b78      	ldr	r3, [pc, #480]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a77      	ldr	r2, [pc, #476]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e01d      	b.n	800406c <HAL_RCC_OscConfig+0xd4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0xbc>
 800403a:	4b72      	ldr	r3, [pc, #456]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a71      	ldr	r2, [pc, #452]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a6e      	ldr	r2, [pc, #440]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0xd4>
 8004054:	4b6b      	ldr	r3, [pc, #428]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6a      	ldr	r2, [pc, #424]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800405a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b68      	ldr	r3, [pc, #416]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a67      	ldr	r2, [pc, #412]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fe f940 	bl	80022f8 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7fe f93c 	bl	80022f8 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e292      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b5d      	ldr	r3, [pc, #372]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0xe4>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fe f92c 	bl	80022f8 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fe f928 	bl	80022f8 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e27e      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	4b53      	ldr	r3, [pc, #332]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x10c>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d063      	beq.n	800419a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d2:	4b4c      	ldr	r3, [pc, #304]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040de:	4b49      	ldr	r3, [pc, #292]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d11c      	bne.n	8004124 <HAL_RCC_OscConfig+0x18c>
 80040ea:	4b46      	ldr	r3, [pc, #280]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f6:	4b43      	ldr	r3, [pc, #268]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x176>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e252      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b3d      	ldr	r3, [pc, #244]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4939      	ldr	r1, [pc, #228]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004122:	e03a      	b.n	800419a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fe f8e1 	bl	80022f8 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413a:	f7fe f8dd 	bl	80022f8 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e233      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4927      	ldr	r1, [pc, #156]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
 800416c:	e015      	b.n	800419a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b26      	ldr	r3, [pc, #152]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fe f8c0 	bl	80022f8 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe f8bc 	bl	80022f8 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e212      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03a      	beq.n	800421c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d019      	beq.n	80041e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <HAL_RCC_OscConfig+0x274>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b4:	f7fe f8a0 	bl	80022f8 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fe f89c 	bl	80022f8 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e1f2      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041da:	2001      	movs	r0, #1
 80041dc:	f000 fbb6 	bl	800494c <RCC_Delay>
 80041e0:	e01c      	b.n	800421c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_RCC_OscConfig+0x274>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e8:	f7fe f886 	bl	80022f8 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ee:	e00f      	b.n	8004210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f0:	f7fe f882 	bl	80022f8 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d908      	bls.n	8004210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e1d8      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
 8004208:	42420000 	.word	0x42420000
 800420c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004210:	4b9b      	ldr	r3, [pc, #620]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e9      	bne.n	80041f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80a6 	beq.w	8004376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422e:	4b94      	ldr	r3, [pc, #592]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	4b91      	ldr	r3, [pc, #580]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	4a90      	ldr	r2, [pc, #576]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	61d3      	str	r3, [r2, #28]
 8004246:	4b8e      	ldr	r3, [pc, #568]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b8b      	ldr	r3, [pc, #556]	; (8004484 <HAL_RCC_OscConfig+0x4ec>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004262:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x4ec>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a87      	ldr	r2, [pc, #540]	; (8004484 <HAL_RCC_OscConfig+0x4ec>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7fe f843 	bl	80022f8 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fe f83f 	bl	80022f8 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b64      	cmp	r3, #100	; 0x64
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e195      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	4b7e      	ldr	r3, [pc, #504]	; (8004484 <HAL_RCC_OscConfig+0x4ec>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d106      	bne.n	80042aa <HAL_RCC_OscConfig+0x312>
 800429c:	4b78      	ldr	r3, [pc, #480]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4a77      	ldr	r2, [pc, #476]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	6213      	str	r3, [r2, #32]
 80042a8:	e02d      	b.n	8004306 <HAL_RCC_OscConfig+0x36e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x334>
 80042b2:	4b73      	ldr	r3, [pc, #460]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	4a72      	ldr	r2, [pc, #456]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	6213      	str	r3, [r2, #32]
 80042be:	4b70      	ldr	r3, [pc, #448]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4a6f      	ldr	r2, [pc, #444]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042c4:	f023 0304 	bic.w	r3, r3, #4
 80042c8:	6213      	str	r3, [r2, #32]
 80042ca:	e01c      	b.n	8004306 <HAL_RCC_OscConfig+0x36e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b05      	cmp	r3, #5
 80042d2:	d10c      	bne.n	80042ee <HAL_RCC_OscConfig+0x356>
 80042d4:	4b6a      	ldr	r3, [pc, #424]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	4a69      	ldr	r2, [pc, #420]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	6213      	str	r3, [r2, #32]
 80042e0:	4b67      	ldr	r3, [pc, #412]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4a66      	ldr	r2, [pc, #408]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6213      	str	r3, [r2, #32]
 80042ec:	e00b      	b.n	8004306 <HAL_RCC_OscConfig+0x36e>
 80042ee:	4b64      	ldr	r3, [pc, #400]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	4a63      	ldr	r2, [pc, #396]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	6213      	str	r3, [r2, #32]
 80042fa:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4a60      	ldr	r2, [pc, #384]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004300:	f023 0304 	bic.w	r3, r3, #4
 8004304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d015      	beq.n	800433a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430e:	f7fd fff3 	bl	80022f8 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004314:	e00a      	b.n	800432c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7fd ffef 	bl	80022f8 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e143      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432c:	4b54      	ldr	r3, [pc, #336]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ee      	beq.n	8004316 <HAL_RCC_OscConfig+0x37e>
 8004338:	e014      	b.n	8004364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433a:	f7fd ffdd 	bl	80022f8 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004340:	e00a      	b.n	8004358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fd ffd9 	bl	80022f8 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e12d      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004358:	4b49      	ldr	r3, [pc, #292]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1ee      	bne.n	8004342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436a:	4b45      	ldr	r3, [pc, #276]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4a44      	ldr	r2, [pc, #272]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004374:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 808c 	beq.w	8004498 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004380:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438c:	d10e      	bne.n	80043ac <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800438e:	4b3c      	ldr	r3, [pc, #240]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004396:	2b08      	cmp	r3, #8
 8004398:	d108      	bne.n	80043ac <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800439a:	4b39      	ldr	r3, [pc, #228]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80043a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e103      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d14e      	bne.n	8004452 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80043b4:	4b32      	ldr	r3, [pc, #200]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80043c0:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0ef      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80043d4:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <HAL_RCC_OscConfig+0x4f0>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043da:	f7fd ff8d 	bl	80022f8 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043e2:	f7fd ff89 	bl	80022f8 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b64      	cmp	r3, #100	; 0x64
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0df      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80043f4:	4b22      	ldr	r3, [pc, #136]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f0      	bne.n	80043e2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004400:	4b1f      	ldr	r3, [pc, #124]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440c:	491c      	ldr	r1, [pc, #112]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8004412:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4918      	ldr	r1, [pc, #96]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004420:	4313      	orrs	r3, r2
 8004422:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <HAL_RCC_OscConfig+0x4f0>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fd ff65 	bl	80022f8 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004432:	f7fd ff61 	bl	80022f8 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b64      	cmp	r3, #100	; 0x64
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e0b7      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x49a>
 8004450:	e022      	b.n	8004498 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <HAL_RCC_OscConfig+0x4e8>)
 8004458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_RCC_OscConfig+0x4f0>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fd ff48 	bl	80022f8 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800446a:	e00f      	b.n	800448c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800446c:	f7fd ff44 	bl	80022f8 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d908      	bls.n	800448c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e09a      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	40007000 	.word	0x40007000
 8004488:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800448c:	4b4b      	ldr	r3, [pc, #300]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e9      	bne.n	800446c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8088 	beq.w	80045b2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a2:	4b46      	ldr	r3, [pc, #280]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d068      	beq.n	8004580 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d14d      	bne.n	8004552 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b6:	4b42      	ldr	r3, [pc, #264]	; (80045c0 <HAL_RCC_OscConfig+0x628>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fd ff1c 	bl	80022f8 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fd ff18 	bl	80022f8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e06e      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d6:	4b39      	ldr	r3, [pc, #228]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ea:	d10f      	bne.n	800450c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80044ec:	4b33      	ldr	r3, [pc, #204]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 80044ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4931      	ldr	r1, [pc, #196]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044fa:	4b30      	ldr	r3, [pc, #192]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f023 020f 	bic.w	r2, r3, #15
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	492d      	ldr	r1, [pc, #180]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 8004508:	4313      	orrs	r3, r2
 800450a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800450c:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	430b      	orrs	r3, r1
 800451e:	4927      	ldr	r1, [pc, #156]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004524:	4b26      	ldr	r3, [pc, #152]	; (80045c0 <HAL_RCC_OscConfig+0x628>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fd fee5 	bl	80022f8 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004532:	f7fd fee1 	bl	80022f8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e037      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004544:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x59a>
 8004550:	e02f      	b.n	80045b2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <HAL_RCC_OscConfig+0x628>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fd fece 	bl	80022f8 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004560:	f7fd feca 	bl	80022f8 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e020      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004572:	4b12      	ldr	r3, [pc, #72]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x5c8>
 800457e:	e018      	b.n	80045b2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e013      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <HAL_RCC_OscConfig+0x624>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	429a      	cmp	r2, r3
 800459e:	d106      	bne.n	80045ae <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d001      	beq.n	80045b2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021000 	.word	0x40021000
 80045c0:	42420060 	.word	0x42420060

080045c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0d0      	b.n	800477a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d8:	4b6a      	ldr	r3, [pc, #424]	; (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d910      	bls.n	8004608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b67      	ldr	r3, [pc, #412]	; (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 0207 	bic.w	r2, r3, #7
 80045ee:	4965      	ldr	r1, [pc, #404]	; (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b63      	ldr	r3, [pc, #396]	; (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0b8      	b.n	800477a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004620:	4b59      	ldr	r3, [pc, #356]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a58      	ldr	r2, [pc, #352]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800462a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004638:	4b53      	ldr	r3, [pc, #332]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004642:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b50      	ldr	r3, [pc, #320]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	494d      	ldr	r1, [pc, #308]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d040      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b47      	ldr	r3, [pc, #284]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d115      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e07f      	b.n	800477a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d107      	bne.n	8004692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004682:	4b41      	ldr	r3, [pc, #260]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e073      	b.n	800477a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004692:	4b3d      	ldr	r3, [pc, #244]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e06b      	b.n	800477a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a2:	4b39      	ldr	r3, [pc, #228]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f023 0203 	bic.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4936      	ldr	r1, [pc, #216]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b4:	f7fd fe20 	bl	80022f8 <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ba:	e00a      	b.n	80046d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046bc:	f7fd fe1c 	bl	80022f8 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e053      	b.n	800477a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	4b2d      	ldr	r3, [pc, #180]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 020c 	and.w	r2, r3, #12
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d1eb      	bne.n	80046bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046e4:	4b27      	ldr	r3, [pc, #156]	; (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d210      	bcs.n	8004714 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b24      	ldr	r3, [pc, #144]	; (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 0207 	bic.w	r2, r3, #7
 80046fa:	4922      	ldr	r1, [pc, #136]	; (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4313      	orrs	r3, r2
 8004700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <HAL_RCC_ClockConfig+0x1c0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e032      	b.n	800477a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4916      	ldr	r1, [pc, #88]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	490e      	ldr	r1, [pc, #56]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004752:	f000 f821 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004756:	4601      	mov	r1, r0
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	5cd3      	ldrb	r3, [r2, r3]
 8004766:	fa21 f303 	lsr.w	r3, r1, r3
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <HAL_RCC_ClockConfig+0x1cc>)
 800476c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x1d0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fd fd7e 	bl	8002274 <HAL_InitTick>

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40022000 	.word	0x40022000
 8004788:	40021000 	.word	0x40021000
 800478c:	08006948 	.word	0x08006948
 8004790:	20000000 	.word	0x20000000
 8004794:	20000004 	.word	0x20000004

08004798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800479a:	b091      	sub	sp, #68	; 0x44
 800479c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800479e:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80047a0:	f107 0414 	add.w	r4, r7, #20
 80047a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047a6:	c407      	stmia	r4!, {r0, r1, r2}
 80047a8:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80047aa:	4b54      	ldr	r3, [pc, #336]	; (80048fc <HAL_RCC_GetSysClockFreq+0x164>)
 80047ac:	1d3c      	adds	r4, r7, #4
 80047ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
 80047b8:	2300      	movs	r3, #0
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
 80047bc:	2300      	movs	r3, #0
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c0:	2300      	movs	r3, #0
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80047cc:	2300      	movs	r3, #0
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047d0:	4b4b      	ldr	r3, [pc, #300]	; (8004900 <HAL_RCC_GetSysClockFreq+0x168>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	f003 030c 	and.w	r3, r3, #12
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d002      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0x4e>
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d003      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x54>
 80047e4:	e07f      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047e6:	4b47      	ldr	r3, [pc, #284]	; (8004904 <HAL_RCC_GetSysClockFreq+0x16c>)
 80047e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047ea:	e07f      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	0c9b      	lsrs	r3, r3, #18
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80047f8:	4413      	add	r3, r2
 80047fa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d065      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800480a:	4b3d      	ldr	r3, [pc, #244]	; (8004900 <HAL_RCC_GetSysClockFreq+0x168>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004816:	4413      	add	r3, r2
 8004818:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800481c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_RCC_GetSysClockFreq+0x168>)
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d043      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800482a:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_RCC_GetSysClockFreq+0x168>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	3301      	adds	r3, #1
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004838:	4b31      	ldr	r3, [pc, #196]	; (8004900 <HAL_RCC_GetSysClockFreq+0x168>)
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	3302      	adds	r3, #2
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	4619      	mov	r1, r3
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	f04f 0400 	mov.w	r4, #0
 8004854:	fb03 f502 	mul.w	r5, r3, r2
 8004858:	fb01 f004 	mul.w	r0, r1, r4
 800485c:	4428      	add	r0, r5
 800485e:	fba1 3403 	umull	r3, r4, r1, r3
 8004862:	1902      	adds	r2, r0, r4
 8004864:	4614      	mov	r4, r2
 8004866:	4a27      	ldr	r2, [pc, #156]	; (8004904 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004868:	fb02 f104 	mul.w	r1, r2, r4
 800486c:	2200      	movs	r2, #0
 800486e:	fb02 f203 	mul.w	r2, r2, r3
 8004872:	440a      	add	r2, r1
 8004874:	4923      	ldr	r1, [pc, #140]	; (8004904 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004876:	fba3 5601 	umull	r5, r6, r3, r1
 800487a:	1993      	adds	r3, r2, r6
 800487c:	461e      	mov	r6, r3
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	4619      	mov	r1, r3
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	f04f 0400 	mov.w	r4, #0
 800488c:	fb03 fc02 	mul.w	ip, r3, r2
 8004890:	fb01 f004 	mul.w	r0, r1, r4
 8004894:	4460      	add	r0, ip
 8004896:	fba1 3403 	umull	r3, r4, r1, r3
 800489a:	1902      	adds	r2, r0, r4
 800489c:	4614      	mov	r4, r2
 800489e:	461a      	mov	r2, r3
 80048a0:	4623      	mov	r3, r4
 80048a2:	4628      	mov	r0, r5
 80048a4:	4631      	mov	r1, r6
 80048a6:	f7fc fc09 	bl	80010bc <__aeabi_uldivmod>
 80048aa:	4603      	mov	r3, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b0:	e007      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	4a13      	ldr	r2, [pc, #76]	; (8004904 <HAL_RCC_GetSysClockFreq+0x16c>)
 80048b6:	fb02 f203 	mul.w	r2, r2, r3
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80048c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80048c6:	461a      	mov	r2, r3
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80048ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d4:	e004      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <HAL_RCC_GetSysClockFreq+0x170>)
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80048e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048e4:	e002      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_GetSysClockFreq+0x174>)
 80048e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3744      	adds	r7, #68	; 0x44
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f6:	bf00      	nop
 80048f8:	08006920 	.word	0x08006920
 80048fc:	08006930 	.word	0x08006930
 8004900:	40021000 	.word	0x40021000
 8004904:	017d7840 	.word	0x017d7840
 8004908:	003d0900 	.word	0x003d0900
 800490c:	007a1200 	.word	0x007a1200

08004910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004914:	4b02      	ldr	r3, [pc, #8]	; (8004920 <HAL_RCC_GetHCLKFreq+0x10>)
 8004916:	681b      	ldr	r3, [r3, #0]
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	20000000 	.word	0x20000000

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004928:	f7ff fff2 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 800492c:	4601      	mov	r1, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	0a1b      	lsrs	r3, r3, #8
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4a03      	ldr	r2, [pc, #12]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40021000 	.word	0x40021000
 8004948:	08006958 	.word	0x08006958

0800494c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <RCC_Delay+0x34>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <RCC_Delay+0x38>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	0a5b      	lsrs	r3, r3, #9
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004968:	bf00      	nop
  }
  while (Delay --);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	60fa      	str	r2, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f9      	bne.n	8004968 <RCC_Delay+0x1c>
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000000 	.word	0x20000000
 8004984:	10624dd3 	.word	0x10624dd3

08004988 <__errno>:
 8004988:	4b01      	ldr	r3, [pc, #4]	; (8004990 <__errno+0x8>)
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	2000000c 	.word	0x2000000c

08004994 <__libc_init_array>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	2500      	movs	r5, #0
 8004998:	4e0c      	ldr	r6, [pc, #48]	; (80049cc <__libc_init_array+0x38>)
 800499a:	4c0d      	ldr	r4, [pc, #52]	; (80049d0 <__libc_init_array+0x3c>)
 800499c:	1ba4      	subs	r4, r4, r6
 800499e:	10a4      	asrs	r4, r4, #2
 80049a0:	42a5      	cmp	r5, r4
 80049a2:	d109      	bne.n	80049b8 <__libc_init_array+0x24>
 80049a4:	f001 ffae 	bl	8006904 <_init>
 80049a8:	2500      	movs	r5, #0
 80049aa:	4e0a      	ldr	r6, [pc, #40]	; (80049d4 <__libc_init_array+0x40>)
 80049ac:	4c0a      	ldr	r4, [pc, #40]	; (80049d8 <__libc_init_array+0x44>)
 80049ae:	1ba4      	subs	r4, r4, r6
 80049b0:	10a4      	asrs	r4, r4, #2
 80049b2:	42a5      	cmp	r5, r4
 80049b4:	d105      	bne.n	80049c2 <__libc_init_array+0x2e>
 80049b6:	bd70      	pop	{r4, r5, r6, pc}
 80049b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049bc:	4798      	blx	r3
 80049be:	3501      	adds	r5, #1
 80049c0:	e7ee      	b.n	80049a0 <__libc_init_array+0xc>
 80049c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049c6:	4798      	blx	r3
 80049c8:	3501      	adds	r5, #1
 80049ca:	e7f2      	b.n	80049b2 <__libc_init_array+0x1e>
 80049cc:	08006bd0 	.word	0x08006bd0
 80049d0:	08006bd0 	.word	0x08006bd0
 80049d4:	08006bd0 	.word	0x08006bd0
 80049d8:	08006bd4 	.word	0x08006bd4

080049dc <memset>:
 80049dc:	4603      	mov	r3, r0
 80049de:	4402      	add	r2, r0
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d100      	bne.n	80049e6 <memset+0xa>
 80049e4:	4770      	bx	lr
 80049e6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ea:	e7f9      	b.n	80049e0 <memset+0x4>

080049ec <__cvt>:
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f2:	461e      	mov	r6, r3
 80049f4:	bfbb      	ittet	lt
 80049f6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80049fa:	461e      	movlt	r6, r3
 80049fc:	2300      	movge	r3, #0
 80049fe:	232d      	movlt	r3, #45	; 0x2d
 8004a00:	b088      	sub	sp, #32
 8004a02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a04:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004a08:	f027 0720 	bic.w	r7, r7, #32
 8004a0c:	2f46      	cmp	r7, #70	; 0x46
 8004a0e:	4614      	mov	r4, r2
 8004a10:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a12:	700b      	strb	r3, [r1, #0]
 8004a14:	d004      	beq.n	8004a20 <__cvt+0x34>
 8004a16:	2f45      	cmp	r7, #69	; 0x45
 8004a18:	d100      	bne.n	8004a1c <__cvt+0x30>
 8004a1a:	3501      	adds	r5, #1
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e000      	b.n	8004a22 <__cvt+0x36>
 8004a20:	2303      	movs	r3, #3
 8004a22:	aa07      	add	r2, sp, #28
 8004a24:	9204      	str	r2, [sp, #16]
 8004a26:	aa06      	add	r2, sp, #24
 8004a28:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a2c:	e9cd 3500 	strd	r3, r5, [sp]
 8004a30:	4622      	mov	r2, r4
 8004a32:	4633      	mov	r3, r6
 8004a34:	f000 fba8 	bl	8005188 <_dtoa_r>
 8004a38:	2f47      	cmp	r7, #71	; 0x47
 8004a3a:	4680      	mov	r8, r0
 8004a3c:	d102      	bne.n	8004a44 <__cvt+0x58>
 8004a3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004a40:	07db      	lsls	r3, r3, #31
 8004a42:	d526      	bpl.n	8004a92 <__cvt+0xa6>
 8004a44:	2f46      	cmp	r7, #70	; 0x46
 8004a46:	eb08 0905 	add.w	r9, r8, r5
 8004a4a:	d111      	bne.n	8004a70 <__cvt+0x84>
 8004a4c:	f898 3000 	ldrb.w	r3, [r8]
 8004a50:	2b30      	cmp	r3, #48	; 0x30
 8004a52:	d10a      	bne.n	8004a6a <__cvt+0x7e>
 8004a54:	2200      	movs	r2, #0
 8004a56:	2300      	movs	r3, #0
 8004a58:	4620      	mov	r0, r4
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	f7fc f810 	bl	8000a80 <__aeabi_dcmpeq>
 8004a60:	b918      	cbnz	r0, 8004a6a <__cvt+0x7e>
 8004a62:	f1c5 0501 	rsb	r5, r5, #1
 8004a66:	f8ca 5000 	str.w	r5, [sl]
 8004a6a:	f8da 3000 	ldr.w	r3, [sl]
 8004a6e:	4499      	add	r9, r3
 8004a70:	2200      	movs	r2, #0
 8004a72:	2300      	movs	r3, #0
 8004a74:	4620      	mov	r0, r4
 8004a76:	4631      	mov	r1, r6
 8004a78:	f7fc f802 	bl	8000a80 <__aeabi_dcmpeq>
 8004a7c:	b938      	cbnz	r0, 8004a8e <__cvt+0xa2>
 8004a7e:	2230      	movs	r2, #48	; 0x30
 8004a80:	9b07      	ldr	r3, [sp, #28]
 8004a82:	454b      	cmp	r3, r9
 8004a84:	d205      	bcs.n	8004a92 <__cvt+0xa6>
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	9107      	str	r1, [sp, #28]
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	e7f8      	b.n	8004a80 <__cvt+0x94>
 8004a8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a92:	4640      	mov	r0, r8
 8004a94:	9b07      	ldr	r3, [sp, #28]
 8004a96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004a98:	eba3 0308 	sub.w	r3, r3, r8
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	b008      	add	sp, #32
 8004aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004aa4 <__exponent>:
 8004aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aa6:	2900      	cmp	r1, #0
 8004aa8:	bfb4      	ite	lt
 8004aaa:	232d      	movlt	r3, #45	; 0x2d
 8004aac:	232b      	movge	r3, #43	; 0x2b
 8004aae:	4604      	mov	r4, r0
 8004ab0:	bfb8      	it	lt
 8004ab2:	4249      	neglt	r1, r1
 8004ab4:	2909      	cmp	r1, #9
 8004ab6:	f804 2b02 	strb.w	r2, [r4], #2
 8004aba:	7043      	strb	r3, [r0, #1]
 8004abc:	dd21      	ble.n	8004b02 <__exponent+0x5e>
 8004abe:	f10d 0307 	add.w	r3, sp, #7
 8004ac2:	461f      	mov	r7, r3
 8004ac4:	260a      	movs	r6, #10
 8004ac6:	fb91 f5f6 	sdiv	r5, r1, r6
 8004aca:	fb06 1115 	mls	r1, r6, r5, r1
 8004ace:	2d09      	cmp	r5, #9
 8004ad0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004ad4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ad8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004adc:	4629      	mov	r1, r5
 8004ade:	dc09      	bgt.n	8004af4 <__exponent+0x50>
 8004ae0:	3130      	adds	r1, #48	; 0x30
 8004ae2:	3b02      	subs	r3, #2
 8004ae4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004ae8:	42bb      	cmp	r3, r7
 8004aea:	4622      	mov	r2, r4
 8004aec:	d304      	bcc.n	8004af8 <__exponent+0x54>
 8004aee:	1a10      	subs	r0, r2, r0
 8004af0:	b003      	add	sp, #12
 8004af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af4:	4613      	mov	r3, r2
 8004af6:	e7e6      	b.n	8004ac6 <__exponent+0x22>
 8004af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004afc:	f804 2b01 	strb.w	r2, [r4], #1
 8004b00:	e7f2      	b.n	8004ae8 <__exponent+0x44>
 8004b02:	2330      	movs	r3, #48	; 0x30
 8004b04:	4419      	add	r1, r3
 8004b06:	7083      	strb	r3, [r0, #2]
 8004b08:	1d02      	adds	r2, r0, #4
 8004b0a:	70c1      	strb	r1, [r0, #3]
 8004b0c:	e7ef      	b.n	8004aee <__exponent+0x4a>
	...

08004b10 <_printf_float>:
 8004b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	b091      	sub	sp, #68	; 0x44
 8004b16:	460c      	mov	r4, r1
 8004b18:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004b1a:	4693      	mov	fp, r2
 8004b1c:	461e      	mov	r6, r3
 8004b1e:	4605      	mov	r5, r0
 8004b20:	f001 f8e6 	bl	8005cf0 <_localeconv_r>
 8004b24:	6803      	ldr	r3, [r0, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2a:	f7fb fb7d 	bl	8000228 <strlen>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	930e      	str	r3, [sp, #56]	; 0x38
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	900a      	str	r0, [sp, #40]	; 0x28
 8004b36:	3307      	adds	r3, #7
 8004b38:	f023 0307 	bic.w	r3, r3, #7
 8004b3c:	f103 0208 	add.w	r2, r3, #8
 8004b40:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004b44:	f8d4 a000 	ldr.w	sl, [r4]
 8004b48:	603a      	str	r2, [r7, #0]
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b52:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004b56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b60:	4ba6      	ldr	r3, [pc, #664]	; (8004dfc <_printf_float+0x2ec>)
 8004b62:	4638      	mov	r0, r7
 8004b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b66:	f7fb ffbd 	bl	8000ae4 <__aeabi_dcmpun>
 8004b6a:	bb68      	cbnz	r0, 8004bc8 <_printf_float+0xb8>
 8004b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b70:	4ba2      	ldr	r3, [pc, #648]	; (8004dfc <_printf_float+0x2ec>)
 8004b72:	4638      	mov	r0, r7
 8004b74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b76:	f7fb ff97 	bl	8000aa8 <__aeabi_dcmple>
 8004b7a:	bb28      	cbnz	r0, 8004bc8 <_printf_float+0xb8>
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2300      	movs	r3, #0
 8004b80:	4638      	mov	r0, r7
 8004b82:	4649      	mov	r1, r9
 8004b84:	f7fb ff86 	bl	8000a94 <__aeabi_dcmplt>
 8004b88:	b110      	cbz	r0, 8004b90 <_printf_float+0x80>
 8004b8a:	232d      	movs	r3, #45	; 0x2d
 8004b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b90:	4f9b      	ldr	r7, [pc, #620]	; (8004e00 <_printf_float+0x2f0>)
 8004b92:	4b9c      	ldr	r3, [pc, #624]	; (8004e04 <_printf_float+0x2f4>)
 8004b94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b98:	bf98      	it	ls
 8004b9a:	461f      	movls	r7, r3
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	f04f 0900 	mov.w	r9, #0
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	f02a 0304 	bic.w	r3, sl, #4
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	9600      	str	r6, [sp, #0]
 8004bac:	465b      	mov	r3, fp
 8004bae:	aa0f      	add	r2, sp, #60	; 0x3c
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f9e2 	bl	8004f7c <_printf_common>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f040 8090 	bne.w	8004cde <_printf_float+0x1ce>
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc2:	b011      	add	sp, #68	; 0x44
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc8:	463a      	mov	r2, r7
 8004bca:	464b      	mov	r3, r9
 8004bcc:	4638      	mov	r0, r7
 8004bce:	4649      	mov	r1, r9
 8004bd0:	f7fb ff88 	bl	8000ae4 <__aeabi_dcmpun>
 8004bd4:	b110      	cbz	r0, 8004bdc <_printf_float+0xcc>
 8004bd6:	4f8c      	ldr	r7, [pc, #560]	; (8004e08 <_printf_float+0x2f8>)
 8004bd8:	4b8c      	ldr	r3, [pc, #560]	; (8004e0c <_printf_float+0x2fc>)
 8004bda:	e7db      	b.n	8004b94 <_printf_float+0x84>
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004be2:	1c59      	adds	r1, r3, #1
 8004be4:	a80d      	add	r0, sp, #52	; 0x34
 8004be6:	a90e      	add	r1, sp, #56	; 0x38
 8004be8:	d140      	bne.n	8004c6c <_printf_float+0x15c>
 8004bea:	2306      	movs	r3, #6
 8004bec:	6063      	str	r3, [r4, #4]
 8004bee:	f04f 0c00 	mov.w	ip, #0
 8004bf2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004bf6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004bfa:	6863      	ldr	r3, [r4, #4]
 8004bfc:	6022      	str	r2, [r4, #0]
 8004bfe:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	463a      	mov	r2, r7
 8004c06:	464b      	mov	r3, r9
 8004c08:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f7ff feed 	bl	80049ec <__cvt>
 8004c12:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004c16:	2b47      	cmp	r3, #71	; 0x47
 8004c18:	4607      	mov	r7, r0
 8004c1a:	d109      	bne.n	8004c30 <_printf_float+0x120>
 8004c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c1e:	1cd8      	adds	r0, r3, #3
 8004c20:	db02      	blt.n	8004c28 <_printf_float+0x118>
 8004c22:	6862      	ldr	r2, [r4, #4]
 8004c24:	4293      	cmp	r3, r2
 8004c26:	dd47      	ble.n	8004cb8 <_printf_float+0x1a8>
 8004c28:	f1a8 0802 	sub.w	r8, r8, #2
 8004c2c:	fa5f f888 	uxtb.w	r8, r8
 8004c30:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004c34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c36:	d824      	bhi.n	8004c82 <_printf_float+0x172>
 8004c38:	3901      	subs	r1, #1
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c40:	910d      	str	r1, [sp, #52]	; 0x34
 8004c42:	f7ff ff2f 	bl	8004aa4 <__exponent>
 8004c46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c48:	4681      	mov	r9, r0
 8004c4a:	1813      	adds	r3, r2, r0
 8004c4c:	2a01      	cmp	r2, #1
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	dc02      	bgt.n	8004c58 <_printf_float+0x148>
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	07d1      	lsls	r1, r2, #31
 8004c56:	d501      	bpl.n	8004c5c <_printf_float+0x14c>
 8004c58:	3301      	adds	r3, #1
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0a2      	beq.n	8004baa <_printf_float+0x9a>
 8004c64:	232d      	movs	r3, #45	; 0x2d
 8004c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c6a:	e79e      	b.n	8004baa <_printf_float+0x9a>
 8004c6c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004c70:	f000 816e 	beq.w	8004f50 <_printf_float+0x440>
 8004c74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c78:	d1b9      	bne.n	8004bee <_printf_float+0xde>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1b7      	bne.n	8004bee <_printf_float+0xde>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e7b4      	b.n	8004bec <_printf_float+0xdc>
 8004c82:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004c86:	d119      	bne.n	8004cbc <_printf_float+0x1ac>
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	6863      	ldr	r3, [r4, #4]
 8004c8c:	dd0c      	ble.n	8004ca8 <_printf_float+0x198>
 8004c8e:	6121      	str	r1, [r4, #16]
 8004c90:	b913      	cbnz	r3, 8004c98 <_printf_float+0x188>
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	07d2      	lsls	r2, r2, #31
 8004c96:	d502      	bpl.n	8004c9e <_printf_float+0x18e>
 8004c98:	3301      	adds	r3, #1
 8004c9a:	440b      	add	r3, r1
 8004c9c:	6123      	str	r3, [r4, #16]
 8004c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ca0:	f04f 0900 	mov.w	r9, #0
 8004ca4:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ca6:	e7d9      	b.n	8004c5c <_printf_float+0x14c>
 8004ca8:	b913      	cbnz	r3, 8004cb0 <_printf_float+0x1a0>
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	07d0      	lsls	r0, r2, #31
 8004cae:	d501      	bpl.n	8004cb4 <_printf_float+0x1a4>
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	e7f3      	b.n	8004c9c <_printf_float+0x18c>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e7f1      	b.n	8004c9c <_printf_float+0x18c>
 8004cb8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004cbc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	db05      	blt.n	8004cd0 <_printf_float+0x1c0>
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	6123      	str	r3, [r4, #16]
 8004cc8:	07d1      	lsls	r1, r2, #31
 8004cca:	d5e8      	bpl.n	8004c9e <_printf_float+0x18e>
 8004ccc:	3301      	adds	r3, #1
 8004cce:	e7e5      	b.n	8004c9c <_printf_float+0x18c>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bfcc      	ite	gt
 8004cd4:	2301      	movgt	r3, #1
 8004cd6:	f1c3 0302 	rsble	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	e7de      	b.n	8004c9c <_printf_float+0x18c>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	055a      	lsls	r2, r3, #21
 8004ce2:	d407      	bmi.n	8004cf4 <_printf_float+0x1e4>
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	463a      	mov	r2, r7
 8004ce8:	4659      	mov	r1, fp
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b0      	blx	r6
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d129      	bne.n	8004d46 <_printf_float+0x236>
 8004cf2:	e764      	b.n	8004bbe <_printf_float+0xae>
 8004cf4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004cf8:	f240 80d7 	bls.w	8004eaa <_printf_float+0x39a>
 8004cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d00:	2200      	movs	r2, #0
 8004d02:	2300      	movs	r3, #0
 8004d04:	f7fb febc 	bl	8000a80 <__aeabi_dcmpeq>
 8004d08:	b388      	cbz	r0, 8004d6e <_printf_float+0x25e>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4a40      	ldr	r2, [pc, #256]	; (8004e10 <_printf_float+0x300>)
 8004d0e:	4659      	mov	r1, fp
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b0      	blx	r6
 8004d14:	3001      	adds	r0, #1
 8004d16:	f43f af52 	beq.w	8004bbe <_printf_float+0xae>
 8004d1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	db02      	blt.n	8004d28 <_printf_float+0x218>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	07d8      	lsls	r0, r3, #31
 8004d26:	d50e      	bpl.n	8004d46 <_printf_float+0x236>
 8004d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b0      	blx	r6
 8004d32:	3001      	adds	r0, #1
 8004d34:	f43f af43 	beq.w	8004bbe <_printf_float+0xae>
 8004d38:	2700      	movs	r7, #0
 8004d3a:	f104 081a 	add.w	r8, r4, #26
 8004d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d40:	3b01      	subs	r3, #1
 8004d42:	42bb      	cmp	r3, r7
 8004d44:	dc09      	bgt.n	8004d5a <_printf_float+0x24a>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	079f      	lsls	r7, r3, #30
 8004d4a:	f100 80fd 	bmi.w	8004f48 <_printf_float+0x438>
 8004d4e:	68e0      	ldr	r0, [r4, #12]
 8004d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d52:	4298      	cmp	r0, r3
 8004d54:	bfb8      	it	lt
 8004d56:	4618      	movlt	r0, r3
 8004d58:	e733      	b.n	8004bc2 <_printf_float+0xb2>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	4659      	mov	r1, fp
 8004d60:	4628      	mov	r0, r5
 8004d62:	47b0      	blx	r6
 8004d64:	3001      	adds	r0, #1
 8004d66:	f43f af2a 	beq.w	8004bbe <_printf_float+0xae>
 8004d6a:	3701      	adds	r7, #1
 8004d6c:	e7e7      	b.n	8004d3e <_printf_float+0x22e>
 8004d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	dc2b      	bgt.n	8004dcc <_printf_float+0x2bc>
 8004d74:	2301      	movs	r3, #1
 8004d76:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <_printf_float+0x300>)
 8004d78:	4659      	mov	r1, fp
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	47b0      	blx	r6
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f43f af1d 	beq.w	8004bbe <_printf_float+0xae>
 8004d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d86:	b923      	cbnz	r3, 8004d92 <_printf_float+0x282>
 8004d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d8a:	b913      	cbnz	r3, 8004d92 <_printf_float+0x282>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	07d9      	lsls	r1, r3, #31
 8004d90:	d5d9      	bpl.n	8004d46 <_printf_float+0x236>
 8004d92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d96:	4659      	mov	r1, fp
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b0      	blx	r6
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f af0e 	beq.w	8004bbe <_printf_float+0xae>
 8004da2:	f04f 0800 	mov.w	r8, #0
 8004da6:	f104 091a 	add.w	r9, r4, #26
 8004daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dac:	425b      	negs	r3, r3
 8004dae:	4543      	cmp	r3, r8
 8004db0:	dc01      	bgt.n	8004db6 <_printf_float+0x2a6>
 8004db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004db4:	e797      	b.n	8004ce6 <_printf_float+0x1d6>
 8004db6:	2301      	movs	r3, #1
 8004db8:	464a      	mov	r2, r9
 8004dba:	4659      	mov	r1, fp
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b0      	blx	r6
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	f43f aefc 	beq.w	8004bbe <_printf_float+0xae>
 8004dc6:	f108 0801 	add.w	r8, r8, #1
 8004dca:	e7ee      	b.n	8004daa <_printf_float+0x29a>
 8004dcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bfa8      	it	ge
 8004dd4:	461a      	movge	r2, r3
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	4690      	mov	r8, r2
 8004dda:	dd07      	ble.n	8004dec <_printf_float+0x2dc>
 8004ddc:	4613      	mov	r3, r2
 8004dde:	4659      	mov	r1, fp
 8004de0:	463a      	mov	r2, r7
 8004de2:	4628      	mov	r0, r5
 8004de4:	47b0      	blx	r6
 8004de6:	3001      	adds	r0, #1
 8004de8:	f43f aee9 	beq.w	8004bbe <_printf_float+0xae>
 8004dec:	f104 031a 	add.w	r3, r4, #26
 8004df0:	f04f 0a00 	mov.w	sl, #0
 8004df4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dfa:	e015      	b.n	8004e28 <_printf_float+0x318>
 8004dfc:	7fefffff 	.word	0x7fefffff
 8004e00:	08006964 	.word	0x08006964
 8004e04:	08006960 	.word	0x08006960
 8004e08:	0800696c 	.word	0x0800696c
 8004e0c:	08006968 	.word	0x08006968
 8004e10:	08006970 	.word	0x08006970
 8004e14:	2301      	movs	r3, #1
 8004e16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e18:	4659      	mov	r1, fp
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b0      	blx	r6
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f43f aecd 	beq.w	8004bbe <_printf_float+0xae>
 8004e24:	f10a 0a01 	add.w	sl, sl, #1
 8004e28:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004e2c:	eba9 0308 	sub.w	r3, r9, r8
 8004e30:	4553      	cmp	r3, sl
 8004e32:	dcef      	bgt.n	8004e14 <_printf_float+0x304>
 8004e34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	444f      	add	r7, r9
 8004e3c:	db14      	blt.n	8004e68 <_printf_float+0x358>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	07da      	lsls	r2, r3, #31
 8004e42:	d411      	bmi.n	8004e68 <_printf_float+0x358>
 8004e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e46:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e48:	eba3 0209 	sub.w	r2, r3, r9
 8004e4c:	eba3 0901 	sub.w	r9, r3, r1
 8004e50:	4591      	cmp	r9, r2
 8004e52:	bfa8      	it	ge
 8004e54:	4691      	movge	r9, r2
 8004e56:	f1b9 0f00 	cmp.w	r9, #0
 8004e5a:	dc0d      	bgt.n	8004e78 <_printf_float+0x368>
 8004e5c:	2700      	movs	r7, #0
 8004e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e62:	f104 081a 	add.w	r8, r4, #26
 8004e66:	e018      	b.n	8004e9a <_printf_float+0x38a>
 8004e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b0      	blx	r6
 8004e72:	3001      	adds	r0, #1
 8004e74:	d1e6      	bne.n	8004e44 <_printf_float+0x334>
 8004e76:	e6a2      	b.n	8004bbe <_printf_float+0xae>
 8004e78:	464b      	mov	r3, r9
 8004e7a:	463a      	mov	r2, r7
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	4628      	mov	r0, r5
 8004e80:	47b0      	blx	r6
 8004e82:	3001      	adds	r0, #1
 8004e84:	d1ea      	bne.n	8004e5c <_printf_float+0x34c>
 8004e86:	e69a      	b.n	8004bbe <_printf_float+0xae>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4642      	mov	r2, r8
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b0      	blx	r6
 8004e92:	3001      	adds	r0, #1
 8004e94:	f43f ae93 	beq.w	8004bbe <_printf_float+0xae>
 8004e98:	3701      	adds	r7, #1
 8004e9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	eba3 0309 	sub.w	r3, r3, r9
 8004ea4:	42bb      	cmp	r3, r7
 8004ea6:	dcef      	bgt.n	8004e88 <_printf_float+0x378>
 8004ea8:	e74d      	b.n	8004d46 <_printf_float+0x236>
 8004eaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eac:	2a01      	cmp	r2, #1
 8004eae:	dc01      	bgt.n	8004eb4 <_printf_float+0x3a4>
 8004eb0:	07db      	lsls	r3, r3, #31
 8004eb2:	d538      	bpl.n	8004f26 <_printf_float+0x416>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	463a      	mov	r2, r7
 8004eb8:	4659      	mov	r1, fp
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b0      	blx	r6
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	f43f ae7d 	beq.w	8004bbe <_printf_float+0xae>
 8004ec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ec8:	4659      	mov	r1, fp
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b0      	blx	r6
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f107 0701 	add.w	r7, r7, #1
 8004ed4:	f43f ae73 	beq.w	8004bbe <_printf_float+0xae>
 8004ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f7fb fdcb 	bl	8000a80 <__aeabi_dcmpeq>
 8004eea:	b9c0      	cbnz	r0, 8004f1e <_printf_float+0x40e>
 8004eec:	4643      	mov	r3, r8
 8004eee:	463a      	mov	r2, r7
 8004ef0:	4659      	mov	r1, fp
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	47b0      	blx	r6
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d10d      	bne.n	8004f16 <_printf_float+0x406>
 8004efa:	e660      	b.n	8004bbe <_printf_float+0xae>
 8004efc:	2301      	movs	r3, #1
 8004efe:	4642      	mov	r2, r8
 8004f00:	4659      	mov	r1, fp
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b0      	blx	r6
 8004f06:	3001      	adds	r0, #1
 8004f08:	f43f ae59 	beq.w	8004bbe <_printf_float+0xae>
 8004f0c:	3701      	adds	r7, #1
 8004f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f10:	3b01      	subs	r3, #1
 8004f12:	42bb      	cmp	r3, r7
 8004f14:	dcf2      	bgt.n	8004efc <_printf_float+0x3ec>
 8004f16:	464b      	mov	r3, r9
 8004f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f1c:	e6e4      	b.n	8004ce8 <_printf_float+0x1d8>
 8004f1e:	2700      	movs	r7, #0
 8004f20:	f104 081a 	add.w	r8, r4, #26
 8004f24:	e7f3      	b.n	8004f0e <_printf_float+0x3fe>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e7e1      	b.n	8004eee <_printf_float+0x3de>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	4659      	mov	r1, fp
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b0      	blx	r6
 8004f34:	3001      	adds	r0, #1
 8004f36:	f43f ae42 	beq.w	8004bbe <_printf_float+0xae>
 8004f3a:	3701      	adds	r7, #1
 8004f3c:	68e3      	ldr	r3, [r4, #12]
 8004f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	42bb      	cmp	r3, r7
 8004f44:	dcf1      	bgt.n	8004f2a <_printf_float+0x41a>
 8004f46:	e702      	b.n	8004d4e <_printf_float+0x23e>
 8004f48:	2700      	movs	r7, #0
 8004f4a:	f104 0819 	add.w	r8, r4, #25
 8004f4e:	e7f5      	b.n	8004f3c <_printf_float+0x42c>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f43f ae94 	beq.w	8004c7e <_printf_float+0x16e>
 8004f56:	f04f 0c00 	mov.w	ip, #0
 8004f5a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004f5e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004f62:	6022      	str	r2, [r4, #0]
 8004f64:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004f68:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	463a      	mov	r2, r7
 8004f70:	464b      	mov	r3, r9
 8004f72:	4628      	mov	r0, r5
 8004f74:	f7ff fd3a 	bl	80049ec <__cvt>
 8004f78:	4607      	mov	r7, r0
 8004f7a:	e64f      	b.n	8004c1c <_printf_float+0x10c>

08004f7c <_printf_common>:
 8004f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f80:	4691      	mov	r9, r2
 8004f82:	461f      	mov	r7, r3
 8004f84:	688a      	ldr	r2, [r1, #8]
 8004f86:	690b      	ldr	r3, [r1, #16]
 8004f88:	4606      	mov	r6, r0
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	bfb8      	it	lt
 8004f8e:	4613      	movlt	r3, r2
 8004f90:	f8c9 3000 	str.w	r3, [r9]
 8004f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f98:	460c      	mov	r4, r1
 8004f9a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f9e:	b112      	cbz	r2, 8004fa6 <_printf_common+0x2a>
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	f8c9 3000 	str.w	r3, [r9]
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	0699      	lsls	r1, r3, #26
 8004faa:	bf42      	ittt	mi
 8004fac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fb0:	3302      	addmi	r3, #2
 8004fb2:	f8c9 3000 	strmi.w	r3, [r9]
 8004fb6:	6825      	ldr	r5, [r4, #0]
 8004fb8:	f015 0506 	ands.w	r5, r5, #6
 8004fbc:	d107      	bne.n	8004fce <_printf_common+0x52>
 8004fbe:	f104 0a19 	add.w	sl, r4, #25
 8004fc2:	68e3      	ldr	r3, [r4, #12]
 8004fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	42ab      	cmp	r3, r5
 8004fcc:	dc29      	bgt.n	8005022 <_printf_common+0xa6>
 8004fce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	3300      	adds	r3, #0
 8004fd6:	bf18      	it	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	0692      	lsls	r2, r2, #26
 8004fdc:	d42e      	bmi.n	800503c <_printf_common+0xc0>
 8004fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	47c0      	blx	r8
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d021      	beq.n	8005030 <_printf_common+0xb4>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	68e5      	ldr	r5, [r4, #12]
 8004ff0:	f003 0306 	and.w	r3, r3, #6
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	bf18      	it	ne
 8004ff8:	2500      	movne	r5, #0
 8004ffa:	f8d9 2000 	ldr.w	r2, [r9]
 8004ffe:	f04f 0900 	mov.w	r9, #0
 8005002:	bf08      	it	eq
 8005004:	1aad      	subeq	r5, r5, r2
 8005006:	68a3      	ldr	r3, [r4, #8]
 8005008:	6922      	ldr	r2, [r4, #16]
 800500a:	bf08      	it	eq
 800500c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005010:	4293      	cmp	r3, r2
 8005012:	bfc4      	itt	gt
 8005014:	1a9b      	subgt	r3, r3, r2
 8005016:	18ed      	addgt	r5, r5, r3
 8005018:	341a      	adds	r4, #26
 800501a:	454d      	cmp	r5, r9
 800501c:	d11a      	bne.n	8005054 <_printf_common+0xd8>
 800501e:	2000      	movs	r0, #0
 8005020:	e008      	b.n	8005034 <_printf_common+0xb8>
 8005022:	2301      	movs	r3, #1
 8005024:	4652      	mov	r2, sl
 8005026:	4639      	mov	r1, r7
 8005028:	4630      	mov	r0, r6
 800502a:	47c0      	blx	r8
 800502c:	3001      	adds	r0, #1
 800502e:	d103      	bne.n	8005038 <_printf_common+0xbc>
 8005030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005038:	3501      	adds	r5, #1
 800503a:	e7c2      	b.n	8004fc2 <_printf_common+0x46>
 800503c:	2030      	movs	r0, #48	; 0x30
 800503e:	18e1      	adds	r1, r4, r3
 8005040:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800504a:	4422      	add	r2, r4
 800504c:	3302      	adds	r3, #2
 800504e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005052:	e7c4      	b.n	8004fde <_printf_common+0x62>
 8005054:	2301      	movs	r3, #1
 8005056:	4622      	mov	r2, r4
 8005058:	4639      	mov	r1, r7
 800505a:	4630      	mov	r0, r6
 800505c:	47c0      	blx	r8
 800505e:	3001      	adds	r0, #1
 8005060:	d0e6      	beq.n	8005030 <_printf_common+0xb4>
 8005062:	f109 0901 	add.w	r9, r9, #1
 8005066:	e7d8      	b.n	800501a <_printf_common+0x9e>

08005068 <quorem>:
 8005068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506c:	6903      	ldr	r3, [r0, #16]
 800506e:	690c      	ldr	r4, [r1, #16]
 8005070:	4680      	mov	r8, r0
 8005072:	42a3      	cmp	r3, r4
 8005074:	f2c0 8084 	blt.w	8005180 <quorem+0x118>
 8005078:	3c01      	subs	r4, #1
 800507a:	f101 0714 	add.w	r7, r1, #20
 800507e:	f100 0614 	add.w	r6, r0, #20
 8005082:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005086:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800508a:	3501      	adds	r5, #1
 800508c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005090:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005094:	eb06 030c 	add.w	r3, r6, ip
 8005098:	eb07 090c 	add.w	r9, r7, ip
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	b39d      	cbz	r5, 8005108 <quorem+0xa0>
 80050a0:	f04f 0a00 	mov.w	sl, #0
 80050a4:	4638      	mov	r0, r7
 80050a6:	46b6      	mov	lr, r6
 80050a8:	46d3      	mov	fp, sl
 80050aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80050ae:	b293      	uxth	r3, r2
 80050b0:	fb05 a303 	mla	r3, r5, r3, sl
 80050b4:	0c12      	lsrs	r2, r2, #16
 80050b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80050ba:	fb05 a202 	mla	r2, r5, r2, sl
 80050be:	b29b      	uxth	r3, r3
 80050c0:	ebab 0303 	sub.w	r3, fp, r3
 80050c4:	f8de b000 	ldr.w	fp, [lr]
 80050c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80050cc:	fa1f fb8b 	uxth.w	fp, fp
 80050d0:	445b      	add	r3, fp
 80050d2:	fa1f fb82 	uxth.w	fp, r2
 80050d6:	f8de 2000 	ldr.w	r2, [lr]
 80050da:	4581      	cmp	r9, r0
 80050dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80050e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050ea:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80050ee:	f84e 3b04 	str.w	r3, [lr], #4
 80050f2:	d2da      	bcs.n	80050aa <quorem+0x42>
 80050f4:	f856 300c 	ldr.w	r3, [r6, ip]
 80050f8:	b933      	cbnz	r3, 8005108 <quorem+0xa0>
 80050fa:	9b01      	ldr	r3, [sp, #4]
 80050fc:	3b04      	subs	r3, #4
 80050fe:	429e      	cmp	r6, r3
 8005100:	461a      	mov	r2, r3
 8005102:	d331      	bcc.n	8005168 <quorem+0x100>
 8005104:	f8c8 4010 	str.w	r4, [r8, #16]
 8005108:	4640      	mov	r0, r8
 800510a:	f001 f827 	bl	800615c <__mcmp>
 800510e:	2800      	cmp	r0, #0
 8005110:	db26      	blt.n	8005160 <quorem+0xf8>
 8005112:	4630      	mov	r0, r6
 8005114:	f04f 0c00 	mov.w	ip, #0
 8005118:	3501      	adds	r5, #1
 800511a:	f857 1b04 	ldr.w	r1, [r7], #4
 800511e:	f8d0 e000 	ldr.w	lr, [r0]
 8005122:	b28b      	uxth	r3, r1
 8005124:	ebac 0303 	sub.w	r3, ip, r3
 8005128:	fa1f f28e 	uxth.w	r2, lr
 800512c:	4413      	add	r3, r2
 800512e:	0c0a      	lsrs	r2, r1, #16
 8005130:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005138:	b29b      	uxth	r3, r3
 800513a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800513e:	45b9      	cmp	r9, r7
 8005140:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005144:	f840 3b04 	str.w	r3, [r0], #4
 8005148:	d2e7      	bcs.n	800511a <quorem+0xb2>
 800514a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800514e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005152:	b92a      	cbnz	r2, 8005160 <quorem+0xf8>
 8005154:	3b04      	subs	r3, #4
 8005156:	429e      	cmp	r6, r3
 8005158:	461a      	mov	r2, r3
 800515a:	d30b      	bcc.n	8005174 <quorem+0x10c>
 800515c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005160:	4628      	mov	r0, r5
 8005162:	b003      	add	sp, #12
 8005164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	3b04      	subs	r3, #4
 800516c:	2a00      	cmp	r2, #0
 800516e:	d1c9      	bne.n	8005104 <quorem+0x9c>
 8005170:	3c01      	subs	r4, #1
 8005172:	e7c4      	b.n	80050fe <quorem+0x96>
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	3b04      	subs	r3, #4
 8005178:	2a00      	cmp	r2, #0
 800517a:	d1ef      	bne.n	800515c <quorem+0xf4>
 800517c:	3c01      	subs	r4, #1
 800517e:	e7ea      	b.n	8005156 <quorem+0xee>
 8005180:	2000      	movs	r0, #0
 8005182:	e7ee      	b.n	8005162 <quorem+0xfa>
 8005184:	0000      	movs	r0, r0
	...

08005188 <_dtoa_r>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	4616      	mov	r6, r2
 800518e:	461f      	mov	r7, r3
 8005190:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005192:	b095      	sub	sp, #84	; 0x54
 8005194:	4604      	mov	r4, r0
 8005196:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800519a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800519e:	b93d      	cbnz	r5, 80051b0 <_dtoa_r+0x28>
 80051a0:	2010      	movs	r0, #16
 80051a2:	f000 fdb3 	bl	8005d0c <malloc>
 80051a6:	6260      	str	r0, [r4, #36]	; 0x24
 80051a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051ac:	6005      	str	r5, [r0, #0]
 80051ae:	60c5      	str	r5, [r0, #12]
 80051b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	b151      	cbz	r1, 80051cc <_dtoa_r+0x44>
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	2301      	movs	r3, #1
 80051ba:	4093      	lsls	r3, r2
 80051bc:	604a      	str	r2, [r1, #4]
 80051be:	608b      	str	r3, [r1, #8]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 fdea 	bl	8005d9a <_Bfree>
 80051c6:	2200      	movs	r2, #0
 80051c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	1e3b      	subs	r3, r7, #0
 80051ce:	bfaf      	iteee	ge
 80051d0:	2300      	movge	r3, #0
 80051d2:	2201      	movlt	r2, #1
 80051d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80051d8:	9303      	strlt	r3, [sp, #12]
 80051da:	bfac      	ite	ge
 80051dc:	f8c8 3000 	strge.w	r3, [r8]
 80051e0:	f8c8 2000 	strlt.w	r2, [r8]
 80051e4:	4bae      	ldr	r3, [pc, #696]	; (80054a0 <_dtoa_r+0x318>)
 80051e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80051ea:	ea33 0308 	bics.w	r3, r3, r8
 80051ee:	d11b      	bne.n	8005228 <_dtoa_r+0xa0>
 80051f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80051f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	9b02      	ldr	r3, [sp, #8]
 80051fa:	b923      	cbnz	r3, 8005206 <_dtoa_r+0x7e>
 80051fc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005200:	2800      	cmp	r0, #0
 8005202:	f000 8545 	beq.w	8005c90 <_dtoa_r+0xb08>
 8005206:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005208:	b953      	cbnz	r3, 8005220 <_dtoa_r+0x98>
 800520a:	4ba6      	ldr	r3, [pc, #664]	; (80054a4 <_dtoa_r+0x31c>)
 800520c:	e021      	b.n	8005252 <_dtoa_r+0xca>
 800520e:	4ba6      	ldr	r3, [pc, #664]	; (80054a8 <_dtoa_r+0x320>)
 8005210:	9306      	str	r3, [sp, #24]
 8005212:	3308      	adds	r3, #8
 8005214:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	9806      	ldr	r0, [sp, #24]
 800521a:	b015      	add	sp, #84	; 0x54
 800521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005220:	4ba0      	ldr	r3, [pc, #640]	; (80054a4 <_dtoa_r+0x31c>)
 8005222:	9306      	str	r3, [sp, #24]
 8005224:	3303      	adds	r3, #3
 8005226:	e7f5      	b.n	8005214 <_dtoa_r+0x8c>
 8005228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800522c:	2200      	movs	r2, #0
 800522e:	2300      	movs	r3, #0
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fb fc24 	bl	8000a80 <__aeabi_dcmpeq>
 8005238:	4682      	mov	sl, r0
 800523a:	b160      	cbz	r0, 8005256 <_dtoa_r+0xce>
 800523c:	2301      	movs	r3, #1
 800523e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8520 	beq.w	8005c8a <_dtoa_r+0xb02>
 800524a:	4b98      	ldr	r3, [pc, #608]	; (80054ac <_dtoa_r+0x324>)
 800524c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	3b01      	subs	r3, #1
 8005252:	9306      	str	r3, [sp, #24]
 8005254:	e7e0      	b.n	8005218 <_dtoa_r+0x90>
 8005256:	ab12      	add	r3, sp, #72	; 0x48
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	ab13      	add	r3, sp, #76	; 0x4c
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	4632      	mov	r2, r6
 8005260:	463b      	mov	r3, r7
 8005262:	4620      	mov	r0, r4
 8005264:	f000 fff2 	bl	800624c <__d2b>
 8005268:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800526c:	4683      	mov	fp, r0
 800526e:	2d00      	cmp	r5, #0
 8005270:	d07d      	beq.n	800536e <_dtoa_r+0x1e6>
 8005272:	46b0      	mov	r8, r6
 8005274:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005278:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800527c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005280:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005284:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005288:	2200      	movs	r2, #0
 800528a:	4b89      	ldr	r3, [pc, #548]	; (80054b0 <_dtoa_r+0x328>)
 800528c:	4640      	mov	r0, r8
 800528e:	4649      	mov	r1, r9
 8005290:	f7fa ffd6 	bl	8000240 <__aeabi_dsub>
 8005294:	a37c      	add	r3, pc, #496	; (adr r3, 8005488 <_dtoa_r+0x300>)
 8005296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529a:	f7fb f989 	bl	80005b0 <__aeabi_dmul>
 800529e:	a37c      	add	r3, pc, #496	; (adr r3, 8005490 <_dtoa_r+0x308>)
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f7fa ffce 	bl	8000244 <__adddf3>
 80052a8:	4606      	mov	r6, r0
 80052aa:	4628      	mov	r0, r5
 80052ac:	460f      	mov	r7, r1
 80052ae:	f7fb f915 	bl	80004dc <__aeabi_i2d>
 80052b2:	a379      	add	r3, pc, #484	; (adr r3, 8005498 <_dtoa_r+0x310>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	f7fb f97a 	bl	80005b0 <__aeabi_dmul>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4630      	mov	r0, r6
 80052c2:	4639      	mov	r1, r7
 80052c4:	f7fa ffbe 	bl	8000244 <__adddf3>
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	f7fb fc20 	bl	8000b10 <__aeabi_d2iz>
 80052d0:	2200      	movs	r2, #0
 80052d2:	4682      	mov	sl, r0
 80052d4:	2300      	movs	r3, #0
 80052d6:	4630      	mov	r0, r6
 80052d8:	4639      	mov	r1, r7
 80052da:	f7fb fbdb 	bl	8000a94 <__aeabi_dcmplt>
 80052de:	b148      	cbz	r0, 80052f4 <_dtoa_r+0x16c>
 80052e0:	4650      	mov	r0, sl
 80052e2:	f7fb f8fb 	bl	80004dc <__aeabi_i2d>
 80052e6:	4632      	mov	r2, r6
 80052e8:	463b      	mov	r3, r7
 80052ea:	f7fb fbc9 	bl	8000a80 <__aeabi_dcmpeq>
 80052ee:	b908      	cbnz	r0, 80052f4 <_dtoa_r+0x16c>
 80052f0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80052f4:	f1ba 0f16 	cmp.w	sl, #22
 80052f8:	d85a      	bhi.n	80053b0 <_dtoa_r+0x228>
 80052fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052fe:	496d      	ldr	r1, [pc, #436]	; (80054b4 <_dtoa_r+0x32c>)
 8005300:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005308:	f7fb fbe2 	bl	8000ad0 <__aeabi_dcmpgt>
 800530c:	2800      	cmp	r0, #0
 800530e:	d051      	beq.n	80053b4 <_dtoa_r+0x22c>
 8005310:	2300      	movs	r3, #0
 8005312:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005316:	930d      	str	r3, [sp, #52]	; 0x34
 8005318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800531a:	1b5d      	subs	r5, r3, r5
 800531c:	1e6b      	subs	r3, r5, #1
 800531e:	9307      	str	r3, [sp, #28]
 8005320:	bf43      	ittte	mi
 8005322:	2300      	movmi	r3, #0
 8005324:	f1c5 0901 	rsbmi	r9, r5, #1
 8005328:	9307      	strmi	r3, [sp, #28]
 800532a:	f04f 0900 	movpl.w	r9, #0
 800532e:	f1ba 0f00 	cmp.w	sl, #0
 8005332:	db41      	blt.n	80053b8 <_dtoa_r+0x230>
 8005334:	9b07      	ldr	r3, [sp, #28]
 8005336:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800533a:	4453      	add	r3, sl
 800533c:	9307      	str	r3, [sp, #28]
 800533e:	2300      	movs	r3, #0
 8005340:	9308      	str	r3, [sp, #32]
 8005342:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005344:	2b09      	cmp	r3, #9
 8005346:	f200 808f 	bhi.w	8005468 <_dtoa_r+0x2e0>
 800534a:	2b05      	cmp	r3, #5
 800534c:	bfc4      	itt	gt
 800534e:	3b04      	subgt	r3, #4
 8005350:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005352:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005354:	bfc8      	it	gt
 8005356:	2500      	movgt	r5, #0
 8005358:	f1a3 0302 	sub.w	r3, r3, #2
 800535c:	bfd8      	it	le
 800535e:	2501      	movle	r5, #1
 8005360:	2b03      	cmp	r3, #3
 8005362:	f200 808d 	bhi.w	8005480 <_dtoa_r+0x2f8>
 8005366:	e8df f003 	tbb	[pc, r3]
 800536a:	7d7b      	.short	0x7d7b
 800536c:	6f2f      	.short	0x6f2f
 800536e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005372:	441d      	add	r5, r3
 8005374:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005378:	2820      	cmp	r0, #32
 800537a:	dd13      	ble.n	80053a4 <_dtoa_r+0x21c>
 800537c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005380:	9b02      	ldr	r3, [sp, #8]
 8005382:	fa08 f800 	lsl.w	r8, r8, r0
 8005386:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800538a:	fa23 f000 	lsr.w	r0, r3, r0
 800538e:	ea48 0000 	orr.w	r0, r8, r0
 8005392:	f7fb f893 	bl	80004bc <__aeabi_ui2d>
 8005396:	2301      	movs	r3, #1
 8005398:	4680      	mov	r8, r0
 800539a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800539e:	3d01      	subs	r5, #1
 80053a0:	9310      	str	r3, [sp, #64]	; 0x40
 80053a2:	e771      	b.n	8005288 <_dtoa_r+0x100>
 80053a4:	9b02      	ldr	r3, [sp, #8]
 80053a6:	f1c0 0020 	rsb	r0, r0, #32
 80053aa:	fa03 f000 	lsl.w	r0, r3, r0
 80053ae:	e7f0      	b.n	8005392 <_dtoa_r+0x20a>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e7b0      	b.n	8005316 <_dtoa_r+0x18e>
 80053b4:	900d      	str	r0, [sp, #52]	; 0x34
 80053b6:	e7af      	b.n	8005318 <_dtoa_r+0x190>
 80053b8:	f1ca 0300 	rsb	r3, sl, #0
 80053bc:	9308      	str	r3, [sp, #32]
 80053be:	2300      	movs	r3, #0
 80053c0:	eba9 090a 	sub.w	r9, r9, sl
 80053c4:	930c      	str	r3, [sp, #48]	; 0x30
 80053c6:	e7bc      	b.n	8005342 <_dtoa_r+0x1ba>
 80053c8:	2301      	movs	r3, #1
 80053ca:	9309      	str	r3, [sp, #36]	; 0x24
 80053cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd74      	ble.n	80054bc <_dtoa_r+0x334>
 80053d2:	4698      	mov	r8, r3
 80053d4:	9304      	str	r3, [sp, #16]
 80053d6:	2200      	movs	r2, #0
 80053d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80053da:	6072      	str	r2, [r6, #4]
 80053dc:	2204      	movs	r2, #4
 80053de:	f102 0014 	add.w	r0, r2, #20
 80053e2:	4298      	cmp	r0, r3
 80053e4:	6871      	ldr	r1, [r6, #4]
 80053e6:	d96e      	bls.n	80054c6 <_dtoa_r+0x33e>
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 fca2 	bl	8005d32 <_Balloc>
 80053ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053f0:	6030      	str	r0, [r6, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f1b8 0f0e 	cmp.w	r8, #14
 80053f8:	9306      	str	r3, [sp, #24]
 80053fa:	f200 80ed 	bhi.w	80055d8 <_dtoa_r+0x450>
 80053fe:	2d00      	cmp	r5, #0
 8005400:	f000 80ea 	beq.w	80055d8 <_dtoa_r+0x450>
 8005404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005408:	f1ba 0f00 	cmp.w	sl, #0
 800540c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005410:	dd77      	ble.n	8005502 <_dtoa_r+0x37a>
 8005412:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <_dtoa_r+0x32c>)
 8005414:	f00a 030f 	and.w	r3, sl, #15
 8005418:	ea4f 162a 	mov.w	r6, sl, asr #4
 800541c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005420:	06f0      	lsls	r0, r6, #27
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800542a:	d568      	bpl.n	80054fe <_dtoa_r+0x376>
 800542c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005430:	4b21      	ldr	r3, [pc, #132]	; (80054b8 <_dtoa_r+0x330>)
 8005432:	2503      	movs	r5, #3
 8005434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005438:	f7fb f9e4 	bl	8000804 <__aeabi_ddiv>
 800543c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005440:	f006 060f 	and.w	r6, r6, #15
 8005444:	4f1c      	ldr	r7, [pc, #112]	; (80054b8 <_dtoa_r+0x330>)
 8005446:	e04f      	b.n	80054e8 <_dtoa_r+0x360>
 8005448:	2301      	movs	r3, #1
 800544a:	9309      	str	r3, [sp, #36]	; 0x24
 800544c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800544e:	4453      	add	r3, sl
 8005450:	f103 0801 	add.w	r8, r3, #1
 8005454:	9304      	str	r3, [sp, #16]
 8005456:	4643      	mov	r3, r8
 8005458:	2b01      	cmp	r3, #1
 800545a:	bfb8      	it	lt
 800545c:	2301      	movlt	r3, #1
 800545e:	e7ba      	b.n	80053d6 <_dtoa_r+0x24e>
 8005460:	2300      	movs	r3, #0
 8005462:	e7b2      	b.n	80053ca <_dtoa_r+0x242>
 8005464:	2300      	movs	r3, #0
 8005466:	e7f0      	b.n	800544a <_dtoa_r+0x2c2>
 8005468:	2501      	movs	r5, #1
 800546a:	2300      	movs	r3, #0
 800546c:	9509      	str	r5, [sp, #36]	; 0x24
 800546e:	931e      	str	r3, [sp, #120]	; 0x78
 8005470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005474:	2200      	movs	r2, #0
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	4698      	mov	r8, r3
 800547a:	2312      	movs	r3, #18
 800547c:	921f      	str	r2, [sp, #124]	; 0x7c
 800547e:	e7aa      	b.n	80053d6 <_dtoa_r+0x24e>
 8005480:	2301      	movs	r3, #1
 8005482:	9309      	str	r3, [sp, #36]	; 0x24
 8005484:	e7f4      	b.n	8005470 <_dtoa_r+0x2e8>
 8005486:	bf00      	nop
 8005488:	636f4361 	.word	0x636f4361
 800548c:	3fd287a7 	.word	0x3fd287a7
 8005490:	8b60c8b3 	.word	0x8b60c8b3
 8005494:	3fc68a28 	.word	0x3fc68a28
 8005498:	509f79fb 	.word	0x509f79fb
 800549c:	3fd34413 	.word	0x3fd34413
 80054a0:	7ff00000 	.word	0x7ff00000
 80054a4:	0800697b 	.word	0x0800697b
 80054a8:	08006972 	.word	0x08006972
 80054ac:	08006971 	.word	0x08006971
 80054b0:	3ff80000 	.word	0x3ff80000
 80054b4:	080069a8 	.word	0x080069a8
 80054b8:	08006980 	.word	0x08006980
 80054bc:	2301      	movs	r3, #1
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	4698      	mov	r8, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	e7da      	b.n	800547c <_dtoa_r+0x2f4>
 80054c6:	3101      	adds	r1, #1
 80054c8:	6071      	str	r1, [r6, #4]
 80054ca:	0052      	lsls	r2, r2, #1
 80054cc:	e787      	b.n	80053de <_dtoa_r+0x256>
 80054ce:	07f1      	lsls	r1, r6, #31
 80054d0:	d508      	bpl.n	80054e4 <_dtoa_r+0x35c>
 80054d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80054d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054da:	f7fb f869 	bl	80005b0 <__aeabi_dmul>
 80054de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054e2:	3501      	adds	r5, #1
 80054e4:	1076      	asrs	r6, r6, #1
 80054e6:	3708      	adds	r7, #8
 80054e8:	2e00      	cmp	r6, #0
 80054ea:	d1f0      	bne.n	80054ce <_dtoa_r+0x346>
 80054ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054f4:	f7fb f986 	bl	8000804 <__aeabi_ddiv>
 80054f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054fc:	e01b      	b.n	8005536 <_dtoa_r+0x3ae>
 80054fe:	2502      	movs	r5, #2
 8005500:	e7a0      	b.n	8005444 <_dtoa_r+0x2bc>
 8005502:	f000 80a4 	beq.w	800564e <_dtoa_r+0x4c6>
 8005506:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800550a:	f1ca 0600 	rsb	r6, sl, #0
 800550e:	4ba0      	ldr	r3, [pc, #640]	; (8005790 <_dtoa_r+0x608>)
 8005510:	f006 020f 	and.w	r2, r6, #15
 8005514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f7fb f848 	bl	80005b0 <__aeabi_dmul>
 8005520:	2502      	movs	r5, #2
 8005522:	2300      	movs	r3, #0
 8005524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005528:	4f9a      	ldr	r7, [pc, #616]	; (8005794 <_dtoa_r+0x60c>)
 800552a:	1136      	asrs	r6, r6, #4
 800552c:	2e00      	cmp	r6, #0
 800552e:	f040 8083 	bne.w	8005638 <_dtoa_r+0x4b0>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e0      	bne.n	80054f8 <_dtoa_r+0x370>
 8005536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 808a 	beq.w	8005652 <_dtoa_r+0x4ca>
 800553e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005542:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005546:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800554a:	2200      	movs	r2, #0
 800554c:	4b92      	ldr	r3, [pc, #584]	; (8005798 <_dtoa_r+0x610>)
 800554e:	f7fb faa1 	bl	8000a94 <__aeabi_dcmplt>
 8005552:	2800      	cmp	r0, #0
 8005554:	d07d      	beq.n	8005652 <_dtoa_r+0x4ca>
 8005556:	f1b8 0f00 	cmp.w	r8, #0
 800555a:	d07a      	beq.n	8005652 <_dtoa_r+0x4ca>
 800555c:	9b04      	ldr	r3, [sp, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	dd36      	ble.n	80055d0 <_dtoa_r+0x448>
 8005562:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005566:	2200      	movs	r2, #0
 8005568:	4b8c      	ldr	r3, [pc, #560]	; (800579c <_dtoa_r+0x614>)
 800556a:	f7fb f821 	bl	80005b0 <__aeabi_dmul>
 800556e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005572:	9e04      	ldr	r6, [sp, #16]
 8005574:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005578:	3501      	adds	r5, #1
 800557a:	4628      	mov	r0, r5
 800557c:	f7fa ffae 	bl	80004dc <__aeabi_i2d>
 8005580:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005584:	f7fb f814 	bl	80005b0 <__aeabi_dmul>
 8005588:	2200      	movs	r2, #0
 800558a:	4b85      	ldr	r3, [pc, #532]	; (80057a0 <_dtoa_r+0x618>)
 800558c:	f7fa fe5a 	bl	8000244 <__adddf3>
 8005590:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005594:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005598:	950b      	str	r5, [sp, #44]	; 0x2c
 800559a:	2e00      	cmp	r6, #0
 800559c:	d15c      	bne.n	8005658 <_dtoa_r+0x4d0>
 800559e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	4b7f      	ldr	r3, [pc, #508]	; (80057a4 <_dtoa_r+0x61c>)
 80055a6:	f7fa fe4b 	bl	8000240 <__aeabi_dsub>
 80055aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ac:	462b      	mov	r3, r5
 80055ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055b2:	f7fb fa8d 	bl	8000ad0 <__aeabi_dcmpgt>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f040 8281 	bne.w	8005abe <_dtoa_r+0x936>
 80055bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055c2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80055c6:	f7fb fa65 	bl	8000a94 <__aeabi_dcmplt>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	f040 8275 	bne.w	8005aba <_dtoa_r+0x932>
 80055d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80055d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f2c0 814b 	blt.w	8005876 <_dtoa_r+0x6ee>
 80055e0:	f1ba 0f0e 	cmp.w	sl, #14
 80055e4:	f300 8147 	bgt.w	8005876 <_dtoa_r+0x6ee>
 80055e8:	4b69      	ldr	r3, [pc, #420]	; (8005790 <_dtoa_r+0x608>)
 80055ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f280 80d7 	bge.w	80057ac <_dtoa_r+0x624>
 80055fe:	f1b8 0f00 	cmp.w	r8, #0
 8005602:	f300 80d3 	bgt.w	80057ac <_dtoa_r+0x624>
 8005606:	f040 8257 	bne.w	8005ab8 <_dtoa_r+0x930>
 800560a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800560e:	2200      	movs	r2, #0
 8005610:	4b64      	ldr	r3, [pc, #400]	; (80057a4 <_dtoa_r+0x61c>)
 8005612:	f7fa ffcd 	bl	80005b0 <__aeabi_dmul>
 8005616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800561a:	f7fb fa4f 	bl	8000abc <__aeabi_dcmpge>
 800561e:	4646      	mov	r6, r8
 8005620:	4647      	mov	r7, r8
 8005622:	2800      	cmp	r0, #0
 8005624:	f040 822d 	bne.w	8005a82 <_dtoa_r+0x8fa>
 8005628:	9b06      	ldr	r3, [sp, #24]
 800562a:	9a06      	ldr	r2, [sp, #24]
 800562c:	1c5d      	adds	r5, r3, #1
 800562e:	2331      	movs	r3, #49	; 0x31
 8005630:	f10a 0a01 	add.w	sl, sl, #1
 8005634:	7013      	strb	r3, [r2, #0]
 8005636:	e228      	b.n	8005a8a <_dtoa_r+0x902>
 8005638:	07f2      	lsls	r2, r6, #31
 800563a:	d505      	bpl.n	8005648 <_dtoa_r+0x4c0>
 800563c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005640:	f7fa ffb6 	bl	80005b0 <__aeabi_dmul>
 8005644:	2301      	movs	r3, #1
 8005646:	3501      	adds	r5, #1
 8005648:	1076      	asrs	r6, r6, #1
 800564a:	3708      	adds	r7, #8
 800564c:	e76e      	b.n	800552c <_dtoa_r+0x3a4>
 800564e:	2502      	movs	r5, #2
 8005650:	e771      	b.n	8005536 <_dtoa_r+0x3ae>
 8005652:	4657      	mov	r7, sl
 8005654:	4646      	mov	r6, r8
 8005656:	e790      	b.n	800557a <_dtoa_r+0x3f2>
 8005658:	4b4d      	ldr	r3, [pc, #308]	; (8005790 <_dtoa_r+0x608>)
 800565a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800565e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005664:	2b00      	cmp	r3, #0
 8005666:	d048      	beq.n	80056fa <_dtoa_r+0x572>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	2000      	movs	r0, #0
 800566e:	494e      	ldr	r1, [pc, #312]	; (80057a8 <_dtoa_r+0x620>)
 8005670:	f7fb f8c8 	bl	8000804 <__aeabi_ddiv>
 8005674:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005678:	f7fa fde2 	bl	8000240 <__aeabi_dsub>
 800567c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005680:	9d06      	ldr	r5, [sp, #24]
 8005682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005686:	f7fb fa43 	bl	8000b10 <__aeabi_d2iz>
 800568a:	9011      	str	r0, [sp, #68]	; 0x44
 800568c:	f7fa ff26 	bl	80004dc <__aeabi_i2d>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005698:	f7fa fdd2 	bl	8000240 <__aeabi_dsub>
 800569c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800569e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056a2:	3330      	adds	r3, #48	; 0x30
 80056a4:	f805 3b01 	strb.w	r3, [r5], #1
 80056a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056ac:	f7fb f9f2 	bl	8000a94 <__aeabi_dcmplt>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d163      	bne.n	800577c <_dtoa_r+0x5f4>
 80056b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056b8:	2000      	movs	r0, #0
 80056ba:	4937      	ldr	r1, [pc, #220]	; (8005798 <_dtoa_r+0x610>)
 80056bc:	f7fa fdc0 	bl	8000240 <__aeabi_dsub>
 80056c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056c4:	f7fb f9e6 	bl	8000a94 <__aeabi_dcmplt>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	f040 80b5 	bne.w	8005838 <_dtoa_r+0x6b0>
 80056ce:	9b06      	ldr	r3, [sp, #24]
 80056d0:	1aeb      	subs	r3, r5, r3
 80056d2:	429e      	cmp	r6, r3
 80056d4:	f77f af7c 	ble.w	80055d0 <_dtoa_r+0x448>
 80056d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056dc:	2200      	movs	r2, #0
 80056de:	4b2f      	ldr	r3, [pc, #188]	; (800579c <_dtoa_r+0x614>)
 80056e0:	f7fa ff66 	bl	80005b0 <__aeabi_dmul>
 80056e4:	2200      	movs	r2, #0
 80056e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ee:	4b2b      	ldr	r3, [pc, #172]	; (800579c <_dtoa_r+0x614>)
 80056f0:	f7fa ff5e 	bl	80005b0 <__aeabi_dmul>
 80056f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056f8:	e7c3      	b.n	8005682 <_dtoa_r+0x4fa>
 80056fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80056fe:	f7fa ff57 	bl	80005b0 <__aeabi_dmul>
 8005702:	9b06      	ldr	r3, [sp, #24]
 8005704:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005708:	199d      	adds	r5, r3, r6
 800570a:	461e      	mov	r6, r3
 800570c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005710:	f7fb f9fe 	bl	8000b10 <__aeabi_d2iz>
 8005714:	9011      	str	r0, [sp, #68]	; 0x44
 8005716:	f7fa fee1 	bl	80004dc <__aeabi_i2d>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005722:	f7fa fd8d 	bl	8000240 <__aeabi_dsub>
 8005726:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800572c:	3330      	adds	r3, #48	; 0x30
 800572e:	f806 3b01 	strb.w	r3, [r6], #1
 8005732:	42ae      	cmp	r6, r5
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	d124      	bne.n	8005784 <_dtoa_r+0x5fc>
 800573a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800573e:	4b1a      	ldr	r3, [pc, #104]	; (80057a8 <_dtoa_r+0x620>)
 8005740:	f7fa fd80 	bl	8000244 <__adddf3>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800574c:	f7fb f9c0 	bl	8000ad0 <__aeabi_dcmpgt>
 8005750:	2800      	cmp	r0, #0
 8005752:	d171      	bne.n	8005838 <_dtoa_r+0x6b0>
 8005754:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005758:	2000      	movs	r0, #0
 800575a:	4913      	ldr	r1, [pc, #76]	; (80057a8 <_dtoa_r+0x620>)
 800575c:	f7fa fd70 	bl	8000240 <__aeabi_dsub>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005768:	f7fb f994 	bl	8000a94 <__aeabi_dcmplt>
 800576c:	2800      	cmp	r0, #0
 800576e:	f43f af2f 	beq.w	80055d0 <_dtoa_r+0x448>
 8005772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005776:	1e6a      	subs	r2, r5, #1
 8005778:	2b30      	cmp	r3, #48	; 0x30
 800577a:	d001      	beq.n	8005780 <_dtoa_r+0x5f8>
 800577c:	46ba      	mov	sl, r7
 800577e:	e04a      	b.n	8005816 <_dtoa_r+0x68e>
 8005780:	4615      	mov	r5, r2
 8005782:	e7f6      	b.n	8005772 <_dtoa_r+0x5ea>
 8005784:	4b05      	ldr	r3, [pc, #20]	; (800579c <_dtoa_r+0x614>)
 8005786:	f7fa ff13 	bl	80005b0 <__aeabi_dmul>
 800578a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800578e:	e7bd      	b.n	800570c <_dtoa_r+0x584>
 8005790:	080069a8 	.word	0x080069a8
 8005794:	08006980 	.word	0x08006980
 8005798:	3ff00000 	.word	0x3ff00000
 800579c:	40240000 	.word	0x40240000
 80057a0:	401c0000 	.word	0x401c0000
 80057a4:	40140000 	.word	0x40140000
 80057a8:	3fe00000 	.word	0x3fe00000
 80057ac:	9d06      	ldr	r5, [sp, #24]
 80057ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b6:	4630      	mov	r0, r6
 80057b8:	4639      	mov	r1, r7
 80057ba:	f7fb f823 	bl	8000804 <__aeabi_ddiv>
 80057be:	f7fb f9a7 	bl	8000b10 <__aeabi_d2iz>
 80057c2:	4681      	mov	r9, r0
 80057c4:	f7fa fe8a 	bl	80004dc <__aeabi_i2d>
 80057c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057cc:	f7fa fef0 	bl	80005b0 <__aeabi_dmul>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa fd32 	bl	8000240 <__aeabi_dsub>
 80057dc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80057e0:	f805 6b01 	strb.w	r6, [r5], #1
 80057e4:	9e06      	ldr	r6, [sp, #24]
 80057e6:	4602      	mov	r2, r0
 80057e8:	1bae      	subs	r6, r5, r6
 80057ea:	45b0      	cmp	r8, r6
 80057ec:	460b      	mov	r3, r1
 80057ee:	d135      	bne.n	800585c <_dtoa_r+0x6d4>
 80057f0:	f7fa fd28 	bl	8000244 <__adddf3>
 80057f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f8:	4606      	mov	r6, r0
 80057fa:	460f      	mov	r7, r1
 80057fc:	f7fb f968 	bl	8000ad0 <__aeabi_dcmpgt>
 8005800:	b9c8      	cbnz	r0, 8005836 <_dtoa_r+0x6ae>
 8005802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005806:	4630      	mov	r0, r6
 8005808:	4639      	mov	r1, r7
 800580a:	f7fb f939 	bl	8000a80 <__aeabi_dcmpeq>
 800580e:	b110      	cbz	r0, 8005816 <_dtoa_r+0x68e>
 8005810:	f019 0f01 	tst.w	r9, #1
 8005814:	d10f      	bne.n	8005836 <_dtoa_r+0x6ae>
 8005816:	4659      	mov	r1, fp
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fabe 	bl	8005d9a <_Bfree>
 800581e:	2300      	movs	r3, #0
 8005820:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005822:	702b      	strb	r3, [r5, #0]
 8005824:	f10a 0301 	add.w	r3, sl, #1
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800582c:	2b00      	cmp	r3, #0
 800582e:	f43f acf3 	beq.w	8005218 <_dtoa_r+0x90>
 8005832:	601d      	str	r5, [r3, #0]
 8005834:	e4f0      	b.n	8005218 <_dtoa_r+0x90>
 8005836:	4657      	mov	r7, sl
 8005838:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800583c:	1e6b      	subs	r3, r5, #1
 800583e:	2a39      	cmp	r2, #57	; 0x39
 8005840:	d106      	bne.n	8005850 <_dtoa_r+0x6c8>
 8005842:	9a06      	ldr	r2, [sp, #24]
 8005844:	429a      	cmp	r2, r3
 8005846:	d107      	bne.n	8005858 <_dtoa_r+0x6d0>
 8005848:	2330      	movs	r3, #48	; 0x30
 800584a:	7013      	strb	r3, [r2, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	3701      	adds	r7, #1
 8005850:	781a      	ldrb	r2, [r3, #0]
 8005852:	3201      	adds	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e791      	b.n	800577c <_dtoa_r+0x5f4>
 8005858:	461d      	mov	r5, r3
 800585a:	e7ed      	b.n	8005838 <_dtoa_r+0x6b0>
 800585c:	2200      	movs	r2, #0
 800585e:	4b99      	ldr	r3, [pc, #612]	; (8005ac4 <_dtoa_r+0x93c>)
 8005860:	f7fa fea6 	bl	80005b0 <__aeabi_dmul>
 8005864:	2200      	movs	r2, #0
 8005866:	2300      	movs	r3, #0
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	f7fb f908 	bl	8000a80 <__aeabi_dcmpeq>
 8005870:	2800      	cmp	r0, #0
 8005872:	d09e      	beq.n	80057b2 <_dtoa_r+0x62a>
 8005874:	e7cf      	b.n	8005816 <_dtoa_r+0x68e>
 8005876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005878:	2a00      	cmp	r2, #0
 800587a:	f000 8088 	beq.w	800598e <_dtoa_r+0x806>
 800587e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005880:	2a01      	cmp	r2, #1
 8005882:	dc6d      	bgt.n	8005960 <_dtoa_r+0x7d8>
 8005884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005886:	2a00      	cmp	r2, #0
 8005888:	d066      	beq.n	8005958 <_dtoa_r+0x7d0>
 800588a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800588e:	464d      	mov	r5, r9
 8005890:	9e08      	ldr	r6, [sp, #32]
 8005892:	9a07      	ldr	r2, [sp, #28]
 8005894:	2101      	movs	r1, #1
 8005896:	441a      	add	r2, r3
 8005898:	4620      	mov	r0, r4
 800589a:	4499      	add	r9, r3
 800589c:	9207      	str	r2, [sp, #28]
 800589e:	f000 fb1c 	bl	8005eda <__i2b>
 80058a2:	4607      	mov	r7, r0
 80058a4:	2d00      	cmp	r5, #0
 80058a6:	dd0b      	ble.n	80058c0 <_dtoa_r+0x738>
 80058a8:	9b07      	ldr	r3, [sp, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	dd08      	ble.n	80058c0 <_dtoa_r+0x738>
 80058ae:	42ab      	cmp	r3, r5
 80058b0:	bfa8      	it	ge
 80058b2:	462b      	movge	r3, r5
 80058b4:	9a07      	ldr	r2, [sp, #28]
 80058b6:	eba9 0903 	sub.w	r9, r9, r3
 80058ba:	1aed      	subs	r5, r5, r3
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	9307      	str	r3, [sp, #28]
 80058c0:	9b08      	ldr	r3, [sp, #32]
 80058c2:	b1eb      	cbz	r3, 8005900 <_dtoa_r+0x778>
 80058c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d065      	beq.n	8005996 <_dtoa_r+0x80e>
 80058ca:	b18e      	cbz	r6, 80058f0 <_dtoa_r+0x768>
 80058cc:	4639      	mov	r1, r7
 80058ce:	4632      	mov	r2, r6
 80058d0:	4620      	mov	r0, r4
 80058d2:	f000 fba1 	bl	8006018 <__pow5mult>
 80058d6:	465a      	mov	r2, fp
 80058d8:	4601      	mov	r1, r0
 80058da:	4607      	mov	r7, r0
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 fb05 	bl	8005eec <__multiply>
 80058e2:	4659      	mov	r1, fp
 80058e4:	900a      	str	r0, [sp, #40]	; 0x28
 80058e6:	4620      	mov	r0, r4
 80058e8:	f000 fa57 	bl	8005d9a <_Bfree>
 80058ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ee:	469b      	mov	fp, r3
 80058f0:	9b08      	ldr	r3, [sp, #32]
 80058f2:	1b9a      	subs	r2, r3, r6
 80058f4:	d004      	beq.n	8005900 <_dtoa_r+0x778>
 80058f6:	4659      	mov	r1, fp
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 fb8d 	bl	8006018 <__pow5mult>
 80058fe:	4683      	mov	fp, r0
 8005900:	2101      	movs	r1, #1
 8005902:	4620      	mov	r0, r4
 8005904:	f000 fae9 	bl	8005eda <__i2b>
 8005908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800590a:	4606      	mov	r6, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 81c6 	beq.w	8005c9e <_dtoa_r+0xb16>
 8005912:	461a      	mov	r2, r3
 8005914:	4601      	mov	r1, r0
 8005916:	4620      	mov	r0, r4
 8005918:	f000 fb7e 	bl	8006018 <__pow5mult>
 800591c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800591e:	4606      	mov	r6, r0
 8005920:	2b01      	cmp	r3, #1
 8005922:	dc3e      	bgt.n	80059a2 <_dtoa_r+0x81a>
 8005924:	9b02      	ldr	r3, [sp, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d137      	bne.n	800599a <_dtoa_r+0x812>
 800592a:	9b03      	ldr	r3, [sp, #12]
 800592c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005930:	2b00      	cmp	r3, #0
 8005932:	d134      	bne.n	800599e <_dtoa_r+0x816>
 8005934:	9b03      	ldr	r3, [sp, #12]
 8005936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800593a:	0d1b      	lsrs	r3, r3, #20
 800593c:	051b      	lsls	r3, r3, #20
 800593e:	b12b      	cbz	r3, 800594c <_dtoa_r+0x7c4>
 8005940:	9b07      	ldr	r3, [sp, #28]
 8005942:	f109 0901 	add.w	r9, r9, #1
 8005946:	3301      	adds	r3, #1
 8005948:	9307      	str	r3, [sp, #28]
 800594a:	2301      	movs	r3, #1
 800594c:	9308      	str	r3, [sp, #32]
 800594e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005950:	2b00      	cmp	r3, #0
 8005952:	d128      	bne.n	80059a6 <_dtoa_r+0x81e>
 8005954:	2001      	movs	r0, #1
 8005956:	e02e      	b.n	80059b6 <_dtoa_r+0x82e>
 8005958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800595a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800595e:	e796      	b.n	800588e <_dtoa_r+0x706>
 8005960:	9b08      	ldr	r3, [sp, #32]
 8005962:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8005966:	42b3      	cmp	r3, r6
 8005968:	bfb7      	itett	lt
 800596a:	9b08      	ldrlt	r3, [sp, #32]
 800596c:	1b9e      	subge	r6, r3, r6
 800596e:	1af2      	sublt	r2, r6, r3
 8005970:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005972:	bfbf      	itttt	lt
 8005974:	9608      	strlt	r6, [sp, #32]
 8005976:	189b      	addlt	r3, r3, r2
 8005978:	930c      	strlt	r3, [sp, #48]	; 0x30
 800597a:	2600      	movlt	r6, #0
 800597c:	f1b8 0f00 	cmp.w	r8, #0
 8005980:	bfb9      	ittee	lt
 8005982:	eba9 0508 	sublt.w	r5, r9, r8
 8005986:	2300      	movlt	r3, #0
 8005988:	464d      	movge	r5, r9
 800598a:	4643      	movge	r3, r8
 800598c:	e781      	b.n	8005892 <_dtoa_r+0x70a>
 800598e:	9e08      	ldr	r6, [sp, #32]
 8005990:	464d      	mov	r5, r9
 8005992:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005994:	e786      	b.n	80058a4 <_dtoa_r+0x71c>
 8005996:	9a08      	ldr	r2, [sp, #32]
 8005998:	e7ad      	b.n	80058f6 <_dtoa_r+0x76e>
 800599a:	2300      	movs	r3, #0
 800599c:	e7d6      	b.n	800594c <_dtoa_r+0x7c4>
 800599e:	9b02      	ldr	r3, [sp, #8]
 80059a0:	e7d4      	b.n	800594c <_dtoa_r+0x7c4>
 80059a2:	2300      	movs	r3, #0
 80059a4:	9308      	str	r3, [sp, #32]
 80059a6:	6933      	ldr	r3, [r6, #16]
 80059a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80059ac:	6918      	ldr	r0, [r3, #16]
 80059ae:	f000 fa46 	bl	8005e3e <__hi0bits>
 80059b2:	f1c0 0020 	rsb	r0, r0, #32
 80059b6:	9b07      	ldr	r3, [sp, #28]
 80059b8:	4418      	add	r0, r3
 80059ba:	f010 001f 	ands.w	r0, r0, #31
 80059be:	d047      	beq.n	8005a50 <_dtoa_r+0x8c8>
 80059c0:	f1c0 0320 	rsb	r3, r0, #32
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	dd3b      	ble.n	8005a40 <_dtoa_r+0x8b8>
 80059c8:	9b07      	ldr	r3, [sp, #28]
 80059ca:	f1c0 001c 	rsb	r0, r0, #28
 80059ce:	4481      	add	r9, r0
 80059d0:	4405      	add	r5, r0
 80059d2:	4403      	add	r3, r0
 80059d4:	9307      	str	r3, [sp, #28]
 80059d6:	f1b9 0f00 	cmp.w	r9, #0
 80059da:	dd05      	ble.n	80059e8 <_dtoa_r+0x860>
 80059dc:	4659      	mov	r1, fp
 80059de:	464a      	mov	r2, r9
 80059e0:	4620      	mov	r0, r4
 80059e2:	f000 fb67 	bl	80060b4 <__lshift>
 80059e6:	4683      	mov	fp, r0
 80059e8:	9b07      	ldr	r3, [sp, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dd05      	ble.n	80059fa <_dtoa_r+0x872>
 80059ee:	4631      	mov	r1, r6
 80059f0:	461a      	mov	r2, r3
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fb5e 	bl	80060b4 <__lshift>
 80059f8:	4606      	mov	r6, r0
 80059fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059fc:	b353      	cbz	r3, 8005a54 <_dtoa_r+0x8cc>
 80059fe:	4631      	mov	r1, r6
 8005a00:	4658      	mov	r0, fp
 8005a02:	f000 fbab 	bl	800615c <__mcmp>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	da24      	bge.n	8005a54 <_dtoa_r+0x8cc>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4659      	mov	r1, fp
 8005a0e:	220a      	movs	r2, #10
 8005a10:	4620      	mov	r0, r4
 8005a12:	f000 f9d9 	bl	8005dc8 <__multadd>
 8005a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a18:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005a1c:	4683      	mov	fp, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8144 	beq.w	8005cac <_dtoa_r+0xb24>
 8005a24:	2300      	movs	r3, #0
 8005a26:	4639      	mov	r1, r7
 8005a28:	220a      	movs	r2, #10
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f9cc 	bl	8005dc8 <__multadd>
 8005a30:	9b04      	ldr	r3, [sp, #16]
 8005a32:	4607      	mov	r7, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	dc4d      	bgt.n	8005ad4 <_dtoa_r+0x94c>
 8005a38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	dd4a      	ble.n	8005ad4 <_dtoa_r+0x94c>
 8005a3e:	e011      	b.n	8005a64 <_dtoa_r+0x8dc>
 8005a40:	d0c9      	beq.n	80059d6 <_dtoa_r+0x84e>
 8005a42:	9a07      	ldr	r2, [sp, #28]
 8005a44:	331c      	adds	r3, #28
 8005a46:	441a      	add	r2, r3
 8005a48:	4499      	add	r9, r3
 8005a4a:	441d      	add	r5, r3
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	e7c1      	b.n	80059d4 <_dtoa_r+0x84c>
 8005a50:	4603      	mov	r3, r0
 8005a52:	e7f6      	b.n	8005a42 <_dtoa_r+0x8ba>
 8005a54:	f1b8 0f00 	cmp.w	r8, #0
 8005a58:	dc36      	bgt.n	8005ac8 <_dtoa_r+0x940>
 8005a5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	dd33      	ble.n	8005ac8 <_dtoa_r+0x940>
 8005a60:	f8cd 8010 	str.w	r8, [sp, #16]
 8005a64:	9b04      	ldr	r3, [sp, #16]
 8005a66:	b963      	cbnz	r3, 8005a82 <_dtoa_r+0x8fa>
 8005a68:	4631      	mov	r1, r6
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 f9ab 	bl	8005dc8 <__multadd>
 8005a72:	4601      	mov	r1, r0
 8005a74:	4606      	mov	r6, r0
 8005a76:	4658      	mov	r0, fp
 8005a78:	f000 fb70 	bl	800615c <__mcmp>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f73f add3 	bgt.w	8005628 <_dtoa_r+0x4a0>
 8005a82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a84:	9d06      	ldr	r5, [sp, #24]
 8005a86:	ea6f 0a03 	mvn.w	sl, r3
 8005a8a:	f04f 0900 	mov.w	r9, #0
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 f982 	bl	8005d9a <_Bfree>
 8005a96:	2f00      	cmp	r7, #0
 8005a98:	f43f aebd 	beq.w	8005816 <_dtoa_r+0x68e>
 8005a9c:	f1b9 0f00 	cmp.w	r9, #0
 8005aa0:	d005      	beq.n	8005aae <_dtoa_r+0x926>
 8005aa2:	45b9      	cmp	r9, r7
 8005aa4:	d003      	beq.n	8005aae <_dtoa_r+0x926>
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 f976 	bl	8005d9a <_Bfree>
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f000 f972 	bl	8005d9a <_Bfree>
 8005ab6:	e6ae      	b.n	8005816 <_dtoa_r+0x68e>
 8005ab8:	2600      	movs	r6, #0
 8005aba:	4637      	mov	r7, r6
 8005abc:	e7e1      	b.n	8005a82 <_dtoa_r+0x8fa>
 8005abe:	46ba      	mov	sl, r7
 8005ac0:	4637      	mov	r7, r6
 8005ac2:	e5b1      	b.n	8005628 <_dtoa_r+0x4a0>
 8005ac4:	40240000 	.word	0x40240000
 8005ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aca:	f8cd 8010 	str.w	r8, [sp, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80f3 	beq.w	8005cba <_dtoa_r+0xb32>
 8005ad4:	2d00      	cmp	r5, #0
 8005ad6:	dd05      	ble.n	8005ae4 <_dtoa_r+0x95c>
 8005ad8:	4639      	mov	r1, r7
 8005ada:	462a      	mov	r2, r5
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fae9 	bl	80060b4 <__lshift>
 8005ae2:	4607      	mov	r7, r0
 8005ae4:	9b08      	ldr	r3, [sp, #32]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d04c      	beq.n	8005b84 <_dtoa_r+0x9fc>
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 f920 	bl	8005d32 <_Balloc>
 8005af2:	4605      	mov	r5, r0
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	f107 010c 	add.w	r1, r7, #12
 8005afa:	3202      	adds	r2, #2
 8005afc:	0092      	lsls	r2, r2, #2
 8005afe:	300c      	adds	r0, #12
 8005b00:	f000 f90c 	bl	8005d1c <memcpy>
 8005b04:	2201      	movs	r2, #1
 8005b06:	4629      	mov	r1, r5
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fad3 	bl	80060b4 <__lshift>
 8005b0e:	46b9      	mov	r9, r7
 8005b10:	4607      	mov	r7, r0
 8005b12:	9b06      	ldr	r3, [sp, #24]
 8005b14:	9307      	str	r3, [sp, #28]
 8005b16:	9b02      	ldr	r3, [sp, #8]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	9308      	str	r3, [sp, #32]
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4658      	mov	r0, fp
 8005b22:	f7ff faa1 	bl	8005068 <quorem>
 8005b26:	4649      	mov	r1, r9
 8005b28:	4605      	mov	r5, r0
 8005b2a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b2e:	4658      	mov	r0, fp
 8005b30:	f000 fb14 	bl	800615c <__mcmp>
 8005b34:	463a      	mov	r2, r7
 8005b36:	9002      	str	r0, [sp, #8]
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fb28 	bl	8006190 <__mdiff>
 8005b40:	68c3      	ldr	r3, [r0, #12]
 8005b42:	4602      	mov	r2, r0
 8005b44:	bb03      	cbnz	r3, 8005b88 <_dtoa_r+0xa00>
 8005b46:	4601      	mov	r1, r0
 8005b48:	9009      	str	r0, [sp, #36]	; 0x24
 8005b4a:	4658      	mov	r0, fp
 8005b4c:	f000 fb06 	bl	800615c <__mcmp>
 8005b50:	4603      	mov	r3, r0
 8005b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b54:	4611      	mov	r1, r2
 8005b56:	4620      	mov	r0, r4
 8005b58:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5a:	f000 f91e 	bl	8005d9a <_Bfree>
 8005b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b60:	b9a3      	cbnz	r3, 8005b8c <_dtoa_r+0xa04>
 8005b62:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b64:	b992      	cbnz	r2, 8005b8c <_dtoa_r+0xa04>
 8005b66:	9a08      	ldr	r2, [sp, #32]
 8005b68:	b982      	cbnz	r2, 8005b8c <_dtoa_r+0xa04>
 8005b6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b6e:	d029      	beq.n	8005bc4 <_dtoa_r+0xa3c>
 8005b70:	9b02      	ldr	r3, [sp, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	dd01      	ble.n	8005b7a <_dtoa_r+0x9f2>
 8005b76:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005b7a:	9b07      	ldr	r3, [sp, #28]
 8005b7c:	1c5d      	adds	r5, r3, #1
 8005b7e:	f883 8000 	strb.w	r8, [r3]
 8005b82:	e784      	b.n	8005a8e <_dtoa_r+0x906>
 8005b84:	4638      	mov	r0, r7
 8005b86:	e7c2      	b.n	8005b0e <_dtoa_r+0x986>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e7e3      	b.n	8005b54 <_dtoa_r+0x9cc>
 8005b8c:	9a02      	ldr	r2, [sp, #8]
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	db04      	blt.n	8005b9c <_dtoa_r+0xa14>
 8005b92:	d123      	bne.n	8005bdc <_dtoa_r+0xa54>
 8005b94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b96:	bb0a      	cbnz	r2, 8005bdc <_dtoa_r+0xa54>
 8005b98:	9a08      	ldr	r2, [sp, #32]
 8005b9a:	b9fa      	cbnz	r2, 8005bdc <_dtoa_r+0xa54>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	ddec      	ble.n	8005b7a <_dtoa_r+0x9f2>
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fa85 	bl	80060b4 <__lshift>
 8005baa:	4631      	mov	r1, r6
 8005bac:	4683      	mov	fp, r0
 8005bae:	f000 fad5 	bl	800615c <__mcmp>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	dc03      	bgt.n	8005bbe <_dtoa_r+0xa36>
 8005bb6:	d1e0      	bne.n	8005b7a <_dtoa_r+0x9f2>
 8005bb8:	f018 0f01 	tst.w	r8, #1
 8005bbc:	d0dd      	beq.n	8005b7a <_dtoa_r+0x9f2>
 8005bbe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bc2:	d1d8      	bne.n	8005b76 <_dtoa_r+0x9ee>
 8005bc4:	9b07      	ldr	r3, [sp, #28]
 8005bc6:	9a07      	ldr	r2, [sp, #28]
 8005bc8:	1c5d      	adds	r5, r3, #1
 8005bca:	2339      	movs	r3, #57	; 0x39
 8005bcc:	7013      	strb	r3, [r2, #0]
 8005bce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bd2:	1e6a      	subs	r2, r5, #1
 8005bd4:	2b39      	cmp	r3, #57	; 0x39
 8005bd6:	d04d      	beq.n	8005c74 <_dtoa_r+0xaec>
 8005bd8:	3301      	adds	r3, #1
 8005bda:	e052      	b.n	8005c82 <_dtoa_r+0xafa>
 8005bdc:	9a07      	ldr	r2, [sp, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f102 0501 	add.w	r5, r2, #1
 8005be4:	dd06      	ble.n	8005bf4 <_dtoa_r+0xa6c>
 8005be6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005bea:	d0eb      	beq.n	8005bc4 <_dtoa_r+0xa3c>
 8005bec:	f108 0801 	add.w	r8, r8, #1
 8005bf0:	9b07      	ldr	r3, [sp, #28]
 8005bf2:	e7c4      	b.n	8005b7e <_dtoa_r+0x9f6>
 8005bf4:	9b06      	ldr	r3, [sp, #24]
 8005bf6:	9a04      	ldr	r2, [sp, #16]
 8005bf8:	1aeb      	subs	r3, r5, r3
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005c00:	d021      	beq.n	8005c46 <_dtoa_r+0xabe>
 8005c02:	4659      	mov	r1, fp
 8005c04:	2300      	movs	r3, #0
 8005c06:	220a      	movs	r2, #10
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 f8dd 	bl	8005dc8 <__multadd>
 8005c0e:	45b9      	cmp	r9, r7
 8005c10:	4683      	mov	fp, r0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	f04f 020a 	mov.w	r2, #10
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	d105      	bne.n	8005c2c <_dtoa_r+0xaa4>
 8005c20:	f000 f8d2 	bl	8005dc8 <__multadd>
 8005c24:	4681      	mov	r9, r0
 8005c26:	4607      	mov	r7, r0
 8005c28:	9507      	str	r5, [sp, #28]
 8005c2a:	e778      	b.n	8005b1e <_dtoa_r+0x996>
 8005c2c:	f000 f8cc 	bl	8005dc8 <__multadd>
 8005c30:	4639      	mov	r1, r7
 8005c32:	4681      	mov	r9, r0
 8005c34:	2300      	movs	r3, #0
 8005c36:	220a      	movs	r2, #10
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 f8c5 	bl	8005dc8 <__multadd>
 8005c3e:	4607      	mov	r7, r0
 8005c40:	e7f2      	b.n	8005c28 <_dtoa_r+0xaa0>
 8005c42:	f04f 0900 	mov.w	r9, #0
 8005c46:	4659      	mov	r1, fp
 8005c48:	2201      	movs	r2, #1
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 fa32 	bl	80060b4 <__lshift>
 8005c50:	4631      	mov	r1, r6
 8005c52:	4683      	mov	fp, r0
 8005c54:	f000 fa82 	bl	800615c <__mcmp>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	dcb8      	bgt.n	8005bce <_dtoa_r+0xa46>
 8005c5c:	d102      	bne.n	8005c64 <_dtoa_r+0xadc>
 8005c5e:	f018 0f01 	tst.w	r8, #1
 8005c62:	d1b4      	bne.n	8005bce <_dtoa_r+0xa46>
 8005c64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c68:	1e6a      	subs	r2, r5, #1
 8005c6a:	2b30      	cmp	r3, #48	; 0x30
 8005c6c:	f47f af0f 	bne.w	8005a8e <_dtoa_r+0x906>
 8005c70:	4615      	mov	r5, r2
 8005c72:	e7f7      	b.n	8005c64 <_dtoa_r+0xadc>
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d105      	bne.n	8005c86 <_dtoa_r+0xafe>
 8005c7a:	2331      	movs	r3, #49	; 0x31
 8005c7c:	9a06      	ldr	r2, [sp, #24]
 8005c7e:	f10a 0a01 	add.w	sl, sl, #1
 8005c82:	7013      	strb	r3, [r2, #0]
 8005c84:	e703      	b.n	8005a8e <_dtoa_r+0x906>
 8005c86:	4615      	mov	r5, r2
 8005c88:	e7a1      	b.n	8005bce <_dtoa_r+0xa46>
 8005c8a:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <_dtoa_r+0xb60>)
 8005c8c:	f7ff bae1 	b.w	8005252 <_dtoa_r+0xca>
 8005c90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f47f aabb 	bne.w	800520e <_dtoa_r+0x86>
 8005c98:	4b14      	ldr	r3, [pc, #80]	; (8005cec <_dtoa_r+0xb64>)
 8005c9a:	f7ff bada 	b.w	8005252 <_dtoa_r+0xca>
 8005c9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	f77f ae3f 	ble.w	8005924 <_dtoa_r+0x79c>
 8005ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ca8:	9308      	str	r3, [sp, #32]
 8005caa:	e653      	b.n	8005954 <_dtoa_r+0x7cc>
 8005cac:	9b04      	ldr	r3, [sp, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dc03      	bgt.n	8005cba <_dtoa_r+0xb32>
 8005cb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	f73f aed5 	bgt.w	8005a64 <_dtoa_r+0x8dc>
 8005cba:	9d06      	ldr	r5, [sp, #24]
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4658      	mov	r0, fp
 8005cc0:	f7ff f9d2 	bl	8005068 <quorem>
 8005cc4:	9b06      	ldr	r3, [sp, #24]
 8005cc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005cca:	f805 8b01 	strb.w	r8, [r5], #1
 8005cce:	9a04      	ldr	r2, [sp, #16]
 8005cd0:	1aeb      	subs	r3, r5, r3
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	ddb5      	ble.n	8005c42 <_dtoa_r+0xaba>
 8005cd6:	4659      	mov	r1, fp
 8005cd8:	2300      	movs	r3, #0
 8005cda:	220a      	movs	r2, #10
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f000 f873 	bl	8005dc8 <__multadd>
 8005ce2:	4683      	mov	fp, r0
 8005ce4:	e7ea      	b.n	8005cbc <_dtoa_r+0xb34>
 8005ce6:	bf00      	nop
 8005ce8:	08006970 	.word	0x08006970
 8005cec:	08006972 	.word	0x08006972

08005cf0 <_localeconv_r>:
 8005cf0:	4b04      	ldr	r3, [pc, #16]	; (8005d04 <_localeconv_r+0x14>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a18      	ldr	r0, [r3, #32]
 8005cf6:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <_localeconv_r+0x18>)
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	bf08      	it	eq
 8005cfc:	4618      	moveq	r0, r3
 8005cfe:	30f0      	adds	r0, #240	; 0xf0
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000000c 	.word	0x2000000c
 8005d08:	20000070 	.word	0x20000070

08005d0c <malloc>:
 8005d0c:	4b02      	ldr	r3, [pc, #8]	; (8005d18 <malloc+0xc>)
 8005d0e:	4601      	mov	r1, r0
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f000 baf9 	b.w	8006308 <_malloc_r>
 8005d16:	bf00      	nop
 8005d18:	2000000c 	.word	0x2000000c

08005d1c <memcpy>:
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	1e43      	subs	r3, r0, #1
 8005d20:	440a      	add	r2, r1
 8005d22:	4291      	cmp	r1, r2
 8005d24:	d100      	bne.n	8005d28 <memcpy+0xc>
 8005d26:	bd10      	pop	{r4, pc}
 8005d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d30:	e7f7      	b.n	8005d22 <memcpy+0x6>

08005d32 <_Balloc>:
 8005d32:	b570      	push	{r4, r5, r6, lr}
 8005d34:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d36:	4604      	mov	r4, r0
 8005d38:	460e      	mov	r6, r1
 8005d3a:	b93d      	cbnz	r5, 8005d4c <_Balloc+0x1a>
 8005d3c:	2010      	movs	r0, #16
 8005d3e:	f7ff ffe5 	bl	8005d0c <malloc>
 8005d42:	6260      	str	r0, [r4, #36]	; 0x24
 8005d44:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d48:	6005      	str	r5, [r0, #0]
 8005d4a:	60c5      	str	r5, [r0, #12]
 8005d4c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d4e:	68eb      	ldr	r3, [r5, #12]
 8005d50:	b183      	cbz	r3, 8005d74 <_Balloc+0x42>
 8005d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d5a:	b9b8      	cbnz	r0, 8005d8c <_Balloc+0x5a>
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f506 	lsl.w	r5, r1, r6
 8005d62:	1d6a      	adds	r2, r5, #5
 8005d64:	0092      	lsls	r2, r2, #2
 8005d66:	4620      	mov	r0, r4
 8005d68:	f000 fabf 	bl	80062ea <_calloc_r>
 8005d6c:	b160      	cbz	r0, 8005d88 <_Balloc+0x56>
 8005d6e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005d72:	e00e      	b.n	8005d92 <_Balloc+0x60>
 8005d74:	2221      	movs	r2, #33	; 0x21
 8005d76:	2104      	movs	r1, #4
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 fab6 	bl	80062ea <_calloc_r>
 8005d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d80:	60e8      	str	r0, [r5, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e4      	bne.n	8005d52 <_Balloc+0x20>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}
 8005d8c:	6802      	ldr	r2, [r0, #0]
 8005d8e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005d92:	2300      	movs	r3, #0
 8005d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d98:	e7f7      	b.n	8005d8a <_Balloc+0x58>

08005d9a <_Bfree>:
 8005d9a:	b570      	push	{r4, r5, r6, lr}
 8005d9c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d9e:	4606      	mov	r6, r0
 8005da0:	460d      	mov	r5, r1
 8005da2:	b93c      	cbnz	r4, 8005db4 <_Bfree+0x1a>
 8005da4:	2010      	movs	r0, #16
 8005da6:	f7ff ffb1 	bl	8005d0c <malloc>
 8005daa:	6270      	str	r0, [r6, #36]	; 0x24
 8005dac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005db0:	6004      	str	r4, [r0, #0]
 8005db2:	60c4      	str	r4, [r0, #12]
 8005db4:	b13d      	cbz	r5, 8005dc6 <_Bfree+0x2c>
 8005db6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005db8:	686a      	ldr	r2, [r5, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dc0:	6029      	str	r1, [r5, #0]
 8005dc2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}

08005dc8 <__multadd>:
 8005dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dcc:	461f      	mov	r7, r3
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	690d      	ldr	r5, [r1, #16]
 8005dd6:	f101 0c14 	add.w	ip, r1, #20
 8005dda:	f8dc 0000 	ldr.w	r0, [ip]
 8005dde:	3301      	adds	r3, #1
 8005de0:	b281      	uxth	r1, r0
 8005de2:	fb02 7101 	mla	r1, r2, r1, r7
 8005de6:	0c00      	lsrs	r0, r0, #16
 8005de8:	0c0f      	lsrs	r7, r1, #16
 8005dea:	fb02 7000 	mla	r0, r2, r0, r7
 8005dee:	b289      	uxth	r1, r1
 8005df0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005df4:	429d      	cmp	r5, r3
 8005df6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005dfa:	f84c 1b04 	str.w	r1, [ip], #4
 8005dfe:	dcec      	bgt.n	8005dda <__multadd+0x12>
 8005e00:	b1d7      	cbz	r7, 8005e38 <__multadd+0x70>
 8005e02:	68a3      	ldr	r3, [r4, #8]
 8005e04:	42ab      	cmp	r3, r5
 8005e06:	dc12      	bgt.n	8005e2e <__multadd+0x66>
 8005e08:	6861      	ldr	r1, [r4, #4]
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	3101      	adds	r1, #1
 8005e0e:	f7ff ff90 	bl	8005d32 <_Balloc>
 8005e12:	4680      	mov	r8, r0
 8005e14:	6922      	ldr	r2, [r4, #16]
 8005e16:	f104 010c 	add.w	r1, r4, #12
 8005e1a:	3202      	adds	r2, #2
 8005e1c:	0092      	lsls	r2, r2, #2
 8005e1e:	300c      	adds	r0, #12
 8005e20:	f7ff ff7c 	bl	8005d1c <memcpy>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7ff ffb7 	bl	8005d9a <_Bfree>
 8005e2c:	4644      	mov	r4, r8
 8005e2e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e32:	3501      	adds	r5, #1
 8005e34:	615f      	str	r7, [r3, #20]
 8005e36:	6125      	str	r5, [r4, #16]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e3e <__hi0bits>:
 8005e3e:	0c02      	lsrs	r2, r0, #16
 8005e40:	0412      	lsls	r2, r2, #16
 8005e42:	4603      	mov	r3, r0
 8005e44:	b9b2      	cbnz	r2, 8005e74 <__hi0bits+0x36>
 8005e46:	0403      	lsls	r3, r0, #16
 8005e48:	2010      	movs	r0, #16
 8005e4a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e4e:	bf04      	itt	eq
 8005e50:	021b      	lsleq	r3, r3, #8
 8005e52:	3008      	addeq	r0, #8
 8005e54:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e58:	bf04      	itt	eq
 8005e5a:	011b      	lsleq	r3, r3, #4
 8005e5c:	3004      	addeq	r0, #4
 8005e5e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e62:	bf04      	itt	eq
 8005e64:	009b      	lsleq	r3, r3, #2
 8005e66:	3002      	addeq	r0, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	db06      	blt.n	8005e7a <__hi0bits+0x3c>
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	d503      	bpl.n	8005e78 <__hi0bits+0x3a>
 8005e70:	3001      	adds	r0, #1
 8005e72:	4770      	bx	lr
 8005e74:	2000      	movs	r0, #0
 8005e76:	e7e8      	b.n	8005e4a <__hi0bits+0xc>
 8005e78:	2020      	movs	r0, #32
 8005e7a:	4770      	bx	lr

08005e7c <__lo0bits>:
 8005e7c:	6803      	ldr	r3, [r0, #0]
 8005e7e:	4601      	mov	r1, r0
 8005e80:	f013 0207 	ands.w	r2, r3, #7
 8005e84:	d00b      	beq.n	8005e9e <__lo0bits+0x22>
 8005e86:	07da      	lsls	r2, r3, #31
 8005e88:	d423      	bmi.n	8005ed2 <__lo0bits+0x56>
 8005e8a:	0798      	lsls	r0, r3, #30
 8005e8c:	bf49      	itett	mi
 8005e8e:	085b      	lsrmi	r3, r3, #1
 8005e90:	089b      	lsrpl	r3, r3, #2
 8005e92:	2001      	movmi	r0, #1
 8005e94:	600b      	strmi	r3, [r1, #0]
 8005e96:	bf5c      	itt	pl
 8005e98:	600b      	strpl	r3, [r1, #0]
 8005e9a:	2002      	movpl	r0, #2
 8005e9c:	4770      	bx	lr
 8005e9e:	b298      	uxth	r0, r3
 8005ea0:	b9a8      	cbnz	r0, 8005ece <__lo0bits+0x52>
 8005ea2:	2010      	movs	r0, #16
 8005ea4:	0c1b      	lsrs	r3, r3, #16
 8005ea6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005eaa:	bf04      	itt	eq
 8005eac:	0a1b      	lsreq	r3, r3, #8
 8005eae:	3008      	addeq	r0, #8
 8005eb0:	071a      	lsls	r2, r3, #28
 8005eb2:	bf04      	itt	eq
 8005eb4:	091b      	lsreq	r3, r3, #4
 8005eb6:	3004      	addeq	r0, #4
 8005eb8:	079a      	lsls	r2, r3, #30
 8005eba:	bf04      	itt	eq
 8005ebc:	089b      	lsreq	r3, r3, #2
 8005ebe:	3002      	addeq	r0, #2
 8005ec0:	07da      	lsls	r2, r3, #31
 8005ec2:	d402      	bmi.n	8005eca <__lo0bits+0x4e>
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	d006      	beq.n	8005ed6 <__lo0bits+0x5a>
 8005ec8:	3001      	adds	r0, #1
 8005eca:	600b      	str	r3, [r1, #0]
 8005ecc:	4770      	bx	lr
 8005ece:	4610      	mov	r0, r2
 8005ed0:	e7e9      	b.n	8005ea6 <__lo0bits+0x2a>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	4770      	bx	lr
 8005ed6:	2020      	movs	r0, #32
 8005ed8:	4770      	bx	lr

08005eda <__i2b>:
 8005eda:	b510      	push	{r4, lr}
 8005edc:	460c      	mov	r4, r1
 8005ede:	2101      	movs	r1, #1
 8005ee0:	f7ff ff27 	bl	8005d32 <_Balloc>
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	6144      	str	r4, [r0, #20]
 8005ee8:	6102      	str	r2, [r0, #16]
 8005eea:	bd10      	pop	{r4, pc}

08005eec <__multiply>:
 8005eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	690a      	ldr	r2, [r1, #16]
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	4688      	mov	r8, r1
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	bfbe      	ittt	lt
 8005efc:	460b      	movlt	r3, r1
 8005efe:	46a0      	movlt	r8, r4
 8005f00:	461c      	movlt	r4, r3
 8005f02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f12:	eb07 0609 	add.w	r6, r7, r9
 8005f16:	42b3      	cmp	r3, r6
 8005f18:	bfb8      	it	lt
 8005f1a:	3101      	addlt	r1, #1
 8005f1c:	f7ff ff09 	bl	8005d32 <_Balloc>
 8005f20:	f100 0514 	add.w	r5, r0, #20
 8005f24:	462b      	mov	r3, r5
 8005f26:	2200      	movs	r2, #0
 8005f28:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005f2c:	4573      	cmp	r3, lr
 8005f2e:	d316      	bcc.n	8005f5e <__multiply+0x72>
 8005f30:	f104 0214 	add.w	r2, r4, #20
 8005f34:	f108 0114 	add.w	r1, r8, #20
 8005f38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005f3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	9b00      	ldr	r3, [sp, #0]
 8005f44:	9201      	str	r2, [sp, #4]
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d80c      	bhi.n	8005f64 <__multiply+0x78>
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	dd03      	ble.n	8005f56 <__multiply+0x6a>
 8005f4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d05d      	beq.n	8006012 <__multiply+0x126>
 8005f56:	6106      	str	r6, [r0, #16]
 8005f58:	b003      	add	sp, #12
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5e:	f843 2b04 	str.w	r2, [r3], #4
 8005f62:	e7e3      	b.n	8005f2c <__multiply+0x40>
 8005f64:	f8b2 b000 	ldrh.w	fp, [r2]
 8005f68:	f1bb 0f00 	cmp.w	fp, #0
 8005f6c:	d023      	beq.n	8005fb6 <__multiply+0xca>
 8005f6e:	4689      	mov	r9, r1
 8005f70:	46ac      	mov	ip, r5
 8005f72:	f04f 0800 	mov.w	r8, #0
 8005f76:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f7a:	f8dc a000 	ldr.w	sl, [ip]
 8005f7e:	b2a3      	uxth	r3, r4
 8005f80:	fa1f fa8a 	uxth.w	sl, sl
 8005f84:	fb0b a303 	mla	r3, fp, r3, sl
 8005f88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f8c:	f8dc 4000 	ldr.w	r4, [ip]
 8005f90:	4443      	add	r3, r8
 8005f92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f96:	fb0b 840a 	mla	r4, fp, sl, r8
 8005f9a:	46e2      	mov	sl, ip
 8005f9c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fa6:	454f      	cmp	r7, r9
 8005fa8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005fac:	f84a 3b04 	str.w	r3, [sl], #4
 8005fb0:	d82b      	bhi.n	800600a <__multiply+0x11e>
 8005fb2:	f8cc 8004 	str.w	r8, [ip, #4]
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	3204      	adds	r2, #4
 8005fba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005fbe:	f1ba 0f00 	cmp.w	sl, #0
 8005fc2:	d020      	beq.n	8006006 <__multiply+0x11a>
 8005fc4:	4689      	mov	r9, r1
 8005fc6:	46a8      	mov	r8, r5
 8005fc8:	f04f 0b00 	mov.w	fp, #0
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	f8b9 c000 	ldrh.w	ip, [r9]
 8005fd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	fb0a 440c 	mla	r4, sl, ip, r4
 8005fdc:	46c4      	mov	ip, r8
 8005fde:	445c      	add	r4, fp
 8005fe0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8005fe8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005ff0:	0c1b      	lsrs	r3, r3, #16
 8005ff2:	fb0a b303 	mla	r3, sl, r3, fp
 8005ff6:	454f      	cmp	r7, r9
 8005ff8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005ffc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006000:	d805      	bhi.n	800600e <__multiply+0x122>
 8006002:	f8c8 3004 	str.w	r3, [r8, #4]
 8006006:	3504      	adds	r5, #4
 8006008:	e79b      	b.n	8005f42 <__multiply+0x56>
 800600a:	46d4      	mov	ip, sl
 800600c:	e7b3      	b.n	8005f76 <__multiply+0x8a>
 800600e:	46e0      	mov	r8, ip
 8006010:	e7dd      	b.n	8005fce <__multiply+0xe2>
 8006012:	3e01      	subs	r6, #1
 8006014:	e799      	b.n	8005f4a <__multiply+0x5e>
	...

08006018 <__pow5mult>:
 8006018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800601c:	4615      	mov	r5, r2
 800601e:	f012 0203 	ands.w	r2, r2, #3
 8006022:	4606      	mov	r6, r0
 8006024:	460f      	mov	r7, r1
 8006026:	d007      	beq.n	8006038 <__pow5mult+0x20>
 8006028:	4c21      	ldr	r4, [pc, #132]	; (80060b0 <__pow5mult+0x98>)
 800602a:	3a01      	subs	r2, #1
 800602c:	2300      	movs	r3, #0
 800602e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006032:	f7ff fec9 	bl	8005dc8 <__multadd>
 8006036:	4607      	mov	r7, r0
 8006038:	10ad      	asrs	r5, r5, #2
 800603a:	d035      	beq.n	80060a8 <__pow5mult+0x90>
 800603c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800603e:	b93c      	cbnz	r4, 8006050 <__pow5mult+0x38>
 8006040:	2010      	movs	r0, #16
 8006042:	f7ff fe63 	bl	8005d0c <malloc>
 8006046:	6270      	str	r0, [r6, #36]	; 0x24
 8006048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800604c:	6004      	str	r4, [r0, #0]
 800604e:	60c4      	str	r4, [r0, #12]
 8006050:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006058:	b94c      	cbnz	r4, 800606e <__pow5mult+0x56>
 800605a:	f240 2171 	movw	r1, #625	; 0x271
 800605e:	4630      	mov	r0, r6
 8006060:	f7ff ff3b 	bl	8005eda <__i2b>
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	f8c8 0008 	str.w	r0, [r8, #8]
 800606c:	6003      	str	r3, [r0, #0]
 800606e:	f04f 0800 	mov.w	r8, #0
 8006072:	07eb      	lsls	r3, r5, #31
 8006074:	d50a      	bpl.n	800608c <__pow5mult+0x74>
 8006076:	4639      	mov	r1, r7
 8006078:	4622      	mov	r2, r4
 800607a:	4630      	mov	r0, r6
 800607c:	f7ff ff36 	bl	8005eec <__multiply>
 8006080:	4681      	mov	r9, r0
 8006082:	4639      	mov	r1, r7
 8006084:	4630      	mov	r0, r6
 8006086:	f7ff fe88 	bl	8005d9a <_Bfree>
 800608a:	464f      	mov	r7, r9
 800608c:	106d      	asrs	r5, r5, #1
 800608e:	d00b      	beq.n	80060a8 <__pow5mult+0x90>
 8006090:	6820      	ldr	r0, [r4, #0]
 8006092:	b938      	cbnz	r0, 80060a4 <__pow5mult+0x8c>
 8006094:	4622      	mov	r2, r4
 8006096:	4621      	mov	r1, r4
 8006098:	4630      	mov	r0, r6
 800609a:	f7ff ff27 	bl	8005eec <__multiply>
 800609e:	6020      	str	r0, [r4, #0]
 80060a0:	f8c0 8000 	str.w	r8, [r0]
 80060a4:	4604      	mov	r4, r0
 80060a6:	e7e4      	b.n	8006072 <__pow5mult+0x5a>
 80060a8:	4638      	mov	r0, r7
 80060aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ae:	bf00      	nop
 80060b0:	08006a70 	.word	0x08006a70

080060b4 <__lshift>:
 80060b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	460c      	mov	r4, r1
 80060ba:	4607      	mov	r7, r0
 80060bc:	4616      	mov	r6, r2
 80060be:	6923      	ldr	r3, [r4, #16]
 80060c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060c4:	eb0a 0903 	add.w	r9, sl, r3
 80060c8:	6849      	ldr	r1, [r1, #4]
 80060ca:	68a3      	ldr	r3, [r4, #8]
 80060cc:	f109 0501 	add.w	r5, r9, #1
 80060d0:	42ab      	cmp	r3, r5
 80060d2:	db32      	blt.n	800613a <__lshift+0x86>
 80060d4:	4638      	mov	r0, r7
 80060d6:	f7ff fe2c 	bl	8005d32 <_Balloc>
 80060da:	2300      	movs	r3, #0
 80060dc:	4680      	mov	r8, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	f100 0114 	add.w	r1, r0, #20
 80060e4:	4553      	cmp	r3, sl
 80060e6:	db2b      	blt.n	8006140 <__lshift+0x8c>
 80060e8:	6920      	ldr	r0, [r4, #16]
 80060ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060ee:	f104 0314 	add.w	r3, r4, #20
 80060f2:	f016 021f 	ands.w	r2, r6, #31
 80060f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060fe:	d025      	beq.n	800614c <__lshift+0x98>
 8006100:	2000      	movs	r0, #0
 8006102:	f1c2 0e20 	rsb	lr, r2, #32
 8006106:	468a      	mov	sl, r1
 8006108:	681e      	ldr	r6, [r3, #0]
 800610a:	4096      	lsls	r6, r2
 800610c:	4330      	orrs	r0, r6
 800610e:	f84a 0b04 	str.w	r0, [sl], #4
 8006112:	f853 0b04 	ldr.w	r0, [r3], #4
 8006116:	459c      	cmp	ip, r3
 8006118:	fa20 f00e 	lsr.w	r0, r0, lr
 800611c:	d814      	bhi.n	8006148 <__lshift+0x94>
 800611e:	6048      	str	r0, [r1, #4]
 8006120:	b108      	cbz	r0, 8006126 <__lshift+0x72>
 8006122:	f109 0502 	add.w	r5, r9, #2
 8006126:	3d01      	subs	r5, #1
 8006128:	4638      	mov	r0, r7
 800612a:	f8c8 5010 	str.w	r5, [r8, #16]
 800612e:	4621      	mov	r1, r4
 8006130:	f7ff fe33 	bl	8005d9a <_Bfree>
 8006134:	4640      	mov	r0, r8
 8006136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613a:	3101      	adds	r1, #1
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	e7c7      	b.n	80060d0 <__lshift+0x1c>
 8006140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006144:	3301      	adds	r3, #1
 8006146:	e7cd      	b.n	80060e4 <__lshift+0x30>
 8006148:	4651      	mov	r1, sl
 800614a:	e7dc      	b.n	8006106 <__lshift+0x52>
 800614c:	3904      	subs	r1, #4
 800614e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006152:	459c      	cmp	ip, r3
 8006154:	f841 2f04 	str.w	r2, [r1, #4]!
 8006158:	d8f9      	bhi.n	800614e <__lshift+0x9a>
 800615a:	e7e4      	b.n	8006126 <__lshift+0x72>

0800615c <__mcmp>:
 800615c:	6903      	ldr	r3, [r0, #16]
 800615e:	690a      	ldr	r2, [r1, #16]
 8006160:	b530      	push	{r4, r5, lr}
 8006162:	1a9b      	subs	r3, r3, r2
 8006164:	d10c      	bne.n	8006180 <__mcmp+0x24>
 8006166:	0092      	lsls	r2, r2, #2
 8006168:	3014      	adds	r0, #20
 800616a:	3114      	adds	r1, #20
 800616c:	1884      	adds	r4, r0, r2
 800616e:	4411      	add	r1, r2
 8006170:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006174:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006178:	4295      	cmp	r5, r2
 800617a:	d003      	beq.n	8006184 <__mcmp+0x28>
 800617c:	d305      	bcc.n	800618a <__mcmp+0x2e>
 800617e:	2301      	movs	r3, #1
 8006180:	4618      	mov	r0, r3
 8006182:	bd30      	pop	{r4, r5, pc}
 8006184:	42a0      	cmp	r0, r4
 8006186:	d3f3      	bcc.n	8006170 <__mcmp+0x14>
 8006188:	e7fa      	b.n	8006180 <__mcmp+0x24>
 800618a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800618e:	e7f7      	b.n	8006180 <__mcmp+0x24>

08006190 <__mdiff>:
 8006190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	460d      	mov	r5, r1
 8006196:	4607      	mov	r7, r0
 8006198:	4611      	mov	r1, r2
 800619a:	4628      	mov	r0, r5
 800619c:	4614      	mov	r4, r2
 800619e:	f7ff ffdd 	bl	800615c <__mcmp>
 80061a2:	1e06      	subs	r6, r0, #0
 80061a4:	d108      	bne.n	80061b8 <__mdiff+0x28>
 80061a6:	4631      	mov	r1, r6
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff fdc2 	bl	8005d32 <_Balloc>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b8:	bfa4      	itt	ge
 80061ba:	4623      	movge	r3, r4
 80061bc:	462c      	movge	r4, r5
 80061be:	4638      	mov	r0, r7
 80061c0:	6861      	ldr	r1, [r4, #4]
 80061c2:	bfa6      	itte	ge
 80061c4:	461d      	movge	r5, r3
 80061c6:	2600      	movge	r6, #0
 80061c8:	2601      	movlt	r6, #1
 80061ca:	f7ff fdb2 	bl	8005d32 <_Balloc>
 80061ce:	f04f 0e00 	mov.w	lr, #0
 80061d2:	60c6      	str	r6, [r0, #12]
 80061d4:	692b      	ldr	r3, [r5, #16]
 80061d6:	6926      	ldr	r6, [r4, #16]
 80061d8:	f104 0214 	add.w	r2, r4, #20
 80061dc:	f105 0914 	add.w	r9, r5, #20
 80061e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80061e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80061e8:	f100 0114 	add.w	r1, r0, #20
 80061ec:	f852 ab04 	ldr.w	sl, [r2], #4
 80061f0:	f859 5b04 	ldr.w	r5, [r9], #4
 80061f4:	fa1f f38a 	uxth.w	r3, sl
 80061f8:	4473      	add	r3, lr
 80061fa:	b2ac      	uxth	r4, r5
 80061fc:	1b1b      	subs	r3, r3, r4
 80061fe:	0c2c      	lsrs	r4, r5, #16
 8006200:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006204:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006208:	b29b      	uxth	r3, r3
 800620a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800620e:	45c8      	cmp	r8, r9
 8006210:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006214:	4694      	mov	ip, r2
 8006216:	f841 4b04 	str.w	r4, [r1], #4
 800621a:	d8e7      	bhi.n	80061ec <__mdiff+0x5c>
 800621c:	45bc      	cmp	ip, r7
 800621e:	d304      	bcc.n	800622a <__mdiff+0x9a>
 8006220:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006224:	b183      	cbz	r3, 8006248 <__mdiff+0xb8>
 8006226:	6106      	str	r6, [r0, #16]
 8006228:	e7c4      	b.n	80061b4 <__mdiff+0x24>
 800622a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800622e:	b2a2      	uxth	r2, r4
 8006230:	4472      	add	r2, lr
 8006232:	1413      	asrs	r3, r2, #16
 8006234:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006238:	b292      	uxth	r2, r2
 800623a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800623e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006242:	f841 2b04 	str.w	r2, [r1], #4
 8006246:	e7e9      	b.n	800621c <__mdiff+0x8c>
 8006248:	3e01      	subs	r6, #1
 800624a:	e7e9      	b.n	8006220 <__mdiff+0x90>

0800624c <__d2b>:
 800624c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006250:	461c      	mov	r4, r3
 8006252:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006256:	2101      	movs	r1, #1
 8006258:	4690      	mov	r8, r2
 800625a:	f7ff fd6a 	bl	8005d32 <_Balloc>
 800625e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006262:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006266:	4607      	mov	r7, r0
 8006268:	bb34      	cbnz	r4, 80062b8 <__d2b+0x6c>
 800626a:	9201      	str	r2, [sp, #4]
 800626c:	f1b8 0200 	subs.w	r2, r8, #0
 8006270:	d027      	beq.n	80062c2 <__d2b+0x76>
 8006272:	a802      	add	r0, sp, #8
 8006274:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006278:	f7ff fe00 	bl	8005e7c <__lo0bits>
 800627c:	9900      	ldr	r1, [sp, #0]
 800627e:	b1f0      	cbz	r0, 80062be <__d2b+0x72>
 8006280:	9a01      	ldr	r2, [sp, #4]
 8006282:	f1c0 0320 	rsb	r3, r0, #32
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	430b      	orrs	r3, r1
 800628c:	40c2      	lsrs	r2, r0
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	9201      	str	r2, [sp, #4]
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	bf14      	ite	ne
 8006298:	2102      	movne	r1, #2
 800629a:	2101      	moveq	r1, #1
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	6139      	str	r1, [r7, #16]
 80062a0:	b1c4      	cbz	r4, 80062d4 <__d2b+0x88>
 80062a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80062a6:	4404      	add	r4, r0
 80062a8:	6034      	str	r4, [r6, #0]
 80062aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062ae:	6028      	str	r0, [r5, #0]
 80062b0:	4638      	mov	r0, r7
 80062b2:	b002      	add	sp, #8
 80062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80062bc:	e7d5      	b.n	800626a <__d2b+0x1e>
 80062be:	6179      	str	r1, [r7, #20]
 80062c0:	e7e7      	b.n	8006292 <__d2b+0x46>
 80062c2:	a801      	add	r0, sp, #4
 80062c4:	f7ff fdda 	bl	8005e7c <__lo0bits>
 80062c8:	2101      	movs	r1, #1
 80062ca:	9b01      	ldr	r3, [sp, #4]
 80062cc:	6139      	str	r1, [r7, #16]
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	3020      	adds	r0, #32
 80062d2:	e7e5      	b.n	80062a0 <__d2b+0x54>
 80062d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80062dc:	6030      	str	r0, [r6, #0]
 80062de:	6918      	ldr	r0, [r3, #16]
 80062e0:	f7ff fdad 	bl	8005e3e <__hi0bits>
 80062e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80062e8:	e7e1      	b.n	80062ae <__d2b+0x62>

080062ea <_calloc_r>:
 80062ea:	b538      	push	{r3, r4, r5, lr}
 80062ec:	fb02 f401 	mul.w	r4, r2, r1
 80062f0:	4621      	mov	r1, r4
 80062f2:	f000 f809 	bl	8006308 <_malloc_r>
 80062f6:	4605      	mov	r5, r0
 80062f8:	b118      	cbz	r0, 8006302 <_calloc_r+0x18>
 80062fa:	4622      	mov	r2, r4
 80062fc:	2100      	movs	r1, #0
 80062fe:	f7fe fb6d 	bl	80049dc <memset>
 8006302:	4628      	mov	r0, r5
 8006304:	bd38      	pop	{r3, r4, r5, pc}
	...

08006308 <_malloc_r>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	1ccd      	adds	r5, r1, #3
 800630c:	f025 0503 	bic.w	r5, r5, #3
 8006310:	3508      	adds	r5, #8
 8006312:	2d0c      	cmp	r5, #12
 8006314:	bf38      	it	cc
 8006316:	250c      	movcc	r5, #12
 8006318:	2d00      	cmp	r5, #0
 800631a:	4606      	mov	r6, r0
 800631c:	db01      	blt.n	8006322 <_malloc_r+0x1a>
 800631e:	42a9      	cmp	r1, r5
 8006320:	d903      	bls.n	800632a <_malloc_r+0x22>
 8006322:	230c      	movs	r3, #12
 8006324:	6033      	str	r3, [r6, #0]
 8006326:	2000      	movs	r0, #0
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	f000 f869 	bl	8006400 <__malloc_lock>
 800632e:	4a21      	ldr	r2, [pc, #132]	; (80063b4 <_malloc_r+0xac>)
 8006330:	6814      	ldr	r4, [r2, #0]
 8006332:	4621      	mov	r1, r4
 8006334:	b991      	cbnz	r1, 800635c <_malloc_r+0x54>
 8006336:	4c20      	ldr	r4, [pc, #128]	; (80063b8 <_malloc_r+0xb0>)
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	b91b      	cbnz	r3, 8006344 <_malloc_r+0x3c>
 800633c:	4630      	mov	r0, r6
 800633e:	f000 f83d 	bl	80063bc <_sbrk_r>
 8006342:	6020      	str	r0, [r4, #0]
 8006344:	4629      	mov	r1, r5
 8006346:	4630      	mov	r0, r6
 8006348:	f000 f838 	bl	80063bc <_sbrk_r>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d124      	bne.n	800639a <_malloc_r+0x92>
 8006350:	230c      	movs	r3, #12
 8006352:	4630      	mov	r0, r6
 8006354:	6033      	str	r3, [r6, #0]
 8006356:	f000 f854 	bl	8006402 <__malloc_unlock>
 800635a:	e7e4      	b.n	8006326 <_malloc_r+0x1e>
 800635c:	680b      	ldr	r3, [r1, #0]
 800635e:	1b5b      	subs	r3, r3, r5
 8006360:	d418      	bmi.n	8006394 <_malloc_r+0x8c>
 8006362:	2b0b      	cmp	r3, #11
 8006364:	d90f      	bls.n	8006386 <_malloc_r+0x7e>
 8006366:	600b      	str	r3, [r1, #0]
 8006368:	18cc      	adds	r4, r1, r3
 800636a:	50cd      	str	r5, [r1, r3]
 800636c:	4630      	mov	r0, r6
 800636e:	f000 f848 	bl	8006402 <__malloc_unlock>
 8006372:	f104 000b 	add.w	r0, r4, #11
 8006376:	1d23      	adds	r3, r4, #4
 8006378:	f020 0007 	bic.w	r0, r0, #7
 800637c:	1ac3      	subs	r3, r0, r3
 800637e:	d0d3      	beq.n	8006328 <_malloc_r+0x20>
 8006380:	425a      	negs	r2, r3
 8006382:	50e2      	str	r2, [r4, r3]
 8006384:	e7d0      	b.n	8006328 <_malloc_r+0x20>
 8006386:	684b      	ldr	r3, [r1, #4]
 8006388:	428c      	cmp	r4, r1
 800638a:	bf16      	itet	ne
 800638c:	6063      	strne	r3, [r4, #4]
 800638e:	6013      	streq	r3, [r2, #0]
 8006390:	460c      	movne	r4, r1
 8006392:	e7eb      	b.n	800636c <_malloc_r+0x64>
 8006394:	460c      	mov	r4, r1
 8006396:	6849      	ldr	r1, [r1, #4]
 8006398:	e7cc      	b.n	8006334 <_malloc_r+0x2c>
 800639a:	1cc4      	adds	r4, r0, #3
 800639c:	f024 0403 	bic.w	r4, r4, #3
 80063a0:	42a0      	cmp	r0, r4
 80063a2:	d005      	beq.n	80063b0 <_malloc_r+0xa8>
 80063a4:	1a21      	subs	r1, r4, r0
 80063a6:	4630      	mov	r0, r6
 80063a8:	f000 f808 	bl	80063bc <_sbrk_r>
 80063ac:	3001      	adds	r0, #1
 80063ae:	d0cf      	beq.n	8006350 <_malloc_r+0x48>
 80063b0:	6025      	str	r5, [r4, #0]
 80063b2:	e7db      	b.n	800636c <_malloc_r+0x64>
 80063b4:	200001fc 	.word	0x200001fc
 80063b8:	20000200 	.word	0x20000200

080063bc <_sbrk_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	2300      	movs	r3, #0
 80063c0:	4c05      	ldr	r4, [pc, #20]	; (80063d8 <_sbrk_r+0x1c>)
 80063c2:	4605      	mov	r5, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	6023      	str	r3, [r4, #0]
 80063c8:	f7fb feae 	bl	8002128 <_sbrk>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_sbrk_r+0x1a>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_sbrk_r+0x1a>
 80063d4:	602b      	str	r3, [r5, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	200002a0 	.word	0x200002a0

080063dc <__ascii_mbtowc>:
 80063dc:	b082      	sub	sp, #8
 80063de:	b901      	cbnz	r1, 80063e2 <__ascii_mbtowc+0x6>
 80063e0:	a901      	add	r1, sp, #4
 80063e2:	b142      	cbz	r2, 80063f6 <__ascii_mbtowc+0x1a>
 80063e4:	b14b      	cbz	r3, 80063fa <__ascii_mbtowc+0x1e>
 80063e6:	7813      	ldrb	r3, [r2, #0]
 80063e8:	600b      	str	r3, [r1, #0]
 80063ea:	7812      	ldrb	r2, [r2, #0]
 80063ec:	1c10      	adds	r0, r2, #0
 80063ee:	bf18      	it	ne
 80063f0:	2001      	movne	r0, #1
 80063f2:	b002      	add	sp, #8
 80063f4:	4770      	bx	lr
 80063f6:	4610      	mov	r0, r2
 80063f8:	e7fb      	b.n	80063f2 <__ascii_mbtowc+0x16>
 80063fa:	f06f 0001 	mvn.w	r0, #1
 80063fe:	e7f8      	b.n	80063f2 <__ascii_mbtowc+0x16>

08006400 <__malloc_lock>:
 8006400:	4770      	bx	lr

08006402 <__malloc_unlock>:
 8006402:	4770      	bx	lr

08006404 <__ascii_wctomb>:
 8006404:	b149      	cbz	r1, 800641a <__ascii_wctomb+0x16>
 8006406:	2aff      	cmp	r2, #255	; 0xff
 8006408:	bf8b      	itete	hi
 800640a:	238a      	movhi	r3, #138	; 0x8a
 800640c:	700a      	strbls	r2, [r1, #0]
 800640e:	6003      	strhi	r3, [r0, #0]
 8006410:	2001      	movls	r0, #1
 8006412:	bf88      	it	hi
 8006414:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006418:	4770      	bx	lr
 800641a:	4608      	mov	r0, r1
 800641c:	4770      	bx	lr

0800641e <atan2>:
 800641e:	f000 b803 	b.w	8006428 <__ieee754_atan2>
 8006422:	0000      	movs	r0, r0
 8006424:	0000      	movs	r0, r0
	...

08006428 <__ieee754_atan2>:
 8006428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	4256      	negs	r6, r2
 800642e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8006432:	4316      	orrs	r6, r2
 8006434:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80065e0 <__ieee754_atan2+0x1b8>
 8006438:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800643c:	454e      	cmp	r6, r9
 800643e:	4604      	mov	r4, r0
 8006440:	460d      	mov	r5, r1
 8006442:	469e      	mov	lr, r3
 8006444:	d808      	bhi.n	8006458 <__ieee754_atan2+0x30>
 8006446:	4246      	negs	r6, r0
 8006448:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800644c:	4306      	orrs	r6, r0
 800644e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8006452:	454e      	cmp	r6, r9
 8006454:	4688      	mov	r8, r1
 8006456:	d906      	bls.n	8006466 <__ieee754_atan2+0x3e>
 8006458:	4620      	mov	r0, r4
 800645a:	4629      	mov	r1, r5
 800645c:	f7f9 fef2 	bl	8000244 <__adddf3>
 8006460:	4604      	mov	r4, r0
 8006462:	460d      	mov	r5, r1
 8006464:	e030      	b.n	80064c8 <__ieee754_atan2+0xa0>
 8006466:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800646a:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800646e:	4316      	orrs	r6, r2
 8006470:	d103      	bne.n	800647a <__ieee754_atan2+0x52>
 8006472:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006476:	f000 b8b7 	b.w	80065e8 <atan>
 800647a:	179e      	asrs	r6, r3, #30
 800647c:	f006 0602 	and.w	r6, r6, #2
 8006480:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006484:	ea57 0100 	orrs.w	r1, r7, r0
 8006488:	d107      	bne.n	800649a <__ieee754_atan2+0x72>
 800648a:	2e02      	cmp	r6, #2
 800648c:	d079      	beq.n	8006582 <__ieee754_atan2+0x15a>
 800648e:	2e03      	cmp	r6, #3
 8006490:	d11a      	bne.n	80064c8 <__ieee754_atan2+0xa0>
 8006492:	a541      	add	r5, pc, #260	; (adr r5, 8006598 <__ieee754_atan2+0x170>)
 8006494:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006498:	e016      	b.n	80064c8 <__ieee754_atan2+0xa0>
 800649a:	ea5c 0102 	orrs.w	r1, ip, r2
 800649e:	d106      	bne.n	80064ae <__ieee754_atan2+0x86>
 80064a0:	f1b8 0f00 	cmp.w	r8, #0
 80064a4:	da71      	bge.n	800658a <__ieee754_atan2+0x162>
 80064a6:	a53e      	add	r5, pc, #248	; (adr r5, 80065a0 <__ieee754_atan2+0x178>)
 80064a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064ac:	e00c      	b.n	80064c8 <__ieee754_atan2+0xa0>
 80064ae:	45cc      	cmp	ip, r9
 80064b0:	d123      	bne.n	80064fa <__ieee754_atan2+0xd2>
 80064b2:	4567      	cmp	r7, ip
 80064b4:	d114      	bne.n	80064e0 <__ieee754_atan2+0xb8>
 80064b6:	2e02      	cmp	r6, #2
 80064b8:	d00a      	beq.n	80064d0 <__ieee754_atan2+0xa8>
 80064ba:	2e03      	cmp	r6, #3
 80064bc:	d00c      	beq.n	80064d8 <__ieee754_atan2+0xb0>
 80064be:	2e01      	cmp	r6, #1
 80064c0:	d15b      	bne.n	800657a <__ieee754_atan2+0x152>
 80064c2:	a539      	add	r5, pc, #228	; (adr r5, 80065a8 <__ieee754_atan2+0x180>)
 80064c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064c8:	4620      	mov	r0, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d0:	a537      	add	r5, pc, #220	; (adr r5, 80065b0 <__ieee754_atan2+0x188>)
 80064d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064d6:	e7f7      	b.n	80064c8 <__ieee754_atan2+0xa0>
 80064d8:	a537      	add	r5, pc, #220	; (adr r5, 80065b8 <__ieee754_atan2+0x190>)
 80064da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064de:	e7f3      	b.n	80064c8 <__ieee754_atan2+0xa0>
 80064e0:	2e02      	cmp	r6, #2
 80064e2:	d04e      	beq.n	8006582 <__ieee754_atan2+0x15a>
 80064e4:	2e03      	cmp	r6, #3
 80064e6:	d0d4      	beq.n	8006492 <__ieee754_atan2+0x6a>
 80064e8:	2e01      	cmp	r6, #1
 80064ea:	f04f 0400 	mov.w	r4, #0
 80064ee:	d102      	bne.n	80064f6 <__ieee754_atan2+0xce>
 80064f0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80064f4:	e7e8      	b.n	80064c8 <__ieee754_atan2+0xa0>
 80064f6:	2500      	movs	r5, #0
 80064f8:	e7e6      	b.n	80064c8 <__ieee754_atan2+0xa0>
 80064fa:	454f      	cmp	r7, r9
 80064fc:	d0d0      	beq.n	80064a0 <__ieee754_atan2+0x78>
 80064fe:	eba7 070c 	sub.w	r7, r7, ip
 8006502:	153f      	asrs	r7, r7, #20
 8006504:	2f3c      	cmp	r7, #60	; 0x3c
 8006506:	dc1e      	bgt.n	8006546 <__ieee754_atan2+0x11e>
 8006508:	2b00      	cmp	r3, #0
 800650a:	da01      	bge.n	8006510 <__ieee754_atan2+0xe8>
 800650c:	373c      	adds	r7, #60	; 0x3c
 800650e:	db1e      	blt.n	800654e <__ieee754_atan2+0x126>
 8006510:	4620      	mov	r0, r4
 8006512:	4629      	mov	r1, r5
 8006514:	f7fa f976 	bl	8000804 <__aeabi_ddiv>
 8006518:	f000 f9f0 	bl	80068fc <fabs>
 800651c:	f000 f864 	bl	80065e8 <atan>
 8006520:	4604      	mov	r4, r0
 8006522:	460d      	mov	r5, r1
 8006524:	2e01      	cmp	r6, #1
 8006526:	d015      	beq.n	8006554 <__ieee754_atan2+0x12c>
 8006528:	2e02      	cmp	r6, #2
 800652a:	d017      	beq.n	800655c <__ieee754_atan2+0x134>
 800652c:	2e00      	cmp	r6, #0
 800652e:	d0cb      	beq.n	80064c8 <__ieee754_atan2+0xa0>
 8006530:	a323      	add	r3, pc, #140	; (adr r3, 80065c0 <__ieee754_atan2+0x198>)
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	4620      	mov	r0, r4
 8006538:	4629      	mov	r1, r5
 800653a:	f7f9 fe81 	bl	8000240 <__aeabi_dsub>
 800653e:	a322      	add	r3, pc, #136	; (adr r3, 80065c8 <__ieee754_atan2+0x1a0>)
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	e016      	b.n	8006574 <__ieee754_atan2+0x14c>
 8006546:	a522      	add	r5, pc, #136	; (adr r5, 80065d0 <__ieee754_atan2+0x1a8>)
 8006548:	e9d5 4500 	ldrd	r4, r5, [r5]
 800654c:	e7ea      	b.n	8006524 <__ieee754_atan2+0xfc>
 800654e:	2400      	movs	r4, #0
 8006550:	2500      	movs	r5, #0
 8006552:	e7e7      	b.n	8006524 <__ieee754_atan2+0xfc>
 8006554:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006558:	461d      	mov	r5, r3
 800655a:	e7b5      	b.n	80064c8 <__ieee754_atan2+0xa0>
 800655c:	a318      	add	r3, pc, #96	; (adr r3, 80065c0 <__ieee754_atan2+0x198>)
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	4620      	mov	r0, r4
 8006564:	4629      	mov	r1, r5
 8006566:	f7f9 fe6b 	bl	8000240 <__aeabi_dsub>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	a116      	add	r1, pc, #88	; (adr r1, 80065c8 <__ieee754_atan2+0x1a0>)
 8006570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006574:	f7f9 fe64 	bl	8000240 <__aeabi_dsub>
 8006578:	e772      	b.n	8006460 <__ieee754_atan2+0x38>
 800657a:	a517      	add	r5, pc, #92	; (adr r5, 80065d8 <__ieee754_atan2+0x1b0>)
 800657c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006580:	e7a2      	b.n	80064c8 <__ieee754_atan2+0xa0>
 8006582:	a511      	add	r5, pc, #68	; (adr r5, 80065c8 <__ieee754_atan2+0x1a0>)
 8006584:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006588:	e79e      	b.n	80064c8 <__ieee754_atan2+0xa0>
 800658a:	a511      	add	r5, pc, #68	; (adr r5, 80065d0 <__ieee754_atan2+0x1a8>)
 800658c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006590:	e79a      	b.n	80064c8 <__ieee754_atan2+0xa0>
 8006592:	bf00      	nop
 8006594:	f3af 8000 	nop.w
 8006598:	54442d18 	.word	0x54442d18
 800659c:	c00921fb 	.word	0xc00921fb
 80065a0:	54442d18 	.word	0x54442d18
 80065a4:	bff921fb 	.word	0xbff921fb
 80065a8:	54442d18 	.word	0x54442d18
 80065ac:	bfe921fb 	.word	0xbfe921fb
 80065b0:	7f3321d2 	.word	0x7f3321d2
 80065b4:	4002d97c 	.word	0x4002d97c
 80065b8:	7f3321d2 	.word	0x7f3321d2
 80065bc:	c002d97c 	.word	0xc002d97c
 80065c0:	33145c07 	.word	0x33145c07
 80065c4:	3ca1a626 	.word	0x3ca1a626
 80065c8:	54442d18 	.word	0x54442d18
 80065cc:	400921fb 	.word	0x400921fb
 80065d0:	54442d18 	.word	0x54442d18
 80065d4:	3ff921fb 	.word	0x3ff921fb
 80065d8:	54442d18 	.word	0x54442d18
 80065dc:	3fe921fb 	.word	0x3fe921fb
 80065e0:	7ff00000 	.word	0x7ff00000
 80065e4:	00000000 	.word	0x00000000

080065e8 <atan>:
 80065e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	4bb6      	ldr	r3, [pc, #728]	; (80068c8 <atan+0x2e0>)
 80065ee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80065f2:	429e      	cmp	r6, r3
 80065f4:	4604      	mov	r4, r0
 80065f6:	460d      	mov	r5, r1
 80065f8:	468b      	mov	fp, r1
 80065fa:	dd17      	ble.n	800662c <atan+0x44>
 80065fc:	4bb3      	ldr	r3, [pc, #716]	; (80068cc <atan+0x2e4>)
 80065fe:	429e      	cmp	r6, r3
 8006600:	dc01      	bgt.n	8006606 <atan+0x1e>
 8006602:	d109      	bne.n	8006618 <atan+0x30>
 8006604:	b140      	cbz	r0, 8006618 <atan+0x30>
 8006606:	4622      	mov	r2, r4
 8006608:	462b      	mov	r3, r5
 800660a:	4620      	mov	r0, r4
 800660c:	4629      	mov	r1, r5
 800660e:	f7f9 fe19 	bl	8000244 <__adddf3>
 8006612:	4604      	mov	r4, r0
 8006614:	460d      	mov	r5, r1
 8006616:	e005      	b.n	8006624 <atan+0x3c>
 8006618:	f1bb 0f00 	cmp.w	fp, #0
 800661c:	4cac      	ldr	r4, [pc, #688]	; (80068d0 <atan+0x2e8>)
 800661e:	f340 8121 	ble.w	8006864 <atan+0x27c>
 8006622:	4dac      	ldr	r5, [pc, #688]	; (80068d4 <atan+0x2ec>)
 8006624:	4620      	mov	r0, r4
 8006626:	4629      	mov	r1, r5
 8006628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662c:	4baa      	ldr	r3, [pc, #680]	; (80068d8 <atan+0x2f0>)
 800662e:	429e      	cmp	r6, r3
 8006630:	dc11      	bgt.n	8006656 <atan+0x6e>
 8006632:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006636:	429e      	cmp	r6, r3
 8006638:	dc0a      	bgt.n	8006650 <atan+0x68>
 800663a:	a38b      	add	r3, pc, #556	; (adr r3, 8006868 <atan+0x280>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f7f9 fe00 	bl	8000244 <__adddf3>
 8006644:	2200      	movs	r2, #0
 8006646:	4ba5      	ldr	r3, [pc, #660]	; (80068dc <atan+0x2f4>)
 8006648:	f7fa fa42 	bl	8000ad0 <__aeabi_dcmpgt>
 800664c:	2800      	cmp	r0, #0
 800664e:	d1e9      	bne.n	8006624 <atan+0x3c>
 8006650:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006654:	e027      	b.n	80066a6 <atan+0xbe>
 8006656:	f000 f951 	bl	80068fc <fabs>
 800665a:	4ba1      	ldr	r3, [pc, #644]	; (80068e0 <atan+0x2f8>)
 800665c:	4604      	mov	r4, r0
 800665e:	429e      	cmp	r6, r3
 8006660:	460d      	mov	r5, r1
 8006662:	f300 80b8 	bgt.w	80067d6 <atan+0x1ee>
 8006666:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800666a:	429e      	cmp	r6, r3
 800666c:	f300 809c 	bgt.w	80067a8 <atan+0x1c0>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	f7f9 fde6 	bl	8000244 <__adddf3>
 8006678:	2200      	movs	r2, #0
 800667a:	4b98      	ldr	r3, [pc, #608]	; (80068dc <atan+0x2f4>)
 800667c:	f7f9 fde0 	bl	8000240 <__aeabi_dsub>
 8006680:	2200      	movs	r2, #0
 8006682:	4606      	mov	r6, r0
 8006684:	460f      	mov	r7, r1
 8006686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800668a:	4620      	mov	r0, r4
 800668c:	4629      	mov	r1, r5
 800668e:	f7f9 fdd9 	bl	8000244 <__adddf3>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4630      	mov	r0, r6
 8006698:	4639      	mov	r1, r7
 800669a:	f7fa f8b3 	bl	8000804 <__aeabi_ddiv>
 800669e:	f04f 0a00 	mov.w	sl, #0
 80066a2:	4604      	mov	r4, r0
 80066a4:	460d      	mov	r5, r1
 80066a6:	4622      	mov	r2, r4
 80066a8:	462b      	mov	r3, r5
 80066aa:	4620      	mov	r0, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	f7f9 ff7f 	bl	80005b0 <__aeabi_dmul>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4680      	mov	r8, r0
 80066b8:	4689      	mov	r9, r1
 80066ba:	f7f9 ff79 	bl	80005b0 <__aeabi_dmul>
 80066be:	a36c      	add	r3, pc, #432	; (adr r3, 8006870 <atan+0x288>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	4606      	mov	r6, r0
 80066c6:	460f      	mov	r7, r1
 80066c8:	f7f9 ff72 	bl	80005b0 <__aeabi_dmul>
 80066cc:	a36a      	add	r3, pc, #424	; (adr r3, 8006878 <atan+0x290>)
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f7f9 fdb7 	bl	8000244 <__adddf3>
 80066d6:	4632      	mov	r2, r6
 80066d8:	463b      	mov	r3, r7
 80066da:	f7f9 ff69 	bl	80005b0 <__aeabi_dmul>
 80066de:	a368      	add	r3, pc, #416	; (adr r3, 8006880 <atan+0x298>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f7f9 fdae 	bl	8000244 <__adddf3>
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	f7f9 ff60 	bl	80005b0 <__aeabi_dmul>
 80066f0:	a365      	add	r3, pc, #404	; (adr r3, 8006888 <atan+0x2a0>)
 80066f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f6:	f7f9 fda5 	bl	8000244 <__adddf3>
 80066fa:	4632      	mov	r2, r6
 80066fc:	463b      	mov	r3, r7
 80066fe:	f7f9 ff57 	bl	80005b0 <__aeabi_dmul>
 8006702:	a363      	add	r3, pc, #396	; (adr r3, 8006890 <atan+0x2a8>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7f9 fd9c 	bl	8000244 <__adddf3>
 800670c:	4632      	mov	r2, r6
 800670e:	463b      	mov	r3, r7
 8006710:	f7f9 ff4e 	bl	80005b0 <__aeabi_dmul>
 8006714:	a360      	add	r3, pc, #384	; (adr r3, 8006898 <atan+0x2b0>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 fd93 	bl	8000244 <__adddf3>
 800671e:	4642      	mov	r2, r8
 8006720:	464b      	mov	r3, r9
 8006722:	f7f9 ff45 	bl	80005b0 <__aeabi_dmul>
 8006726:	a35e      	add	r3, pc, #376	; (adr r3, 80068a0 <atan+0x2b8>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	4680      	mov	r8, r0
 800672e:	4689      	mov	r9, r1
 8006730:	4630      	mov	r0, r6
 8006732:	4639      	mov	r1, r7
 8006734:	f7f9 ff3c 	bl	80005b0 <__aeabi_dmul>
 8006738:	a35b      	add	r3, pc, #364	; (adr r3, 80068a8 <atan+0x2c0>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f7f9 fd7f 	bl	8000240 <__aeabi_dsub>
 8006742:	4632      	mov	r2, r6
 8006744:	463b      	mov	r3, r7
 8006746:	f7f9 ff33 	bl	80005b0 <__aeabi_dmul>
 800674a:	a359      	add	r3, pc, #356	; (adr r3, 80068b0 <atan+0x2c8>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f7f9 fd76 	bl	8000240 <__aeabi_dsub>
 8006754:	4632      	mov	r2, r6
 8006756:	463b      	mov	r3, r7
 8006758:	f7f9 ff2a 	bl	80005b0 <__aeabi_dmul>
 800675c:	a356      	add	r3, pc, #344	; (adr r3, 80068b8 <atan+0x2d0>)
 800675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006762:	f7f9 fd6d 	bl	8000240 <__aeabi_dsub>
 8006766:	4632      	mov	r2, r6
 8006768:	463b      	mov	r3, r7
 800676a:	f7f9 ff21 	bl	80005b0 <__aeabi_dmul>
 800676e:	a354      	add	r3, pc, #336	; (adr r3, 80068c0 <atan+0x2d8>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f7f9 fd64 	bl	8000240 <__aeabi_dsub>
 8006778:	4632      	mov	r2, r6
 800677a:	463b      	mov	r3, r7
 800677c:	f7f9 ff18 	bl	80005b0 <__aeabi_dmul>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	4640      	mov	r0, r8
 8006786:	4649      	mov	r1, r9
 8006788:	f7f9 fd5c 	bl	8000244 <__adddf3>
 800678c:	4622      	mov	r2, r4
 800678e:	462b      	mov	r3, r5
 8006790:	f7f9 ff0e 	bl	80005b0 <__aeabi_dmul>
 8006794:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	d144      	bne.n	8006828 <atan+0x240>
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7f9 fd4d 	bl	8000240 <__aeabi_dsub>
 80067a6:	e734      	b.n	8006612 <atan+0x2a>
 80067a8:	2200      	movs	r2, #0
 80067aa:	4b4c      	ldr	r3, [pc, #304]	; (80068dc <atan+0x2f4>)
 80067ac:	f7f9 fd48 	bl	8000240 <__aeabi_dsub>
 80067b0:	2200      	movs	r2, #0
 80067b2:	4606      	mov	r6, r0
 80067b4:	460f      	mov	r7, r1
 80067b6:	4b49      	ldr	r3, [pc, #292]	; (80068dc <atan+0x2f4>)
 80067b8:	4620      	mov	r0, r4
 80067ba:	4629      	mov	r1, r5
 80067bc:	f7f9 fd42 	bl	8000244 <__adddf3>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	f7fa f81c 	bl	8000804 <__aeabi_ddiv>
 80067cc:	f04f 0a01 	mov.w	sl, #1
 80067d0:	4604      	mov	r4, r0
 80067d2:	460d      	mov	r5, r1
 80067d4:	e767      	b.n	80066a6 <atan+0xbe>
 80067d6:	4b43      	ldr	r3, [pc, #268]	; (80068e4 <atan+0x2fc>)
 80067d8:	429e      	cmp	r6, r3
 80067da:	dc1a      	bgt.n	8006812 <atan+0x22a>
 80067dc:	2200      	movs	r2, #0
 80067de:	4b42      	ldr	r3, [pc, #264]	; (80068e8 <atan+0x300>)
 80067e0:	f7f9 fd2e 	bl	8000240 <__aeabi_dsub>
 80067e4:	2200      	movs	r2, #0
 80067e6:	4606      	mov	r6, r0
 80067e8:	460f      	mov	r7, r1
 80067ea:	4b3f      	ldr	r3, [pc, #252]	; (80068e8 <atan+0x300>)
 80067ec:	4620      	mov	r0, r4
 80067ee:	4629      	mov	r1, r5
 80067f0:	f7f9 fede 	bl	80005b0 <__aeabi_dmul>
 80067f4:	2200      	movs	r2, #0
 80067f6:	4b39      	ldr	r3, [pc, #228]	; (80068dc <atan+0x2f4>)
 80067f8:	f7f9 fd24 	bl	8000244 <__adddf3>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4630      	mov	r0, r6
 8006802:	4639      	mov	r1, r7
 8006804:	f7f9 fffe 	bl	8000804 <__aeabi_ddiv>
 8006808:	f04f 0a02 	mov.w	sl, #2
 800680c:	4604      	mov	r4, r0
 800680e:	460d      	mov	r5, r1
 8006810:	e749      	b.n	80066a6 <atan+0xbe>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	2000      	movs	r0, #0
 8006818:	4934      	ldr	r1, [pc, #208]	; (80068ec <atan+0x304>)
 800681a:	f7f9 fff3 	bl	8000804 <__aeabi_ddiv>
 800681e:	f04f 0a03 	mov.w	sl, #3
 8006822:	4604      	mov	r4, r0
 8006824:	460d      	mov	r5, r1
 8006826:	e73e      	b.n	80066a6 <atan+0xbe>
 8006828:	4b31      	ldr	r3, [pc, #196]	; (80068f0 <atan+0x308>)
 800682a:	4e32      	ldr	r6, [pc, #200]	; (80068f4 <atan+0x30c>)
 800682c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006830:	4456      	add	r6, sl
 8006832:	449a      	add	sl, r3
 8006834:	e9da 2300 	ldrd	r2, r3, [sl]
 8006838:	f7f9 fd02 	bl	8000240 <__aeabi_dsub>
 800683c:	4622      	mov	r2, r4
 800683e:	462b      	mov	r3, r5
 8006840:	f7f9 fcfe 	bl	8000240 <__aeabi_dsub>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	e9d6 0100 	ldrd	r0, r1, [r6]
 800684c:	f7f9 fcf8 	bl	8000240 <__aeabi_dsub>
 8006850:	f1bb 0f00 	cmp.w	fp, #0
 8006854:	4604      	mov	r4, r0
 8006856:	460d      	mov	r5, r1
 8006858:	f6bf aee4 	bge.w	8006624 <atan+0x3c>
 800685c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006860:	461d      	mov	r5, r3
 8006862:	e6df      	b.n	8006624 <atan+0x3c>
 8006864:	4d24      	ldr	r5, [pc, #144]	; (80068f8 <atan+0x310>)
 8006866:	e6dd      	b.n	8006624 <atan+0x3c>
 8006868:	8800759c 	.word	0x8800759c
 800686c:	7e37e43c 	.word	0x7e37e43c
 8006870:	e322da11 	.word	0xe322da11
 8006874:	3f90ad3a 	.word	0x3f90ad3a
 8006878:	24760deb 	.word	0x24760deb
 800687c:	3fa97b4b 	.word	0x3fa97b4b
 8006880:	a0d03d51 	.word	0xa0d03d51
 8006884:	3fb10d66 	.word	0x3fb10d66
 8006888:	c54c206e 	.word	0xc54c206e
 800688c:	3fb745cd 	.word	0x3fb745cd
 8006890:	920083ff 	.word	0x920083ff
 8006894:	3fc24924 	.word	0x3fc24924
 8006898:	5555550d 	.word	0x5555550d
 800689c:	3fd55555 	.word	0x3fd55555
 80068a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80068a4:	bfa2b444 	.word	0xbfa2b444
 80068a8:	52defd9a 	.word	0x52defd9a
 80068ac:	3fadde2d 	.word	0x3fadde2d
 80068b0:	af749a6d 	.word	0xaf749a6d
 80068b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80068b8:	fe231671 	.word	0xfe231671
 80068bc:	3fbc71c6 	.word	0x3fbc71c6
 80068c0:	9998ebc4 	.word	0x9998ebc4
 80068c4:	3fc99999 	.word	0x3fc99999
 80068c8:	440fffff 	.word	0x440fffff
 80068cc:	7ff00000 	.word	0x7ff00000
 80068d0:	54442d18 	.word	0x54442d18
 80068d4:	3ff921fb 	.word	0x3ff921fb
 80068d8:	3fdbffff 	.word	0x3fdbffff
 80068dc:	3ff00000 	.word	0x3ff00000
 80068e0:	3ff2ffff 	.word	0x3ff2ffff
 80068e4:	40037fff 	.word	0x40037fff
 80068e8:	3ff80000 	.word	0x3ff80000
 80068ec:	bff00000 	.word	0xbff00000
 80068f0:	08006ba8 	.word	0x08006ba8
 80068f4:	08006b88 	.word	0x08006b88
 80068f8:	bff921fb 	.word	0xbff921fb

080068fc <fabs>:
 80068fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006900:	4619      	mov	r1, r3
 8006902:	4770      	bx	lr

08006904 <_init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr

08006910 <_fini>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr
