
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08005db8  08005db8  00015db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006020  08006020  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006028  08006028  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001dc  0800620c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800620c  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000840b  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015f6  00000000  00000000  00028610  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000730  00000000  00000000  00029c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  0002a338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bd28  00000000  00000000  0002a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006906  00000000  00000000  000466e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b157  00000000  00000000  0004cfee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8145  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000251c  00000000  00000000  000e81c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08005da0 	.word	0x08005da0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08005da0 	.word	0x08005da0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_frsub>:
 8000c00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c04:	e002      	b.n	8000c0c <__addsf3>
 8000c06:	bf00      	nop

08000c08 <__aeabi_fsub>:
 8000c08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c0c <__addsf3>:
 8000c0c:	0042      	lsls	r2, r0, #1
 8000c0e:	bf1f      	itttt	ne
 8000c10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c14:	ea92 0f03 	teqne	r2, r3
 8000c18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c20:	d06a      	beq.n	8000cf8 <__addsf3+0xec>
 8000c22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c2a:	bfc1      	itttt	gt
 8000c2c:	18d2      	addgt	r2, r2, r3
 8000c2e:	4041      	eorgt	r1, r0
 8000c30:	4048      	eorgt	r0, r1
 8000c32:	4041      	eorgt	r1, r0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	2b19      	cmp	r3, #25
 8000c3a:	bf88      	it	hi
 8000c3c:	4770      	bxhi	lr
 8000c3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4240      	negne	r0, r0
 8000c4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c5a:	bf18      	it	ne
 8000c5c:	4249      	negne	r1, r1
 8000c5e:	ea92 0f03 	teq	r2, r3
 8000c62:	d03f      	beq.n	8000ce4 <__addsf3+0xd8>
 8000c64:	f1a2 0201 	sub.w	r2, r2, #1
 8000c68:	fa41 fc03 	asr.w	ip, r1, r3
 8000c6c:	eb10 000c 	adds.w	r0, r0, ip
 8000c70:	f1c3 0320 	rsb	r3, r3, #32
 8000c74:	fa01 f103 	lsl.w	r1, r1, r3
 8000c78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7c:	d502      	bpl.n	8000c84 <__addsf3+0x78>
 8000c7e:	4249      	negs	r1, r1
 8000c80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c88:	d313      	bcc.n	8000cb2 <__addsf3+0xa6>
 8000c8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8e:	d306      	bcc.n	8000c9e <__addsf3+0x92>
 8000c90:	0840      	lsrs	r0, r0, #1
 8000c92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c96:	f102 0201 	add.w	r2, r2, #1
 8000c9a:	2afe      	cmp	r2, #254	; 0xfe
 8000c9c:	d251      	bcs.n	8000d42 <__addsf3+0x136>
 8000c9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ca2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca6:	bf08      	it	eq
 8000ca8:	f020 0001 	biceq.w	r0, r0, #1
 8000cac:	ea40 0003 	orr.w	r0, r0, r3
 8000cb0:	4770      	bx	lr
 8000cb2:	0049      	lsls	r1, r1, #1
 8000cb4:	eb40 0000 	adc.w	r0, r0, r0
 8000cb8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	d1ed      	bne.n	8000c9e <__addsf3+0x92>
 8000cc2:	fab0 fc80 	clz	ip, r0
 8000cc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cca:	ebb2 020c 	subs.w	r2, r2, ip
 8000cce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cd2:	bfaa      	itet	ge
 8000cd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd8:	4252      	neglt	r2, r2
 8000cda:	4318      	orrge	r0, r3
 8000cdc:	bfbc      	itt	lt
 8000cde:	40d0      	lsrlt	r0, r2
 8000ce0:	4318      	orrlt	r0, r3
 8000ce2:	4770      	bx	lr
 8000ce4:	f092 0f00 	teq	r2, #0
 8000ce8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cec:	bf06      	itte	eq
 8000cee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cf2:	3201      	addeq	r2, #1
 8000cf4:	3b01      	subne	r3, #1
 8000cf6:	e7b5      	b.n	8000c64 <__addsf3+0x58>
 8000cf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d00:	bf18      	it	ne
 8000d02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d06:	d021      	beq.n	8000d4c <__addsf3+0x140>
 8000d08:	ea92 0f03 	teq	r2, r3
 8000d0c:	d004      	beq.n	8000d18 <__addsf3+0x10c>
 8000d0e:	f092 0f00 	teq	r2, #0
 8000d12:	bf08      	it	eq
 8000d14:	4608      	moveq	r0, r1
 8000d16:	4770      	bx	lr
 8000d18:	ea90 0f01 	teq	r0, r1
 8000d1c:	bf1c      	itt	ne
 8000d1e:	2000      	movne	r0, #0
 8000d20:	4770      	bxne	lr
 8000d22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d26:	d104      	bne.n	8000d32 <__addsf3+0x126>
 8000d28:	0040      	lsls	r0, r0, #1
 8000d2a:	bf28      	it	cs
 8000d2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d30:	4770      	bx	lr
 8000d32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d36:	bf3c      	itt	cc
 8000d38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bxcc	lr
 8000d3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4a:	4770      	bx	lr
 8000d4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d50:	bf16      	itet	ne
 8000d52:	4608      	movne	r0, r1
 8000d54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d58:	4601      	movne	r1, r0
 8000d5a:	0242      	lsls	r2, r0, #9
 8000d5c:	bf06      	itte	eq
 8000d5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d62:	ea90 0f01 	teqeq	r0, r1
 8000d66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_ui2f>:
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	e004      	b.n	8000d7c <__aeabi_i2f+0x8>
 8000d72:	bf00      	nop

08000d74 <__aeabi_i2f>:
 8000d74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d78:	bf48      	it	mi
 8000d7a:	4240      	negmi	r0, r0
 8000d7c:	ea5f 0c00 	movs.w	ip, r0
 8000d80:	bf08      	it	eq
 8000d82:	4770      	bxeq	lr
 8000d84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d88:	4601      	mov	r1, r0
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	e01c      	b.n	8000dca <__aeabi_l2f+0x2a>

08000d90 <__aeabi_ul2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e00a      	b.n	8000db4 <__aeabi_l2f+0x14>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_l2f>:
 8000da0:	ea50 0201 	orrs.w	r2, r0, r1
 8000da4:	bf08      	it	eq
 8000da6:	4770      	bxeq	lr
 8000da8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dac:	d502      	bpl.n	8000db4 <__aeabi_l2f+0x14>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	ea5f 0c01 	movs.w	ip, r1
 8000db8:	bf02      	ittt	eq
 8000dba:	4684      	moveq	ip, r0
 8000dbc:	4601      	moveq	r1, r0
 8000dbe:	2000      	moveq	r0, #0
 8000dc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dc4:	bf08      	it	eq
 8000dc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dce:	fabc f28c 	clz	r2, ip
 8000dd2:	3a08      	subs	r2, #8
 8000dd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd8:	db10      	blt.n	8000dfc <__aeabi_l2f+0x5c>
 8000dda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dde:	4463      	add	r3, ip
 8000de0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dec:	fa20 f202 	lsr.w	r2, r0, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	f020 0001 	biceq.w	r0, r0, #1
 8000dfa:	4770      	bx	lr
 8000dfc:	f102 0220 	add.w	r2, r2, #32
 8000e00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e04:	f1c2 0220 	rsb	r2, r2, #32
 8000e08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e10:	eb43 0002 	adc.w	r0, r3, r2
 8000e14:	bf08      	it	eq
 8000e16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1a:	4770      	bx	lr

08000e1c <__aeabi_uldivmod>:
 8000e1c:	b953      	cbnz	r3, 8000e34 <__aeabi_uldivmod+0x18>
 8000e1e:	b94a      	cbnz	r2, 8000e34 <__aeabi_uldivmod+0x18>
 8000e20:	2900      	cmp	r1, #0
 8000e22:	bf08      	it	eq
 8000e24:	2800      	cmpeq	r0, #0
 8000e26:	bf1c      	itt	ne
 8000e28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000e2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000e30:	f000 b974 	b.w	800111c <__aeabi_idiv0>
 8000e34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e3c:	f000 f806 	bl	8000e4c <__udivmoddi4>
 8000e40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e48:	b004      	add	sp, #16
 8000e4a:	4770      	bx	lr

08000e4c <__udivmoddi4>:
 8000e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e50:	468c      	mov	ip, r1
 8000e52:	4604      	mov	r4, r0
 8000e54:	9e08      	ldr	r6, [sp, #32]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d14b      	bne.n	8000ef2 <__udivmoddi4+0xa6>
 8000e5a:	428a      	cmp	r2, r1
 8000e5c:	4615      	mov	r5, r2
 8000e5e:	d967      	bls.n	8000f30 <__udivmoddi4+0xe4>
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	b14a      	cbz	r2, 8000e7a <__udivmoddi4+0x2e>
 8000e66:	f1c2 0720 	rsb	r7, r2, #32
 8000e6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000e6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000e72:	4095      	lsls	r5, r2
 8000e74:	ea47 0c03 	orr.w	ip, r7, r3
 8000e78:	4094      	lsls	r4, r2
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	fbbc f7fe 	udiv	r7, ip, lr
 8000e82:	fa1f f885 	uxth.w	r8, r5
 8000e86:	fb0e c317 	mls	r3, lr, r7, ip
 8000e8a:	fb07 f908 	mul.w	r9, r7, r8
 8000e8e:	0c21      	lsrs	r1, r4, #16
 8000e90:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e94:	4599      	cmp	r9, r3
 8000e96:	d909      	bls.n	8000eac <__udivmoddi4+0x60>
 8000e98:	18eb      	adds	r3, r5, r3
 8000e9a:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000e9e:	f080 811c 	bcs.w	80010da <__udivmoddi4+0x28e>
 8000ea2:	4599      	cmp	r9, r3
 8000ea4:	f240 8119 	bls.w	80010da <__udivmoddi4+0x28e>
 8000ea8:	3f02      	subs	r7, #2
 8000eaa:	442b      	add	r3, r5
 8000eac:	eba3 0309 	sub.w	r3, r3, r9
 8000eb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb8:	fb00 f108 	mul.w	r1, r0, r8
 8000ebc:	b2a4      	uxth	r4, r4
 8000ebe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	d909      	bls.n	8000eda <__udivmoddi4+0x8e>
 8000ec6:	192c      	adds	r4, r5, r4
 8000ec8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ecc:	f080 8107 	bcs.w	80010de <__udivmoddi4+0x292>
 8000ed0:	42a1      	cmp	r1, r4
 8000ed2:	f240 8104 	bls.w	80010de <__udivmoddi4+0x292>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	442c      	add	r4, r5
 8000eda:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ede:	2700      	movs	r7, #0
 8000ee0:	1a64      	subs	r4, r4, r1
 8000ee2:	b11e      	cbz	r6, 8000eec <__udivmoddi4+0xa0>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	40d4      	lsrs	r4, r2
 8000ee8:	e9c6 4300 	strd	r4, r3, [r6]
 8000eec:	4639      	mov	r1, r7
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d909      	bls.n	8000f0a <__udivmoddi4+0xbe>
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	f000 80ec 	beq.w	80010d4 <__udivmoddi4+0x288>
 8000efc:	2700      	movs	r7, #0
 8000efe:	e9c6 0100 	strd	r0, r1, [r6]
 8000f02:	4638      	mov	r0, r7
 8000f04:	4639      	mov	r1, r7
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	fab3 f783 	clz	r7, r3
 8000f0e:	2f00      	cmp	r7, #0
 8000f10:	d148      	bne.n	8000fa4 <__udivmoddi4+0x158>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d302      	bcc.n	8000f1c <__udivmoddi4+0xd0>
 8000f16:	4282      	cmp	r2, r0
 8000f18:	f200 80fb 	bhi.w	8001112 <__udivmoddi4+0x2c6>
 8000f1c:	1a84      	subs	r4, r0, r2
 8000f1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	469c      	mov	ip, r3
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d0e0      	beq.n	8000eec <__udivmoddi4+0xa0>
 8000f2a:	e9c6 4c00 	strd	r4, ip, [r6]
 8000f2e:	e7dd      	b.n	8000eec <__udivmoddi4+0xa0>
 8000f30:	b902      	cbnz	r2, 8000f34 <__udivmoddi4+0xe8>
 8000f32:	deff      	udf	#255	; 0xff
 8000f34:	fab2 f282 	clz	r2, r2
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	f040 808f 	bne.w	800105c <__udivmoddi4+0x210>
 8000f3e:	2701      	movs	r7, #1
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000f46:	fa1f f985 	uxth.w	r9, r5
 8000f4a:	fbb1 fef8 	udiv	lr, r1, r8
 8000f4e:	fb08 111e 	mls	r1, r8, lr, r1
 8000f52:	fb09 f00e 	mul.w	r0, r9, lr
 8000f56:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000f5a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000f5e:	4298      	cmp	r0, r3
 8000f60:	d907      	bls.n	8000f72 <__udivmoddi4+0x126>
 8000f62:	18eb      	adds	r3, r5, r3
 8000f64:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000f68:	d202      	bcs.n	8000f70 <__udivmoddi4+0x124>
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	f200 80cd 	bhi.w	800110a <__udivmoddi4+0x2be>
 8000f70:	468e      	mov	lr, r1
 8000f72:	1a1b      	subs	r3, r3, r0
 8000f74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f78:	fb08 3310 	mls	r3, r8, r0, r3
 8000f7c:	fb09 f900 	mul.w	r9, r9, r0
 8000f80:	b2a4      	uxth	r4, r4
 8000f82:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f86:	45a1      	cmp	r9, r4
 8000f88:	d907      	bls.n	8000f9a <__udivmoddi4+0x14e>
 8000f8a:	192c      	adds	r4, r5, r4
 8000f8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f90:	d202      	bcs.n	8000f98 <__udivmoddi4+0x14c>
 8000f92:	45a1      	cmp	r9, r4
 8000f94:	f200 80b6 	bhi.w	8001104 <__udivmoddi4+0x2b8>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000fa2:	e79e      	b.n	8000ee2 <__udivmoddi4+0x96>
 8000fa4:	f1c7 0520 	rsb	r5, r7, #32
 8000fa8:	40bb      	lsls	r3, r7
 8000faa:	fa22 fc05 	lsr.w	ip, r2, r5
 8000fae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fb2:	fa21 f405 	lsr.w	r4, r1, r5
 8000fb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000fba:	fbb4 f9fe 	udiv	r9, r4, lr
 8000fbe:	fa1f f88c 	uxth.w	r8, ip
 8000fc2:	fb0e 4419 	mls	r4, lr, r9, r4
 8000fc6:	fa20 f305 	lsr.w	r3, r0, r5
 8000fca:	40b9      	lsls	r1, r7
 8000fcc:	fb09 fa08 	mul.w	sl, r9, r8
 8000fd0:	4319      	orrs	r1, r3
 8000fd2:	0c0b      	lsrs	r3, r1, #16
 8000fd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000fd8:	45a2      	cmp	sl, r4
 8000fda:	fa02 f207 	lsl.w	r2, r2, r7
 8000fde:	fa00 f307 	lsl.w	r3, r0, r7
 8000fe2:	d90b      	bls.n	8000ffc <__udivmoddi4+0x1b0>
 8000fe4:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fec:	f080 8088 	bcs.w	8001100 <__udivmoddi4+0x2b4>
 8000ff0:	45a2      	cmp	sl, r4
 8000ff2:	f240 8085 	bls.w	8001100 <__udivmoddi4+0x2b4>
 8000ff6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ffa:	4464      	add	r4, ip
 8000ffc:	eba4 040a 	sub.w	r4, r4, sl
 8001000:	fbb4 f0fe 	udiv	r0, r4, lr
 8001004:	fb0e 4410 	mls	r4, lr, r0, r4
 8001008:	fb00 fa08 	mul.w	sl, r0, r8
 800100c:	b289      	uxth	r1, r1
 800100e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001012:	45a2      	cmp	sl, r4
 8001014:	d908      	bls.n	8001028 <__udivmoddi4+0x1dc>
 8001016:	eb1c 0404 	adds.w	r4, ip, r4
 800101a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800101e:	d26b      	bcs.n	80010f8 <__udivmoddi4+0x2ac>
 8001020:	45a2      	cmp	sl, r4
 8001022:	d969      	bls.n	80010f8 <__udivmoddi4+0x2ac>
 8001024:	3802      	subs	r0, #2
 8001026:	4464      	add	r4, ip
 8001028:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800102c:	fba0 8902 	umull	r8, r9, r0, r2
 8001030:	eba4 040a 	sub.w	r4, r4, sl
 8001034:	454c      	cmp	r4, r9
 8001036:	4641      	mov	r1, r8
 8001038:	46ce      	mov	lr, r9
 800103a:	d354      	bcc.n	80010e6 <__udivmoddi4+0x29a>
 800103c:	d051      	beq.n	80010e2 <__udivmoddi4+0x296>
 800103e:	2e00      	cmp	r6, #0
 8001040:	d069      	beq.n	8001116 <__udivmoddi4+0x2ca>
 8001042:	1a5a      	subs	r2, r3, r1
 8001044:	eb64 040e 	sbc.w	r4, r4, lr
 8001048:	fa04 f505 	lsl.w	r5, r4, r5
 800104c:	fa22 f307 	lsr.w	r3, r2, r7
 8001050:	40fc      	lsrs	r4, r7
 8001052:	431d      	orrs	r5, r3
 8001054:	e9c6 5400 	strd	r5, r4, [r6]
 8001058:	2700      	movs	r7, #0
 800105a:	e747      	b.n	8000eec <__udivmoddi4+0xa0>
 800105c:	4095      	lsls	r5, r2
 800105e:	f1c2 0320 	rsb	r3, r2, #32
 8001062:	fa21 f003 	lsr.w	r0, r1, r3
 8001066:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800106a:	fbb0 f7f8 	udiv	r7, r0, r8
 800106e:	fa1f f985 	uxth.w	r9, r5
 8001072:	fb08 0017 	mls	r0, r8, r7, r0
 8001076:	fa24 f303 	lsr.w	r3, r4, r3
 800107a:	4091      	lsls	r1, r2
 800107c:	fb07 fc09 	mul.w	ip, r7, r9
 8001080:	430b      	orrs	r3, r1
 8001082:	0c19      	lsrs	r1, r3, #16
 8001084:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001088:	458c      	cmp	ip, r1
 800108a:	fa04 f402 	lsl.w	r4, r4, r2
 800108e:	d907      	bls.n	80010a0 <__udivmoddi4+0x254>
 8001090:	1869      	adds	r1, r5, r1
 8001092:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8001096:	d231      	bcs.n	80010fc <__udivmoddi4+0x2b0>
 8001098:	458c      	cmp	ip, r1
 800109a:	d92f      	bls.n	80010fc <__udivmoddi4+0x2b0>
 800109c:	3f02      	subs	r7, #2
 800109e:	4429      	add	r1, r5
 80010a0:	eba1 010c 	sub.w	r1, r1, ip
 80010a4:	fbb1 f0f8 	udiv	r0, r1, r8
 80010a8:	fb08 1c10 	mls	ip, r8, r0, r1
 80010ac:	fb00 fe09 	mul.w	lr, r0, r9
 80010b0:	b299      	uxth	r1, r3
 80010b2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010b6:	458e      	cmp	lr, r1
 80010b8:	d907      	bls.n	80010ca <__udivmoddi4+0x27e>
 80010ba:	1869      	adds	r1, r5, r1
 80010bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80010c0:	d218      	bcs.n	80010f4 <__udivmoddi4+0x2a8>
 80010c2:	458e      	cmp	lr, r1
 80010c4:	d916      	bls.n	80010f4 <__udivmoddi4+0x2a8>
 80010c6:	3802      	subs	r0, #2
 80010c8:	4429      	add	r1, r5
 80010ca:	eba1 010e 	sub.w	r1, r1, lr
 80010ce:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80010d2:	e73a      	b.n	8000f4a <__udivmoddi4+0xfe>
 80010d4:	4637      	mov	r7, r6
 80010d6:	4630      	mov	r0, r6
 80010d8:	e708      	b.n	8000eec <__udivmoddi4+0xa0>
 80010da:	460f      	mov	r7, r1
 80010dc:	e6e6      	b.n	8000eac <__udivmoddi4+0x60>
 80010de:	4618      	mov	r0, r3
 80010e0:	e6fb      	b.n	8000eda <__udivmoddi4+0x8e>
 80010e2:	4543      	cmp	r3, r8
 80010e4:	d2ab      	bcs.n	800103e <__udivmoddi4+0x1f2>
 80010e6:	ebb8 0102 	subs.w	r1, r8, r2
 80010ea:	eb69 020c 	sbc.w	r2, r9, ip
 80010ee:	3801      	subs	r0, #1
 80010f0:	4696      	mov	lr, r2
 80010f2:	e7a4      	b.n	800103e <__udivmoddi4+0x1f2>
 80010f4:	4618      	mov	r0, r3
 80010f6:	e7e8      	b.n	80010ca <__udivmoddi4+0x27e>
 80010f8:	4608      	mov	r0, r1
 80010fa:	e795      	b.n	8001028 <__udivmoddi4+0x1dc>
 80010fc:	4607      	mov	r7, r0
 80010fe:	e7cf      	b.n	80010a0 <__udivmoddi4+0x254>
 8001100:	4681      	mov	r9, r0
 8001102:	e77b      	b.n	8000ffc <__udivmoddi4+0x1b0>
 8001104:	3802      	subs	r0, #2
 8001106:	442c      	add	r4, r5
 8001108:	e747      	b.n	8000f9a <__udivmoddi4+0x14e>
 800110a:	f1ae 0e02 	sub.w	lr, lr, #2
 800110e:	442b      	add	r3, r5
 8001110:	e72f      	b.n	8000f72 <__udivmoddi4+0x126>
 8001112:	4638      	mov	r0, r7
 8001114:	e707      	b.n	8000f26 <__udivmoddi4+0xda>
 8001116:	4637      	mov	r7, r6
 8001118:	e6e8      	b.n	8000eec <__udivmoddi4+0xa0>
 800111a:	bf00      	nop

0800111c <__aeabi_idiv0>:
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8001128:	4a03      	ldr	r2, [pc, #12]	; (8001138 <BMP180_Init+0x18>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	2000021c 	.word	0x2000021c

0800113c <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <BMP180_SetOversampling+0x1c>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	7013      	strb	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000021a 	.word	0x2000021a

0800115c <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	uint8_t result[2];
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1], (uint8_t *)result);
 8001162:	22aa      	movs	r2, #170	; 0xaa
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4610      	mov	r0, r2
 800116a:	f000 f8e9 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC1 =(result[0] << 8) | result[1];
 800116e:	793b      	ldrb	r3, [r7, #4]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 800117e:	801a      	strh	r2, [r3, #0]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2], (uint8_t *)result);
 8001180:	22ac      	movs	r2, #172	; 0xac
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4619      	mov	r1, r3
 8001186:	4610      	mov	r0, r2
 8001188:	f000 f8da 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC2 =(result[0] << 8) | result[1];
 800118c:	793b      	ldrb	r3, [r7, #4]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	797b      	ldrb	r3, [r7, #5]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b48      	ldr	r3, [pc, #288]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 800119c:	805a      	strh	r2, [r3, #2]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3], (uint8_t *)result);
 800119e:	22ae      	movs	r2, #174	; 0xae
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4610      	mov	r0, r2
 80011a6:	f000 f8cb 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC3 = (result[0] << 8) | result[1];
 80011aa:	793b      	ldrb	r3, [r7, #4]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	797b      	ldrb	r3, [r7, #5]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b40      	ldr	r3, [pc, #256]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 80011ba:	809a      	strh	r2, [r3, #4]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4], (uint8_t *)result);
 80011bc:	22b0      	movs	r2, #176	; 0xb0
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4610      	mov	r0, r2
 80011c4:	f000 f8bc 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC4 = (result[0] << 8) | result[1];
 80011c8:	793b      	ldrb	r3, [r7, #4]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	797b      	ldrb	r3, [r7, #5]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b38      	ldr	r3, [pc, #224]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 80011da:	80da      	strh	r2, [r3, #6]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5], (uint8_t *)result);
 80011dc:	22b2      	movs	r2, #178	; 0xb2
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4610      	mov	r0, r2
 80011e4:	f000 f8ac 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC5 = (result[0] << 8) | result[1];
 80011e8:	793b      	ldrb	r3, [r7, #4]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	797b      	ldrb	r3, [r7, #5]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 80011fa:	811a      	strh	r2, [r3, #8]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6], (uint8_t *)result);
 80011fc:	22b4      	movs	r2, #180	; 0xb4
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4619      	mov	r1, r3
 8001202:	4610      	mov	r0, r2
 8001204:	f000 f89c 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_AC6 = (result[0] << 8) | result[1];
 8001208:	793b      	ldrb	r3, [r7, #4]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	797b      	ldrb	r3, [r7, #5]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21b      	sxth	r3, r3
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 800121a:	815a      	strh	r2, [r3, #10]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1], (uint8_t *)result);
 800121c:	22b6      	movs	r2, #182	; 0xb6
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4610      	mov	r0, r2
 8001224:	f000 f88c 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_B1 = (result[0] << 8) | result[1];
 8001228:	793b      	ldrb	r3, [r7, #4]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21a      	sxth	r2, r3
 800122e:	797b      	ldrb	r3, [r7, #5]
 8001230:	b21b      	sxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 8001238:	819a      	strh	r2, [r3, #12]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2], (uint8_t *)result);
 800123a:	22b8      	movs	r2, #184	; 0xb8
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	4610      	mov	r0, r2
 8001242:	f000 f87d 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_B2 = (result[0] << 8) | result[1];
 8001246:	793b      	ldrb	r3, [r7, #4]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	797b      	ldrb	r3, [r7, #5]
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 8001256:	81da      	strh	r2, [r3, #14]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB], (uint8_t *)result);
 8001258:	22ba      	movs	r2, #186	; 0xba
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f000 f86e 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MB = (result[0] << 8) | result[1];
 8001264:	793b      	ldrb	r3, [r7, #4]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21a      	sxth	r2, r3
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 8001274:	821a      	strh	r2, [r3, #16]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC], (uint8_t *)result);
 8001276:	22bc      	movs	r2, #188	; 0xbc
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4610      	mov	r0, r2
 800127e:	f000 f85f 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MC = (result[0] << 8) | result[1];
 8001282:	793b      	ldrb	r3, [r7, #4]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 8001292:	825a      	strh	r2, [r3, #18]
	BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD], (uint8_t *)result);
 8001294:	22be      	movs	r2, #190	; 0xbe
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4610      	mov	r0, r2
 800129c:	f000 f850 	bl	8001340 <BMP180_ReadReg>
	_bmp180_eeprom.BMP180_MD = (result[0] << 8) | result[1];
 80012a0:	793b      	ldrb	r3, [r7, #4]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	797b      	ldrb	r3, [r7, #5]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <BMP180_UpdateCalibrationData+0x160>)
 80012b0:	829a      	strh	r2, [r3, #20]
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000204 	.word	0x20000204

080012c0 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	4603      	mov	r3, r0
 80012c8:	460a      	mov	r2, r1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	733b      	strb	r3, [r7, #12]
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <BMP180_WriteReg+0x38>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2302      	movs	r3, #2
 80012e8:	21ee      	movs	r1, #238	; 0xee
 80012ea:	f001 f859 	bl	80023a0 <HAL_I2C_Master_Transmit>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000021c 	.word	0x2000021c

080012fc <BMP180_ReadReg8>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg8(uint8_t reg) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <BMP180_ReadReg8+0x40>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	1dfa      	adds	r2, r7, #7
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	21ee      	movs	r1, #238	; 0xee
 8001316:	f001 f843 	bl	80023a0 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <BMP180_ReadReg8+0x40>)
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	f107 020f 	add.w	r2, r7, #15
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	21ee      	movs	r1, #238	; 0xee
 800132c:	f001 f936 	bl	800259c <HAL_I2C_Master_Receive>
	return result;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000021c 	.word	0x2000021c

08001340 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
void BMP180_ReadReg(uint8_t reg, uint8_t *result) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af02      	add	r7, sp, #8
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <BMP180_ReadReg+0x3c>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	1dfa      	adds	r2, r7, #7
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	21ee      	movs	r1, #238	; 0xee
 800135c:	f001 f820 	bl	80023a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, (uint8_t*)result, 2, BMP180_I2C_TIMEOUT);
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <BMP180_ReadReg+0x3c>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2302      	movs	r3, #2
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	21ee      	movs	r1, #238	; 0xee
 8001370:	f001 f914 	bl	800259c <HAL_I2C_Master_Receive>
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2000021c 	.word	0x2000021c

08001380 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8001386:	232e      	movs	r3, #46	; 0x2e
 8001388:	4619      	mov	r1, r3
 800138a:	20f4      	movs	r0, #244	; 0xf4
 800138c:	f7ff ff98 	bl	80012c0 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001390:	2305      	movs	r3, #5
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fc7c 	bl	8001c90 <HAL_Delay>
	uint8_t result[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result);
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	20f6      	movs	r0, #246	; 0xf6
 800139e:	f7ff ffcf 	bl	8001340 <BMP180_ReadReg>
	int32_t ut = (result[0] << 8) | result[1];
 80013a2:	793b      	ldrb	r3, [r7, #4]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	797a      	ldrb	r2, [r7, #5]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <BMP180_GetRawTemperature+0x84>)
 80013ae:	895b      	ldrh	r3, [r3, #10]
 80013b0:	461a      	mov	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	4a13      	ldr	r2, [pc, #76]	; (8001404 <BMP180_GetRawTemperature+0x84>)
 80013b8:	8912      	ldrh	r2, [r2, #8]
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da02      	bge.n	80013c8 <BMP180_GetRawTemperature+0x48>
 80013c2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80013c6:	337f      	adds	r3, #127	; 0x7f
 80013c8:	13db      	asrs	r3, r3, #15
 80013ca:	613b      	str	r3, [r7, #16]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <BMP180_GetRawTemperature+0x84>)
 80013ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80013d2:	02da      	lsls	r2, r3, #11
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <BMP180_GetRawTemperature+0x84>)
 80013d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013da:	4619      	mov	r1, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	440b      	add	r3, r1
 80013e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013e4:	60fb      	str	r3, [r7, #12]
	int32_t b5 = x1 + x2;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60bb      	str	r3, [r7, #8]
	return (b5 + 8) / (1 << 4);
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	3308      	adds	r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da00      	bge.n	80013f8 <BMP180_GetRawTemperature+0x78>
 80013f6:	330f      	adds	r3, #15
 80013f8:	111b      	asrs	r3, r3, #4
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000204 	.word	0x20000204

08001408 <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 800140e:	f7ff ffb7 	bl	8001380 <BMP180_GetRawTemperature>
 8001412:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff f861 	bl	80004dc <__aeabi_i2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <BMP180_GetTemperature+0x34>)
 8001420:	f7ff f9f0 	bl	8000804 <__aeabi_ddiv>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	4618      	mov	r0, r3
 800142a:	4621      	mov	r1, r4
 800142c:	f7ff fb98 	bl	8000b60 <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	40240000 	.word	0x40240000

08001440 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8001446:	232e      	movs	r3, #46	; 0x2e
 8001448:	4619      	mov	r1, r3
 800144a:	20f4      	movs	r0, #244	; 0xf4
 800144c:	f7ff ff38 	bl	80012c0 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001450:	2305      	movs	r3, #5
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fc1c 	bl	8001c90 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8001458:	f000 f904 	bl	8001664 <BMP180_GetUT>
 800145c:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 800145e:	4b7c      	ldr	r3, [pc, #496]	; (8001650 <BMP180_GetPressure+0x210>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	4b7b      	ldr	r3, [pc, #492]	; (8001654 <BMP180_GetPressure+0x214>)
 8001466:	5c9b      	ldrb	r3, [r3, r2]
 8001468:	4619      	mov	r1, r3
 800146a:	20f4      	movs	r0, #244	; 0xf4
 800146c:	f7ff ff28 	bl	80012c0 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001470:	4b77      	ldr	r3, [pc, #476]	; (8001650 <BMP180_GetPressure+0x210>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b78      	ldr	r3, [pc, #480]	; (8001658 <BMP180_GetPressure+0x218>)
 8001478:	5c9b      	ldrb	r3, [r3, r2]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fc08 	bl	8001c90 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001480:	f000 f900 	bl	8001684 <BMP180_GetUP>
 8001484:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8001486:	4b75      	ldr	r3, [pc, #468]	; (800165c <BMP180_GetPressure+0x21c>)
 8001488:	895b      	ldrh	r3, [r3, #10]
 800148a:	461a      	mov	r2, r3
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	4a72      	ldr	r2, [pc, #456]	; (800165c <BMP180_GetPressure+0x21c>)
 8001492:	8912      	ldrh	r2, [r2, #8]
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	da02      	bge.n	80014a2 <BMP180_GetPressure+0x62>
 800149c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80014a0:	337f      	adds	r3, #127	; 0x7f
 80014a2:	13db      	asrs	r3, r3, #15
 80014a4:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80014a6:	4b6d      	ldr	r3, [pc, #436]	; (800165c <BMP180_GetPressure+0x21c>)
 80014a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80014ac:	02da      	lsls	r2, r3, #11
 80014ae:	4b6b      	ldr	r3, [pc, #428]	; (800165c <BMP180_GetPressure+0x21c>)
 80014b0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014b4:	4619      	mov	r1, r3
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	440b      	add	r3, r1
 80014ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80014be:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 80014c0:	6a3a      	ldr	r2, [r7, #32]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80014ce:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80014d0:	4b62      	ldr	r3, [pc, #392]	; (800165c <BMP180_GetPressure+0x21c>)
 80014d2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014d6:	4619      	mov	r1, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	fb02 f303 	mul.w	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da01      	bge.n	80014e8 <BMP180_GetPressure+0xa8>
 80014e4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014e8:	131b      	asrs	r3, r3, #12
 80014ea:	fb03 f301 	mul.w	r3, r3, r1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	da01      	bge.n	80014f6 <BMP180_GetPressure+0xb6>
 80014f2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80014f6:	12db      	asrs	r3, r3, #11
 80014f8:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <BMP180_GetPressure+0x21c>)
 80014fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001500:	461a      	mov	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	fb03 f302 	mul.w	r3, r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	da01      	bge.n	8001510 <BMP180_GetPressure+0xd0>
 800150c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001510:	12db      	asrs	r3, r3, #11
 8001512:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8001514:	6a3a      	ldr	r2, [r7, #32]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 800151c:	4b4f      	ldr	r3, [pc, #316]	; (800165c <BMP180_GetPressure+0x21c>)
 800151e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001522:	009a      	lsls	r2, r3, #2
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	4a49      	ldr	r2, [pc, #292]	; (8001650 <BMP180_GetPressure+0x210>)
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	4093      	lsls	r3, r2
 800152e:	3302      	adds	r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	da00      	bge.n	8001536 <BMP180_GetPressure+0xf6>
 8001534:	3303      	adds	r3, #3
 8001536:	109b      	asrs	r3, r3, #2
 8001538:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 800153a:	4b48      	ldr	r3, [pc, #288]	; (800165c <BMP180_GetPressure+0x21c>)
 800153c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001540:	461a      	mov	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	fb03 f302 	mul.w	r3, r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	da02      	bge.n	8001552 <BMP180_GetPressure+0x112>
 800154c:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001550:	331f      	adds	r3, #31
 8001552:	135b      	asrs	r3, r3, #13
 8001554:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <BMP180_GetPressure+0x21c>)
 8001558:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800155c:	4619      	mov	r1, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	da01      	bge.n	800156e <BMP180_GetPressure+0x12e>
 800156a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800156e:	131b      	asrs	r3, r3, #12
 8001570:	fb03 f301 	mul.w	r3, r3, r1
 8001574:	2b00      	cmp	r3, #0
 8001576:	da02      	bge.n	800157e <BMP180_GetPressure+0x13e>
 8001578:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800157c:	33ff      	adds	r3, #255	; 0xff
 800157e:	141b      	asrs	r3, r3, #16
 8001580:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001582:	6a3a      	ldr	r2, [r7, #32]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4413      	add	r3, r2
 8001588:	3302      	adds	r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	da00      	bge.n	8001590 <BMP180_GetPressure+0x150>
 800158e:	3303      	adds	r3, #3
 8001590:	109b      	asrs	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001594:	4b31      	ldr	r3, [pc, #196]	; (800165c <BMP180_GetPressure+0x21c>)
 8001596:	88db      	ldrh	r3, [r3, #6]
 8001598:	461a      	mov	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015a0:	fb03 f302 	mul.w	r3, r3, r2
 80015a4:	0bdb      	lsrs	r3, r3, #15
 80015a6:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 80015a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	4a28      	ldr	r2, [pc, #160]	; (8001650 <BMP180_GetPressure+0x210>)
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	4611      	mov	r1, r2
 80015b4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80015b8:	410a      	asrs	r2, r1
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db06      	blt.n	80015d4 <BMP180_GetPressure+0x194>
		p = (b7 * 2) / b4;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	005a      	lsls	r2, r3, #1
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015d2:	e005      	b.n	80015e0 <BMP180_GetPressure+0x1a0>
	else
		p = (b7 / b4) * 2;
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80015e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da00      	bge.n	80015e8 <BMP180_GetPressure+0x1a8>
 80015e6:	33ff      	adds	r3, #255	; 0xff
 80015e8:	121b      	asrs	r3, r3, #8
 80015ea:	461a      	mov	r2, r3
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da00      	bge.n	80015f4 <BMP180_GetPressure+0x1b4>
 80015f2:	33ff      	adds	r3, #255	; 0xff
 80015f4:	121b      	asrs	r3, r3, #8
 80015f6:	fb03 f302 	mul.w	r3, r3, r2
 80015fa:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	f640 32de 	movw	r2, #3038	; 0xbde
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	da02      	bge.n	8001610 <BMP180_GetPressure+0x1d0>
 800160a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800160e:	33ff      	adds	r3, #255	; 0xff
 8001610:	141b      	asrs	r3, r3, #16
 8001612:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <BMP180_GetPressure+0x220>)
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	da02      	bge.n	8001626 <BMP180_GetPressure+0x1e6>
 8001620:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001624:	33ff      	adds	r3, #255	; 0xff
 8001626:	141b      	asrs	r3, r3, #16
 8001628:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 800162a:	6a3a      	ldr	r2, [r7, #32]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001634:	2b00      	cmp	r3, #0
 8001636:	da00      	bge.n	800163a <BMP180_GetPressure+0x1fa>
 8001638:	330f      	adds	r3, #15
 800163a:	111b      	asrs	r3, r3, #4
 800163c:	461a      	mov	r2, r3
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	4413      	add	r3, r2
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001646:	4618      	mov	r0, r3
 8001648:	3730      	adds	r7, #48	; 0x30
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000021a 	.word	0x2000021a
 8001654:	08005dd8 	.word	0x08005dd8
 8001658:	08005ddc 	.word	0x08005ddc
 800165c:	20000204 	.word	0x20000204
 8001660:	ffffe343 	.word	0xffffe343

08001664 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
	uint8_t result[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result);
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	20f6      	movs	r0, #246	; 0xf6
 8001670:	f7ff fe66 	bl	8001340 <BMP180_ReadReg>
	return (result[0] << 8) | result[1];
 8001674:	793b      	ldrb	r3, [r7, #4]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	797a      	ldrb	r2, [r7, #5]
 800167a:	4313      	orrs	r3, r2
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
	uint8_t result1[2];
	BMP180_ReadReg(BMP180_MSB_REG, (uint8_t *)result1);
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	4619      	mov	r1, r3
 800168e:	20f6      	movs	r0, #246	; 0xf6
 8001690:	f7ff fe56 	bl	8001340 <BMP180_ReadReg>
	return ((result1[0] << 16) | (result1[1] << 8) | BMP180_ReadReg8(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001694:	793b      	ldrb	r3, [r7, #4]
 8001696:	041a      	lsls	r2, r3, #16
 8001698:	797b      	ldrb	r3, [r7, #5]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	ea42 0403 	orr.w	r4, r2, r3
 80016a0:	20f8      	movs	r0, #248	; 0xf8
 80016a2:	f7ff fe2b 	bl	80012fc <BMP180_ReadReg8>
 80016a6:	4603      	mov	r3, r0
 80016a8:	ea44 0203 	orr.w	r2, r4, r3
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <BMP180_GetUP+0x3c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	f1c3 0308 	rsb	r3, r3, #8
 80016b4:	fa42 f303 	asr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd90      	pop	{r4, r7, pc}
 80016c0:	2000021a 	.word	0x2000021a

080016c4 <MAX44009_Begin>:
#include "MAX44009.h"

I2C_HandleTypeDef *MAX44009_hi2c1;

HAL_StatusTypeDef MAX44009_Begin(I2C_HandleTypeDef *hi2c)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af04      	add	r7, sp, #16
 80016ca:	6078      	str	r0, [r7, #4]
	MAX44009_hi2c1 = hi2c;
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <MAX44009_Begin+0x34>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
	return 	HAL_I2C_Mem_Write(MAX44009_hi2c1, MAX44009_ADDR, 0x02, 1, 0x00, 1, 100);
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MAX44009_Begin+0x34>)
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	2364      	movs	r3, #100	; 0x64
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	2301      	movs	r3, #1
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	2300      	movs	r3, #0
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	2202      	movs	r2, #2
 80016e6:	2194      	movs	r1, #148	; 0x94
 80016e8:	f001 f986 	bl	80029f8 <HAL_I2C_Mem_Write>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000220 	.word	0x20000220
 80016fc:	00000000 	.word	0x00000000

08001700 <MAX44009_Get_Lux>:


float MAX44009_Get_Lux(void)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af04      	add	r7, sp, #16
	uint8_t data[2];

	if(HAL_I2C_Mem_Read(MAX44009_hi2c1, MAX44009_ADDR, 0x03, 1, data, 1, 100) == HAL_OK){
 8001706:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <MAX44009_Get_Lux+0xa8>)
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	2301      	movs	r3, #1
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	2194      	movs	r1, #148	; 0x94
 800171c:	f001 fa66 	bl	8002bec <HAL_I2C_Mem_Read>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d134      	bne.n	8001790 <MAX44009_Get_Lux+0x90>
		if(HAL_I2C_Mem_Read(MAX44009_hi2c1, MAX44009_ADDR, 0x04, 1, data+1, 1, 100) == HAL_OK){
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MAX44009_Get_Lux+0xa8>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	3301      	adds	r3, #1
 800172e:	2264      	movs	r2, #100	; 0x64
 8001730:	9202      	str	r2, [sp, #8]
 8001732:	2201      	movs	r2, #1
 8001734:	9201      	str	r2, [sp, #4]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2301      	movs	r3, #1
 800173a:	2204      	movs	r2, #4
 800173c:	2194      	movs	r1, #148	; 0x94
 800173e:	f001 fa55 	bl	8002bec <HAL_I2C_Mem_Read>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d123      	bne.n	8001790 <MAX44009_Get_Lux+0x90>
				// Convert the data to lux
				uint8_t exponent = data[0]>>4;
 8001748:	793b      	ldrb	r3, [r7, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	73fb      	strb	r3, [r7, #15]
				uint32_t mantisa = ((data[0] & 0x0F)<<4) + (data[1] & 0x0F);
 800174e:	793b      	ldrb	r3, [r7, #4]
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	b2da      	uxtb	r2, r3
 8001754:	797b      	ldrb	r3, [r7, #5]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	4413      	add	r3, r2
 800175c:	60bb      	str	r3, [r7, #8]
				mantisa <<= exponent;
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	60bb      	str	r3, [r7, #8]
				return ((float)(mantisa) * 0.045);
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	f7ff faff 	bl	8000d6c <__aeabi_ui2f>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fec5 	bl	8000500 <__aeabi_f2d>
 8001776:	a30a      	add	r3, pc, #40	; (adr r3, 80017a0 <MAX44009_Get_Lux+0xa0>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff18 	bl	80005b0 <__aeabi_dmul>
 8001780:	4603      	mov	r3, r0
 8001782:	460c      	mov	r4, r1
 8001784:	4618      	mov	r0, r3
 8001786:	4621      	mov	r1, r4
 8001788:	f7ff f9ea 	bl	8000b60 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	e001      	b.n	8001794 <MAX44009_Get_Lux+0x94>
			}
	}
	return 0;
 8001790:	f04f 0300 	mov.w	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	f3af 8000 	nop.w
 80017a0:	70a3d70a 	.word	0x70a3d70a
 80017a4:	3fa70a3d 	.word	0x3fa70a3d
 80017a8:	20000220 	.word	0x20000220

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b0:	f000 fa0c 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b4:	f000 f82a 	bl	800180c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b8:	f000 f898 	bl	80018ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80017bc:	f000 f868 	bl	8001890 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	// BMP180 init
  	BMP180_Init(&hi2c1);
 80017c0:	480e      	ldr	r0, [pc, #56]	; (80017fc <main+0x50>)
 80017c2:	f7ff fcad 	bl	8001120 <BMP180_Init>
	BMP180_SetOversampling(BMP180_LOW);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff fcb8 	bl	800113c <BMP180_SetOversampling>
	BMP180_UpdateCalibrationData();
 80017cc:	f7ff fcc6 	bl	800115c <BMP180_UpdateCalibrationData>
	// MAx44009 init
	MAX44009_Begin(&hi2c1);
 80017d0:	480a      	ldr	r0, [pc, #40]	; (80017fc <main+0x50>)
 80017d2:	f7ff ff77 	bl	80016c4 <MAX44009_Begin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Reads temperature.
	BMP180_Temperature = BMP180_GetTemperature();
 80017d6:	f7ff fe17 	bl	8001408 <BMP180_GetTemperature>
 80017da:	4602      	mov	r2, r0
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <main+0x54>)
 80017de:	601a      	str	r2, [r3, #0]
	// Reads pressure.
	BMP180_Pressure = BMP180_GetPressure();
 80017e0:	f7ff fe2e 	bl	8001440 <BMP180_GetPressure>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <main+0x58>)
 80017e8:	601a      	str	r2, [r3, #0]
	// Reads light intensity..
	lux = MAX44009_Get_Lux();
 80017ea:	f7ff ff89 	bl	8001700 <MAX44009_Get_Lux>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <main+0x5c>)
 80017f2:	601a      	str	r2, [r3, #0]

	HAL_Delay(100);
 80017f4:	2064      	movs	r0, #100	; 0x64
 80017f6:	f000 fa4b 	bl	8001c90 <HAL_Delay>
	BMP180_Temperature = BMP180_GetTemperature();
 80017fa:	e7ec      	b.n	80017d6 <main+0x2a>
 80017fc:	20000224 	.word	0x20000224
 8001800:	20000280 	.word	0x20000280
 8001804:	20000278 	.word	0x20000278
 8001808:	2000027c 	.word	0x2000027c

0800180c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b094      	sub	sp, #80	; 0x50
 8001810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001812:	f107 0318 	add.w	r3, r7, #24
 8001816:	2238      	movs	r2, #56	; 0x38
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f002 fda0 	bl	8004360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001832:	2301      	movs	r3, #1
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001836:	2310      	movs	r3, #16
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800183a:	2300      	movs	r3, #0
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800183e:	2300      	movs	r3, #0
 8001840:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001842:	f107 0318 	add.w	r3, r7, #24
 8001846:	4618      	mov	r0, r3
 8001848:	f002 f868 	bl	800391c <HAL_RCC_OscConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8001852:	f000 f879 	bl	8001948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001856:	230f      	movs	r3, #15
 8001858:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fb6a 	bl	8003f48 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800187a:	f000 f865 	bl	8001948 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800187e:	4b03      	ldr	r3, [pc, #12]	; (800188c <SystemClock_Config+0x80>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	bf00      	nop
 8001886:	3750      	adds	r7, #80	; 0x50
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	42420070 	.word	0x42420070

08001890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_I2C1_Init+0x50>)
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <MX_I2C1_Init+0x54>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 250000;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_I2C1_Init+0x50>)
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x58>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_I2C1_Init+0x50>)
 80018ce:	f000 fc3f 	bl	8002150 <HAL_I2C_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018d8:	f000 f836 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000224 	.word	0x20000224
 80018e4:	40005400 	.word	0x40005400
 80018e8:	0003d090 	.word	0x0003d090

080018ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_GPIO_Init+0x58>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <MX_GPIO_Init+0x58>)
 80018f8:	f043 0310 	orr.w	r3, r3, #16
 80018fc:	6193      	str	r3, [r2, #24]
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_GPIO_Init+0x58>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_GPIO_Init+0x58>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <MX_GPIO_Init+0x58>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MX_GPIO_Init+0x58>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <MX_GPIO_Init+0x58>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	4a07      	ldr	r2, [pc, #28]	; (8001944 <MX_GPIO_Init+0x58>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	6193      	str	r3, [r2, #24]
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <MX_GPIO_Init+0x58>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	40021000 	.word	0x40021000

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_MspInit+0x5c>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_MspInit+0x5c>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6193      	str	r3, [r2, #24]
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_MspInit+0x5c>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_MspInit+0x5c>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <HAL_MspInit+0x5c>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_MspInit+0x5c>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_MspInit+0x60>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_MspInit+0x60>)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010000 	.word	0x40010000

080019b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_I2C_MspInit+0x90>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d132      	bne.n	8001a3e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_I2C_MspInit+0x94>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <HAL_I2C_MspInit+0x94>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_I2C_MspInit+0x94>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f6:	2312      	movs	r3, #18
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4812      	ldr	r0, [pc, #72]	; (8001a50 <HAL_I2C_MspInit+0x98>)
 8001a06:	f000 fa49 	bl	8001e9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_I2C_MspInit+0x9c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	f043 0302 	orr.w	r3, r3, #2
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a20:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_I2C_MspInit+0x9c>)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_I2C_MspInit+0x94>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_I2C_MspInit+0x94>)
 8001a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_I2C_MspInit+0x94>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40005400 	.word	0x40005400
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	40010000 	.word	0x40010000

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <HardFault_Handler+0x4>

08001a6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <MemManage_Handler+0x4>

08001a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <BusFault_Handler+0x4>

08001a76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <UsageFault_Handler+0x4>

08001a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f8d8 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x50>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x16>
		heap_end = &end;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <_sbrk+0x50>)
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <_sbrk+0x54>)
 8001ac0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <_sbrk+0x50>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <_sbrk+0x50>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	466a      	mov	r2, sp
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d907      	bls.n	8001ae6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ad6:	f002 fc19 	bl	800430c <__errno>
 8001ada:	4602      	mov	r2, r0
 8001adc:	230c      	movs	r3, #12
 8001ade:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae4:	e006      	b.n	8001af4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <_sbrk+0x50>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a03      	ldr	r2, [pc, #12]	; (8001afc <_sbrk+0x50>)
 8001af0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200001f8 	.word	0x200001f8
 8001b00:	20000290 	.word	0x20000290

08001b04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <SystemInit+0x70>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <SystemInit+0x70>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <SystemInit+0x70>)
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <SystemInit+0x70>)
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <SystemInit+0x74>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <SystemInit+0x70>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <SystemInit+0x70>)
 8001b26:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <SystemInit+0x70>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <SystemInit+0x70>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <SystemInit+0x70>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <SystemInit+0x70>)
 8001b42:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b46:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <SystemInit+0x70>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <SystemInit+0x70>)
 8001b4e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001b52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <SystemInit+0x70>)
 8001b56:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8001b5a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SystemInit+0x70>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <SystemInit+0x78>)
 8001b64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b68:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	f0ff0000 	.word	0xf0ff0000
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b82:	e003      	b.n	8001b8c <LoopCopyDataInit>

08001b84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b8a:	3104      	adds	r1, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b8c:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b94:	d3f6      	bcc.n	8001b84 <CopyDataInit>
  ldr r2, =_sbss
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b98:	e002      	b.n	8001ba0 <LoopFillZerobss>

08001b9a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b9c:	f842 3b04 	str.w	r3, [r2], #4

08001ba0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ba2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ba4:	d3f9      	bcc.n	8001b9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ba6:	f7ff ffad 	bl	8001b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001baa:	f002 fbb5 	bl	8004318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bae:	f7ff fdfd 	bl	80017ac <main>
  bx lr
 8001bb2:	4770      	bx	lr
  ldr r3, =_sidata
 8001bb4:	08006030 	.word	0x08006030
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bbc:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001bc0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001bc4:	2000028c 	.word	0x2000028c

08001bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC1_2_IRQHandler>
	...

08001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_Init+0x28>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_Init+0x28>)
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 f929 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 f808 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be8:	f7ff feb4 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x54>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f933 	bl	8001e82 <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c34:	f000 f909 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_InitTick+0x5c>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_IncTick+0x1c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_IncTick+0x20>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <HAL_IncTick+0x20>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000008 	.word	0x20000008
 8001c78:	20000284 	.word	0x20000284

08001c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <HAL_GetTick+0x10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000284 	.word	0x20000284

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_Delay+0x40>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffe0 	bl	8001c7c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e14:	f7ff ff90 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff49 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff5e 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff90 	bl	8001d8c <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5f 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffb0 	bl	8001df0 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b08b      	sub	sp, #44	; 0x2c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e127      	b.n	8002100 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 8116 	bne.w	80020fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d034      	beq.n	8001f40 <HAL_GPIO_Init+0xa4>
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d80d      	bhi.n	8001ef6 <HAL_GPIO_Init+0x5a>
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d02b      	beq.n	8001f36 <HAL_GPIO_Init+0x9a>
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d804      	bhi.n	8001eec <HAL_GPIO_Init+0x50>
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d031      	beq.n	8001f4a <HAL_GPIO_Init+0xae>
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d01c      	beq.n	8001f24 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eea:	e048      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d043      	beq.n	8001f78 <HAL_GPIO_Init+0xdc>
 8001ef0:	2b11      	cmp	r3, #17
 8001ef2:	d01b      	beq.n	8001f2c <HAL_GPIO_Init+0x90>
          break;
 8001ef4:	e043      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ef6:	4a89      	ldr	r2, [pc, #548]	; (800211c <HAL_GPIO_Init+0x280>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d026      	beq.n	8001f4a <HAL_GPIO_Init+0xae>
 8001efc:	4a87      	ldr	r2, [pc, #540]	; (800211c <HAL_GPIO_Init+0x280>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d806      	bhi.n	8001f10 <HAL_GPIO_Init+0x74>
 8001f02:	4a87      	ldr	r2, [pc, #540]	; (8002120 <HAL_GPIO_Init+0x284>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d020      	beq.n	8001f4a <HAL_GPIO_Init+0xae>
 8001f08:	4a86      	ldr	r2, [pc, #536]	; (8002124 <HAL_GPIO_Init+0x288>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01d      	beq.n	8001f4a <HAL_GPIO_Init+0xae>
          break;
 8001f0e:	e036      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f10:	4a85      	ldr	r2, [pc, #532]	; (8002128 <HAL_GPIO_Init+0x28c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0xae>
 8001f16:	4a85      	ldr	r2, [pc, #532]	; (800212c <HAL_GPIO_Init+0x290>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d016      	beq.n	8001f4a <HAL_GPIO_Init+0xae>
 8001f1c:	4a84      	ldr	r2, [pc, #528]	; (8002130 <HAL_GPIO_Init+0x294>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0xae>
          break;
 8001f22:	e02c      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	623b      	str	r3, [r7, #32]
          break;
 8001f2a:	e028      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	3304      	adds	r3, #4
 8001f32:	623b      	str	r3, [r7, #32]
          break;
 8001f34:	e023      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	3308      	adds	r3, #8
 8001f3c:	623b      	str	r3, [r7, #32]
          break;
 8001f3e:	e01e      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	330c      	adds	r3, #12
 8001f46:	623b      	str	r3, [r7, #32]
          break;
 8001f48:	e019      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f52:	2304      	movs	r3, #4
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e012      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f60:	2308      	movs	r3, #8
 8001f62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	611a      	str	r2, [r3, #16]
          break;
 8001f6a:	e008      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	615a      	str	r2, [r3, #20]
          break;
 8001f76:	e002      	b.n	8001f7e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	2bff      	cmp	r3, #255	; 0xff
 8001f82:	d801      	bhi.n	8001f88 <HAL_GPIO_Init+0xec>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	e001      	b.n	8001f8c <HAL_GPIO_Init+0xf0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2bff      	cmp	r3, #255	; 0xff
 8001f92:	d802      	bhi.n	8001f9a <HAL_GPIO_Init+0xfe>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_Init+0x104>
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3b08      	subs	r3, #8
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	6a39      	ldr	r1, [r7, #32]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8096 	beq.w	80020fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fce:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_GPIO_Init+0x298>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_GPIO_Init+0x298>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6193      	str	r3, [r2, #24]
 8001fda:	4b56      	ldr	r3, [pc, #344]	; (8002134 <HAL_GPIO_Init+0x298>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe6:	4a54      	ldr	r2, [pc, #336]	; (8002138 <HAL_GPIO_Init+0x29c>)
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4b      	ldr	r2, [pc, #300]	; (800213c <HAL_GPIO_Init+0x2a0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0x19e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x2a4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00d      	beq.n	8002036 <HAL_GPIO_Init+0x19a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a49      	ldr	r2, [pc, #292]	; (8002144 <HAL_GPIO_Init+0x2a8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <HAL_GPIO_Init+0x196>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_GPIO_Init+0x2ac>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_GPIO_Init+0x192>
 800202a:	2303      	movs	r3, #3
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x1a0>
 800202e:	2304      	movs	r3, #4
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x1a0>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x1a0>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x1a0>
 800203a:	2300      	movs	r3, #0
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800204c:	493a      	ldr	r1, [pc, #232]	; (8002138 <HAL_GPIO_Init+0x29c>)
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_GPIO_Init+0x2b0>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4938      	ldr	r1, [pc, #224]	; (800214c <HAL_GPIO_Init+0x2b0>)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]
 8002072:	e006      	b.n	8002082 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002074:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_GPIO_Init+0x2b0>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	43db      	mvns	r3, r3
 800207c:	4933      	ldr	r1, [pc, #204]	; (800214c <HAL_GPIO_Init+0x2b0>)
 800207e:	4013      	ands	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <HAL_GPIO_Init+0x2b0>)
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	492e      	ldr	r1, [pc, #184]	; (800214c <HAL_GPIO_Init+0x2b0>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
 800209a:	e006      	b.n	80020aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_GPIO_Init+0x2b0>)
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	4929      	ldr	r1, [pc, #164]	; (800214c <HAL_GPIO_Init+0x2b0>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_GPIO_Init+0x2b0>)
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	4924      	ldr	r1, [pc, #144]	; (800214c <HAL_GPIO_Init+0x2b0>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
 80020c2:	e006      	b.n	80020d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_GPIO_Init+0x2b0>)
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	491f      	ldr	r1, [pc, #124]	; (800214c <HAL_GPIO_Init+0x2b0>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_GPIO_Init+0x2b0>)
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	491a      	ldr	r1, [pc, #104]	; (800214c <HAL_GPIO_Init+0x2b0>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60cb      	str	r3, [r1, #12]
 80020ea:	e006      	b.n	80020fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_GPIO_Init+0x2b0>)
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4915      	ldr	r1, [pc, #84]	; (800214c <HAL_GPIO_Init+0x2b0>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	3301      	adds	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	f47f aed0 	bne.w	8001eb0 <HAL_GPIO_Init+0x14>
  }
}
 8002110:	bf00      	nop
 8002112:	372c      	adds	r7, #44	; 0x2c
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	10210000 	.word	0x10210000
 8002120:	10110000 	.word	0x10110000
 8002124:	10120000 	.word	0x10120000
 8002128:	10310000 	.word	0x10310000
 800212c:	10320000 	.word	0x10320000
 8002130:	10220000 	.word	0x10220000
 8002134:	40021000 	.word	0x40021000
 8002138:	40010000 	.word	0x40010000
 800213c:	40010800 	.word	0x40010800
 8002140:	40010c00 	.word	0x40010c00
 8002144:	40011000 	.word	0x40011000
 8002148:	40011400 	.word	0x40011400
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e10f      	b.n	8002382 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fc1e 	bl	80019b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	; 0x24
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002194:	f002 f888 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
 8002198:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4a7b      	ldr	r2, [pc, #492]	; (800238c <HAL_I2C_Init+0x23c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d807      	bhi.n	80021b4 <HAL_I2C_Init+0x64>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a7a      	ldr	r2, [pc, #488]	; (8002390 <HAL_I2C_Init+0x240>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	bf94      	ite	ls
 80021ac:	2301      	movls	r3, #1
 80021ae:	2300      	movhi	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e006      	b.n	80021c2 <HAL_I2C_Init+0x72>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a77      	ldr	r2, [pc, #476]	; (8002394 <HAL_I2C_Init+0x244>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	bf94      	ite	ls
 80021bc:	2301      	movls	r3, #1
 80021be:	2300      	movhi	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0db      	b.n	8002382 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4a72      	ldr	r2, [pc, #456]	; (8002398 <HAL_I2C_Init+0x248>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0c9b      	lsrs	r3, r3, #18
 80021d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a64      	ldr	r2, [pc, #400]	; (800238c <HAL_I2C_Init+0x23c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d802      	bhi.n	8002204 <HAL_I2C_Init+0xb4>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3301      	adds	r3, #1
 8002202:	e009      	b.n	8002218 <HAL_I2C_Init+0xc8>
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800220a:	fb02 f303 	mul.w	r3, r2, r3
 800220e:	4a63      	ldr	r2, [pc, #396]	; (800239c <HAL_I2C_Init+0x24c>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	3301      	adds	r3, #1
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	430b      	orrs	r3, r1
 800221e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800222a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4956      	ldr	r1, [pc, #344]	; (800238c <HAL_I2C_Init+0x23c>)
 8002234:	428b      	cmp	r3, r1
 8002236:	d80d      	bhi.n	8002254 <HAL_I2C_Init+0x104>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e59      	subs	r1, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fbb1 f3f3 	udiv	r3, r1, r3
 8002246:	3301      	adds	r3, #1
 8002248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224c:	2b04      	cmp	r3, #4
 800224e:	bf38      	it	cc
 8002250:	2304      	movcc	r3, #4
 8002252:	e04f      	b.n	80022f4 <HAL_I2C_Init+0x1a4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d111      	bne.n	8002280 <HAL_I2C_Init+0x130>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1e58      	subs	r0, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	440b      	add	r3, r1
 800226a:	fbb0 f3f3 	udiv	r3, r0, r3
 800226e:	3301      	adds	r3, #1
 8002270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e012      	b.n	80022a6 <HAL_I2C_Init+0x156>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e58      	subs	r0, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	0099      	lsls	r1, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	fbb0 f3f3 	udiv	r3, r0, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf0c      	ite	eq
 80022a0:	2301      	moveq	r3, #1
 80022a2:	2300      	movne	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Init+0x15e>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e022      	b.n	80022f4 <HAL_I2C_Init+0x1a4>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10e      	bne.n	80022d4 <HAL_I2C_Init+0x184>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1e58      	subs	r0, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	440b      	add	r3, r1
 80022c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d2:	e00f      	b.n	80022f4 <HAL_I2C_Init+0x1a4>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1e58      	subs	r0, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	0099      	lsls	r1, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	6809      	ldr	r1, [r1, #0]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6911      	ldr	r1, [r2, #16]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68d2      	ldr	r2, [r2, #12]
 800232e:	4311      	orrs	r1, r2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	430b      	orrs	r3, r1
 8002336:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	000186a0 	.word	0x000186a0
 8002390:	001e847f 	.word	0x001e847f
 8002394:	003d08ff 	.word	0x003d08ff
 8002398:	431bde83 	.word	0x431bde83
 800239c:	10624dd3 	.word	0x10624dd3

080023a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	461a      	mov	r2, r3
 80023ac:	460b      	mov	r3, r1
 80023ae:	817b      	strh	r3, [r7, #10]
 80023b0:	4613      	mov	r3, r2
 80023b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff fc62 	bl	8001c7c <HAL_GetTick>
 80023b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	f040 80e0 	bne.w	8002588 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2319      	movs	r3, #25
 80023ce:	2201      	movs	r2, #1
 80023d0:	4970      	ldr	r1, [pc, #448]	; (8002594 <HAL_I2C_Master_Transmit+0x1f4>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f001 f8c6 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023de:	2302      	movs	r3, #2
 80023e0:	e0d3      	b.n	800258a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_I2C_Master_Transmit+0x50>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0cc      	b.n	800258a <HAL_I2C_Master_Transmit+0x1ea>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d007      	beq.n	8002416 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002424:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2221      	movs	r2, #33	; 0x21
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2210      	movs	r2, #16
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	893a      	ldrh	r2, [r7, #8]
 8002446:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a50      	ldr	r2, [pc, #320]	; (8002598 <HAL_I2C_Master_Transmit+0x1f8>)
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002458:	8979      	ldrh	r1, [r7, #10]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	6a3a      	ldr	r2, [r7, #32]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fdfa 	bl	8003058 <I2C_MasterRequestWrite>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e08d      	b.n	800258a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002484:	e066      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	6a39      	ldr	r1, [r7, #32]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f001 f940 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00d      	beq.n	80024b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b04      	cmp	r3, #4
 800249c:	d107      	bne.n	80024ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06b      	b.n	800258a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d11b      	bne.n	8002528 <HAL_I2C_Master_Transmit+0x188>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d017      	beq.n	8002528 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	6a39      	ldr	r1, [r7, #32]
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f001 f930 	bl	8003792 <I2C_WaitOnBTFFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00d      	beq.n	8002554 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	2b04      	cmp	r3, #4
 800253e:	d107      	bne.n	8002550 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e01a      	b.n	800258a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	d194      	bne.n	8002486 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	e000      	b.n	800258a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002588:	2302      	movs	r3, #2
  }
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	00100002 	.word	0x00100002
 8002598:	ffff0000 	.word	0xffff0000

0800259c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	461a      	mov	r2, r3
 80025a8:	460b      	mov	r3, r1
 80025aa:	817b      	strh	r3, [r7, #10]
 80025ac:	4613      	mov	r3, r2
 80025ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff fb64 	bl	8001c7c <HAL_GetTick>
 80025b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	f040 8213 	bne.w	80029ea <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2319      	movs	r3, #25
 80025ca:	2201      	movs	r2, #1
 80025cc:	497e      	ldr	r1, [pc, #504]	; (80027c8 <HAL_I2C_Master_Receive+0x22c>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 ffc8 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
 80025dc:	e206      	b.n	80029ec <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_I2C_Master_Receive+0x50>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e1ff      	b.n	80029ec <HAL_I2C_Master_Receive+0x450>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d007      	beq.n	8002612 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002620:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2222      	movs	r2, #34	; 0x22
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2210      	movs	r2, #16
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	893a      	ldrh	r2, [r7, #8]
 8002642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a5e      	ldr	r2, [pc, #376]	; (80027cc <HAL_I2C_Master_Receive+0x230>)
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002654:	8979      	ldrh	r1, [r7, #10]
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fd72 	bl	8003144 <I2C_MasterRequestRead>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e1c0      	b.n	80029ec <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	2b00      	cmp	r3, #0
 8002670:	d113      	bne.n	800269a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	623b      	str	r3, [r7, #32]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	623b      	str	r3, [r7, #32]
 8002686:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e194      	b.n	80029c4 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d11d      	bne.n	80026de <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026da:	b662      	cpsie	i
 80026dc:	e172      	b.n	80029c4 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d11d      	bne.n	8002722 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026f6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800271e:	b662      	cpsie	i
 8002720:	e150      	b.n	80029c4 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002748:	e13c      	b.n	80029c4 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	2b03      	cmp	r3, #3
 8002750:	f200 80f5 	bhi.w	800293e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	2b01      	cmp	r3, #1
 800275a:	d123      	bne.n	80027a4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f001 f857 	bl	8003814 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e13d      	b.n	80029ec <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027a2:	e10f      	b.n	80029c4 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d150      	bne.n	800284e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b2:	2200      	movs	r2, #0
 80027b4:	4906      	ldr	r1, [pc, #24]	; (80027d0 <HAL_I2C_Master_Receive+0x234>)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fed4 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e112      	b.n	80029ec <HAL_I2C_Master_Receive+0x450>
 80027c6:	bf00      	nop
 80027c8:	00100002 	.word	0x00100002
 80027cc:	ffff0000 	.word	0xffff0000
 80027d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80027d4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002818:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800284c:	e0ba      	b.n	80029c4 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	2200      	movs	r2, #0
 8002856:	4967      	ldr	r1, [pc, #412]	; (80029f4 <HAL_I2C_Master_Receive+0x458>)
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fe83 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0c1      	b.n	80029ec <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002876:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b2:	2200      	movs	r2, #0
 80028b4:	494f      	ldr	r1, [pc, #316]	; (80029f4 <HAL_I2C_Master_Receive+0x458>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fe54 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e092      	b.n	80029ec <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002908:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	b2d2      	uxtb	r2, r2
 8002916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800293c:	e042      	b.n	80029c4 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 ff66 	bl	8003814 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e04c      	b.n	80029ec <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b04      	cmp	r3, #4
 8002990:	d118      	bne.n	80029c4 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f47f aebe 	bne.w	800274a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
  }
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3728      	adds	r7, #40	; 0x28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	00010004 	.word	0x00010004

080029f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	813b      	strh	r3, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a12:	f7ff f933 	bl	8001c7c <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	f040 80d9 	bne.w	8002bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2319      	movs	r3, #25
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	496d      	ldr	r1, [pc, #436]	; (8002be4 <HAL_I2C_Mem_Write+0x1ec>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fd97 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0cc      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Mem_Write+0x56>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e0c5      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d007      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2221      	movs	r2, #33	; 0x21
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2240      	movs	r2, #64	; 0x40
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a4d      	ldr	r2, [pc, #308]	; (8002be8 <HAL_I2C_Mem_Write+0x1f0>)
 8002ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ab6:	88f8      	ldrh	r0, [r7, #6]
 8002ab8:	893a      	ldrh	r2, [r7, #8]
 8002aba:	8979      	ldrh	r1, [r7, #10]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fbf2 	bl	80032b0 <I2C_RequestMemoryWrite>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d052      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e081      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fe18 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e06b      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d11b      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x180>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d017      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1aa      	bne.n	8002ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fe04 	bl	8003792 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e016      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	00100002 	.word	0x00100002
 8002be8:	ffff0000 	.word	0xffff0000

08002bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	; 0x30
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c06:	f7ff f839 	bl	8001c7c <HAL_GetTick>
 8002c0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	f040 8218 	bne.w	800304a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2319      	movs	r3, #25
 8002c20:	2201      	movs	r2, #1
 8002c22:	4981      	ldr	r1, [pc, #516]	; (8002e28 <HAL_I2C_Mem_Read+0x23c>)
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fc9d 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	e20b      	b.n	800304c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Mem_Read+0x56>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e204      	b.n	800304c <HAL_I2C_Mem_Read+0x460>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d007      	beq.n	8002c68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2222      	movs	r2, #34	; 0x22
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2240      	movs	r2, #64	; 0x40
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a61      	ldr	r2, [pc, #388]	; (8002e2c <HAL_I2C_Mem_Read+0x240>)
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002caa:	88f8      	ldrh	r0, [r7, #6]
 8002cac:	893a      	ldrh	r2, [r7, #8]
 8002cae:	8979      	ldrh	r1, [r7, #10]
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fb82 	bl	80033c4 <I2C_RequestMemoryRead>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1c0      	b.n	800304c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d113      	bne.n	8002cfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e194      	b.n	8003024 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d11d      	bne.n	8002d3e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d12:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d3a:	b662      	cpsie	i
 8002d3c:	e172      	b.n	8003024 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d11d      	bne.n	8002d82 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d56:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d7e:	b662      	cpsie	i
 8002d80:	e150      	b.n	8003024 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002da8:	e13c      	b.n	8003024 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	f200 80f5 	bhi.w	8002f9e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d123      	bne.n	8002e04 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fd27 	bl	8003814 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e13d      	b.n	800304c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e02:	e10f      	b.n	8003024 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d150      	bne.n	8002eae <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	2200      	movs	r2, #0
 8002e14:	4906      	ldr	r1, [pc, #24]	; (8002e30 <HAL_I2C_Mem_Read+0x244>)
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fba4 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e112      	b.n	800304c <HAL_I2C_Mem_Read+0x460>
 8002e26:	bf00      	nop
 8002e28:	00100002 	.word	0x00100002
 8002e2c:	ffff0000 	.word	0xffff0000
 8002e30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e34:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e44:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e78:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eac:	e0ba      	b.n	8003024 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4967      	ldr	r1, [pc, #412]	; (8003054 <HAL_I2C_Mem_Read+0x468>)
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fb53 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0c1      	b.n	800304c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	2200      	movs	r2, #0
 8002f14:	494f      	ldr	r1, [pc, #316]	; (8003054 <HAL_I2C_Mem_Read+0x468>)
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fb24 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e092      	b.n	800304c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f34:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f68:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	1c5a      	adds	r2, r3, #1
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f9c:	e042      	b.n	8003024 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fc36 	bl	8003814 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e04c      	b.n	800304c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d118      	bne.n	8003024 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	f47f aebe 	bne.w	8002daa <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e000      	b.n	800304c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3728      	adds	r7, #40	; 0x28
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	00010004 	.word	0x00010004

08003058 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	460b      	mov	r3, r1
 8003066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d006      	beq.n	8003082 <I2C_MasterRequestWrite+0x2a>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d003      	beq.n	8003082 <I2C_MasterRequestWrite+0x2a>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003080:	d108      	bne.n	8003094 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e00b      	b.n	80030ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	2b12      	cmp	r3, #18
 800309a:	d107      	bne.n	80030ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fa53 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e035      	b.n	8003134 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d0:	d108      	bne.n	80030e4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030e0:	611a      	str	r2, [r3, #16]
 80030e2:	e01b      	b.n	800311c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	11db      	asrs	r3, r3, #7
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 0306 	and.w	r3, r3, #6
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f063 030f 	orn	r3, r3, #15
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	490e      	ldr	r1, [pc, #56]	; (800313c <I2C_MasterRequestWrite+0xe4>)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa85 	bl	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e010      	b.n	8003134 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	4907      	ldr	r1, [pc, #28]	; (8003140 <I2C_MasterRequestWrite+0xe8>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 fa75 	bl	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	00010008 	.word	0x00010008
 8003140:	00010002 	.word	0x00010002

08003144 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	460b      	mov	r3, r1
 8003152:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003168:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d006      	beq.n	800317e <I2C_MasterRequestRead+0x3a>
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d003      	beq.n	800317e <I2C_MasterRequestRead+0x3a>
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800317c:	d108      	bne.n	8003190 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e00b      	b.n	80031a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	2b11      	cmp	r3, #17
 8003196:	d107      	bne.n	80031a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f9d5 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e06d      	b.n	80032a0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031cc:	d108      	bne.n	80031e0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	611a      	str	r2, [r3, #16]
 80031de:	e053      	b.n	8003288 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031e0:	897b      	ldrh	r3, [r7, #10]
 80031e2:	11db      	asrs	r3, r3, #7
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 0306 	and.w	r3, r3, #6
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f063 030f 	orn	r3, r3, #15
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	492a      	ldr	r1, [pc, #168]	; (80032a8 <I2C_MasterRequestRead+0x164>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fa07 	bl	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e048      	b.n	80032a0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4923      	ldr	r1, [pc, #140]	; (80032ac <I2C_MasterRequestRead+0x168>)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9f7 	bl	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e038      	b.n	80032a0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003252:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f97f 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e017      	b.n	80032a0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003270:	897b      	ldrh	r3, [r7, #10]
 8003272:	11db      	asrs	r3, r3, #7
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 0306 	and.w	r3, r3, #6
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f063 030e 	orn	r3, r3, #14
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4907      	ldr	r1, [pc, #28]	; (80032ac <I2C_MasterRequestRead+0x168>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9bf 	bl	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	00010008 	.word	0x00010008
 80032ac:	00010002 	.word	0x00010002

080032b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	817b      	strh	r3, [r7, #10]
 80032c2:	460b      	mov	r3, r1
 80032c4:	813b      	strh	r3, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f93c 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e05f      	b.n	80033b6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f6:	897b      	ldrh	r3, [r7, #10]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003304:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	6a3a      	ldr	r2, [r7, #32]
 800330a:	492d      	ldr	r1, [pc, #180]	; (80033c0 <I2C_RequestMemoryWrite+0x110>)
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f980 	bl	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e04c      	b.n	80033b6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003334:	6a39      	ldr	r1, [r7, #32]
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f9ea 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2b04      	cmp	r3, #4
 8003348:	d107      	bne.n	800335a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003358:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e02b      	b.n	80033b6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003364:	893b      	ldrh	r3, [r7, #8]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	e021      	b.n	80033b4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003370:	893b      	ldrh	r3, [r7, #8]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	b29b      	uxth	r3, r3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003380:	6a39      	ldr	r1, [r7, #32]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f9c4 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b04      	cmp	r3, #4
 8003394:	d107      	bne.n	80033a6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e005      	b.n	80033b6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033aa:	893b      	ldrh	r3, [r7, #8]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	00010002 	.word	0x00010002

080033c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	4608      	mov	r0, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	461a      	mov	r2, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	817b      	strh	r3, [r7, #10]
 80033d6:	460b      	mov	r3, r1
 80033d8:	813b      	strh	r3, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	2200      	movs	r2, #0
 8003406:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f8aa 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e09e      	b.n	8003558 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	494c      	ldr	r1, [pc, #304]	; (8003560 <I2C_RequestMemoryRead+0x19c>)
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f8ee 	bl	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e08b      	b.n	8003558 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003458:	6a39      	ldr	r1, [r7, #32]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f958 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b04      	cmp	r3, #4
 800346c:	d107      	bne.n	800347e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e06a      	b.n	8003558 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d105      	bne.n	8003494 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003488:	893b      	ldrh	r3, [r7, #8]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	e021      	b.n	80034d8 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003494:	893b      	ldrh	r3, [r7, #8]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	b29b      	uxth	r3, r3
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	6a39      	ldr	r1, [r7, #32]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f932 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00d      	beq.n	80034ce <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d107      	bne.n	80034ca <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e044      	b.n	8003558 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ce:	893b      	ldrh	r3, [r7, #8]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	6a39      	ldr	r1, [r7, #32]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f917 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00d      	beq.n	8003504 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d107      	bne.n	8003500 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e029      	b.n	8003558 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003512:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2200      	movs	r2, #0
 800351c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f81f 	bl	8003564 <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e013      	b.n	8003558 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003530:	897b      	ldrh	r3, [r7, #10]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	6a3a      	ldr	r2, [r7, #32]
 8003544:	4906      	ldr	r1, [pc, #24]	; (8003560 <I2C_RequestMemoryRead+0x19c>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f863 	bl	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	00010002 	.word	0x00010002

08003564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003574:	e025      	b.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357c:	d021      	beq.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fe fb7d 	bl	8001c7c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d116      	bne.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0220 	orr.w	r2, r3, #32
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e023      	b.n	800360a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d10d      	bne.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	e00c      	b.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf0c      	ite	eq
 80035fa:	2301      	moveq	r3, #1
 80035fc:	2300      	movne	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	429a      	cmp	r2, r3
 8003606:	d0b6      	beq.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003620:	e051      	b.n	80036c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003630:	d123      	bne.n	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003640:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800364a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e046      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003680:	d021      	beq.n	80036c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7fe fafb 	bl	8001c7c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d116      	bne.n	80036c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f043 0220 	orr.w	r2, r3, #32
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e020      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d10c      	bne.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	43da      	mvns	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	e00b      	b.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d18d      	bne.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800371c:	e02d      	b.n	800377a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f8ce 	bl	80038c0 <I2C_IsAcknowledgeFailed>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e02d      	b.n	800378a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003734:	d021      	beq.n	800377a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003736:	f7fe faa1 	bl	8001c7c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d116      	bne.n	800377a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e007      	b.n	800378a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b80      	cmp	r3, #128	; 0x80
 8003786:	d1ca      	bne.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800379e:	e02d      	b.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f88d 	bl	80038c0 <I2C_IsAcknowledgeFailed>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e02d      	b.n	800380c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b6:	d021      	beq.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b8:	f7fe fa60 	bl	8001c7c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d302      	bcc.n	80037ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d116      	bne.n	80037fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e007      	b.n	800380c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d1ca      	bne.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003820:	e042      	b.n	80038a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b10      	cmp	r3, #16
 800382e:	d119      	bne.n	8003864 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0210 	mvn.w	r2, #16
 8003838:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e029      	b.n	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003864:	f7fe fa0a 	bl	8001c7c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	429a      	cmp	r2, r3
 8003872:	d302      	bcc.n	800387a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d116      	bne.n	80038a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f043 0220 	orr.w	r2, r3, #32
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e007      	b.n	80038b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d1b5      	bne.n	8003822 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d6:	d11b      	bne.n	8003910 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0204 	orr.w	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e304      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8087 	beq.w	8003a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800393c:	4b92      	ldr	r3, [pc, #584]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b04      	cmp	r3, #4
 8003946:	d00c      	beq.n	8003962 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003948:	4b8f      	ldr	r3, [pc, #572]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d112      	bne.n	800397a <HAL_RCC_OscConfig+0x5e>
 8003954:	4b8c      	ldr	r3, [pc, #560]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	d10b      	bne.n	800397a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003962:	4b89      	ldr	r3, [pc, #548]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d06c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x12c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d168      	bne.n	8003a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e2de      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x76>
 8003984:	4b80      	ldr	r3, [pc, #512]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a7f      	ldr	r2, [pc, #508]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800398a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	e02e      	b.n	80039f0 <HAL_RCC_OscConfig+0xd4>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x98>
 800399a:	4b7b      	ldr	r3, [pc, #492]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a7a      	ldr	r2, [pc, #488]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b78      	ldr	r3, [pc, #480]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a77      	ldr	r2, [pc, #476]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e01d      	b.n	80039f0 <HAL_RCC_OscConfig+0xd4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0xbc>
 80039be:	4b72      	ldr	r3, [pc, #456]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a71      	ldr	r2, [pc, #452]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b6f      	ldr	r3, [pc, #444]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a6e      	ldr	r2, [pc, #440]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e00b      	b.n	80039f0 <HAL_RCC_OscConfig+0xd4>
 80039d8:	4b6b      	ldr	r3, [pc, #428]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a6a      	ldr	r2, [pc, #424]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b68      	ldr	r3, [pc, #416]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a67      	ldr	r2, [pc, #412]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d013      	beq.n	8003a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe f940 	bl	8001c7c <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7fe f93c 	bl	8001c7c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e292      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b5d      	ldr	r3, [pc, #372]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0xe4>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe f92c 	bl	8001c7c <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe f928 	bl	8001c7c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e27e      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x10c>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d063      	beq.n	8003b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a56:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a62:	4b49      	ldr	r3, [pc, #292]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x18c>
 8003a6e:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d116      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7a:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_RCC_OscConfig+0x176>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e252      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4939      	ldr	r1, [pc, #228]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa6:	e03a      	b.n	8003b1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d020      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fe f8e1 	bl	8001c7c <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abe:	f7fe f8dd 	bl	8001c7c <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e233      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4927      	ldr	r1, [pc, #156]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]
 8003af0:	e015      	b.n	8003b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af2:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fe f8c0 	bl	8001c7c <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b00:	f7fe f8bc 	bl	8001c7c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e212      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d03a      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d019      	beq.n	8003b66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b38:	f7fe f8a0 	bl	8001c7c <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b40:	f7fe f89c 	bl	8001c7c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e1f2      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f000 fbb6 	bl	80042d0 <RCC_Delay>
 8003b64:	e01c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe f886 	bl	8001c7c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b72:	e00f      	b.n	8003b94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b74:	f7fe f882 	bl	8001c7c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d908      	bls.n	8003b94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e1d8      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	42420000 	.word	0x42420000
 8003b90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b9b      	ldr	r3, [pc, #620]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e9      	bne.n	8003b74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a6 	beq.w	8003cfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b94      	ldr	r3, [pc, #592]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	4b91      	ldr	r3, [pc, #580]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	4a90      	ldr	r2, [pc, #576]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	61d3      	str	r3, [r2, #28]
 8003bca:	4b8e      	ldr	r3, [pc, #568]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bda:	4b8b      	ldr	r3, [pc, #556]	; (8003e08 <HAL_RCC_OscConfig+0x4ec>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d118      	bne.n	8003c18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be6:	4b88      	ldr	r3, [pc, #544]	; (8003e08 <HAL_RCC_OscConfig+0x4ec>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a87      	ldr	r2, [pc, #540]	; (8003e08 <HAL_RCC_OscConfig+0x4ec>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf2:	f7fe f843 	bl	8001c7c <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fe f83f 	bl	8001c7c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b64      	cmp	r3, #100	; 0x64
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e195      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	4b7e      	ldr	r3, [pc, #504]	; (8003e08 <HAL_RCC_OscConfig+0x4ec>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x312>
 8003c20:	4b78      	ldr	r3, [pc, #480]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4a77      	ldr	r2, [pc, #476]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6213      	str	r3, [r2, #32]
 8003c2c:	e02d      	b.n	8003c8a <HAL_RCC_OscConfig+0x36e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x334>
 8003c36:	4b73      	ldr	r3, [pc, #460]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4a72      	ldr	r2, [pc, #456]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	6213      	str	r3, [r2, #32]
 8003c42:	4b70      	ldr	r3, [pc, #448]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4a6f      	ldr	r2, [pc, #444]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c48:	f023 0304 	bic.w	r3, r3, #4
 8003c4c:	6213      	str	r3, [r2, #32]
 8003c4e:	e01c      	b.n	8003c8a <HAL_RCC_OscConfig+0x36e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d10c      	bne.n	8003c72 <HAL_RCC_OscConfig+0x356>
 8003c58:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4a69      	ldr	r2, [pc, #420]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c5e:	f043 0304 	orr.w	r3, r3, #4
 8003c62:	6213      	str	r3, [r2, #32]
 8003c64:	4b67      	ldr	r3, [pc, #412]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	4a66      	ldr	r2, [pc, #408]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6213      	str	r3, [r2, #32]
 8003c70:	e00b      	b.n	8003c8a <HAL_RCC_OscConfig+0x36e>
 8003c72:	4b64      	ldr	r3, [pc, #400]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	4a63      	ldr	r2, [pc, #396]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	6213      	str	r3, [r2, #32]
 8003c7e:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a60      	ldr	r2, [pc, #384]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d015      	beq.n	8003cbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c92:	f7fd fff3 	bl	8001c7c <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fd ffef 	bl	8001c7c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e143      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	4b54      	ldr	r3, [pc, #336]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ee      	beq.n	8003c9a <HAL_RCC_OscConfig+0x37e>
 8003cbc:	e014      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7fd ffdd 	bl	8001c7c <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fd ffd9 	bl	8001c7c <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e12d      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cdc:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ee      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d105      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cee:	4b45      	ldr	r3, [pc, #276]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4a44      	ldr	r2, [pc, #272]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 808c 	beq.w	8003e1c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003d04:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d10e      	bne.n	8003d30 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003d12:	4b3c      	ldr	r3, [pc, #240]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d108      	bne.n	8003d30 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8003d1e:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e103      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d14e      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003d38:	4b32      	ldr	r3, [pc, #200]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8003d44:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0ef      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003d58:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <HAL_RCC_OscConfig+0x4f0>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fd ff8d 	bl	8001c7c <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d66:	f7fd ff89 	bl	8001c7c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b64      	cmp	r3, #100	; 0x64
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e0df      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003d78:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f0      	bne.n	8003d66 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	491c      	ldr	r1, [pc, #112]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003d96:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4918      	ldr	r1, [pc, #96]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <HAL_RCC_OscConfig+0x4f0>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fd ff65 	bl	8001c7c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003db6:	f7fd ff61 	bl	8001c7c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	; 0x64
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e0b7      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x49a>
 8003dd4:	e022      	b.n	8003e1c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	4a0a      	ldr	r2, [pc, #40]	; (8003e04 <HAL_RCC_OscConfig+0x4e8>)
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_RCC_OscConfig+0x4f0>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd ff48 	bl	8001c7c <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003dee:	e00f      	b.n	8003e10 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003df0:	f7fd ff44 	bl	8001c7c <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d908      	bls.n	8003e10 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e09a      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8003e10:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e9      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8088 	beq.w	8003f36 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e26:	4b46      	ldr	r3, [pc, #280]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d068      	beq.n	8003f04 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d14d      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <HAL_RCC_OscConfig+0x628>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fd ff1c 	bl	8001c7c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fd ff18 	bl	8001c7c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e06e      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5a:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	d10f      	bne.n	8003e90 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003e70:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4931      	ldr	r1, [pc, #196]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e7e:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	f023 020f 	bic.w	r2, r3, #15
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	492d      	ldr	r1, [pc, #180]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e90:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	4927      	ldr	r1, [pc, #156]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <HAL_RCC_OscConfig+0x628>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eae:	f7fd fee5 	bl	8001c7c <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb6:	f7fd fee1 	bl	8001c7c <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e037      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x59a>
 8003ed4:	e02f      	b.n	8003f36 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_RCC_OscConfig+0x628>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fd fece 	bl	8001c7c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd feca 	bl	8001c7c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e020      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c8>
 8003f02:	e018      	b.n	8003f36 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e013      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_OscConfig+0x624>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	42420060 	.word	0x42420060

08003f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d0      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d910      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6a:	4b67      	ldr	r3, [pc, #412]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 0207 	bic.w	r2, r3, #7
 8003f72:	4965      	ldr	r1, [pc, #404]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa4:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	4a58      	ldr	r2, [pc, #352]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	494d      	ldr	r1, [pc, #308]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d040      	beq.n	8004068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d115      	bne.n	8004026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e073      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06b      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004026:	4b39      	ldr	r3, [pc, #228]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4936      	ldr	r1, [pc, #216]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004038:	f7fd fe20 	bl	8001c7c <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fd fe1c 	bl	8001c7c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e053      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f003 020c 	and.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	429a      	cmp	r2, r3
 8004066:	d1eb      	bne.n	8004040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004068:	4b27      	ldr	r3, [pc, #156]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d210      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 0207 	bic.w	r2, r3, #7
 800407e:	4922      	ldr	r1, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e032      	b.n	80040fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4916      	ldr	r1, [pc, #88]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	490e      	ldr	r1, [pc, #56]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040d6:	f000 f821 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040da:	4601      	mov	r1, r0
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	5cd3      	ldrb	r3, [r2, r3]
 80040ea:	fa21 f303 	lsr.w	r3, r1, r3
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1cc>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1d0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fd7e 	bl	8001bf8 <HAL_InitTick>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40022000 	.word	0x40022000
 800410c:	40021000 	.word	0x40021000
 8004110:	08005de0 	.word	0x08005de0
 8004114:	20000000 	.word	0x20000000
 8004118:	20000004 	.word	0x20000004

0800411c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411e:	b091      	sub	sp, #68	; 0x44
 8004120:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8004122:	4b56      	ldr	r3, [pc, #344]	; (800427c <HAL_RCC_GetSysClockFreq+0x160>)
 8004124:	f107 0414 	add.w	r4, r7, #20
 8004128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800412a:	c407      	stmia	r4!, {r0, r1, r2}
 800412c:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800412e:	4b54      	ldr	r3, [pc, #336]	; (8004280 <HAL_RCC_GetSysClockFreq+0x164>)
 8004130:	1d3c      	adds	r4, r7, #4
 8004132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
 800413c:	2300      	movs	r3, #0
 800413e:	633b      	str	r3, [r7, #48]	; 0x30
 8004140:	2300      	movs	r3, #0
 8004142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004144:	2300      	movs	r3, #0
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004150:	2300      	movs	r3, #0
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004154:	4b4b      	ldr	r3, [pc, #300]	; (8004284 <HAL_RCC_GetSysClockFreq+0x168>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b04      	cmp	r3, #4
 8004162:	d002      	beq.n	800416a <HAL_RCC_GetSysClockFreq+0x4e>
 8004164:	2b08      	cmp	r3, #8
 8004166:	d003      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x54>
 8004168:	e07f      	b.n	800426a <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_GetSysClockFreq+0x16c>)
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800416e:	e07f      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	0c9b      	lsrs	r3, r3, #18
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800417c:	4413      	add	r3, r2
 800417e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d065      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_RCC_GetSysClockFreq+0x168>)
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800419a:	4413      	add	r3, r2
 800419c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80041a2:	4b38      	ldr	r3, [pc, #224]	; (8004284 <HAL_RCC_GetSysClockFreq+0x168>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d043      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80041ae:	4b35      	ldr	r3, [pc, #212]	; (8004284 <HAL_RCC_GetSysClockFreq+0x168>)
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	3301      	adds	r3, #1
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80041bc:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_RCC_GetSysClockFreq+0x168>)
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	3302      	adds	r3, #2
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	4619      	mov	r1, r3
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	fb03 f502 	mul.w	r5, r3, r2
 80041dc:	fb01 f004 	mul.w	r0, r1, r4
 80041e0:	4428      	add	r0, r5
 80041e2:	fba1 3403 	umull	r3, r4, r1, r3
 80041e6:	1902      	adds	r2, r0, r4
 80041e8:	4614      	mov	r4, r2
 80041ea:	4a27      	ldr	r2, [pc, #156]	; (8004288 <HAL_RCC_GetSysClockFreq+0x16c>)
 80041ec:	fb02 f104 	mul.w	r1, r2, r4
 80041f0:	2200      	movs	r2, #0
 80041f2:	fb02 f203 	mul.w	r2, r2, r3
 80041f6:	440a      	add	r2, r1
 80041f8:	4923      	ldr	r1, [pc, #140]	; (8004288 <HAL_RCC_GetSysClockFreq+0x16c>)
 80041fa:	fba3 5601 	umull	r5, r6, r3, r1
 80041fe:	1993      	adds	r3, r2, r6
 8004200:	461e      	mov	r6, r3
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	4619      	mov	r1, r3
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	f04f 0400 	mov.w	r4, #0
 8004210:	fb03 fc02 	mul.w	ip, r3, r2
 8004214:	fb01 f004 	mul.w	r0, r1, r4
 8004218:	4460      	add	r0, ip
 800421a:	fba1 3403 	umull	r3, r4, r1, r3
 800421e:	1902      	adds	r2, r0, r4
 8004220:	4614      	mov	r4, r2
 8004222:	461a      	mov	r2, r3
 8004224:	4623      	mov	r3, r4
 8004226:	4628      	mov	r0, r5
 8004228:	4631      	mov	r1, r6
 800422a:	f7fc fdf7 	bl	8000e1c <__aeabi_uldivmod>
 800422e:	4603      	mov	r3, r0
 8004230:	460c      	mov	r4, r1
 8004232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004234:	e007      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	4a13      	ldr	r2, [pc, #76]	; (8004288 <HAL_RCC_GetSysClockFreq+0x16c>)
 800423a:	fb02 f203 	mul.w	r2, r2, r3
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8004246:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800424a:	461a      	mov	r2, r3
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8004252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004258:	e004      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	4a0b      	ldr	r2, [pc, #44]	; (800428c <HAL_RCC_GetSysClockFreq+0x170>)
 800425e:	fb02 f303 	mul.w	r3, r2, r3
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8004264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004268:	e002      	b.n	8004270 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_GetSysClockFreq+0x174>)
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800426e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004272:	4618      	mov	r0, r3
 8004274:	3744      	adds	r7, #68	; 0x44
 8004276:	46bd      	mov	sp, r7
 8004278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427a:	bf00      	nop
 800427c:	08005db8 	.word	0x08005db8
 8004280:	08005dc8 	.word	0x08005dc8
 8004284:	40021000 	.word	0x40021000
 8004288:	017d7840 	.word	0x017d7840
 800428c:	003d0900 	.word	0x003d0900
 8004290:	007a1200 	.word	0x007a1200

08004294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004298:	4b02      	ldr	r3, [pc, #8]	; (80042a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	20000000 	.word	0x20000000

080042a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042ac:	f7ff fff2 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042b0:	4601      	mov	r1, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4a03      	ldr	r2, [pc, #12]	; (80042cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042be:	5cd3      	ldrb	r3, [r2, r3]
 80042c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08005df0 	.word	0x08005df0

080042d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <RCC_Delay+0x34>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <RCC_Delay+0x38>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0a5b      	lsrs	r3, r3, #9
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042ec:	bf00      	nop
  }
  while (Delay --);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1e5a      	subs	r2, r3, #1
 80042f2:	60fa      	str	r2, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f9      	bne.n	80042ec <RCC_Delay+0x1c>
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000000 	.word	0x20000000
 8004308:	10624dd3 	.word	0x10624dd3

0800430c <__errno>:
 800430c:	4b01      	ldr	r3, [pc, #4]	; (8004314 <__errno+0x8>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	2000000c 	.word	0x2000000c

08004318 <__libc_init_array>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	2500      	movs	r5, #0
 800431c:	4e0c      	ldr	r6, [pc, #48]	; (8004350 <__libc_init_array+0x38>)
 800431e:	4c0d      	ldr	r4, [pc, #52]	; (8004354 <__libc_init_array+0x3c>)
 8004320:	1ba4      	subs	r4, r4, r6
 8004322:	10a4      	asrs	r4, r4, #2
 8004324:	42a5      	cmp	r5, r4
 8004326:	d109      	bne.n	800433c <__libc_init_array+0x24>
 8004328:	f001 fd3a 	bl	8005da0 <_init>
 800432c:	2500      	movs	r5, #0
 800432e:	4e0a      	ldr	r6, [pc, #40]	; (8004358 <__libc_init_array+0x40>)
 8004330:	4c0a      	ldr	r4, [pc, #40]	; (800435c <__libc_init_array+0x44>)
 8004332:	1ba4      	subs	r4, r4, r6
 8004334:	10a4      	asrs	r4, r4, #2
 8004336:	42a5      	cmp	r5, r4
 8004338:	d105      	bne.n	8004346 <__libc_init_array+0x2e>
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004340:	4798      	blx	r3
 8004342:	3501      	adds	r5, #1
 8004344:	e7ee      	b.n	8004324 <__libc_init_array+0xc>
 8004346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800434a:	4798      	blx	r3
 800434c:	3501      	adds	r5, #1
 800434e:	e7f2      	b.n	8004336 <__libc_init_array+0x1e>
 8004350:	08006028 	.word	0x08006028
 8004354:	08006028 	.word	0x08006028
 8004358:	08006028 	.word	0x08006028
 800435c:	0800602c 	.word	0x0800602c

08004360 <memset>:
 8004360:	4603      	mov	r3, r0
 8004362:	4402      	add	r2, r0
 8004364:	4293      	cmp	r3, r2
 8004366:	d100      	bne.n	800436a <memset+0xa>
 8004368:	4770      	bx	lr
 800436a:	f803 1b01 	strb.w	r1, [r3], #1
 800436e:	e7f9      	b.n	8004364 <memset+0x4>

08004370 <__cvt>:
 8004370:	2b00      	cmp	r3, #0
 8004372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004376:	461e      	mov	r6, r3
 8004378:	bfbb      	ittet	lt
 800437a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800437e:	461e      	movlt	r6, r3
 8004380:	2300      	movge	r3, #0
 8004382:	232d      	movlt	r3, #45	; 0x2d
 8004384:	b088      	sub	sp, #32
 8004386:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004388:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800438c:	f027 0720 	bic.w	r7, r7, #32
 8004390:	2f46      	cmp	r7, #70	; 0x46
 8004392:	4614      	mov	r4, r2
 8004394:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004396:	700b      	strb	r3, [r1, #0]
 8004398:	d004      	beq.n	80043a4 <__cvt+0x34>
 800439a:	2f45      	cmp	r7, #69	; 0x45
 800439c:	d100      	bne.n	80043a0 <__cvt+0x30>
 800439e:	3501      	adds	r5, #1
 80043a0:	2302      	movs	r3, #2
 80043a2:	e000      	b.n	80043a6 <__cvt+0x36>
 80043a4:	2303      	movs	r3, #3
 80043a6:	aa07      	add	r2, sp, #28
 80043a8:	9204      	str	r2, [sp, #16]
 80043aa:	aa06      	add	r2, sp, #24
 80043ac:	e9cd a202 	strd	sl, r2, [sp, #8]
 80043b0:	e9cd 3500 	strd	r3, r5, [sp]
 80043b4:	4622      	mov	r2, r4
 80043b6:	4633      	mov	r3, r6
 80043b8:	f000 fba6 	bl	8004b08 <_dtoa_r>
 80043bc:	2f47      	cmp	r7, #71	; 0x47
 80043be:	4680      	mov	r8, r0
 80043c0:	d102      	bne.n	80043c8 <__cvt+0x58>
 80043c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043c4:	07db      	lsls	r3, r3, #31
 80043c6:	d526      	bpl.n	8004416 <__cvt+0xa6>
 80043c8:	2f46      	cmp	r7, #70	; 0x46
 80043ca:	eb08 0905 	add.w	r9, r8, r5
 80043ce:	d111      	bne.n	80043f4 <__cvt+0x84>
 80043d0:	f898 3000 	ldrb.w	r3, [r8]
 80043d4:	2b30      	cmp	r3, #48	; 0x30
 80043d6:	d10a      	bne.n	80043ee <__cvt+0x7e>
 80043d8:	2200      	movs	r2, #0
 80043da:	2300      	movs	r3, #0
 80043dc:	4620      	mov	r0, r4
 80043de:	4631      	mov	r1, r6
 80043e0:	f7fc fb4e 	bl	8000a80 <__aeabi_dcmpeq>
 80043e4:	b918      	cbnz	r0, 80043ee <__cvt+0x7e>
 80043e6:	f1c5 0501 	rsb	r5, r5, #1
 80043ea:	f8ca 5000 	str.w	r5, [sl]
 80043ee:	f8da 3000 	ldr.w	r3, [sl]
 80043f2:	4499      	add	r9, r3
 80043f4:	2200      	movs	r2, #0
 80043f6:	2300      	movs	r3, #0
 80043f8:	4620      	mov	r0, r4
 80043fa:	4631      	mov	r1, r6
 80043fc:	f7fc fb40 	bl	8000a80 <__aeabi_dcmpeq>
 8004400:	b938      	cbnz	r0, 8004412 <__cvt+0xa2>
 8004402:	2230      	movs	r2, #48	; 0x30
 8004404:	9b07      	ldr	r3, [sp, #28]
 8004406:	454b      	cmp	r3, r9
 8004408:	d205      	bcs.n	8004416 <__cvt+0xa6>
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	9107      	str	r1, [sp, #28]
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e7f8      	b.n	8004404 <__cvt+0x94>
 8004412:	f8cd 901c 	str.w	r9, [sp, #28]
 8004416:	4640      	mov	r0, r8
 8004418:	9b07      	ldr	r3, [sp, #28]
 800441a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800441c:	eba3 0308 	sub.w	r3, r3, r8
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	b008      	add	sp, #32
 8004424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004428 <__exponent>:
 8004428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800442a:	2900      	cmp	r1, #0
 800442c:	bfb4      	ite	lt
 800442e:	232d      	movlt	r3, #45	; 0x2d
 8004430:	232b      	movge	r3, #43	; 0x2b
 8004432:	4604      	mov	r4, r0
 8004434:	bfb8      	it	lt
 8004436:	4249      	neglt	r1, r1
 8004438:	2909      	cmp	r1, #9
 800443a:	f804 2b02 	strb.w	r2, [r4], #2
 800443e:	7043      	strb	r3, [r0, #1]
 8004440:	dd21      	ble.n	8004486 <__exponent+0x5e>
 8004442:	f10d 0307 	add.w	r3, sp, #7
 8004446:	461f      	mov	r7, r3
 8004448:	260a      	movs	r6, #10
 800444a:	fb91 f5f6 	sdiv	r5, r1, r6
 800444e:	fb06 1115 	mls	r1, r6, r5, r1
 8004452:	2d09      	cmp	r5, #9
 8004454:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004458:	f803 1c01 	strb.w	r1, [r3, #-1]
 800445c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004460:	4629      	mov	r1, r5
 8004462:	dc09      	bgt.n	8004478 <__exponent+0x50>
 8004464:	3130      	adds	r1, #48	; 0x30
 8004466:	3b02      	subs	r3, #2
 8004468:	f802 1c01 	strb.w	r1, [r2, #-1]
 800446c:	42bb      	cmp	r3, r7
 800446e:	4622      	mov	r2, r4
 8004470:	d304      	bcc.n	800447c <__exponent+0x54>
 8004472:	1a10      	subs	r0, r2, r0
 8004474:	b003      	add	sp, #12
 8004476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004478:	4613      	mov	r3, r2
 800447a:	e7e6      	b.n	800444a <__exponent+0x22>
 800447c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004480:	f804 2b01 	strb.w	r2, [r4], #1
 8004484:	e7f2      	b.n	800446c <__exponent+0x44>
 8004486:	2330      	movs	r3, #48	; 0x30
 8004488:	4419      	add	r1, r3
 800448a:	7083      	strb	r3, [r0, #2]
 800448c:	1d02      	adds	r2, r0, #4
 800448e:	70c1      	strb	r1, [r0, #3]
 8004490:	e7ef      	b.n	8004472 <__exponent+0x4a>
	...

08004494 <_printf_float>:
 8004494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	b091      	sub	sp, #68	; 0x44
 800449a:	460c      	mov	r4, r1
 800449c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800449e:	4693      	mov	fp, r2
 80044a0:	461e      	mov	r6, r3
 80044a2:	4605      	mov	r5, r0
 80044a4:	f001 f8e4 	bl	8005670 <_localeconv_r>
 80044a8:	6803      	ldr	r3, [r0, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	9309      	str	r3, [sp, #36]	; 0x24
 80044ae:	f7fb febb 	bl	8000228 <strlen>
 80044b2:	2300      	movs	r3, #0
 80044b4:	930e      	str	r3, [sp, #56]	; 0x38
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	900a      	str	r0, [sp, #40]	; 0x28
 80044ba:	3307      	adds	r3, #7
 80044bc:	f023 0307 	bic.w	r3, r3, #7
 80044c0:	f103 0208 	add.w	r2, r3, #8
 80044c4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80044c8:	f8d4 a000 	ldr.w	sl, [r4]
 80044cc:	603a      	str	r2, [r7, #0]
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044d6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80044da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80044de:	930b      	str	r3, [sp, #44]	; 0x2c
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044e4:	4ba6      	ldr	r3, [pc, #664]	; (8004780 <_printf_float+0x2ec>)
 80044e6:	4638      	mov	r0, r7
 80044e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044ea:	f7fc fafb 	bl	8000ae4 <__aeabi_dcmpun>
 80044ee:	bb68      	cbnz	r0, 800454c <_printf_float+0xb8>
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044f4:	4ba2      	ldr	r3, [pc, #648]	; (8004780 <_printf_float+0x2ec>)
 80044f6:	4638      	mov	r0, r7
 80044f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044fa:	f7fc fad5 	bl	8000aa8 <__aeabi_dcmple>
 80044fe:	bb28      	cbnz	r0, 800454c <_printf_float+0xb8>
 8004500:	2200      	movs	r2, #0
 8004502:	2300      	movs	r3, #0
 8004504:	4638      	mov	r0, r7
 8004506:	4649      	mov	r1, r9
 8004508:	f7fc fac4 	bl	8000a94 <__aeabi_dcmplt>
 800450c:	b110      	cbz	r0, 8004514 <_printf_float+0x80>
 800450e:	232d      	movs	r3, #45	; 0x2d
 8004510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004514:	4f9b      	ldr	r7, [pc, #620]	; (8004784 <_printf_float+0x2f0>)
 8004516:	4b9c      	ldr	r3, [pc, #624]	; (8004788 <_printf_float+0x2f4>)
 8004518:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800451c:	bf98      	it	ls
 800451e:	461f      	movls	r7, r3
 8004520:	2303      	movs	r3, #3
 8004522:	f04f 0900 	mov.w	r9, #0
 8004526:	6123      	str	r3, [r4, #16]
 8004528:	f02a 0304 	bic.w	r3, sl, #4
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	9600      	str	r6, [sp, #0]
 8004530:	465b      	mov	r3, fp
 8004532:	aa0f      	add	r2, sp, #60	; 0x3c
 8004534:	4621      	mov	r1, r4
 8004536:	4628      	mov	r0, r5
 8004538:	f000 f9e2 	bl	8004900 <_printf_common>
 800453c:	3001      	adds	r0, #1
 800453e:	f040 8090 	bne.w	8004662 <_printf_float+0x1ce>
 8004542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004546:	b011      	add	sp, #68	; 0x44
 8004548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454c:	463a      	mov	r2, r7
 800454e:	464b      	mov	r3, r9
 8004550:	4638      	mov	r0, r7
 8004552:	4649      	mov	r1, r9
 8004554:	f7fc fac6 	bl	8000ae4 <__aeabi_dcmpun>
 8004558:	b110      	cbz	r0, 8004560 <_printf_float+0xcc>
 800455a:	4f8c      	ldr	r7, [pc, #560]	; (800478c <_printf_float+0x2f8>)
 800455c:	4b8c      	ldr	r3, [pc, #560]	; (8004790 <_printf_float+0x2fc>)
 800455e:	e7db      	b.n	8004518 <_printf_float+0x84>
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004566:	1c59      	adds	r1, r3, #1
 8004568:	a80d      	add	r0, sp, #52	; 0x34
 800456a:	a90e      	add	r1, sp, #56	; 0x38
 800456c:	d140      	bne.n	80045f0 <_printf_float+0x15c>
 800456e:	2306      	movs	r3, #6
 8004570:	6063      	str	r3, [r4, #4]
 8004572:	f04f 0c00 	mov.w	ip, #0
 8004576:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800457a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800457e:	6863      	ldr	r3, [r4, #4]
 8004580:	6022      	str	r2, [r4, #0]
 8004582:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	463a      	mov	r2, r7
 800458a:	464b      	mov	r3, r9
 800458c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004590:	4628      	mov	r0, r5
 8004592:	f7ff feed 	bl	8004370 <__cvt>
 8004596:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800459a:	2b47      	cmp	r3, #71	; 0x47
 800459c:	4607      	mov	r7, r0
 800459e:	d109      	bne.n	80045b4 <_printf_float+0x120>
 80045a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045a2:	1cd8      	adds	r0, r3, #3
 80045a4:	db02      	blt.n	80045ac <_printf_float+0x118>
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	4293      	cmp	r3, r2
 80045aa:	dd47      	ble.n	800463c <_printf_float+0x1a8>
 80045ac:	f1a8 0802 	sub.w	r8, r8, #2
 80045b0:	fa5f f888 	uxtb.w	r8, r8
 80045b4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80045b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045ba:	d824      	bhi.n	8004606 <_printf_float+0x172>
 80045bc:	3901      	subs	r1, #1
 80045be:	4642      	mov	r2, r8
 80045c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045c4:	910d      	str	r1, [sp, #52]	; 0x34
 80045c6:	f7ff ff2f 	bl	8004428 <__exponent>
 80045ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045cc:	4681      	mov	r9, r0
 80045ce:	1813      	adds	r3, r2, r0
 80045d0:	2a01      	cmp	r2, #1
 80045d2:	6123      	str	r3, [r4, #16]
 80045d4:	dc02      	bgt.n	80045dc <_printf_float+0x148>
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	07d1      	lsls	r1, r2, #31
 80045da:	d501      	bpl.n	80045e0 <_printf_float+0x14c>
 80045dc:	3301      	adds	r3, #1
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0a2      	beq.n	800452e <_printf_float+0x9a>
 80045e8:	232d      	movs	r3, #45	; 0x2d
 80045ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ee:	e79e      	b.n	800452e <_printf_float+0x9a>
 80045f0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80045f4:	f000 816e 	beq.w	80048d4 <_printf_float+0x440>
 80045f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045fc:	d1b9      	bne.n	8004572 <_printf_float+0xde>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1b7      	bne.n	8004572 <_printf_float+0xde>
 8004602:	2301      	movs	r3, #1
 8004604:	e7b4      	b.n	8004570 <_printf_float+0xdc>
 8004606:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800460a:	d119      	bne.n	8004640 <_printf_float+0x1ac>
 800460c:	2900      	cmp	r1, #0
 800460e:	6863      	ldr	r3, [r4, #4]
 8004610:	dd0c      	ble.n	800462c <_printf_float+0x198>
 8004612:	6121      	str	r1, [r4, #16]
 8004614:	b913      	cbnz	r3, 800461c <_printf_float+0x188>
 8004616:	6822      	ldr	r2, [r4, #0]
 8004618:	07d2      	lsls	r2, r2, #31
 800461a:	d502      	bpl.n	8004622 <_printf_float+0x18e>
 800461c:	3301      	adds	r3, #1
 800461e:	440b      	add	r3, r1
 8004620:	6123      	str	r3, [r4, #16]
 8004622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004624:	f04f 0900 	mov.w	r9, #0
 8004628:	65a3      	str	r3, [r4, #88]	; 0x58
 800462a:	e7d9      	b.n	80045e0 <_printf_float+0x14c>
 800462c:	b913      	cbnz	r3, 8004634 <_printf_float+0x1a0>
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	07d0      	lsls	r0, r2, #31
 8004632:	d501      	bpl.n	8004638 <_printf_float+0x1a4>
 8004634:	3302      	adds	r3, #2
 8004636:	e7f3      	b.n	8004620 <_printf_float+0x18c>
 8004638:	2301      	movs	r3, #1
 800463a:	e7f1      	b.n	8004620 <_printf_float+0x18c>
 800463c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004640:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004644:	4293      	cmp	r3, r2
 8004646:	db05      	blt.n	8004654 <_printf_float+0x1c0>
 8004648:	6822      	ldr	r2, [r4, #0]
 800464a:	6123      	str	r3, [r4, #16]
 800464c:	07d1      	lsls	r1, r2, #31
 800464e:	d5e8      	bpl.n	8004622 <_printf_float+0x18e>
 8004650:	3301      	adds	r3, #1
 8004652:	e7e5      	b.n	8004620 <_printf_float+0x18c>
 8004654:	2b00      	cmp	r3, #0
 8004656:	bfcc      	ite	gt
 8004658:	2301      	movgt	r3, #1
 800465a:	f1c3 0302 	rsble	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	e7de      	b.n	8004620 <_printf_float+0x18c>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	055a      	lsls	r2, r3, #21
 8004666:	d407      	bmi.n	8004678 <_printf_float+0x1e4>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	463a      	mov	r2, r7
 800466c:	4659      	mov	r1, fp
 800466e:	4628      	mov	r0, r5
 8004670:	47b0      	blx	r6
 8004672:	3001      	adds	r0, #1
 8004674:	d129      	bne.n	80046ca <_printf_float+0x236>
 8004676:	e764      	b.n	8004542 <_printf_float+0xae>
 8004678:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800467c:	f240 80d7 	bls.w	800482e <_printf_float+0x39a>
 8004680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004684:	2200      	movs	r2, #0
 8004686:	2300      	movs	r3, #0
 8004688:	f7fc f9fa 	bl	8000a80 <__aeabi_dcmpeq>
 800468c:	b388      	cbz	r0, 80046f2 <_printf_float+0x25e>
 800468e:	2301      	movs	r3, #1
 8004690:	4a40      	ldr	r2, [pc, #256]	; (8004794 <_printf_float+0x300>)
 8004692:	4659      	mov	r1, fp
 8004694:	4628      	mov	r0, r5
 8004696:	47b0      	blx	r6
 8004698:	3001      	adds	r0, #1
 800469a:	f43f af52 	beq.w	8004542 <_printf_float+0xae>
 800469e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046a2:	429a      	cmp	r2, r3
 80046a4:	db02      	blt.n	80046ac <_printf_float+0x218>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	07d8      	lsls	r0, r3, #31
 80046aa:	d50e      	bpl.n	80046ca <_printf_float+0x236>
 80046ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046b0:	4659      	mov	r1, fp
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b0      	blx	r6
 80046b6:	3001      	adds	r0, #1
 80046b8:	f43f af43 	beq.w	8004542 <_printf_float+0xae>
 80046bc:	2700      	movs	r7, #0
 80046be:	f104 081a 	add.w	r8, r4, #26
 80046c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c4:	3b01      	subs	r3, #1
 80046c6:	42bb      	cmp	r3, r7
 80046c8:	dc09      	bgt.n	80046de <_printf_float+0x24a>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	079f      	lsls	r7, r3, #30
 80046ce:	f100 80fd 	bmi.w	80048cc <_printf_float+0x438>
 80046d2:	68e0      	ldr	r0, [r4, #12]
 80046d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d6:	4298      	cmp	r0, r3
 80046d8:	bfb8      	it	lt
 80046da:	4618      	movlt	r0, r3
 80046dc:	e733      	b.n	8004546 <_printf_float+0xb2>
 80046de:	2301      	movs	r3, #1
 80046e0:	4642      	mov	r2, r8
 80046e2:	4659      	mov	r1, fp
 80046e4:	4628      	mov	r0, r5
 80046e6:	47b0      	blx	r6
 80046e8:	3001      	adds	r0, #1
 80046ea:	f43f af2a 	beq.w	8004542 <_printf_float+0xae>
 80046ee:	3701      	adds	r7, #1
 80046f0:	e7e7      	b.n	80046c2 <_printf_float+0x22e>
 80046f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	dc2b      	bgt.n	8004750 <_printf_float+0x2bc>
 80046f8:	2301      	movs	r3, #1
 80046fa:	4a26      	ldr	r2, [pc, #152]	; (8004794 <_printf_float+0x300>)
 80046fc:	4659      	mov	r1, fp
 80046fe:	4628      	mov	r0, r5
 8004700:	47b0      	blx	r6
 8004702:	3001      	adds	r0, #1
 8004704:	f43f af1d 	beq.w	8004542 <_printf_float+0xae>
 8004708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800470a:	b923      	cbnz	r3, 8004716 <_printf_float+0x282>
 800470c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800470e:	b913      	cbnz	r3, 8004716 <_printf_float+0x282>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	07d9      	lsls	r1, r3, #31
 8004714:	d5d9      	bpl.n	80046ca <_printf_float+0x236>
 8004716:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800471a:	4659      	mov	r1, fp
 800471c:	4628      	mov	r0, r5
 800471e:	47b0      	blx	r6
 8004720:	3001      	adds	r0, #1
 8004722:	f43f af0e 	beq.w	8004542 <_printf_float+0xae>
 8004726:	f04f 0800 	mov.w	r8, #0
 800472a:	f104 091a 	add.w	r9, r4, #26
 800472e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004730:	425b      	negs	r3, r3
 8004732:	4543      	cmp	r3, r8
 8004734:	dc01      	bgt.n	800473a <_printf_float+0x2a6>
 8004736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004738:	e797      	b.n	800466a <_printf_float+0x1d6>
 800473a:	2301      	movs	r3, #1
 800473c:	464a      	mov	r2, r9
 800473e:	4659      	mov	r1, fp
 8004740:	4628      	mov	r0, r5
 8004742:	47b0      	blx	r6
 8004744:	3001      	adds	r0, #1
 8004746:	f43f aefc 	beq.w	8004542 <_printf_float+0xae>
 800474a:	f108 0801 	add.w	r8, r8, #1
 800474e:	e7ee      	b.n	800472e <_printf_float+0x29a>
 8004750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004754:	429a      	cmp	r2, r3
 8004756:	bfa8      	it	ge
 8004758:	461a      	movge	r2, r3
 800475a:	2a00      	cmp	r2, #0
 800475c:	4690      	mov	r8, r2
 800475e:	dd07      	ble.n	8004770 <_printf_float+0x2dc>
 8004760:	4613      	mov	r3, r2
 8004762:	4659      	mov	r1, fp
 8004764:	463a      	mov	r2, r7
 8004766:	4628      	mov	r0, r5
 8004768:	47b0      	blx	r6
 800476a:	3001      	adds	r0, #1
 800476c:	f43f aee9 	beq.w	8004542 <_printf_float+0xae>
 8004770:	f104 031a 	add.w	r3, r4, #26
 8004774:	f04f 0a00 	mov.w	sl, #0
 8004778:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800477c:	930b      	str	r3, [sp, #44]	; 0x2c
 800477e:	e015      	b.n	80047ac <_printf_float+0x318>
 8004780:	7fefffff 	.word	0x7fefffff
 8004784:	08005dfc 	.word	0x08005dfc
 8004788:	08005df8 	.word	0x08005df8
 800478c:	08005e04 	.word	0x08005e04
 8004790:	08005e00 	.word	0x08005e00
 8004794:	08005e08 	.word	0x08005e08
 8004798:	2301      	movs	r3, #1
 800479a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800479c:	4659      	mov	r1, fp
 800479e:	4628      	mov	r0, r5
 80047a0:	47b0      	blx	r6
 80047a2:	3001      	adds	r0, #1
 80047a4:	f43f aecd 	beq.w	8004542 <_printf_float+0xae>
 80047a8:	f10a 0a01 	add.w	sl, sl, #1
 80047ac:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80047b0:	eba9 0308 	sub.w	r3, r9, r8
 80047b4:	4553      	cmp	r3, sl
 80047b6:	dcef      	bgt.n	8004798 <_printf_float+0x304>
 80047b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047bc:	429a      	cmp	r2, r3
 80047be:	444f      	add	r7, r9
 80047c0:	db14      	blt.n	80047ec <_printf_float+0x358>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	07da      	lsls	r2, r3, #31
 80047c6:	d411      	bmi.n	80047ec <_printf_float+0x358>
 80047c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047cc:	eba3 0209 	sub.w	r2, r3, r9
 80047d0:	eba3 0901 	sub.w	r9, r3, r1
 80047d4:	4591      	cmp	r9, r2
 80047d6:	bfa8      	it	ge
 80047d8:	4691      	movge	r9, r2
 80047da:	f1b9 0f00 	cmp.w	r9, #0
 80047de:	dc0d      	bgt.n	80047fc <_printf_float+0x368>
 80047e0:	2700      	movs	r7, #0
 80047e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047e6:	f104 081a 	add.w	r8, r4, #26
 80047ea:	e018      	b.n	800481e <_printf_float+0x38a>
 80047ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047f0:	4659      	mov	r1, fp
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b0      	blx	r6
 80047f6:	3001      	adds	r0, #1
 80047f8:	d1e6      	bne.n	80047c8 <_printf_float+0x334>
 80047fa:	e6a2      	b.n	8004542 <_printf_float+0xae>
 80047fc:	464b      	mov	r3, r9
 80047fe:	463a      	mov	r2, r7
 8004800:	4659      	mov	r1, fp
 8004802:	4628      	mov	r0, r5
 8004804:	47b0      	blx	r6
 8004806:	3001      	adds	r0, #1
 8004808:	d1ea      	bne.n	80047e0 <_printf_float+0x34c>
 800480a:	e69a      	b.n	8004542 <_printf_float+0xae>
 800480c:	2301      	movs	r3, #1
 800480e:	4642      	mov	r2, r8
 8004810:	4659      	mov	r1, fp
 8004812:	4628      	mov	r0, r5
 8004814:	47b0      	blx	r6
 8004816:	3001      	adds	r0, #1
 8004818:	f43f ae93 	beq.w	8004542 <_printf_float+0xae>
 800481c:	3701      	adds	r7, #1
 800481e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	eba3 0309 	sub.w	r3, r3, r9
 8004828:	42bb      	cmp	r3, r7
 800482a:	dcef      	bgt.n	800480c <_printf_float+0x378>
 800482c:	e74d      	b.n	80046ca <_printf_float+0x236>
 800482e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004830:	2a01      	cmp	r2, #1
 8004832:	dc01      	bgt.n	8004838 <_printf_float+0x3a4>
 8004834:	07db      	lsls	r3, r3, #31
 8004836:	d538      	bpl.n	80048aa <_printf_float+0x416>
 8004838:	2301      	movs	r3, #1
 800483a:	463a      	mov	r2, r7
 800483c:	4659      	mov	r1, fp
 800483e:	4628      	mov	r0, r5
 8004840:	47b0      	blx	r6
 8004842:	3001      	adds	r0, #1
 8004844:	f43f ae7d 	beq.w	8004542 <_printf_float+0xae>
 8004848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800484c:	4659      	mov	r1, fp
 800484e:	4628      	mov	r0, r5
 8004850:	47b0      	blx	r6
 8004852:	3001      	adds	r0, #1
 8004854:	f107 0701 	add.w	r7, r7, #1
 8004858:	f43f ae73 	beq.w	8004542 <_printf_float+0xae>
 800485c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004862:	2200      	movs	r2, #0
 8004864:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004868:	2300      	movs	r3, #0
 800486a:	f7fc f909 	bl	8000a80 <__aeabi_dcmpeq>
 800486e:	b9c0      	cbnz	r0, 80048a2 <_printf_float+0x40e>
 8004870:	4643      	mov	r3, r8
 8004872:	463a      	mov	r2, r7
 8004874:	4659      	mov	r1, fp
 8004876:	4628      	mov	r0, r5
 8004878:	47b0      	blx	r6
 800487a:	3001      	adds	r0, #1
 800487c:	d10d      	bne.n	800489a <_printf_float+0x406>
 800487e:	e660      	b.n	8004542 <_printf_float+0xae>
 8004880:	2301      	movs	r3, #1
 8004882:	4642      	mov	r2, r8
 8004884:	4659      	mov	r1, fp
 8004886:	4628      	mov	r0, r5
 8004888:	47b0      	blx	r6
 800488a:	3001      	adds	r0, #1
 800488c:	f43f ae59 	beq.w	8004542 <_printf_float+0xae>
 8004890:	3701      	adds	r7, #1
 8004892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004894:	3b01      	subs	r3, #1
 8004896:	42bb      	cmp	r3, r7
 8004898:	dcf2      	bgt.n	8004880 <_printf_float+0x3ec>
 800489a:	464b      	mov	r3, r9
 800489c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048a0:	e6e4      	b.n	800466c <_printf_float+0x1d8>
 80048a2:	2700      	movs	r7, #0
 80048a4:	f104 081a 	add.w	r8, r4, #26
 80048a8:	e7f3      	b.n	8004892 <_printf_float+0x3fe>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e7e1      	b.n	8004872 <_printf_float+0x3de>
 80048ae:	2301      	movs	r3, #1
 80048b0:	4642      	mov	r2, r8
 80048b2:	4659      	mov	r1, fp
 80048b4:	4628      	mov	r0, r5
 80048b6:	47b0      	blx	r6
 80048b8:	3001      	adds	r0, #1
 80048ba:	f43f ae42 	beq.w	8004542 <_printf_float+0xae>
 80048be:	3701      	adds	r7, #1
 80048c0:	68e3      	ldr	r3, [r4, #12]
 80048c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	42bb      	cmp	r3, r7
 80048c8:	dcf1      	bgt.n	80048ae <_printf_float+0x41a>
 80048ca:	e702      	b.n	80046d2 <_printf_float+0x23e>
 80048cc:	2700      	movs	r7, #0
 80048ce:	f104 0819 	add.w	r8, r4, #25
 80048d2:	e7f5      	b.n	80048c0 <_printf_float+0x42c>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f43f ae94 	beq.w	8004602 <_printf_float+0x16e>
 80048da:	f04f 0c00 	mov.w	ip, #0
 80048de:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80048e2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80048ec:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	463a      	mov	r2, r7
 80048f4:	464b      	mov	r3, r9
 80048f6:	4628      	mov	r0, r5
 80048f8:	f7ff fd3a 	bl	8004370 <__cvt>
 80048fc:	4607      	mov	r7, r0
 80048fe:	e64f      	b.n	80045a0 <_printf_float+0x10c>

08004900 <_printf_common>:
 8004900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004904:	4691      	mov	r9, r2
 8004906:	461f      	mov	r7, r3
 8004908:	688a      	ldr	r2, [r1, #8]
 800490a:	690b      	ldr	r3, [r1, #16]
 800490c:	4606      	mov	r6, r0
 800490e:	4293      	cmp	r3, r2
 8004910:	bfb8      	it	lt
 8004912:	4613      	movlt	r3, r2
 8004914:	f8c9 3000 	str.w	r3, [r9]
 8004918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800491c:	460c      	mov	r4, r1
 800491e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004922:	b112      	cbz	r2, 800492a <_printf_common+0x2a>
 8004924:	3301      	adds	r3, #1
 8004926:	f8c9 3000 	str.w	r3, [r9]
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	0699      	lsls	r1, r3, #26
 800492e:	bf42      	ittt	mi
 8004930:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004934:	3302      	addmi	r3, #2
 8004936:	f8c9 3000 	strmi.w	r3, [r9]
 800493a:	6825      	ldr	r5, [r4, #0]
 800493c:	f015 0506 	ands.w	r5, r5, #6
 8004940:	d107      	bne.n	8004952 <_printf_common+0x52>
 8004942:	f104 0a19 	add.w	sl, r4, #25
 8004946:	68e3      	ldr	r3, [r4, #12]
 8004948:	f8d9 2000 	ldr.w	r2, [r9]
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	42ab      	cmp	r3, r5
 8004950:	dc29      	bgt.n	80049a6 <_printf_common+0xa6>
 8004952:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004956:	6822      	ldr	r2, [r4, #0]
 8004958:	3300      	adds	r3, #0
 800495a:	bf18      	it	ne
 800495c:	2301      	movne	r3, #1
 800495e:	0692      	lsls	r2, r2, #26
 8004960:	d42e      	bmi.n	80049c0 <_printf_common+0xc0>
 8004962:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004966:	4639      	mov	r1, r7
 8004968:	4630      	mov	r0, r6
 800496a:	47c0      	blx	r8
 800496c:	3001      	adds	r0, #1
 800496e:	d021      	beq.n	80049b4 <_printf_common+0xb4>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	68e5      	ldr	r5, [r4, #12]
 8004974:	f003 0306 	and.w	r3, r3, #6
 8004978:	2b04      	cmp	r3, #4
 800497a:	bf18      	it	ne
 800497c:	2500      	movne	r5, #0
 800497e:	f8d9 2000 	ldr.w	r2, [r9]
 8004982:	f04f 0900 	mov.w	r9, #0
 8004986:	bf08      	it	eq
 8004988:	1aad      	subeq	r5, r5, r2
 800498a:	68a3      	ldr	r3, [r4, #8]
 800498c:	6922      	ldr	r2, [r4, #16]
 800498e:	bf08      	it	eq
 8004990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004994:	4293      	cmp	r3, r2
 8004996:	bfc4      	itt	gt
 8004998:	1a9b      	subgt	r3, r3, r2
 800499a:	18ed      	addgt	r5, r5, r3
 800499c:	341a      	adds	r4, #26
 800499e:	454d      	cmp	r5, r9
 80049a0:	d11a      	bne.n	80049d8 <_printf_common+0xd8>
 80049a2:	2000      	movs	r0, #0
 80049a4:	e008      	b.n	80049b8 <_printf_common+0xb8>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4652      	mov	r2, sl
 80049aa:	4639      	mov	r1, r7
 80049ac:	4630      	mov	r0, r6
 80049ae:	47c0      	blx	r8
 80049b0:	3001      	adds	r0, #1
 80049b2:	d103      	bne.n	80049bc <_printf_common+0xbc>
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049bc:	3501      	adds	r5, #1
 80049be:	e7c2      	b.n	8004946 <_printf_common+0x46>
 80049c0:	2030      	movs	r0, #48	; 0x30
 80049c2:	18e1      	adds	r1, r4, r3
 80049c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049ce:	4422      	add	r2, r4
 80049d0:	3302      	adds	r3, #2
 80049d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049d6:	e7c4      	b.n	8004962 <_printf_common+0x62>
 80049d8:	2301      	movs	r3, #1
 80049da:	4622      	mov	r2, r4
 80049dc:	4639      	mov	r1, r7
 80049de:	4630      	mov	r0, r6
 80049e0:	47c0      	blx	r8
 80049e2:	3001      	adds	r0, #1
 80049e4:	d0e6      	beq.n	80049b4 <_printf_common+0xb4>
 80049e6:	f109 0901 	add.w	r9, r9, #1
 80049ea:	e7d8      	b.n	800499e <_printf_common+0x9e>

080049ec <quorem>:
 80049ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f0:	6903      	ldr	r3, [r0, #16]
 80049f2:	690c      	ldr	r4, [r1, #16]
 80049f4:	4680      	mov	r8, r0
 80049f6:	42a3      	cmp	r3, r4
 80049f8:	f2c0 8084 	blt.w	8004b04 <quorem+0x118>
 80049fc:	3c01      	subs	r4, #1
 80049fe:	f101 0714 	add.w	r7, r1, #20
 8004a02:	f100 0614 	add.w	r6, r0, #20
 8004a06:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a0a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a0e:	3501      	adds	r5, #1
 8004a10:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a14:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a18:	eb06 030c 	add.w	r3, r6, ip
 8004a1c:	eb07 090c 	add.w	r9, r7, ip
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	b39d      	cbz	r5, 8004a8c <quorem+0xa0>
 8004a24:	f04f 0a00 	mov.w	sl, #0
 8004a28:	4638      	mov	r0, r7
 8004a2a:	46b6      	mov	lr, r6
 8004a2c:	46d3      	mov	fp, sl
 8004a2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a32:	b293      	uxth	r3, r2
 8004a34:	fb05 a303 	mla	r3, r5, r3, sl
 8004a38:	0c12      	lsrs	r2, r2, #16
 8004a3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a3e:	fb05 a202 	mla	r2, r5, r2, sl
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	ebab 0303 	sub.w	r3, fp, r3
 8004a48:	f8de b000 	ldr.w	fp, [lr]
 8004a4c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004a50:	fa1f fb8b 	uxth.w	fp, fp
 8004a54:	445b      	add	r3, fp
 8004a56:	fa1f fb82 	uxth.w	fp, r2
 8004a5a:	f8de 2000 	ldr.w	r2, [lr]
 8004a5e:	4581      	cmp	r9, r0
 8004a60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a6e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004a72:	f84e 3b04 	str.w	r3, [lr], #4
 8004a76:	d2da      	bcs.n	8004a2e <quorem+0x42>
 8004a78:	f856 300c 	ldr.w	r3, [r6, ip]
 8004a7c:	b933      	cbnz	r3, 8004a8c <quorem+0xa0>
 8004a7e:	9b01      	ldr	r3, [sp, #4]
 8004a80:	3b04      	subs	r3, #4
 8004a82:	429e      	cmp	r6, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	d331      	bcc.n	8004aec <quorem+0x100>
 8004a88:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	f001 f825 	bl	8005adc <__mcmp>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	db26      	blt.n	8004ae4 <quorem+0xf8>
 8004a96:	4630      	mov	r0, r6
 8004a98:	f04f 0c00 	mov.w	ip, #0
 8004a9c:	3501      	adds	r5, #1
 8004a9e:	f857 1b04 	ldr.w	r1, [r7], #4
 8004aa2:	f8d0 e000 	ldr.w	lr, [r0]
 8004aa6:	b28b      	uxth	r3, r1
 8004aa8:	ebac 0303 	sub.w	r3, ip, r3
 8004aac:	fa1f f28e 	uxth.w	r2, lr
 8004ab0:	4413      	add	r3, r2
 8004ab2:	0c0a      	lsrs	r2, r1, #16
 8004ab4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ac2:	45b9      	cmp	r9, r7
 8004ac4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ac8:	f840 3b04 	str.w	r3, [r0], #4
 8004acc:	d2e7      	bcs.n	8004a9e <quorem+0xb2>
 8004ace:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004ad2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004ad6:	b92a      	cbnz	r2, 8004ae4 <quorem+0xf8>
 8004ad8:	3b04      	subs	r3, #4
 8004ada:	429e      	cmp	r6, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	d30b      	bcc.n	8004af8 <quorem+0x10c>
 8004ae0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	b003      	add	sp, #12
 8004ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	3b04      	subs	r3, #4
 8004af0:	2a00      	cmp	r2, #0
 8004af2:	d1c9      	bne.n	8004a88 <quorem+0x9c>
 8004af4:	3c01      	subs	r4, #1
 8004af6:	e7c4      	b.n	8004a82 <quorem+0x96>
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	3b04      	subs	r3, #4
 8004afc:	2a00      	cmp	r2, #0
 8004afe:	d1ef      	bne.n	8004ae0 <quorem+0xf4>
 8004b00:	3c01      	subs	r4, #1
 8004b02:	e7ea      	b.n	8004ada <quorem+0xee>
 8004b04:	2000      	movs	r0, #0
 8004b06:	e7ee      	b.n	8004ae6 <quorem+0xfa>

08004b08 <_dtoa_r>:
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	4616      	mov	r6, r2
 8004b0e:	461f      	mov	r7, r3
 8004b10:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b12:	b095      	sub	sp, #84	; 0x54
 8004b14:	4604      	mov	r4, r0
 8004b16:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004b1a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b1e:	b93d      	cbnz	r5, 8004b30 <_dtoa_r+0x28>
 8004b20:	2010      	movs	r0, #16
 8004b22:	f000 fdb3 	bl	800568c <malloc>
 8004b26:	6260      	str	r0, [r4, #36]	; 0x24
 8004b28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b2c:	6005      	str	r5, [r0, #0]
 8004b2e:	60c5      	str	r5, [r0, #12]
 8004b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b32:	6819      	ldr	r1, [r3, #0]
 8004b34:	b151      	cbz	r1, 8004b4c <_dtoa_r+0x44>
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4093      	lsls	r3, r2
 8004b3c:	604a      	str	r2, [r1, #4]
 8004b3e:	608b      	str	r3, [r1, #8]
 8004b40:	4620      	mov	r0, r4
 8004b42:	f000 fdea 	bl	800571a <_Bfree>
 8004b46:	2200      	movs	r2, #0
 8004b48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	1e3b      	subs	r3, r7, #0
 8004b4e:	bfaf      	iteee	ge
 8004b50:	2300      	movge	r3, #0
 8004b52:	2201      	movlt	r2, #1
 8004b54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b58:	9303      	strlt	r3, [sp, #12]
 8004b5a:	bfac      	ite	ge
 8004b5c:	f8c8 3000 	strge.w	r3, [r8]
 8004b60:	f8c8 2000 	strlt.w	r2, [r8]
 8004b64:	4bae      	ldr	r3, [pc, #696]	; (8004e20 <_dtoa_r+0x318>)
 8004b66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b6a:	ea33 0308 	bics.w	r3, r3, r8
 8004b6e:	d11b      	bne.n	8004ba8 <_dtoa_r+0xa0>
 8004b70:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	9b02      	ldr	r3, [sp, #8]
 8004b7a:	b923      	cbnz	r3, 8004b86 <_dtoa_r+0x7e>
 8004b7c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f000 8545 	beq.w	8005610 <_dtoa_r+0xb08>
 8004b86:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b88:	b953      	cbnz	r3, 8004ba0 <_dtoa_r+0x98>
 8004b8a:	4ba6      	ldr	r3, [pc, #664]	; (8004e24 <_dtoa_r+0x31c>)
 8004b8c:	e021      	b.n	8004bd2 <_dtoa_r+0xca>
 8004b8e:	4ba6      	ldr	r3, [pc, #664]	; (8004e28 <_dtoa_r+0x320>)
 8004b90:	9306      	str	r3, [sp, #24]
 8004b92:	3308      	adds	r3, #8
 8004b94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	9806      	ldr	r0, [sp, #24]
 8004b9a:	b015      	add	sp, #84	; 0x54
 8004b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba0:	4ba0      	ldr	r3, [pc, #640]	; (8004e24 <_dtoa_r+0x31c>)
 8004ba2:	9306      	str	r3, [sp, #24]
 8004ba4:	3303      	adds	r3, #3
 8004ba6:	e7f5      	b.n	8004b94 <_dtoa_r+0x8c>
 8004ba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2300      	movs	r3, #0
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	4639      	mov	r1, r7
 8004bb4:	f7fb ff64 	bl	8000a80 <__aeabi_dcmpeq>
 8004bb8:	4682      	mov	sl, r0
 8004bba:	b160      	cbz	r0, 8004bd6 <_dtoa_r+0xce>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8520 	beq.w	800560a <_dtoa_r+0xb02>
 8004bca:	4b98      	ldr	r3, [pc, #608]	; (8004e2c <_dtoa_r+0x324>)
 8004bcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	9306      	str	r3, [sp, #24]
 8004bd4:	e7e0      	b.n	8004b98 <_dtoa_r+0x90>
 8004bd6:	ab12      	add	r3, sp, #72	; 0x48
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	ab13      	add	r3, sp, #76	; 0x4c
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4632      	mov	r2, r6
 8004be0:	463b      	mov	r3, r7
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 fff2 	bl	8005bcc <__d2b>
 8004be8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004bec:	4683      	mov	fp, r0
 8004bee:	2d00      	cmp	r5, #0
 8004bf0:	d07d      	beq.n	8004cee <_dtoa_r+0x1e6>
 8004bf2:	46b0      	mov	r8, r6
 8004bf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004bf8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004bfc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004c00:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c04:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4b89      	ldr	r3, [pc, #548]	; (8004e30 <_dtoa_r+0x328>)
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	4649      	mov	r1, r9
 8004c10:	f7fb fb16 	bl	8000240 <__aeabi_dsub>
 8004c14:	a37c      	add	r3, pc, #496	; (adr r3, 8004e08 <_dtoa_r+0x300>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fcc9 	bl	80005b0 <__aeabi_dmul>
 8004c1e:	a37c      	add	r3, pc, #496	; (adr r3, 8004e10 <_dtoa_r+0x308>)
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	f7fb fb0e 	bl	8000244 <__adddf3>
 8004c28:	4606      	mov	r6, r0
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	460f      	mov	r7, r1
 8004c2e:	f7fb fc55 	bl	80004dc <__aeabi_i2d>
 8004c32:	a379      	add	r3, pc, #484	; (adr r3, 8004e18 <_dtoa_r+0x310>)
 8004c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c38:	f7fb fcba 	bl	80005b0 <__aeabi_dmul>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4630      	mov	r0, r6
 8004c42:	4639      	mov	r1, r7
 8004c44:	f7fb fafe 	bl	8000244 <__adddf3>
 8004c48:	4606      	mov	r6, r0
 8004c4a:	460f      	mov	r7, r1
 8004c4c:	f7fb ff60 	bl	8000b10 <__aeabi_d2iz>
 8004c50:	2200      	movs	r2, #0
 8004c52:	4682      	mov	sl, r0
 8004c54:	2300      	movs	r3, #0
 8004c56:	4630      	mov	r0, r6
 8004c58:	4639      	mov	r1, r7
 8004c5a:	f7fb ff1b 	bl	8000a94 <__aeabi_dcmplt>
 8004c5e:	b148      	cbz	r0, 8004c74 <_dtoa_r+0x16c>
 8004c60:	4650      	mov	r0, sl
 8004c62:	f7fb fc3b 	bl	80004dc <__aeabi_i2d>
 8004c66:	4632      	mov	r2, r6
 8004c68:	463b      	mov	r3, r7
 8004c6a:	f7fb ff09 	bl	8000a80 <__aeabi_dcmpeq>
 8004c6e:	b908      	cbnz	r0, 8004c74 <_dtoa_r+0x16c>
 8004c70:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c74:	f1ba 0f16 	cmp.w	sl, #22
 8004c78:	d85a      	bhi.n	8004d30 <_dtoa_r+0x228>
 8004c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c7e:	496d      	ldr	r1, [pc, #436]	; (8004e34 <_dtoa_r+0x32c>)
 8004c80:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c88:	f7fb ff22 	bl	8000ad0 <__aeabi_dcmpgt>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d051      	beq.n	8004d34 <_dtoa_r+0x22c>
 8004c90:	2300      	movs	r3, #0
 8004c92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c96:	930d      	str	r3, [sp, #52]	; 0x34
 8004c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c9a:	1b5d      	subs	r5, r3, r5
 8004c9c:	1e6b      	subs	r3, r5, #1
 8004c9e:	9307      	str	r3, [sp, #28]
 8004ca0:	bf43      	ittte	mi
 8004ca2:	2300      	movmi	r3, #0
 8004ca4:	f1c5 0901 	rsbmi	r9, r5, #1
 8004ca8:	9307      	strmi	r3, [sp, #28]
 8004caa:	f04f 0900 	movpl.w	r9, #0
 8004cae:	f1ba 0f00 	cmp.w	sl, #0
 8004cb2:	db41      	blt.n	8004d38 <_dtoa_r+0x230>
 8004cb4:	9b07      	ldr	r3, [sp, #28]
 8004cb6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004cba:	4453      	add	r3, sl
 8004cbc:	9307      	str	r3, [sp, #28]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	9308      	str	r3, [sp, #32]
 8004cc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cc4:	2b09      	cmp	r3, #9
 8004cc6:	f200 808f 	bhi.w	8004de8 <_dtoa_r+0x2e0>
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	bfc4      	itt	gt
 8004cce:	3b04      	subgt	r3, #4
 8004cd0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004cd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cd4:	bfc8      	it	gt
 8004cd6:	2500      	movgt	r5, #0
 8004cd8:	f1a3 0302 	sub.w	r3, r3, #2
 8004cdc:	bfd8      	it	le
 8004cde:	2501      	movle	r5, #1
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	f200 808d 	bhi.w	8004e00 <_dtoa_r+0x2f8>
 8004ce6:	e8df f003 	tbb	[pc, r3]
 8004cea:	7d7b      	.short	0x7d7b
 8004cec:	6f2f      	.short	0x6f2f
 8004cee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004cf2:	441d      	add	r5, r3
 8004cf4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004cf8:	2820      	cmp	r0, #32
 8004cfa:	dd13      	ble.n	8004d24 <_dtoa_r+0x21c>
 8004cfc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d00:	9b02      	ldr	r3, [sp, #8]
 8004d02:	fa08 f800 	lsl.w	r8, r8, r0
 8004d06:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d0a:	fa23 f000 	lsr.w	r0, r3, r0
 8004d0e:	ea48 0000 	orr.w	r0, r8, r0
 8004d12:	f7fb fbd3 	bl	80004bc <__aeabi_ui2d>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4680      	mov	r8, r0
 8004d1a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004d1e:	3d01      	subs	r5, #1
 8004d20:	9310      	str	r3, [sp, #64]	; 0x40
 8004d22:	e771      	b.n	8004c08 <_dtoa_r+0x100>
 8004d24:	9b02      	ldr	r3, [sp, #8]
 8004d26:	f1c0 0020 	rsb	r0, r0, #32
 8004d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d2e:	e7f0      	b.n	8004d12 <_dtoa_r+0x20a>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e7b0      	b.n	8004c96 <_dtoa_r+0x18e>
 8004d34:	900d      	str	r0, [sp, #52]	; 0x34
 8004d36:	e7af      	b.n	8004c98 <_dtoa_r+0x190>
 8004d38:	f1ca 0300 	rsb	r3, sl, #0
 8004d3c:	9308      	str	r3, [sp, #32]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	eba9 090a 	sub.w	r9, r9, sl
 8004d44:	930c      	str	r3, [sp, #48]	; 0x30
 8004d46:	e7bc      	b.n	8004cc2 <_dtoa_r+0x1ba>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	dd74      	ble.n	8004e3c <_dtoa_r+0x334>
 8004d52:	4698      	mov	r8, r3
 8004d54:	9304      	str	r3, [sp, #16]
 8004d56:	2200      	movs	r2, #0
 8004d58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d5a:	6072      	str	r2, [r6, #4]
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	f102 0014 	add.w	r0, r2, #20
 8004d62:	4298      	cmp	r0, r3
 8004d64:	6871      	ldr	r1, [r6, #4]
 8004d66:	d96e      	bls.n	8004e46 <_dtoa_r+0x33e>
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 fca2 	bl	80056b2 <_Balloc>
 8004d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d70:	6030      	str	r0, [r6, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f1b8 0f0e 	cmp.w	r8, #14
 8004d78:	9306      	str	r3, [sp, #24]
 8004d7a:	f200 80ed 	bhi.w	8004f58 <_dtoa_r+0x450>
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	f000 80ea 	beq.w	8004f58 <_dtoa_r+0x450>
 8004d84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d88:	f1ba 0f00 	cmp.w	sl, #0
 8004d8c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004d90:	dd77      	ble.n	8004e82 <_dtoa_r+0x37a>
 8004d92:	4a28      	ldr	r2, [pc, #160]	; (8004e34 <_dtoa_r+0x32c>)
 8004d94:	f00a 030f 	and.w	r3, sl, #15
 8004d98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004d9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004da0:	06f0      	lsls	r0, r6, #27
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004daa:	d568      	bpl.n	8004e7e <_dtoa_r+0x376>
 8004dac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <_dtoa_r+0x330>)
 8004db2:	2503      	movs	r5, #3
 8004db4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004db8:	f7fb fd24 	bl	8000804 <__aeabi_ddiv>
 8004dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dc0:	f006 060f 	and.w	r6, r6, #15
 8004dc4:	4f1c      	ldr	r7, [pc, #112]	; (8004e38 <_dtoa_r+0x330>)
 8004dc6:	e04f      	b.n	8004e68 <_dtoa_r+0x360>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	9309      	str	r3, [sp, #36]	; 0x24
 8004dcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004dce:	4453      	add	r3, sl
 8004dd0:	f103 0801 	add.w	r8, r3, #1
 8004dd4:	9304      	str	r3, [sp, #16]
 8004dd6:	4643      	mov	r3, r8
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	bfb8      	it	lt
 8004ddc:	2301      	movlt	r3, #1
 8004dde:	e7ba      	b.n	8004d56 <_dtoa_r+0x24e>
 8004de0:	2300      	movs	r3, #0
 8004de2:	e7b2      	b.n	8004d4a <_dtoa_r+0x242>
 8004de4:	2300      	movs	r3, #0
 8004de6:	e7f0      	b.n	8004dca <_dtoa_r+0x2c2>
 8004de8:	2501      	movs	r5, #1
 8004dea:	2300      	movs	r3, #0
 8004dec:	9509      	str	r5, [sp, #36]	; 0x24
 8004dee:	931e      	str	r3, [sp, #120]	; 0x78
 8004df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004df4:	2200      	movs	r2, #0
 8004df6:	9304      	str	r3, [sp, #16]
 8004df8:	4698      	mov	r8, r3
 8004dfa:	2312      	movs	r3, #18
 8004dfc:	921f      	str	r2, [sp, #124]	; 0x7c
 8004dfe:	e7aa      	b.n	8004d56 <_dtoa_r+0x24e>
 8004e00:	2301      	movs	r3, #1
 8004e02:	9309      	str	r3, [sp, #36]	; 0x24
 8004e04:	e7f4      	b.n	8004df0 <_dtoa_r+0x2e8>
 8004e06:	bf00      	nop
 8004e08:	636f4361 	.word	0x636f4361
 8004e0c:	3fd287a7 	.word	0x3fd287a7
 8004e10:	8b60c8b3 	.word	0x8b60c8b3
 8004e14:	3fc68a28 	.word	0x3fc68a28
 8004e18:	509f79fb 	.word	0x509f79fb
 8004e1c:	3fd34413 	.word	0x3fd34413
 8004e20:	7ff00000 	.word	0x7ff00000
 8004e24:	08005e13 	.word	0x08005e13
 8004e28:	08005e0a 	.word	0x08005e0a
 8004e2c:	08005e09 	.word	0x08005e09
 8004e30:	3ff80000 	.word	0x3ff80000
 8004e34:	08005e40 	.word	0x08005e40
 8004e38:	08005e18 	.word	0x08005e18
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	9304      	str	r3, [sp, #16]
 8004e40:	4698      	mov	r8, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	e7da      	b.n	8004dfc <_dtoa_r+0x2f4>
 8004e46:	3101      	adds	r1, #1
 8004e48:	6071      	str	r1, [r6, #4]
 8004e4a:	0052      	lsls	r2, r2, #1
 8004e4c:	e787      	b.n	8004d5e <_dtoa_r+0x256>
 8004e4e:	07f1      	lsls	r1, r6, #31
 8004e50:	d508      	bpl.n	8004e64 <_dtoa_r+0x35c>
 8004e52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5a:	f7fb fba9 	bl	80005b0 <__aeabi_dmul>
 8004e5e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e62:	3501      	adds	r5, #1
 8004e64:	1076      	asrs	r6, r6, #1
 8004e66:	3708      	adds	r7, #8
 8004e68:	2e00      	cmp	r6, #0
 8004e6a:	d1f0      	bne.n	8004e4e <_dtoa_r+0x346>
 8004e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e74:	f7fb fcc6 	bl	8000804 <__aeabi_ddiv>
 8004e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e7c:	e01b      	b.n	8004eb6 <_dtoa_r+0x3ae>
 8004e7e:	2502      	movs	r5, #2
 8004e80:	e7a0      	b.n	8004dc4 <_dtoa_r+0x2bc>
 8004e82:	f000 80a4 	beq.w	8004fce <_dtoa_r+0x4c6>
 8004e86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e8a:	f1ca 0600 	rsb	r6, sl, #0
 8004e8e:	4ba0      	ldr	r3, [pc, #640]	; (8005110 <_dtoa_r+0x608>)
 8004e90:	f006 020f 	and.w	r2, r6, #15
 8004e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f7fb fb88 	bl	80005b0 <__aeabi_dmul>
 8004ea0:	2502      	movs	r5, #2
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea8:	4f9a      	ldr	r7, [pc, #616]	; (8005114 <_dtoa_r+0x60c>)
 8004eaa:	1136      	asrs	r6, r6, #4
 8004eac:	2e00      	cmp	r6, #0
 8004eae:	f040 8083 	bne.w	8004fb8 <_dtoa_r+0x4b0>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e0      	bne.n	8004e78 <_dtoa_r+0x370>
 8004eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 808a 	beq.w	8004fd2 <_dtoa_r+0x4ca>
 8004ebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ec2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ec6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004eca:	2200      	movs	r2, #0
 8004ecc:	4b92      	ldr	r3, [pc, #584]	; (8005118 <_dtoa_r+0x610>)
 8004ece:	f7fb fde1 	bl	8000a94 <__aeabi_dcmplt>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d07d      	beq.n	8004fd2 <_dtoa_r+0x4ca>
 8004ed6:	f1b8 0f00 	cmp.w	r8, #0
 8004eda:	d07a      	beq.n	8004fd2 <_dtoa_r+0x4ca>
 8004edc:	9b04      	ldr	r3, [sp, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	dd36      	ble.n	8004f50 <_dtoa_r+0x448>
 8004ee2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4b8c      	ldr	r3, [pc, #560]	; (800511c <_dtoa_r+0x614>)
 8004eea:	f7fb fb61 	bl	80005b0 <__aeabi_dmul>
 8004eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef2:	9e04      	ldr	r6, [sp, #16]
 8004ef4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8004ef8:	3501      	adds	r5, #1
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7fb faee 	bl	80004dc <__aeabi_i2d>
 8004f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f04:	f7fb fb54 	bl	80005b0 <__aeabi_dmul>
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4b85      	ldr	r3, [pc, #532]	; (8005120 <_dtoa_r+0x618>)
 8004f0c:	f7fb f99a 	bl	8000244 <__adddf3>
 8004f10:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004f14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f18:	950b      	str	r5, [sp, #44]	; 0x2c
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	d15c      	bne.n	8004fd8 <_dtoa_r+0x4d0>
 8004f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f22:	2200      	movs	r2, #0
 8004f24:	4b7f      	ldr	r3, [pc, #508]	; (8005124 <_dtoa_r+0x61c>)
 8004f26:	f7fb f98b 	bl	8000240 <__aeabi_dsub>
 8004f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f2c:	462b      	mov	r3, r5
 8004f2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f32:	f7fb fdcd 	bl	8000ad0 <__aeabi_dcmpgt>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f040 8281 	bne.w	800543e <_dtoa_r+0x936>
 8004f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f42:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f46:	f7fb fda5 	bl	8000a94 <__aeabi_dcmplt>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	f040 8275 	bne.w	800543a <_dtoa_r+0x932>
 8004f50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004f54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f2c0 814b 	blt.w	80051f6 <_dtoa_r+0x6ee>
 8004f60:	f1ba 0f0e 	cmp.w	sl, #14
 8004f64:	f300 8147 	bgt.w	80051f6 <_dtoa_r+0x6ee>
 8004f68:	4b69      	ldr	r3, [pc, #420]	; (8005110 <_dtoa_r+0x608>)
 8004f6a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f280 80d7 	bge.w	800512c <_dtoa_r+0x624>
 8004f7e:	f1b8 0f00 	cmp.w	r8, #0
 8004f82:	f300 80d3 	bgt.w	800512c <_dtoa_r+0x624>
 8004f86:	f040 8257 	bne.w	8005438 <_dtoa_r+0x930>
 8004f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4b64      	ldr	r3, [pc, #400]	; (8005124 <_dtoa_r+0x61c>)
 8004f92:	f7fb fb0d 	bl	80005b0 <__aeabi_dmul>
 8004f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f9a:	f7fb fd8f 	bl	8000abc <__aeabi_dcmpge>
 8004f9e:	4646      	mov	r6, r8
 8004fa0:	4647      	mov	r7, r8
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f040 822d 	bne.w	8005402 <_dtoa_r+0x8fa>
 8004fa8:	9b06      	ldr	r3, [sp, #24]
 8004faa:	9a06      	ldr	r2, [sp, #24]
 8004fac:	1c5d      	adds	r5, r3, #1
 8004fae:	2331      	movs	r3, #49	; 0x31
 8004fb0:	f10a 0a01 	add.w	sl, sl, #1
 8004fb4:	7013      	strb	r3, [r2, #0]
 8004fb6:	e228      	b.n	800540a <_dtoa_r+0x902>
 8004fb8:	07f2      	lsls	r2, r6, #31
 8004fba:	d505      	bpl.n	8004fc8 <_dtoa_r+0x4c0>
 8004fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc0:	f7fb faf6 	bl	80005b0 <__aeabi_dmul>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	3501      	adds	r5, #1
 8004fc8:	1076      	asrs	r6, r6, #1
 8004fca:	3708      	adds	r7, #8
 8004fcc:	e76e      	b.n	8004eac <_dtoa_r+0x3a4>
 8004fce:	2502      	movs	r5, #2
 8004fd0:	e771      	b.n	8004eb6 <_dtoa_r+0x3ae>
 8004fd2:	4657      	mov	r7, sl
 8004fd4:	4646      	mov	r6, r8
 8004fd6:	e790      	b.n	8004efa <_dtoa_r+0x3f2>
 8004fd8:	4b4d      	ldr	r3, [pc, #308]	; (8005110 <_dtoa_r+0x608>)
 8004fda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fde:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d048      	beq.n	800507a <_dtoa_r+0x572>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	2000      	movs	r0, #0
 8004fee:	494e      	ldr	r1, [pc, #312]	; (8005128 <_dtoa_r+0x620>)
 8004ff0:	f7fb fc08 	bl	8000804 <__aeabi_ddiv>
 8004ff4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ff8:	f7fb f922 	bl	8000240 <__aeabi_dsub>
 8004ffc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005000:	9d06      	ldr	r5, [sp, #24]
 8005002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005006:	f7fb fd83 	bl	8000b10 <__aeabi_d2iz>
 800500a:	9011      	str	r0, [sp, #68]	; 0x44
 800500c:	f7fb fa66 	bl	80004dc <__aeabi_i2d>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005018:	f7fb f912 	bl	8000240 <__aeabi_dsub>
 800501c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800501e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005022:	3330      	adds	r3, #48	; 0x30
 8005024:	f805 3b01 	strb.w	r3, [r5], #1
 8005028:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800502c:	f7fb fd32 	bl	8000a94 <__aeabi_dcmplt>
 8005030:	2800      	cmp	r0, #0
 8005032:	d163      	bne.n	80050fc <_dtoa_r+0x5f4>
 8005034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005038:	2000      	movs	r0, #0
 800503a:	4937      	ldr	r1, [pc, #220]	; (8005118 <_dtoa_r+0x610>)
 800503c:	f7fb f900 	bl	8000240 <__aeabi_dsub>
 8005040:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005044:	f7fb fd26 	bl	8000a94 <__aeabi_dcmplt>
 8005048:	2800      	cmp	r0, #0
 800504a:	f040 80b5 	bne.w	80051b8 <_dtoa_r+0x6b0>
 800504e:	9b06      	ldr	r3, [sp, #24]
 8005050:	1aeb      	subs	r3, r5, r3
 8005052:	429e      	cmp	r6, r3
 8005054:	f77f af7c 	ble.w	8004f50 <_dtoa_r+0x448>
 8005058:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800505c:	2200      	movs	r2, #0
 800505e:	4b2f      	ldr	r3, [pc, #188]	; (800511c <_dtoa_r+0x614>)
 8005060:	f7fb faa6 	bl	80005b0 <__aeabi_dmul>
 8005064:	2200      	movs	r2, #0
 8005066:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800506a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800506e:	4b2b      	ldr	r3, [pc, #172]	; (800511c <_dtoa_r+0x614>)
 8005070:	f7fb fa9e 	bl	80005b0 <__aeabi_dmul>
 8005074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005078:	e7c3      	b.n	8005002 <_dtoa_r+0x4fa>
 800507a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800507e:	f7fb fa97 	bl	80005b0 <__aeabi_dmul>
 8005082:	9b06      	ldr	r3, [sp, #24]
 8005084:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005088:	199d      	adds	r5, r3, r6
 800508a:	461e      	mov	r6, r3
 800508c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005090:	f7fb fd3e 	bl	8000b10 <__aeabi_d2iz>
 8005094:	9011      	str	r0, [sp, #68]	; 0x44
 8005096:	f7fb fa21 	bl	80004dc <__aeabi_i2d>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a2:	f7fb f8cd 	bl	8000240 <__aeabi_dsub>
 80050a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ac:	3330      	adds	r3, #48	; 0x30
 80050ae:	f806 3b01 	strb.w	r3, [r6], #1
 80050b2:	42ae      	cmp	r6, r5
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	d124      	bne.n	8005104 <_dtoa_r+0x5fc>
 80050ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050be:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <_dtoa_r+0x620>)
 80050c0:	f7fb f8c0 	bl	8000244 <__adddf3>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050cc:	f7fb fd00 	bl	8000ad0 <__aeabi_dcmpgt>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d171      	bne.n	80051b8 <_dtoa_r+0x6b0>
 80050d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050d8:	2000      	movs	r0, #0
 80050da:	4913      	ldr	r1, [pc, #76]	; (8005128 <_dtoa_r+0x620>)
 80050dc:	f7fb f8b0 	bl	8000240 <__aeabi_dsub>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050e8:	f7fb fcd4 	bl	8000a94 <__aeabi_dcmplt>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	f43f af2f 	beq.w	8004f50 <_dtoa_r+0x448>
 80050f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050f6:	1e6a      	subs	r2, r5, #1
 80050f8:	2b30      	cmp	r3, #48	; 0x30
 80050fa:	d001      	beq.n	8005100 <_dtoa_r+0x5f8>
 80050fc:	46ba      	mov	sl, r7
 80050fe:	e04a      	b.n	8005196 <_dtoa_r+0x68e>
 8005100:	4615      	mov	r5, r2
 8005102:	e7f6      	b.n	80050f2 <_dtoa_r+0x5ea>
 8005104:	4b05      	ldr	r3, [pc, #20]	; (800511c <_dtoa_r+0x614>)
 8005106:	f7fb fa53 	bl	80005b0 <__aeabi_dmul>
 800510a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800510e:	e7bd      	b.n	800508c <_dtoa_r+0x584>
 8005110:	08005e40 	.word	0x08005e40
 8005114:	08005e18 	.word	0x08005e18
 8005118:	3ff00000 	.word	0x3ff00000
 800511c:	40240000 	.word	0x40240000
 8005120:	401c0000 	.word	0x401c0000
 8005124:	40140000 	.word	0x40140000
 8005128:	3fe00000 	.word	0x3fe00000
 800512c:	9d06      	ldr	r5, [sp, #24]
 800512e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005136:	4630      	mov	r0, r6
 8005138:	4639      	mov	r1, r7
 800513a:	f7fb fb63 	bl	8000804 <__aeabi_ddiv>
 800513e:	f7fb fce7 	bl	8000b10 <__aeabi_d2iz>
 8005142:	4681      	mov	r9, r0
 8005144:	f7fb f9ca 	bl	80004dc <__aeabi_i2d>
 8005148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800514c:	f7fb fa30 	bl	80005b0 <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4630      	mov	r0, r6
 8005156:	4639      	mov	r1, r7
 8005158:	f7fb f872 	bl	8000240 <__aeabi_dsub>
 800515c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005160:	f805 6b01 	strb.w	r6, [r5], #1
 8005164:	9e06      	ldr	r6, [sp, #24]
 8005166:	4602      	mov	r2, r0
 8005168:	1bae      	subs	r6, r5, r6
 800516a:	45b0      	cmp	r8, r6
 800516c:	460b      	mov	r3, r1
 800516e:	d135      	bne.n	80051dc <_dtoa_r+0x6d4>
 8005170:	f7fb f868 	bl	8000244 <__adddf3>
 8005174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005178:	4606      	mov	r6, r0
 800517a:	460f      	mov	r7, r1
 800517c:	f7fb fca8 	bl	8000ad0 <__aeabi_dcmpgt>
 8005180:	b9c8      	cbnz	r0, 80051b6 <_dtoa_r+0x6ae>
 8005182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005186:	4630      	mov	r0, r6
 8005188:	4639      	mov	r1, r7
 800518a:	f7fb fc79 	bl	8000a80 <__aeabi_dcmpeq>
 800518e:	b110      	cbz	r0, 8005196 <_dtoa_r+0x68e>
 8005190:	f019 0f01 	tst.w	r9, #1
 8005194:	d10f      	bne.n	80051b6 <_dtoa_r+0x6ae>
 8005196:	4659      	mov	r1, fp
 8005198:	4620      	mov	r0, r4
 800519a:	f000 fabe 	bl	800571a <_Bfree>
 800519e:	2300      	movs	r3, #0
 80051a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051a2:	702b      	strb	r3, [r5, #0]
 80051a4:	f10a 0301 	add.w	r3, sl, #1
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f43f acf3 	beq.w	8004b98 <_dtoa_r+0x90>
 80051b2:	601d      	str	r5, [r3, #0]
 80051b4:	e4f0      	b.n	8004b98 <_dtoa_r+0x90>
 80051b6:	4657      	mov	r7, sl
 80051b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051bc:	1e6b      	subs	r3, r5, #1
 80051be:	2a39      	cmp	r2, #57	; 0x39
 80051c0:	d106      	bne.n	80051d0 <_dtoa_r+0x6c8>
 80051c2:	9a06      	ldr	r2, [sp, #24]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d107      	bne.n	80051d8 <_dtoa_r+0x6d0>
 80051c8:	2330      	movs	r3, #48	; 0x30
 80051ca:	7013      	strb	r3, [r2, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	3701      	adds	r7, #1
 80051d0:	781a      	ldrb	r2, [r3, #0]
 80051d2:	3201      	adds	r2, #1
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e791      	b.n	80050fc <_dtoa_r+0x5f4>
 80051d8:	461d      	mov	r5, r3
 80051da:	e7ed      	b.n	80051b8 <_dtoa_r+0x6b0>
 80051dc:	2200      	movs	r2, #0
 80051de:	4b99      	ldr	r3, [pc, #612]	; (8005444 <_dtoa_r+0x93c>)
 80051e0:	f7fb f9e6 	bl	80005b0 <__aeabi_dmul>
 80051e4:	2200      	movs	r2, #0
 80051e6:	2300      	movs	r3, #0
 80051e8:	4606      	mov	r6, r0
 80051ea:	460f      	mov	r7, r1
 80051ec:	f7fb fc48 	bl	8000a80 <__aeabi_dcmpeq>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d09e      	beq.n	8005132 <_dtoa_r+0x62a>
 80051f4:	e7cf      	b.n	8005196 <_dtoa_r+0x68e>
 80051f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051f8:	2a00      	cmp	r2, #0
 80051fa:	f000 8088 	beq.w	800530e <_dtoa_r+0x806>
 80051fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005200:	2a01      	cmp	r2, #1
 8005202:	dc6d      	bgt.n	80052e0 <_dtoa_r+0x7d8>
 8005204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005206:	2a00      	cmp	r2, #0
 8005208:	d066      	beq.n	80052d8 <_dtoa_r+0x7d0>
 800520a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800520e:	464d      	mov	r5, r9
 8005210:	9e08      	ldr	r6, [sp, #32]
 8005212:	9a07      	ldr	r2, [sp, #28]
 8005214:	2101      	movs	r1, #1
 8005216:	441a      	add	r2, r3
 8005218:	4620      	mov	r0, r4
 800521a:	4499      	add	r9, r3
 800521c:	9207      	str	r2, [sp, #28]
 800521e:	f000 fb1c 	bl	800585a <__i2b>
 8005222:	4607      	mov	r7, r0
 8005224:	2d00      	cmp	r5, #0
 8005226:	dd0b      	ble.n	8005240 <_dtoa_r+0x738>
 8005228:	9b07      	ldr	r3, [sp, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	dd08      	ble.n	8005240 <_dtoa_r+0x738>
 800522e:	42ab      	cmp	r3, r5
 8005230:	bfa8      	it	ge
 8005232:	462b      	movge	r3, r5
 8005234:	9a07      	ldr	r2, [sp, #28]
 8005236:	eba9 0903 	sub.w	r9, r9, r3
 800523a:	1aed      	subs	r5, r5, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	9307      	str	r3, [sp, #28]
 8005240:	9b08      	ldr	r3, [sp, #32]
 8005242:	b1eb      	cbz	r3, 8005280 <_dtoa_r+0x778>
 8005244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005246:	2b00      	cmp	r3, #0
 8005248:	d065      	beq.n	8005316 <_dtoa_r+0x80e>
 800524a:	b18e      	cbz	r6, 8005270 <_dtoa_r+0x768>
 800524c:	4639      	mov	r1, r7
 800524e:	4632      	mov	r2, r6
 8005250:	4620      	mov	r0, r4
 8005252:	f000 fba1 	bl	8005998 <__pow5mult>
 8005256:	465a      	mov	r2, fp
 8005258:	4601      	mov	r1, r0
 800525a:	4607      	mov	r7, r0
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fb05 	bl	800586c <__multiply>
 8005262:	4659      	mov	r1, fp
 8005264:	900a      	str	r0, [sp, #40]	; 0x28
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fa57 	bl	800571a <_Bfree>
 800526c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800526e:	469b      	mov	fp, r3
 8005270:	9b08      	ldr	r3, [sp, #32]
 8005272:	1b9a      	subs	r2, r3, r6
 8005274:	d004      	beq.n	8005280 <_dtoa_r+0x778>
 8005276:	4659      	mov	r1, fp
 8005278:	4620      	mov	r0, r4
 800527a:	f000 fb8d 	bl	8005998 <__pow5mult>
 800527e:	4683      	mov	fp, r0
 8005280:	2101      	movs	r1, #1
 8005282:	4620      	mov	r0, r4
 8005284:	f000 fae9 	bl	800585a <__i2b>
 8005288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800528a:	4606      	mov	r6, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 81c6 	beq.w	800561e <_dtoa_r+0xb16>
 8005292:	461a      	mov	r2, r3
 8005294:	4601      	mov	r1, r0
 8005296:	4620      	mov	r0, r4
 8005298:	f000 fb7e 	bl	8005998 <__pow5mult>
 800529c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800529e:	4606      	mov	r6, r0
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	dc3e      	bgt.n	8005322 <_dtoa_r+0x81a>
 80052a4:	9b02      	ldr	r3, [sp, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d137      	bne.n	800531a <_dtoa_r+0x812>
 80052aa:	9b03      	ldr	r3, [sp, #12]
 80052ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d134      	bne.n	800531e <_dtoa_r+0x816>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	0d1b      	lsrs	r3, r3, #20
 80052bc:	051b      	lsls	r3, r3, #20
 80052be:	b12b      	cbz	r3, 80052cc <_dtoa_r+0x7c4>
 80052c0:	9b07      	ldr	r3, [sp, #28]
 80052c2:	f109 0901 	add.w	r9, r9, #1
 80052c6:	3301      	adds	r3, #1
 80052c8:	9307      	str	r3, [sp, #28]
 80052ca:	2301      	movs	r3, #1
 80052cc:	9308      	str	r3, [sp, #32]
 80052ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d128      	bne.n	8005326 <_dtoa_r+0x81e>
 80052d4:	2001      	movs	r0, #1
 80052d6:	e02e      	b.n	8005336 <_dtoa_r+0x82e>
 80052d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052de:	e796      	b.n	800520e <_dtoa_r+0x706>
 80052e0:	9b08      	ldr	r3, [sp, #32]
 80052e2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80052e6:	42b3      	cmp	r3, r6
 80052e8:	bfb7      	itett	lt
 80052ea:	9b08      	ldrlt	r3, [sp, #32]
 80052ec:	1b9e      	subge	r6, r3, r6
 80052ee:	1af2      	sublt	r2, r6, r3
 80052f0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80052f2:	bfbf      	itttt	lt
 80052f4:	9608      	strlt	r6, [sp, #32]
 80052f6:	189b      	addlt	r3, r3, r2
 80052f8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80052fa:	2600      	movlt	r6, #0
 80052fc:	f1b8 0f00 	cmp.w	r8, #0
 8005300:	bfb9      	ittee	lt
 8005302:	eba9 0508 	sublt.w	r5, r9, r8
 8005306:	2300      	movlt	r3, #0
 8005308:	464d      	movge	r5, r9
 800530a:	4643      	movge	r3, r8
 800530c:	e781      	b.n	8005212 <_dtoa_r+0x70a>
 800530e:	9e08      	ldr	r6, [sp, #32]
 8005310:	464d      	mov	r5, r9
 8005312:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005314:	e786      	b.n	8005224 <_dtoa_r+0x71c>
 8005316:	9a08      	ldr	r2, [sp, #32]
 8005318:	e7ad      	b.n	8005276 <_dtoa_r+0x76e>
 800531a:	2300      	movs	r3, #0
 800531c:	e7d6      	b.n	80052cc <_dtoa_r+0x7c4>
 800531e:	9b02      	ldr	r3, [sp, #8]
 8005320:	e7d4      	b.n	80052cc <_dtoa_r+0x7c4>
 8005322:	2300      	movs	r3, #0
 8005324:	9308      	str	r3, [sp, #32]
 8005326:	6933      	ldr	r3, [r6, #16]
 8005328:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800532c:	6918      	ldr	r0, [r3, #16]
 800532e:	f000 fa46 	bl	80057be <__hi0bits>
 8005332:	f1c0 0020 	rsb	r0, r0, #32
 8005336:	9b07      	ldr	r3, [sp, #28]
 8005338:	4418      	add	r0, r3
 800533a:	f010 001f 	ands.w	r0, r0, #31
 800533e:	d047      	beq.n	80053d0 <_dtoa_r+0x8c8>
 8005340:	f1c0 0320 	rsb	r3, r0, #32
 8005344:	2b04      	cmp	r3, #4
 8005346:	dd3b      	ble.n	80053c0 <_dtoa_r+0x8b8>
 8005348:	9b07      	ldr	r3, [sp, #28]
 800534a:	f1c0 001c 	rsb	r0, r0, #28
 800534e:	4481      	add	r9, r0
 8005350:	4405      	add	r5, r0
 8005352:	4403      	add	r3, r0
 8005354:	9307      	str	r3, [sp, #28]
 8005356:	f1b9 0f00 	cmp.w	r9, #0
 800535a:	dd05      	ble.n	8005368 <_dtoa_r+0x860>
 800535c:	4659      	mov	r1, fp
 800535e:	464a      	mov	r2, r9
 8005360:	4620      	mov	r0, r4
 8005362:	f000 fb67 	bl	8005a34 <__lshift>
 8005366:	4683      	mov	fp, r0
 8005368:	9b07      	ldr	r3, [sp, #28]
 800536a:	2b00      	cmp	r3, #0
 800536c:	dd05      	ble.n	800537a <_dtoa_r+0x872>
 800536e:	4631      	mov	r1, r6
 8005370:	461a      	mov	r2, r3
 8005372:	4620      	mov	r0, r4
 8005374:	f000 fb5e 	bl	8005a34 <__lshift>
 8005378:	4606      	mov	r6, r0
 800537a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800537c:	b353      	cbz	r3, 80053d4 <_dtoa_r+0x8cc>
 800537e:	4631      	mov	r1, r6
 8005380:	4658      	mov	r0, fp
 8005382:	f000 fbab 	bl	8005adc <__mcmp>
 8005386:	2800      	cmp	r0, #0
 8005388:	da24      	bge.n	80053d4 <_dtoa_r+0x8cc>
 800538a:	2300      	movs	r3, #0
 800538c:	4659      	mov	r1, fp
 800538e:	220a      	movs	r2, #10
 8005390:	4620      	mov	r0, r4
 8005392:	f000 f9d9 	bl	8005748 <__multadd>
 8005396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005398:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800539c:	4683      	mov	fp, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 8144 	beq.w	800562c <_dtoa_r+0xb24>
 80053a4:	2300      	movs	r3, #0
 80053a6:	4639      	mov	r1, r7
 80053a8:	220a      	movs	r2, #10
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 f9cc 	bl	8005748 <__multadd>
 80053b0:	9b04      	ldr	r3, [sp, #16]
 80053b2:	4607      	mov	r7, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dc4d      	bgt.n	8005454 <_dtoa_r+0x94c>
 80053b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	dd4a      	ble.n	8005454 <_dtoa_r+0x94c>
 80053be:	e011      	b.n	80053e4 <_dtoa_r+0x8dc>
 80053c0:	d0c9      	beq.n	8005356 <_dtoa_r+0x84e>
 80053c2:	9a07      	ldr	r2, [sp, #28]
 80053c4:	331c      	adds	r3, #28
 80053c6:	441a      	add	r2, r3
 80053c8:	4499      	add	r9, r3
 80053ca:	441d      	add	r5, r3
 80053cc:	4613      	mov	r3, r2
 80053ce:	e7c1      	b.n	8005354 <_dtoa_r+0x84c>
 80053d0:	4603      	mov	r3, r0
 80053d2:	e7f6      	b.n	80053c2 <_dtoa_r+0x8ba>
 80053d4:	f1b8 0f00 	cmp.w	r8, #0
 80053d8:	dc36      	bgt.n	8005448 <_dtoa_r+0x940>
 80053da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053dc:	2b02      	cmp	r3, #2
 80053de:	dd33      	ble.n	8005448 <_dtoa_r+0x940>
 80053e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80053e4:	9b04      	ldr	r3, [sp, #16]
 80053e6:	b963      	cbnz	r3, 8005402 <_dtoa_r+0x8fa>
 80053e8:	4631      	mov	r1, r6
 80053ea:	2205      	movs	r2, #5
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f9ab 	bl	8005748 <__multadd>
 80053f2:	4601      	mov	r1, r0
 80053f4:	4606      	mov	r6, r0
 80053f6:	4658      	mov	r0, fp
 80053f8:	f000 fb70 	bl	8005adc <__mcmp>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f73f add3 	bgt.w	8004fa8 <_dtoa_r+0x4a0>
 8005402:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005404:	9d06      	ldr	r5, [sp, #24]
 8005406:	ea6f 0a03 	mvn.w	sl, r3
 800540a:	f04f 0900 	mov.w	r9, #0
 800540e:	4631      	mov	r1, r6
 8005410:	4620      	mov	r0, r4
 8005412:	f000 f982 	bl	800571a <_Bfree>
 8005416:	2f00      	cmp	r7, #0
 8005418:	f43f aebd 	beq.w	8005196 <_dtoa_r+0x68e>
 800541c:	f1b9 0f00 	cmp.w	r9, #0
 8005420:	d005      	beq.n	800542e <_dtoa_r+0x926>
 8005422:	45b9      	cmp	r9, r7
 8005424:	d003      	beq.n	800542e <_dtoa_r+0x926>
 8005426:	4649      	mov	r1, r9
 8005428:	4620      	mov	r0, r4
 800542a:	f000 f976 	bl	800571a <_Bfree>
 800542e:	4639      	mov	r1, r7
 8005430:	4620      	mov	r0, r4
 8005432:	f000 f972 	bl	800571a <_Bfree>
 8005436:	e6ae      	b.n	8005196 <_dtoa_r+0x68e>
 8005438:	2600      	movs	r6, #0
 800543a:	4637      	mov	r7, r6
 800543c:	e7e1      	b.n	8005402 <_dtoa_r+0x8fa>
 800543e:	46ba      	mov	sl, r7
 8005440:	4637      	mov	r7, r6
 8005442:	e5b1      	b.n	8004fa8 <_dtoa_r+0x4a0>
 8005444:	40240000 	.word	0x40240000
 8005448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800544a:	f8cd 8010 	str.w	r8, [sp, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 80f3 	beq.w	800563a <_dtoa_r+0xb32>
 8005454:	2d00      	cmp	r5, #0
 8005456:	dd05      	ble.n	8005464 <_dtoa_r+0x95c>
 8005458:	4639      	mov	r1, r7
 800545a:	462a      	mov	r2, r5
 800545c:	4620      	mov	r0, r4
 800545e:	f000 fae9 	bl	8005a34 <__lshift>
 8005462:	4607      	mov	r7, r0
 8005464:	9b08      	ldr	r3, [sp, #32]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d04c      	beq.n	8005504 <_dtoa_r+0x9fc>
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4620      	mov	r0, r4
 800546e:	f000 f920 	bl	80056b2 <_Balloc>
 8005472:	4605      	mov	r5, r0
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	f107 010c 	add.w	r1, r7, #12
 800547a:	3202      	adds	r2, #2
 800547c:	0092      	lsls	r2, r2, #2
 800547e:	300c      	adds	r0, #12
 8005480:	f000 f90c 	bl	800569c <memcpy>
 8005484:	2201      	movs	r2, #1
 8005486:	4629      	mov	r1, r5
 8005488:	4620      	mov	r0, r4
 800548a:	f000 fad3 	bl	8005a34 <__lshift>
 800548e:	46b9      	mov	r9, r7
 8005490:	4607      	mov	r7, r0
 8005492:	9b06      	ldr	r3, [sp, #24]
 8005494:	9307      	str	r3, [sp, #28]
 8005496:	9b02      	ldr	r3, [sp, #8]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	9308      	str	r3, [sp, #32]
 800549e:	4631      	mov	r1, r6
 80054a0:	4658      	mov	r0, fp
 80054a2:	f7ff faa3 	bl	80049ec <quorem>
 80054a6:	4649      	mov	r1, r9
 80054a8:	4605      	mov	r5, r0
 80054aa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054ae:	4658      	mov	r0, fp
 80054b0:	f000 fb14 	bl	8005adc <__mcmp>
 80054b4:	463a      	mov	r2, r7
 80054b6:	9002      	str	r0, [sp, #8]
 80054b8:	4631      	mov	r1, r6
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fb28 	bl	8005b10 <__mdiff>
 80054c0:	68c3      	ldr	r3, [r0, #12]
 80054c2:	4602      	mov	r2, r0
 80054c4:	bb03      	cbnz	r3, 8005508 <_dtoa_r+0xa00>
 80054c6:	4601      	mov	r1, r0
 80054c8:	9009      	str	r0, [sp, #36]	; 0x24
 80054ca:	4658      	mov	r0, fp
 80054cc:	f000 fb06 	bl	8005adc <__mcmp>
 80054d0:	4603      	mov	r3, r0
 80054d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054d4:	4611      	mov	r1, r2
 80054d6:	4620      	mov	r0, r4
 80054d8:	9309      	str	r3, [sp, #36]	; 0x24
 80054da:	f000 f91e 	bl	800571a <_Bfree>
 80054de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e0:	b9a3      	cbnz	r3, 800550c <_dtoa_r+0xa04>
 80054e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80054e4:	b992      	cbnz	r2, 800550c <_dtoa_r+0xa04>
 80054e6:	9a08      	ldr	r2, [sp, #32]
 80054e8:	b982      	cbnz	r2, 800550c <_dtoa_r+0xa04>
 80054ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054ee:	d029      	beq.n	8005544 <_dtoa_r+0xa3c>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	dd01      	ble.n	80054fa <_dtoa_r+0x9f2>
 80054f6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80054fa:	9b07      	ldr	r3, [sp, #28]
 80054fc:	1c5d      	adds	r5, r3, #1
 80054fe:	f883 8000 	strb.w	r8, [r3]
 8005502:	e784      	b.n	800540e <_dtoa_r+0x906>
 8005504:	4638      	mov	r0, r7
 8005506:	e7c2      	b.n	800548e <_dtoa_r+0x986>
 8005508:	2301      	movs	r3, #1
 800550a:	e7e3      	b.n	80054d4 <_dtoa_r+0x9cc>
 800550c:	9a02      	ldr	r2, [sp, #8]
 800550e:	2a00      	cmp	r2, #0
 8005510:	db04      	blt.n	800551c <_dtoa_r+0xa14>
 8005512:	d123      	bne.n	800555c <_dtoa_r+0xa54>
 8005514:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005516:	bb0a      	cbnz	r2, 800555c <_dtoa_r+0xa54>
 8005518:	9a08      	ldr	r2, [sp, #32]
 800551a:	b9fa      	cbnz	r2, 800555c <_dtoa_r+0xa54>
 800551c:	2b00      	cmp	r3, #0
 800551e:	ddec      	ble.n	80054fa <_dtoa_r+0x9f2>
 8005520:	4659      	mov	r1, fp
 8005522:	2201      	movs	r2, #1
 8005524:	4620      	mov	r0, r4
 8005526:	f000 fa85 	bl	8005a34 <__lshift>
 800552a:	4631      	mov	r1, r6
 800552c:	4683      	mov	fp, r0
 800552e:	f000 fad5 	bl	8005adc <__mcmp>
 8005532:	2800      	cmp	r0, #0
 8005534:	dc03      	bgt.n	800553e <_dtoa_r+0xa36>
 8005536:	d1e0      	bne.n	80054fa <_dtoa_r+0x9f2>
 8005538:	f018 0f01 	tst.w	r8, #1
 800553c:	d0dd      	beq.n	80054fa <_dtoa_r+0x9f2>
 800553e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005542:	d1d8      	bne.n	80054f6 <_dtoa_r+0x9ee>
 8005544:	9b07      	ldr	r3, [sp, #28]
 8005546:	9a07      	ldr	r2, [sp, #28]
 8005548:	1c5d      	adds	r5, r3, #1
 800554a:	2339      	movs	r3, #57	; 0x39
 800554c:	7013      	strb	r3, [r2, #0]
 800554e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005552:	1e6a      	subs	r2, r5, #1
 8005554:	2b39      	cmp	r3, #57	; 0x39
 8005556:	d04d      	beq.n	80055f4 <_dtoa_r+0xaec>
 8005558:	3301      	adds	r3, #1
 800555a:	e052      	b.n	8005602 <_dtoa_r+0xafa>
 800555c:	9a07      	ldr	r2, [sp, #28]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f102 0501 	add.w	r5, r2, #1
 8005564:	dd06      	ble.n	8005574 <_dtoa_r+0xa6c>
 8005566:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800556a:	d0eb      	beq.n	8005544 <_dtoa_r+0xa3c>
 800556c:	f108 0801 	add.w	r8, r8, #1
 8005570:	9b07      	ldr	r3, [sp, #28]
 8005572:	e7c4      	b.n	80054fe <_dtoa_r+0x9f6>
 8005574:	9b06      	ldr	r3, [sp, #24]
 8005576:	9a04      	ldr	r2, [sp, #16]
 8005578:	1aeb      	subs	r3, r5, r3
 800557a:	4293      	cmp	r3, r2
 800557c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005580:	d021      	beq.n	80055c6 <_dtoa_r+0xabe>
 8005582:	4659      	mov	r1, fp
 8005584:	2300      	movs	r3, #0
 8005586:	220a      	movs	r2, #10
 8005588:	4620      	mov	r0, r4
 800558a:	f000 f8dd 	bl	8005748 <__multadd>
 800558e:	45b9      	cmp	r9, r7
 8005590:	4683      	mov	fp, r0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	f04f 020a 	mov.w	r2, #10
 800559a:	4649      	mov	r1, r9
 800559c:	4620      	mov	r0, r4
 800559e:	d105      	bne.n	80055ac <_dtoa_r+0xaa4>
 80055a0:	f000 f8d2 	bl	8005748 <__multadd>
 80055a4:	4681      	mov	r9, r0
 80055a6:	4607      	mov	r7, r0
 80055a8:	9507      	str	r5, [sp, #28]
 80055aa:	e778      	b.n	800549e <_dtoa_r+0x996>
 80055ac:	f000 f8cc 	bl	8005748 <__multadd>
 80055b0:	4639      	mov	r1, r7
 80055b2:	4681      	mov	r9, r0
 80055b4:	2300      	movs	r3, #0
 80055b6:	220a      	movs	r2, #10
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 f8c5 	bl	8005748 <__multadd>
 80055be:	4607      	mov	r7, r0
 80055c0:	e7f2      	b.n	80055a8 <_dtoa_r+0xaa0>
 80055c2:	f04f 0900 	mov.w	r9, #0
 80055c6:	4659      	mov	r1, fp
 80055c8:	2201      	movs	r2, #1
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 fa32 	bl	8005a34 <__lshift>
 80055d0:	4631      	mov	r1, r6
 80055d2:	4683      	mov	fp, r0
 80055d4:	f000 fa82 	bl	8005adc <__mcmp>
 80055d8:	2800      	cmp	r0, #0
 80055da:	dcb8      	bgt.n	800554e <_dtoa_r+0xa46>
 80055dc:	d102      	bne.n	80055e4 <_dtoa_r+0xadc>
 80055de:	f018 0f01 	tst.w	r8, #1
 80055e2:	d1b4      	bne.n	800554e <_dtoa_r+0xa46>
 80055e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055e8:	1e6a      	subs	r2, r5, #1
 80055ea:	2b30      	cmp	r3, #48	; 0x30
 80055ec:	f47f af0f 	bne.w	800540e <_dtoa_r+0x906>
 80055f0:	4615      	mov	r5, r2
 80055f2:	e7f7      	b.n	80055e4 <_dtoa_r+0xadc>
 80055f4:	9b06      	ldr	r3, [sp, #24]
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d105      	bne.n	8005606 <_dtoa_r+0xafe>
 80055fa:	2331      	movs	r3, #49	; 0x31
 80055fc:	9a06      	ldr	r2, [sp, #24]
 80055fe:	f10a 0a01 	add.w	sl, sl, #1
 8005602:	7013      	strb	r3, [r2, #0]
 8005604:	e703      	b.n	800540e <_dtoa_r+0x906>
 8005606:	4615      	mov	r5, r2
 8005608:	e7a1      	b.n	800554e <_dtoa_r+0xa46>
 800560a:	4b17      	ldr	r3, [pc, #92]	; (8005668 <_dtoa_r+0xb60>)
 800560c:	f7ff bae1 	b.w	8004bd2 <_dtoa_r+0xca>
 8005610:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005612:	2b00      	cmp	r3, #0
 8005614:	f47f aabb 	bne.w	8004b8e <_dtoa_r+0x86>
 8005618:	4b14      	ldr	r3, [pc, #80]	; (800566c <_dtoa_r+0xb64>)
 800561a:	f7ff bada 	b.w	8004bd2 <_dtoa_r+0xca>
 800561e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005620:	2b01      	cmp	r3, #1
 8005622:	f77f ae3f 	ble.w	80052a4 <_dtoa_r+0x79c>
 8005626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005628:	9308      	str	r3, [sp, #32]
 800562a:	e653      	b.n	80052d4 <_dtoa_r+0x7cc>
 800562c:	9b04      	ldr	r3, [sp, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	dc03      	bgt.n	800563a <_dtoa_r+0xb32>
 8005632:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005634:	2b02      	cmp	r3, #2
 8005636:	f73f aed5 	bgt.w	80053e4 <_dtoa_r+0x8dc>
 800563a:	9d06      	ldr	r5, [sp, #24]
 800563c:	4631      	mov	r1, r6
 800563e:	4658      	mov	r0, fp
 8005640:	f7ff f9d4 	bl	80049ec <quorem>
 8005644:	9b06      	ldr	r3, [sp, #24]
 8005646:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800564a:	f805 8b01 	strb.w	r8, [r5], #1
 800564e:	9a04      	ldr	r2, [sp, #16]
 8005650:	1aeb      	subs	r3, r5, r3
 8005652:	429a      	cmp	r2, r3
 8005654:	ddb5      	ble.n	80055c2 <_dtoa_r+0xaba>
 8005656:	4659      	mov	r1, fp
 8005658:	2300      	movs	r3, #0
 800565a:	220a      	movs	r2, #10
 800565c:	4620      	mov	r0, r4
 800565e:	f000 f873 	bl	8005748 <__multadd>
 8005662:	4683      	mov	fp, r0
 8005664:	e7ea      	b.n	800563c <_dtoa_r+0xb34>
 8005666:	bf00      	nop
 8005668:	08005e08 	.word	0x08005e08
 800566c:	08005e0a 	.word	0x08005e0a

08005670 <_localeconv_r>:
 8005670:	4b04      	ldr	r3, [pc, #16]	; (8005684 <_localeconv_r+0x14>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a18      	ldr	r0, [r3, #32]
 8005676:	4b04      	ldr	r3, [pc, #16]	; (8005688 <_localeconv_r+0x18>)
 8005678:	2800      	cmp	r0, #0
 800567a:	bf08      	it	eq
 800567c:	4618      	moveq	r0, r3
 800567e:	30f0      	adds	r0, #240	; 0xf0
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	2000000c 	.word	0x2000000c
 8005688:	20000070 	.word	0x20000070

0800568c <malloc>:
 800568c:	4b02      	ldr	r3, [pc, #8]	; (8005698 <malloc+0xc>)
 800568e:	4601      	mov	r1, r0
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	f000 baf9 	b.w	8005c88 <_malloc_r>
 8005696:	bf00      	nop
 8005698:	2000000c 	.word	0x2000000c

0800569c <memcpy>:
 800569c:	b510      	push	{r4, lr}
 800569e:	1e43      	subs	r3, r0, #1
 80056a0:	440a      	add	r2, r1
 80056a2:	4291      	cmp	r1, r2
 80056a4:	d100      	bne.n	80056a8 <memcpy+0xc>
 80056a6:	bd10      	pop	{r4, pc}
 80056a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b0:	e7f7      	b.n	80056a2 <memcpy+0x6>

080056b2 <_Balloc>:
 80056b2:	b570      	push	{r4, r5, r6, lr}
 80056b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056b6:	4604      	mov	r4, r0
 80056b8:	460e      	mov	r6, r1
 80056ba:	b93d      	cbnz	r5, 80056cc <_Balloc+0x1a>
 80056bc:	2010      	movs	r0, #16
 80056be:	f7ff ffe5 	bl	800568c <malloc>
 80056c2:	6260      	str	r0, [r4, #36]	; 0x24
 80056c4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056c8:	6005      	str	r5, [r0, #0]
 80056ca:	60c5      	str	r5, [r0, #12]
 80056cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80056ce:	68eb      	ldr	r3, [r5, #12]
 80056d0:	b183      	cbz	r3, 80056f4 <_Balloc+0x42>
 80056d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80056da:	b9b8      	cbnz	r0, 800570c <_Balloc+0x5a>
 80056dc:	2101      	movs	r1, #1
 80056de:	fa01 f506 	lsl.w	r5, r1, r6
 80056e2:	1d6a      	adds	r2, r5, #5
 80056e4:	0092      	lsls	r2, r2, #2
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 fabf 	bl	8005c6a <_calloc_r>
 80056ec:	b160      	cbz	r0, 8005708 <_Balloc+0x56>
 80056ee:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80056f2:	e00e      	b.n	8005712 <_Balloc+0x60>
 80056f4:	2221      	movs	r2, #33	; 0x21
 80056f6:	2104      	movs	r1, #4
 80056f8:	4620      	mov	r0, r4
 80056fa:	f000 fab6 	bl	8005c6a <_calloc_r>
 80056fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005700:	60e8      	str	r0, [r5, #12]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e4      	bne.n	80056d2 <_Balloc+0x20>
 8005708:	2000      	movs	r0, #0
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	6802      	ldr	r2, [r0, #0]
 800570e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005712:	2300      	movs	r3, #0
 8005714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005718:	e7f7      	b.n	800570a <_Balloc+0x58>

0800571a <_Bfree>:
 800571a:	b570      	push	{r4, r5, r6, lr}
 800571c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800571e:	4606      	mov	r6, r0
 8005720:	460d      	mov	r5, r1
 8005722:	b93c      	cbnz	r4, 8005734 <_Bfree+0x1a>
 8005724:	2010      	movs	r0, #16
 8005726:	f7ff ffb1 	bl	800568c <malloc>
 800572a:	6270      	str	r0, [r6, #36]	; 0x24
 800572c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005730:	6004      	str	r4, [r0, #0]
 8005732:	60c4      	str	r4, [r0, #12]
 8005734:	b13d      	cbz	r5, 8005746 <_Bfree+0x2c>
 8005736:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005738:	686a      	ldr	r2, [r5, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005740:	6029      	str	r1, [r5, #0]
 8005742:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005746:	bd70      	pop	{r4, r5, r6, pc}

08005748 <__multadd>:
 8005748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574c:	461f      	mov	r7, r3
 800574e:	4606      	mov	r6, r0
 8005750:	460c      	mov	r4, r1
 8005752:	2300      	movs	r3, #0
 8005754:	690d      	ldr	r5, [r1, #16]
 8005756:	f101 0c14 	add.w	ip, r1, #20
 800575a:	f8dc 0000 	ldr.w	r0, [ip]
 800575e:	3301      	adds	r3, #1
 8005760:	b281      	uxth	r1, r0
 8005762:	fb02 7101 	mla	r1, r2, r1, r7
 8005766:	0c00      	lsrs	r0, r0, #16
 8005768:	0c0f      	lsrs	r7, r1, #16
 800576a:	fb02 7000 	mla	r0, r2, r0, r7
 800576e:	b289      	uxth	r1, r1
 8005770:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005774:	429d      	cmp	r5, r3
 8005776:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800577a:	f84c 1b04 	str.w	r1, [ip], #4
 800577e:	dcec      	bgt.n	800575a <__multadd+0x12>
 8005780:	b1d7      	cbz	r7, 80057b8 <__multadd+0x70>
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	42ab      	cmp	r3, r5
 8005786:	dc12      	bgt.n	80057ae <__multadd+0x66>
 8005788:	6861      	ldr	r1, [r4, #4]
 800578a:	4630      	mov	r0, r6
 800578c:	3101      	adds	r1, #1
 800578e:	f7ff ff90 	bl	80056b2 <_Balloc>
 8005792:	4680      	mov	r8, r0
 8005794:	6922      	ldr	r2, [r4, #16]
 8005796:	f104 010c 	add.w	r1, r4, #12
 800579a:	3202      	adds	r2, #2
 800579c:	0092      	lsls	r2, r2, #2
 800579e:	300c      	adds	r0, #12
 80057a0:	f7ff ff7c 	bl	800569c <memcpy>
 80057a4:	4621      	mov	r1, r4
 80057a6:	4630      	mov	r0, r6
 80057a8:	f7ff ffb7 	bl	800571a <_Bfree>
 80057ac:	4644      	mov	r4, r8
 80057ae:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057b2:	3501      	adds	r5, #1
 80057b4:	615f      	str	r7, [r3, #20]
 80057b6:	6125      	str	r5, [r4, #16]
 80057b8:	4620      	mov	r0, r4
 80057ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057be <__hi0bits>:
 80057be:	0c02      	lsrs	r2, r0, #16
 80057c0:	0412      	lsls	r2, r2, #16
 80057c2:	4603      	mov	r3, r0
 80057c4:	b9b2      	cbnz	r2, 80057f4 <__hi0bits+0x36>
 80057c6:	0403      	lsls	r3, r0, #16
 80057c8:	2010      	movs	r0, #16
 80057ca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80057ce:	bf04      	itt	eq
 80057d0:	021b      	lsleq	r3, r3, #8
 80057d2:	3008      	addeq	r0, #8
 80057d4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80057d8:	bf04      	itt	eq
 80057da:	011b      	lsleq	r3, r3, #4
 80057dc:	3004      	addeq	r0, #4
 80057de:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80057e2:	bf04      	itt	eq
 80057e4:	009b      	lsleq	r3, r3, #2
 80057e6:	3002      	addeq	r0, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	db06      	blt.n	80057fa <__hi0bits+0x3c>
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	d503      	bpl.n	80057f8 <__hi0bits+0x3a>
 80057f0:	3001      	adds	r0, #1
 80057f2:	4770      	bx	lr
 80057f4:	2000      	movs	r0, #0
 80057f6:	e7e8      	b.n	80057ca <__hi0bits+0xc>
 80057f8:	2020      	movs	r0, #32
 80057fa:	4770      	bx	lr

080057fc <__lo0bits>:
 80057fc:	6803      	ldr	r3, [r0, #0]
 80057fe:	4601      	mov	r1, r0
 8005800:	f013 0207 	ands.w	r2, r3, #7
 8005804:	d00b      	beq.n	800581e <__lo0bits+0x22>
 8005806:	07da      	lsls	r2, r3, #31
 8005808:	d423      	bmi.n	8005852 <__lo0bits+0x56>
 800580a:	0798      	lsls	r0, r3, #30
 800580c:	bf49      	itett	mi
 800580e:	085b      	lsrmi	r3, r3, #1
 8005810:	089b      	lsrpl	r3, r3, #2
 8005812:	2001      	movmi	r0, #1
 8005814:	600b      	strmi	r3, [r1, #0]
 8005816:	bf5c      	itt	pl
 8005818:	600b      	strpl	r3, [r1, #0]
 800581a:	2002      	movpl	r0, #2
 800581c:	4770      	bx	lr
 800581e:	b298      	uxth	r0, r3
 8005820:	b9a8      	cbnz	r0, 800584e <__lo0bits+0x52>
 8005822:	2010      	movs	r0, #16
 8005824:	0c1b      	lsrs	r3, r3, #16
 8005826:	f013 0fff 	tst.w	r3, #255	; 0xff
 800582a:	bf04      	itt	eq
 800582c:	0a1b      	lsreq	r3, r3, #8
 800582e:	3008      	addeq	r0, #8
 8005830:	071a      	lsls	r2, r3, #28
 8005832:	bf04      	itt	eq
 8005834:	091b      	lsreq	r3, r3, #4
 8005836:	3004      	addeq	r0, #4
 8005838:	079a      	lsls	r2, r3, #30
 800583a:	bf04      	itt	eq
 800583c:	089b      	lsreq	r3, r3, #2
 800583e:	3002      	addeq	r0, #2
 8005840:	07da      	lsls	r2, r3, #31
 8005842:	d402      	bmi.n	800584a <__lo0bits+0x4e>
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	d006      	beq.n	8005856 <__lo0bits+0x5a>
 8005848:	3001      	adds	r0, #1
 800584a:	600b      	str	r3, [r1, #0]
 800584c:	4770      	bx	lr
 800584e:	4610      	mov	r0, r2
 8005850:	e7e9      	b.n	8005826 <__lo0bits+0x2a>
 8005852:	2000      	movs	r0, #0
 8005854:	4770      	bx	lr
 8005856:	2020      	movs	r0, #32
 8005858:	4770      	bx	lr

0800585a <__i2b>:
 800585a:	b510      	push	{r4, lr}
 800585c:	460c      	mov	r4, r1
 800585e:	2101      	movs	r1, #1
 8005860:	f7ff ff27 	bl	80056b2 <_Balloc>
 8005864:	2201      	movs	r2, #1
 8005866:	6144      	str	r4, [r0, #20]
 8005868:	6102      	str	r2, [r0, #16]
 800586a:	bd10      	pop	{r4, pc}

0800586c <__multiply>:
 800586c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005870:	4614      	mov	r4, r2
 8005872:	690a      	ldr	r2, [r1, #16]
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	4688      	mov	r8, r1
 8005878:	429a      	cmp	r2, r3
 800587a:	bfbe      	ittt	lt
 800587c:	460b      	movlt	r3, r1
 800587e:	46a0      	movlt	r8, r4
 8005880:	461c      	movlt	r4, r3
 8005882:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005886:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800588a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800588e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005892:	eb07 0609 	add.w	r6, r7, r9
 8005896:	42b3      	cmp	r3, r6
 8005898:	bfb8      	it	lt
 800589a:	3101      	addlt	r1, #1
 800589c:	f7ff ff09 	bl	80056b2 <_Balloc>
 80058a0:	f100 0514 	add.w	r5, r0, #20
 80058a4:	462b      	mov	r3, r5
 80058a6:	2200      	movs	r2, #0
 80058a8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80058ac:	4573      	cmp	r3, lr
 80058ae:	d316      	bcc.n	80058de <__multiply+0x72>
 80058b0:	f104 0214 	add.w	r2, r4, #20
 80058b4:	f108 0114 	add.w	r1, r8, #20
 80058b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80058bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	9b00      	ldr	r3, [sp, #0]
 80058c4:	9201      	str	r2, [sp, #4]
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d80c      	bhi.n	80058e4 <__multiply+0x78>
 80058ca:	2e00      	cmp	r6, #0
 80058cc:	dd03      	ble.n	80058d6 <__multiply+0x6a>
 80058ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d05d      	beq.n	8005992 <__multiply+0x126>
 80058d6:	6106      	str	r6, [r0, #16]
 80058d8:	b003      	add	sp, #12
 80058da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058de:	f843 2b04 	str.w	r2, [r3], #4
 80058e2:	e7e3      	b.n	80058ac <__multiply+0x40>
 80058e4:	f8b2 b000 	ldrh.w	fp, [r2]
 80058e8:	f1bb 0f00 	cmp.w	fp, #0
 80058ec:	d023      	beq.n	8005936 <__multiply+0xca>
 80058ee:	4689      	mov	r9, r1
 80058f0:	46ac      	mov	ip, r5
 80058f2:	f04f 0800 	mov.w	r8, #0
 80058f6:	f859 4b04 	ldr.w	r4, [r9], #4
 80058fa:	f8dc a000 	ldr.w	sl, [ip]
 80058fe:	b2a3      	uxth	r3, r4
 8005900:	fa1f fa8a 	uxth.w	sl, sl
 8005904:	fb0b a303 	mla	r3, fp, r3, sl
 8005908:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800590c:	f8dc 4000 	ldr.w	r4, [ip]
 8005910:	4443      	add	r3, r8
 8005912:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005916:	fb0b 840a 	mla	r4, fp, sl, r8
 800591a:	46e2      	mov	sl, ip
 800591c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005920:	b29b      	uxth	r3, r3
 8005922:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005926:	454f      	cmp	r7, r9
 8005928:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800592c:	f84a 3b04 	str.w	r3, [sl], #4
 8005930:	d82b      	bhi.n	800598a <__multiply+0x11e>
 8005932:	f8cc 8004 	str.w	r8, [ip, #4]
 8005936:	9b01      	ldr	r3, [sp, #4]
 8005938:	3204      	adds	r2, #4
 800593a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800593e:	f1ba 0f00 	cmp.w	sl, #0
 8005942:	d020      	beq.n	8005986 <__multiply+0x11a>
 8005944:	4689      	mov	r9, r1
 8005946:	46a8      	mov	r8, r5
 8005948:	f04f 0b00 	mov.w	fp, #0
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	f8b9 c000 	ldrh.w	ip, [r9]
 8005952:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005956:	b29b      	uxth	r3, r3
 8005958:	fb0a 440c 	mla	r4, sl, ip, r4
 800595c:	46c4      	mov	ip, r8
 800595e:	445c      	add	r4, fp
 8005960:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005964:	f84c 3b04 	str.w	r3, [ip], #4
 8005968:	f859 3b04 	ldr.w	r3, [r9], #4
 800596c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005970:	0c1b      	lsrs	r3, r3, #16
 8005972:	fb0a b303 	mla	r3, sl, r3, fp
 8005976:	454f      	cmp	r7, r9
 8005978:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800597c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005980:	d805      	bhi.n	800598e <__multiply+0x122>
 8005982:	f8c8 3004 	str.w	r3, [r8, #4]
 8005986:	3504      	adds	r5, #4
 8005988:	e79b      	b.n	80058c2 <__multiply+0x56>
 800598a:	46d4      	mov	ip, sl
 800598c:	e7b3      	b.n	80058f6 <__multiply+0x8a>
 800598e:	46e0      	mov	r8, ip
 8005990:	e7dd      	b.n	800594e <__multiply+0xe2>
 8005992:	3e01      	subs	r6, #1
 8005994:	e799      	b.n	80058ca <__multiply+0x5e>
	...

08005998 <__pow5mult>:
 8005998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800599c:	4615      	mov	r5, r2
 800599e:	f012 0203 	ands.w	r2, r2, #3
 80059a2:	4606      	mov	r6, r0
 80059a4:	460f      	mov	r7, r1
 80059a6:	d007      	beq.n	80059b8 <__pow5mult+0x20>
 80059a8:	4c21      	ldr	r4, [pc, #132]	; (8005a30 <__pow5mult+0x98>)
 80059aa:	3a01      	subs	r2, #1
 80059ac:	2300      	movs	r3, #0
 80059ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80059b2:	f7ff fec9 	bl	8005748 <__multadd>
 80059b6:	4607      	mov	r7, r0
 80059b8:	10ad      	asrs	r5, r5, #2
 80059ba:	d035      	beq.n	8005a28 <__pow5mult+0x90>
 80059bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80059be:	b93c      	cbnz	r4, 80059d0 <__pow5mult+0x38>
 80059c0:	2010      	movs	r0, #16
 80059c2:	f7ff fe63 	bl	800568c <malloc>
 80059c6:	6270      	str	r0, [r6, #36]	; 0x24
 80059c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059cc:	6004      	str	r4, [r0, #0]
 80059ce:	60c4      	str	r4, [r0, #12]
 80059d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059d8:	b94c      	cbnz	r4, 80059ee <__pow5mult+0x56>
 80059da:	f240 2171 	movw	r1, #625	; 0x271
 80059de:	4630      	mov	r0, r6
 80059e0:	f7ff ff3b 	bl	800585a <__i2b>
 80059e4:	2300      	movs	r3, #0
 80059e6:	4604      	mov	r4, r0
 80059e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80059ec:	6003      	str	r3, [r0, #0]
 80059ee:	f04f 0800 	mov.w	r8, #0
 80059f2:	07eb      	lsls	r3, r5, #31
 80059f4:	d50a      	bpl.n	8005a0c <__pow5mult+0x74>
 80059f6:	4639      	mov	r1, r7
 80059f8:	4622      	mov	r2, r4
 80059fa:	4630      	mov	r0, r6
 80059fc:	f7ff ff36 	bl	800586c <__multiply>
 8005a00:	4681      	mov	r9, r0
 8005a02:	4639      	mov	r1, r7
 8005a04:	4630      	mov	r0, r6
 8005a06:	f7ff fe88 	bl	800571a <_Bfree>
 8005a0a:	464f      	mov	r7, r9
 8005a0c:	106d      	asrs	r5, r5, #1
 8005a0e:	d00b      	beq.n	8005a28 <__pow5mult+0x90>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	b938      	cbnz	r0, 8005a24 <__pow5mult+0x8c>
 8005a14:	4622      	mov	r2, r4
 8005a16:	4621      	mov	r1, r4
 8005a18:	4630      	mov	r0, r6
 8005a1a:	f7ff ff27 	bl	800586c <__multiply>
 8005a1e:	6020      	str	r0, [r4, #0]
 8005a20:	f8c0 8000 	str.w	r8, [r0]
 8005a24:	4604      	mov	r4, r0
 8005a26:	e7e4      	b.n	80059f2 <__pow5mult+0x5a>
 8005a28:	4638      	mov	r0, r7
 8005a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2e:	bf00      	nop
 8005a30:	08005f08 	.word	0x08005f08

08005a34 <__lshift>:
 8005a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	460c      	mov	r4, r1
 8005a3a:	4607      	mov	r7, r0
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a44:	eb0a 0903 	add.w	r9, sl, r3
 8005a48:	6849      	ldr	r1, [r1, #4]
 8005a4a:	68a3      	ldr	r3, [r4, #8]
 8005a4c:	f109 0501 	add.w	r5, r9, #1
 8005a50:	42ab      	cmp	r3, r5
 8005a52:	db32      	blt.n	8005aba <__lshift+0x86>
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7ff fe2c 	bl	80056b2 <_Balloc>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	4680      	mov	r8, r0
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f100 0114 	add.w	r1, r0, #20
 8005a64:	4553      	cmp	r3, sl
 8005a66:	db2b      	blt.n	8005ac0 <__lshift+0x8c>
 8005a68:	6920      	ldr	r0, [r4, #16]
 8005a6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a6e:	f104 0314 	add.w	r3, r4, #20
 8005a72:	f016 021f 	ands.w	r2, r6, #31
 8005a76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a7e:	d025      	beq.n	8005acc <__lshift+0x98>
 8005a80:	2000      	movs	r0, #0
 8005a82:	f1c2 0e20 	rsb	lr, r2, #32
 8005a86:	468a      	mov	sl, r1
 8005a88:	681e      	ldr	r6, [r3, #0]
 8005a8a:	4096      	lsls	r6, r2
 8005a8c:	4330      	orrs	r0, r6
 8005a8e:	f84a 0b04 	str.w	r0, [sl], #4
 8005a92:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a96:	459c      	cmp	ip, r3
 8005a98:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a9c:	d814      	bhi.n	8005ac8 <__lshift+0x94>
 8005a9e:	6048      	str	r0, [r1, #4]
 8005aa0:	b108      	cbz	r0, 8005aa6 <__lshift+0x72>
 8005aa2:	f109 0502 	add.w	r5, r9, #2
 8005aa6:	3d01      	subs	r5, #1
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f8c8 5010 	str.w	r5, [r8, #16]
 8005aae:	4621      	mov	r1, r4
 8005ab0:	f7ff fe33 	bl	800571a <_Bfree>
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aba:	3101      	adds	r1, #1
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	e7c7      	b.n	8005a50 <__lshift+0x1c>
 8005ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	e7cd      	b.n	8005a64 <__lshift+0x30>
 8005ac8:	4651      	mov	r1, sl
 8005aca:	e7dc      	b.n	8005a86 <__lshift+0x52>
 8005acc:	3904      	subs	r1, #4
 8005ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ad2:	459c      	cmp	ip, r3
 8005ad4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ad8:	d8f9      	bhi.n	8005ace <__lshift+0x9a>
 8005ada:	e7e4      	b.n	8005aa6 <__lshift+0x72>

08005adc <__mcmp>:
 8005adc:	6903      	ldr	r3, [r0, #16]
 8005ade:	690a      	ldr	r2, [r1, #16]
 8005ae0:	b530      	push	{r4, r5, lr}
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	d10c      	bne.n	8005b00 <__mcmp+0x24>
 8005ae6:	0092      	lsls	r2, r2, #2
 8005ae8:	3014      	adds	r0, #20
 8005aea:	3114      	adds	r1, #20
 8005aec:	1884      	adds	r4, r0, r2
 8005aee:	4411      	add	r1, r2
 8005af0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005af4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005af8:	4295      	cmp	r5, r2
 8005afa:	d003      	beq.n	8005b04 <__mcmp+0x28>
 8005afc:	d305      	bcc.n	8005b0a <__mcmp+0x2e>
 8005afe:	2301      	movs	r3, #1
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd30      	pop	{r4, r5, pc}
 8005b04:	42a0      	cmp	r0, r4
 8005b06:	d3f3      	bcc.n	8005af0 <__mcmp+0x14>
 8005b08:	e7fa      	b.n	8005b00 <__mcmp+0x24>
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b0e:	e7f7      	b.n	8005b00 <__mcmp+0x24>

08005b10 <__mdiff>:
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	460d      	mov	r5, r1
 8005b16:	4607      	mov	r7, r0
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	4614      	mov	r4, r2
 8005b1e:	f7ff ffdd 	bl	8005adc <__mcmp>
 8005b22:	1e06      	subs	r6, r0, #0
 8005b24:	d108      	bne.n	8005b38 <__mdiff+0x28>
 8005b26:	4631      	mov	r1, r6
 8005b28:	4638      	mov	r0, r7
 8005b2a:	f7ff fdc2 	bl	80056b2 <_Balloc>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b38:	bfa4      	itt	ge
 8005b3a:	4623      	movge	r3, r4
 8005b3c:	462c      	movge	r4, r5
 8005b3e:	4638      	mov	r0, r7
 8005b40:	6861      	ldr	r1, [r4, #4]
 8005b42:	bfa6      	itte	ge
 8005b44:	461d      	movge	r5, r3
 8005b46:	2600      	movge	r6, #0
 8005b48:	2601      	movlt	r6, #1
 8005b4a:	f7ff fdb2 	bl	80056b2 <_Balloc>
 8005b4e:	f04f 0e00 	mov.w	lr, #0
 8005b52:	60c6      	str	r6, [r0, #12]
 8005b54:	692b      	ldr	r3, [r5, #16]
 8005b56:	6926      	ldr	r6, [r4, #16]
 8005b58:	f104 0214 	add.w	r2, r4, #20
 8005b5c:	f105 0914 	add.w	r9, r5, #20
 8005b60:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005b64:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005b68:	f100 0114 	add.w	r1, r0, #20
 8005b6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b70:	f859 5b04 	ldr.w	r5, [r9], #4
 8005b74:	fa1f f38a 	uxth.w	r3, sl
 8005b78:	4473      	add	r3, lr
 8005b7a:	b2ac      	uxth	r4, r5
 8005b7c:	1b1b      	subs	r3, r3, r4
 8005b7e:	0c2c      	lsrs	r4, r5, #16
 8005b80:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005b84:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005b8e:	45c8      	cmp	r8, r9
 8005b90:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005b94:	4694      	mov	ip, r2
 8005b96:	f841 4b04 	str.w	r4, [r1], #4
 8005b9a:	d8e7      	bhi.n	8005b6c <__mdiff+0x5c>
 8005b9c:	45bc      	cmp	ip, r7
 8005b9e:	d304      	bcc.n	8005baa <__mdiff+0x9a>
 8005ba0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ba4:	b183      	cbz	r3, 8005bc8 <__mdiff+0xb8>
 8005ba6:	6106      	str	r6, [r0, #16]
 8005ba8:	e7c4      	b.n	8005b34 <__mdiff+0x24>
 8005baa:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005bae:	b2a2      	uxth	r2, r4
 8005bb0:	4472      	add	r2, lr
 8005bb2:	1413      	asrs	r3, r2, #16
 8005bb4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005bb8:	b292      	uxth	r2, r2
 8005bba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bbe:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005bc2:	f841 2b04 	str.w	r2, [r1], #4
 8005bc6:	e7e9      	b.n	8005b9c <__mdiff+0x8c>
 8005bc8:	3e01      	subs	r6, #1
 8005bca:	e7e9      	b.n	8005ba0 <__mdiff+0x90>

08005bcc <__d2b>:
 8005bcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005bd0:	461c      	mov	r4, r3
 8005bd2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4690      	mov	r8, r2
 8005bda:	f7ff fd6a 	bl	80056b2 <_Balloc>
 8005bde:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005be2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005be6:	4607      	mov	r7, r0
 8005be8:	bb34      	cbnz	r4, 8005c38 <__d2b+0x6c>
 8005bea:	9201      	str	r2, [sp, #4]
 8005bec:	f1b8 0200 	subs.w	r2, r8, #0
 8005bf0:	d027      	beq.n	8005c42 <__d2b+0x76>
 8005bf2:	a802      	add	r0, sp, #8
 8005bf4:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005bf8:	f7ff fe00 	bl	80057fc <__lo0bits>
 8005bfc:	9900      	ldr	r1, [sp, #0]
 8005bfe:	b1f0      	cbz	r0, 8005c3e <__d2b+0x72>
 8005c00:	9a01      	ldr	r2, [sp, #4]
 8005c02:	f1c0 0320 	rsb	r3, r0, #32
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	40c2      	lsrs	r2, r0
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	9201      	str	r2, [sp, #4]
 8005c12:	9b01      	ldr	r3, [sp, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf14      	ite	ne
 8005c18:	2102      	movne	r1, #2
 8005c1a:	2101      	moveq	r1, #1
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	6139      	str	r1, [r7, #16]
 8005c20:	b1c4      	cbz	r4, 8005c54 <__d2b+0x88>
 8005c22:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c26:	4404      	add	r4, r0
 8005c28:	6034      	str	r4, [r6, #0]
 8005c2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c2e:	6028      	str	r0, [r5, #0]
 8005c30:	4638      	mov	r0, r7
 8005c32:	b002      	add	sp, #8
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005c3c:	e7d5      	b.n	8005bea <__d2b+0x1e>
 8005c3e:	6179      	str	r1, [r7, #20]
 8005c40:	e7e7      	b.n	8005c12 <__d2b+0x46>
 8005c42:	a801      	add	r0, sp, #4
 8005c44:	f7ff fdda 	bl	80057fc <__lo0bits>
 8005c48:	2101      	movs	r1, #1
 8005c4a:	9b01      	ldr	r3, [sp, #4]
 8005c4c:	6139      	str	r1, [r7, #16]
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	3020      	adds	r0, #32
 8005c52:	e7e5      	b.n	8005c20 <__d2b+0x54>
 8005c54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c58:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c5c:	6030      	str	r0, [r6, #0]
 8005c5e:	6918      	ldr	r0, [r3, #16]
 8005c60:	f7ff fdad 	bl	80057be <__hi0bits>
 8005c64:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c68:	e7e1      	b.n	8005c2e <__d2b+0x62>

08005c6a <_calloc_r>:
 8005c6a:	b538      	push	{r3, r4, r5, lr}
 8005c6c:	fb02 f401 	mul.w	r4, r2, r1
 8005c70:	4621      	mov	r1, r4
 8005c72:	f000 f809 	bl	8005c88 <_malloc_r>
 8005c76:	4605      	mov	r5, r0
 8005c78:	b118      	cbz	r0, 8005c82 <_calloc_r+0x18>
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	f7fe fb6f 	bl	8004360 <memset>
 8005c82:	4628      	mov	r0, r5
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
	...

08005c88 <_malloc_r>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	1ccd      	adds	r5, r1, #3
 8005c8c:	f025 0503 	bic.w	r5, r5, #3
 8005c90:	3508      	adds	r5, #8
 8005c92:	2d0c      	cmp	r5, #12
 8005c94:	bf38      	it	cc
 8005c96:	250c      	movcc	r5, #12
 8005c98:	2d00      	cmp	r5, #0
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	db01      	blt.n	8005ca2 <_malloc_r+0x1a>
 8005c9e:	42a9      	cmp	r1, r5
 8005ca0:	d903      	bls.n	8005caa <_malloc_r+0x22>
 8005ca2:	230c      	movs	r3, #12
 8005ca4:	6033      	str	r3, [r6, #0]
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
 8005caa:	f000 f869 	bl	8005d80 <__malloc_lock>
 8005cae:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <_malloc_r+0xac>)
 8005cb0:	6814      	ldr	r4, [r2, #0]
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	b991      	cbnz	r1, 8005cdc <_malloc_r+0x54>
 8005cb6:	4c20      	ldr	r4, [pc, #128]	; (8005d38 <_malloc_r+0xb0>)
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	b91b      	cbnz	r3, 8005cc4 <_malloc_r+0x3c>
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f000 f83d 	bl	8005d3c <_sbrk_r>
 8005cc2:	6020      	str	r0, [r4, #0]
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	f000 f838 	bl	8005d3c <_sbrk_r>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d124      	bne.n	8005d1a <_malloc_r+0x92>
 8005cd0:	230c      	movs	r3, #12
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	6033      	str	r3, [r6, #0]
 8005cd6:	f000 f854 	bl	8005d82 <__malloc_unlock>
 8005cda:	e7e4      	b.n	8005ca6 <_malloc_r+0x1e>
 8005cdc:	680b      	ldr	r3, [r1, #0]
 8005cde:	1b5b      	subs	r3, r3, r5
 8005ce0:	d418      	bmi.n	8005d14 <_malloc_r+0x8c>
 8005ce2:	2b0b      	cmp	r3, #11
 8005ce4:	d90f      	bls.n	8005d06 <_malloc_r+0x7e>
 8005ce6:	600b      	str	r3, [r1, #0]
 8005ce8:	18cc      	adds	r4, r1, r3
 8005cea:	50cd      	str	r5, [r1, r3]
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f848 	bl	8005d82 <__malloc_unlock>
 8005cf2:	f104 000b 	add.w	r0, r4, #11
 8005cf6:	1d23      	adds	r3, r4, #4
 8005cf8:	f020 0007 	bic.w	r0, r0, #7
 8005cfc:	1ac3      	subs	r3, r0, r3
 8005cfe:	d0d3      	beq.n	8005ca8 <_malloc_r+0x20>
 8005d00:	425a      	negs	r2, r3
 8005d02:	50e2      	str	r2, [r4, r3]
 8005d04:	e7d0      	b.n	8005ca8 <_malloc_r+0x20>
 8005d06:	684b      	ldr	r3, [r1, #4]
 8005d08:	428c      	cmp	r4, r1
 8005d0a:	bf16      	itet	ne
 8005d0c:	6063      	strne	r3, [r4, #4]
 8005d0e:	6013      	streq	r3, [r2, #0]
 8005d10:	460c      	movne	r4, r1
 8005d12:	e7eb      	b.n	8005cec <_malloc_r+0x64>
 8005d14:	460c      	mov	r4, r1
 8005d16:	6849      	ldr	r1, [r1, #4]
 8005d18:	e7cc      	b.n	8005cb4 <_malloc_r+0x2c>
 8005d1a:	1cc4      	adds	r4, r0, #3
 8005d1c:	f024 0403 	bic.w	r4, r4, #3
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d005      	beq.n	8005d30 <_malloc_r+0xa8>
 8005d24:	1a21      	subs	r1, r4, r0
 8005d26:	4630      	mov	r0, r6
 8005d28:	f000 f808 	bl	8005d3c <_sbrk_r>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d0cf      	beq.n	8005cd0 <_malloc_r+0x48>
 8005d30:	6025      	str	r5, [r4, #0]
 8005d32:	e7db      	b.n	8005cec <_malloc_r+0x64>
 8005d34:	200001fc 	.word	0x200001fc
 8005d38:	20000200 	.word	0x20000200

08005d3c <_sbrk_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	2300      	movs	r3, #0
 8005d40:	4c05      	ldr	r4, [pc, #20]	; (8005d58 <_sbrk_r+0x1c>)
 8005d42:	4605      	mov	r5, r0
 8005d44:	4608      	mov	r0, r1
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	f7fb feb0 	bl	8001aac <_sbrk>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d102      	bne.n	8005d56 <_sbrk_r+0x1a>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	b103      	cbz	r3, 8005d56 <_sbrk_r+0x1a>
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	bd38      	pop	{r3, r4, r5, pc}
 8005d58:	20000288 	.word	0x20000288

08005d5c <__ascii_mbtowc>:
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	b901      	cbnz	r1, 8005d62 <__ascii_mbtowc+0x6>
 8005d60:	a901      	add	r1, sp, #4
 8005d62:	b142      	cbz	r2, 8005d76 <__ascii_mbtowc+0x1a>
 8005d64:	b14b      	cbz	r3, 8005d7a <__ascii_mbtowc+0x1e>
 8005d66:	7813      	ldrb	r3, [r2, #0]
 8005d68:	600b      	str	r3, [r1, #0]
 8005d6a:	7812      	ldrb	r2, [r2, #0]
 8005d6c:	1c10      	adds	r0, r2, #0
 8005d6e:	bf18      	it	ne
 8005d70:	2001      	movne	r0, #1
 8005d72:	b002      	add	sp, #8
 8005d74:	4770      	bx	lr
 8005d76:	4610      	mov	r0, r2
 8005d78:	e7fb      	b.n	8005d72 <__ascii_mbtowc+0x16>
 8005d7a:	f06f 0001 	mvn.w	r0, #1
 8005d7e:	e7f8      	b.n	8005d72 <__ascii_mbtowc+0x16>

08005d80 <__malloc_lock>:
 8005d80:	4770      	bx	lr

08005d82 <__malloc_unlock>:
 8005d82:	4770      	bx	lr

08005d84 <__ascii_wctomb>:
 8005d84:	b149      	cbz	r1, 8005d9a <__ascii_wctomb+0x16>
 8005d86:	2aff      	cmp	r2, #255	; 0xff
 8005d88:	bf8b      	itete	hi
 8005d8a:	238a      	movhi	r3, #138	; 0x8a
 8005d8c:	700a      	strbls	r2, [r1, #0]
 8005d8e:	6003      	strhi	r3, [r0, #0]
 8005d90:	2001      	movls	r0, #1
 8005d92:	bf88      	it	hi
 8005d94:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005d98:	4770      	bx	lr
 8005d9a:	4608      	mov	r0, r1
 8005d9c:	4770      	bx	lr
	...

08005da0 <_init>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr

08005dac <_fini>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr
